// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"hPIHA":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
var HMR_USE_SSE = false;
module.bundle.HMR_BUNDLE_ID = "138b6a135baa4167";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var HMR_USE_SSE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && ![
        "localhost",
        "127.0.0.1",
        "0.0.0.0"
    ].includes(hostname) ? "wss" : "ws";
    var ws;
    if (HMR_USE_SSE) ws = new EventSource("/__parcel_hmr");
    else try {
        ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    } catch (err) {
        if (err.message) console.error(err.message);
        ws = {};
    }
    // Web extension context
    var extCtx = typeof browser === "undefined" ? typeof chrome === "undefined" ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    if (ws instanceof WebSocket) {
        ws.onerror = function(e) {
            if (e.message) console.error(e.message);
        };
        ws.onclose = function() {
            console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
        };
    }
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"igcvL":[function(require,module,exports) {
var _plot = require("@observablehq/plot");
const newData = [
    {
        "YEAR": 2023,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Stefanos Tsitsipas",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 3,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Plexicushion Prestige",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2022,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Carlos Alcaraz",
        "RUNNER-UP": "Casper Rudd",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 2,
        "RUNNER-UP_ATP_RANKING": 5,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2022,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Nick Kyrgios",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": 25,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2022,
        "TOURNAMENT": "French Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Casper Rudd",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 5,
        "RUNNER-UP_ATP_RANKING": 8,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2022,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Daniil Medvedev",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 5,
        "RUNNER-UP_ATP_RANKING": 2,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Plexicushion Prestige",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2021,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Daniil Medvedev",
        "RUNNER-UP": "Novak Djokovic",
        "WINNER_NATIONALITY": "Russian",
        "WINNER_ATP_RANKING": 2,
        "RUNNER-UP_ATP_RANKING": 1,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2021,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Matteo Berrettini",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 7,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2021,
        "TOURNAMENT": "French Open",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Stefanos Tsitsipas",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 4,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2021,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Daniil Medvedev",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 2,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Plexicushion Prestige",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2020,
        "TOURNAMENT": "French Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Novak Djokovic",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 2,
        "RUNNER-UP_ATP_RANKING": 1,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2020,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Dominic Thiem",
        "RUNNER-UP": "Alexander Zverev",
        "WINNER_NATIONALITY": "Austrian",
        "WINNER_ATP_RANKING": 3,
        "RUNNER-UP_ATP_RANKING": 7,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2020,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Dominic Thiem",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 3,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Plexicushion Prestige",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2019,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Daniil Medvedev",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 5,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2019,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Roger Federer",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 2,
        "RUNNER-UP_ATP_RANKING": 3,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2019,
        "TOURNAMENT": "French Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Dominic Thiem",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 4,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2019,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Rafael Nadal",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 2,
        "RUNNER-UP_ATP_RANKING": 1,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Plexicushion Prestige",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2018,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Juan Martin del Potro",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 5,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2018,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Kevin Anderson",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 6,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2018,
        "TOURNAMENT": "French Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Dominic Thiem",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 2,
        "RUNNER-UP_ATP_RANKING": 8,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2018,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Marin ili",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": 3,
        "RUNNER-UP_ATP_RANKING": 7,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Plexicushion Prestige",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2017,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Kevin Anderson",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 14,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2017,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Marin ili",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": 2,
        "RUNNER-UP_ATP_RANKING": 6,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2017,
        "TOURNAMENT": "French Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Stan Wawrinka",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 9,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2017,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Rafael Nadal",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": 2,
        "RUNNER-UP_ATP_RANKING": 1,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Plexicushion Prestige",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2016,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Stan Wawrinka",
        "RUNNER-UP": "Novak Djokovic",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": 4,
        "RUNNER-UP_ATP_RANKING": 2,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2016,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Andy Murray",
        "RUNNER-UP": "Milos Raonic",
        "WINNER_NATIONALITY": "British",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 3,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2016,
        "TOURNAMENT": "French Open",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Andy Murray",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 2,
        "RUNNER-UP_ATP_RANKING": 1,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2016,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Andy Murray",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 2,
        "RUNNER-UP_ATP_RANKING": 1,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Plexicushion Prestige",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2015,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Roger Federer",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 3,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2015,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Roger Federer",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 3,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2015,
        "TOURNAMENT": "French Open",
        "WINNER": "Stan Wawrinka",
        "RUNNER-UP": "Novak Djokovic",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": 4,
        "RUNNER-UP_ATP_RANKING": 1,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2015,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Andy Murray",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 2,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Plexicushion Prestige",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2014,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Marin Cilic",
        "RUNNER-UP": "Kei Nishikori",
        "WINNER_NATIONALITY": "Croatian",
        "WINNER_ATP_RANKING": 9,
        "RUNNER-UP_ATP_RANKING": 5,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2014,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Roger Federer",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 2,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2014,
        "TOURNAMENT": "French Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Novak Djokovic",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 3,
        "RUNNER-UP_ATP_RANKING": 1,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2014,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Stan Wawrinka",
        "RUNNER-UP": "Rafael Nadal",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": 4,
        "RUNNER-UP_ATP_RANKING": 3,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Plexicushion Prestige",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2013,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Novak Djokovic",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 2,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2013,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Andy Murray",
        "RUNNER-UP": "Novak Djokovic",
        "WINNER_NATIONALITY": "British",
        "WINNER_ATP_RANKING": 4,
        "RUNNER-UP_ATP_RANKING": 2,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2013,
        "TOURNAMENT": "French Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "David Ferrer",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 3,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2013,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Andy Murray",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 2,
        "RUNNER-UP_ATP_RANKING": 4,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Plexicushion Prestige",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2012,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Andy Murray",
        "RUNNER-UP": "Novak Djokovic",
        "WINNER_NATIONALITY": "British",
        "WINNER_ATP_RANKING": 3,
        "RUNNER-UP_ATP_RANKING": 1,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2012,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Andy Murray",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": 2,
        "RUNNER-UP_ATP_RANKING": 3,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2012,
        "TOURNAMENT": "French Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Novak Djokovic",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 4,
        "RUNNER-UP_ATP_RANKING": 1,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2012,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Rafael Nadal",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 4,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Plexicushion Prestige",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2011,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Rafael Nadal",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 2,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2011,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Rafael Nadal",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 2,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2011,
        "TOURNAMENT": "French Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Roger Federer",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 2,
        "RUNNER-UP_ATP_RANKING": 3,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2011,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Andy Murray",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 4,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Plexicushion Prestige",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2010,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Novak Djokovic",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 3,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2010,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Tomas Berdych",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 6,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2010,
        "TOURNAMENT": "French Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Robin Soderling",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 5,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2010,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Andy Murray",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": 2,
        "RUNNER-UP_ATP_RANKING": 4,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Plexicushion Prestige",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2009,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Juan Martin del Potro",
        "RUNNER-UP": "Roger Federer",
        "WINNER_NATIONALITY": "Argentine",
        "WINNER_ATP_RANKING": 5,
        "RUNNER-UP_ATP_RANKING": 5,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2009,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Andy Roddick",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 1,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2009,
        "TOURNAMENT": "French Open",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Robin Soderling",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 1,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2009,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Roger Federer",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 2,
        "RUNNER-UP_ATP_RANKING": 2,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Plexicushion Prestige",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2008,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Andy Murray",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": 2,
        "RUNNER-UP_ATP_RANKING": 4,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2008,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Roger Federer",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 2,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2008,
        "TOURNAMENT": "French Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Roger Federer",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 2,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2008,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Novak Djokovic",
        "RUNNER-UP": "Jo-Wilfried Tsonga",
        "WINNER_NATIONALITY": "Serbian",
        "WINNER_ATP_RANKING": 3,
        "RUNNER-UP_ATP_RANKING": 6,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Plexicushion Prestige",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2007,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Novak Djokovic",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 3,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2007,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Rafael Nadal",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 2,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2007,
        "TOURNAMENT": "French Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Roger Federer",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": 2,
        "RUNNER-UP_ATP_RANKING": 1,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2007,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Fernando Gonzalez",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": 1,
        "RUNNER-UP_ATP_RANKING": 7,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2006,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Andy Roddick",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2006,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Rafael Nadal",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2006,
        "TOURNAMENT": "French Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Roger Federer",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2006,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Marcos Baghdatis",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2005,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Andre Agassi",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2005,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Andy Roddick",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2005,
        "TOURNAMENT": "French Open",
        "WINNER": "Rafael Nadal",
        "RUNNER-UP": "Mariano Puerta",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2005,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Marat Safin",
        "RUNNER-UP": "Lleyton Hewitt",
        "WINNER_NATIONALITY": "Russian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2004,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Lleyton Hewitt",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2004,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Andy Roddick",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2004,
        "TOURNAMENT": "French Open",
        "WINNER": "Gaston Gaudio",
        "RUNNER-UP": "Guillermo Coria",
        "WINNER_NATIONALITY": "Argentine",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2004,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Marat Safin",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2003,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Andy Roddick",
        "RUNNER-UP": "Juan Carlos Ferrero",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2003,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Roger Federer",
        "RUNNER-UP": "Mark Philippoussis",
        "WINNER_NATIONALITY": "Swiss",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2003,
        "TOURNAMENT": "French Open",
        "WINNER": "Juan Carlos Ferrero",
        "RUNNER-UP": "Martin Verkerk",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2003,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Andre Agassi",
        "RUNNER-UP": "Rainer Schuettler",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2002,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Pete Sampras",
        "RUNNER-UP": "Andre Agassi",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2002,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Lleyton Hewitt",
        "RUNNER-UP": "David Nalbandian",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2002,
        "TOURNAMENT": "French Open",
        "WINNER": "Albert Costa",
        "RUNNER-UP": "Juan Carlos Ferrero",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2002,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Thomas Johannson",
        "RUNNER-UP": "Marat Safin",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2001,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Lleyton Hewitt",
        "RUNNER-UP": "Pete Sampras",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2001,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Goran Ivanisevic",
        "RUNNER-UP": "Patrick Rafter",
        "WINNER_NATIONALITY": "Croatian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2001,
        "TOURNAMENT": "French Open",
        "WINNER": "Gustavo Kuerten",
        "RUNNER-UP": "Alex Corretja",
        "WINNER_NATIONALITY": "Brazilian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2001,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Andre Agassi",
        "RUNNER-UP": "Arnaud Clement",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2000,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Marat Safin",
        "RUNNER-UP": "Pete Sampras",
        "WINNER_NATIONALITY": "Russian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2000,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Pete Sampras",
        "RUNNER-UP": "Patrick Rafter",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2000,
        "TOURNAMENT": "French Open",
        "WINNER": "Gustavo Kuerten",
        "RUNNER-UP": "Magnus Norman",
        "WINNER_NATIONALITY": "Brazilian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 2000,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Andre Agassi",
        "RUNNER-UP": "Yevgeny Kafelnikov",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1999,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Andre Agassi",
        "RUNNER-UP": "Todd Martin",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1999,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Pete Sampras",
        "RUNNER-UP": "Andre Agassi",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1999,
        "TOURNAMENT": "French Open",
        "WINNER": "Andre Agassi",
        "RUNNER-UP": "Andre Medvedev",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1999,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Yevgeny Kafelnikov",
        "RUNNER-UP": "Thomas Enqvist",
        "WINNER_NATIONALITY": "Russian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1998,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Patrick Rafter",
        "RUNNER-UP": "Mark Philippoussis",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1998,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Pete Sampras",
        "RUNNER-UP": "Goran Ivanisevic",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1998,
        "TOURNAMENT": "French Open",
        "WINNER": "Carlos Moya",
        "RUNNER-UP": "Alex Corretja",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1998,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Petr Korda",
        "RUNNER-UP": "Marcelo Rios",
        "WINNER_NATIONALITY": "Czech",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1997,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Patrick Rafter",
        "RUNNER-UP": "Greg Rusedski",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1997,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Pete Sampras",
        "RUNNER-UP": "Cedric Pioline",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1997,
        "TOURNAMENT": "French Open",
        "WINNER": "Gustavo Kuerten",
        "RUNNER-UP": "Sergi Bruguera",
        "WINNER_NATIONALITY": "Brazilian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1997,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Pete Sampras",
        "RUNNER-UP": "Carlos Moya",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1996,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Pete Sampras",
        "RUNNER-UP": "Michael Chang",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1996,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Richard Krajicek",
        "RUNNER-UP": "MaliVai Washington",
        "WINNER_NATIONALITY": "Dutch",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1996,
        "TOURNAMENT": "French Open",
        "WINNER": "Yevgeny Kafelnikov",
        "RUNNER-UP": "Michael Stich",
        "WINNER_NATIONALITY": "Russian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1996,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Boris Becker",
        "RUNNER-UP": "Michael Chang",
        "WINNER_NATIONALITY": "German",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1995,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Pete Sampras",
        "RUNNER-UP": "Andre Agassi",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1995,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Pete Sampras",
        "RUNNER-UP": "Boris Becker",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1995,
        "TOURNAMENT": "French Open",
        "WINNER": "Thomas Muster",
        "RUNNER-UP": "Michael Chang",
        "WINNER_NATIONALITY": "Austrian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1995,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Andre Agassi",
        "RUNNER-UP": "Pete Sampras",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1994,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Andre Agassi",
        "RUNNER-UP": "Michael Stich",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1994,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Pete Sampras",
        "RUNNER-UP": "Goran Ivanisevic",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1994,
        "TOURNAMENT": "French Open",
        "WINNER": "Sergi Bruguera",
        "RUNNER-UP": "Alberto Berasategui",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1994,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Pete Sampras",
        "RUNNER-UP": "Todd Martin",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1993,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Pete Sampras",
        "RUNNER-UP": "Cedric Pioline",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1993,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Pete Sampras",
        "RUNNER-UP": "Jim Courier",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1993,
        "TOURNAMENT": "French Open",
        "WINNER": "Sergi Bruguera",
        "RUNNER-UP": "Jim Courier",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1993,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Jim Courier",
        "RUNNER-UP": "Stefan Edberg",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1992,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Stefan Edberg",
        "RUNNER-UP": "Pete Sampras",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1992,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Andre Agassi",
        "RUNNER-UP": "Goran Ivanisevic",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1992,
        "TOURNAMENT": "French Open",
        "WINNER": "Jim Courier",
        "RUNNER-UP": "Petr Korda",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1992,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Jim Courier",
        "RUNNER-UP": "Stefan Edberg",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1991,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Stefan Edberg",
        "RUNNER-UP": "Jim Courier",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1991,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Michael Stich",
        "RUNNER-UP": "Boris Becker",
        "WINNER_NATIONALITY": "German",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1991,
        "TOURNAMENT": "French Open",
        "WINNER": "Jim Courier",
        "RUNNER-UP": "Andre Agassi",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1991,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Boris Becker",
        "RUNNER-UP": "Ivan Lendl",
        "WINNER_NATIONALITY": "German",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1990,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Pete Sampras",
        "RUNNER-UP": "Andre Agassi",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1990,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Stefan Edberg",
        "RUNNER-UP": "Boris Becker",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1990,
        "TOURNAMENT": "French Open",
        "WINNER": "Andres Gomez",
        "RUNNER-UP": "Andre Agassi",
        "WINNER_NATIONALITY": "Ecuadorian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1990,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Ivan Lendl",
        "RUNNER-UP": "Stefan Edberg",
        "WINNER_NATIONALITY": "Czechoslovakia",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1989,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Boris Becker",
        "RUNNER-UP": "Ivan Lendl",
        "WINNER_NATIONALITY": "German",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1989,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Boris Becker",
        "RUNNER-UP": "Stefan Edberg",
        "WINNER_NATIONALITY": "German",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1989,
        "TOURNAMENT": "French Open",
        "WINNER": "Michael Chang",
        "RUNNER-UP": "Stefan Edberg",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1989,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Ivan Lendl",
        "RUNNER-UP": "Miloslav Mecir",
        "WINNER_NATIONALITY": "Czechoslovakia",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1988,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Mats Wilander",
        "RUNNER-UP": "Ivan Lendl",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1988,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Stefan Edberg",
        "RUNNER-UP": "Boris Becker",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1988,
        "TOURNAMENT": "French Open",
        "WINNER": "Mats Wilander",
        "RUNNER-UP": "Henri Leconte",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1988,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Mats Wilander",
        "RUNNER-UP": "Pat Cash",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Rebound Ace",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1987,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Ivan Lendl",
        "RUNNER-UP": "Mats Wilander",
        "WINNER_NATIONALITY": "Czechoslovakia",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1987,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Pat Cash",
        "RUNNER-UP": "Ivan Lendl",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1987,
        "TOURNAMENT": "French Open",
        "WINNER": "Ivan Lendl",
        "RUNNER-UP": "Mats Wilander",
        "WINNER_NATIONALITY": "Czechoslovakia",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1987,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Stefan Edberg",
        "RUNNER-UP": "Pat Cash",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1986,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Ivan Lendl",
        "RUNNER-UP": "Miloslav Mecir",
        "WINNER_NATIONALITY": "Czechoslovakia",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1986,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Boris Becker",
        "RUNNER-UP": "Ivan Lendl",
        "WINNER_NATIONALITY": "German",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1986,
        "TOURNAMENT": "French Open",
        "WINNER": "Ivan Lendl",
        "RUNNER-UP": "Mikael Pernfors",
        "WINNER_NATIONALITY": "Czechoslovakia",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1985,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Stefan Edberg",
        "RUNNER-UP": "Mats Wilander",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1985,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Ivan Lendl",
        "RUNNER-UP": "John McEnroe",
        "WINNER_NATIONALITY": "Czechoslovakia",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1985,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Boris Becker",
        "RUNNER-UP": "Kevin Curren",
        "WINNER_NATIONALITY": "German",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1985,
        "TOURNAMENT": "French Open",
        "WINNER": "Mats Wilander",
        "RUNNER-UP": "Ivan Lendl",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1984,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Mats Wilander",
        "RUNNER-UP": "Kevin Curren",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1984,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "John McEnroe",
        "RUNNER-UP": "Ivan Lendl",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1984,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "John McEnroe",
        "RUNNER-UP": "Jimmy Connors",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1984,
        "TOURNAMENT": "French Open",
        "WINNER": "Ivan Lendl",
        "RUNNER-UP": "John McEnroe",
        "WINNER_NATIONALITY": "Czechoslovakia",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1983,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Mats Wilander",
        "RUNNER-UP": "Ivan Lendl",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1983,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Jimmy Connors",
        "RUNNER-UP": "Ivan Lendl",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1983,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "John McEnroe",
        "RUNNER-UP": "Chris Lewis",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1983,
        "TOURNAMENT": "French Open",
        "WINNER": "Yannick Noah",
        "RUNNER-UP": "Mats Wilander",
        "WINNER_NATIONALITY": "French",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1982,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Johan Kriek",
        "RUNNER-UP": "Steve Denton",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1982,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Jimmy Connors",
        "RUNNER-UP": "Ivan Lendl",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1982,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Jimmy Connors",
        "RUNNER-UP": "John McEnroe",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1982,
        "TOURNAMENT": "French Open",
        "WINNER": "Mats Wilander",
        "RUNNER-UP": "Guillermo Vilas",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1981,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Johan Kriek",
        "RUNNER-UP": "Steve Denton",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1981,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "John McEnroe",
        "RUNNER-UP": "Bjorn Borg",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1981,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "John McEnroe",
        "RUNNER-UP": "Bjorn Borg",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1981,
        "TOURNAMENT": "French Open",
        "WINNER": "Bjorn Borg",
        "RUNNER-UP": "Ivan Lendl",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1980,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Brian Teacher",
        "RUNNER-UP": "Kim Warwick",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1980,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "John McEnroe",
        "RUNNER-UP": "Bjorn Borg",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1980,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Bjorn Borg",
        "RUNNER-UP": "John McEnroe",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1980,
        "TOURNAMENT": "French Open",
        "WINNER": "Bjorn Borg",
        "RUNNER-UP": "Vitas Gerulaitis",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1979,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Guillermo Vilas",
        "RUNNER-UP": "John Sadri",
        "WINNER_NATIONALITY": "Argentine",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1979,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "John McEnroe",
        "RUNNER-UP": "Vitas Gerulaitis",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1979,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Bjorn Borg",
        "RUNNER-UP": "Roscoe Tanner",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1979,
        "TOURNAMENT": "French Open",
        "WINNER": "Bjorn Borg",
        "RUNNER-UP": "Victor Pecci",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1978,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Guillermo Vilas",
        "RUNNER-UP": "John Marks",
        "WINNER_NATIONALITY": "Argentine",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1978,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Jimmy Connors",
        "RUNNER-UP": "Bjorn Borg",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "DecoTurf - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1978,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Bjorn Borg",
        "RUNNER-UP": "Jimmy Connors",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1978,
        "TOURNAMENT": "French Open",
        "WINNER": "Bjorn Borg",
        "RUNNER-UP": "Guillermo Vilas",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1977,
        "TOURNAMENT": "Australian Open (Dec)",
        "WINNER": "Vitas Gerulaitis",
        "RUNNER-UP": "John Lloyd",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1977,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Guillermo Vilas",
        "RUNNER-UP": "Jimmy Connors",
        "WINNER_NATIONALITY": "Argentine",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1977,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Bjorn Borg",
        "RUNNER-UP": "Jimmy Connors",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1977,
        "TOURNAMENT": "French Open",
        "WINNER": "Guillermo Vilas",
        "RUNNER-UP": "Brian Gottfried",
        "WINNER_NATIONALITY": "Argentine",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1977,
        "TOURNAMENT": "Australian Open (Jan)",
        "WINNER": "Roscoe Tanner",
        "RUNNER-UP": "Guillermo Vilas",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1976,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Jimmy Connors",
        "RUNNER-UP": "Bjorn Borg",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1976,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Bjorn Borg",
        "RUNNER-UP": "Ilie Nastase",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1976,
        "TOURNAMENT": "French Open",
        "WINNER": "Adriano Panatta",
        "RUNNER-UP": "Harold Soloman",
        "WINNER_NATIONALITY": "Italian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1976,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Mark Edmondson",
        "RUNNER-UP": "John Newcombe",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1975,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Manuel Orantes",
        "RUNNER-UP": "Jimmy Connors",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay - outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1975,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Arthur Ashe",
        "RUNNER-UP": "Jimmy Connors",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1975,
        "TOURNAMENT": "French Open",
        "WINNER": "Bjorn Borg",
        "RUNNER-UP": "Guillermo Vilas",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1975,
        "TOURNAMENT": "Australian Open",
        "WINNER": "John Newcombe",
        "RUNNER-UP": "Jimmy Connors",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1974,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Jimmy Connors",
        "RUNNER-UP": "Ken Rosewall",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1974,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Jimmy Connors",
        "RUNNER-UP": "Ken Rosewall",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1974,
        "TOURNAMENT": "French Open",
        "WINNER": "Bjorn Borg",
        "RUNNER-UP": "Manuel Orantes",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1974,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Jimmy Connors",
        "RUNNER-UP": "Phil Dent",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1973,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "John Newcombe",
        "RUNNER-UP": "Jan Kodes",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1973,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Jan Kodes",
        "RUNNER-UP": "Alex Metreveli",
        "WINNER_NATIONALITY": "Czech",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1973,
        "TOURNAMENT": "French Open",
        "WINNER": "Ilie Nastase",
        "RUNNER-UP": "Nikola Pilic",
        "WINNER_NATIONALITY": "Romanian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1973,
        "TOURNAMENT": "Australian Open",
        "WINNER": "John Newcombe",
        "RUNNER-UP": "Onny Parun",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1972,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Ilie Nastase",
        "RUNNER-UP": "Arthur Ashe",
        "WINNER_NATIONALITY": "Romanian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1972,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Stan Smith",
        "RUNNER-UP": "Ilie Nastase",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1972,
        "TOURNAMENT": "French Open",
        "WINNER": "Andres Gimeno",
        "RUNNER-UP": "Patrick Proisy",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1972,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Ken Rosewall",
        "RUNNER-UP": "Mal Anderson",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1971,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Stan Smith",
        "RUNNER-UP": "Jan Kodes",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1971,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "John Newcombe",
        "RUNNER-UP": "Stan Smith",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1971,
        "TOURNAMENT": "French Open",
        "WINNER": "Jan Kodes",
        "RUNNER-UP": "Ilie Nastase",
        "WINNER_NATIONALITY": "Czech",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1971,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Ken Rosewall",
        "RUNNER-UP": "Arthur Ashe",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1970,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Ken Rosewall",
        "RUNNER-UP": "Tony Roche",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1970,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "John Newcombe",
        "RUNNER-UP": "Ken Rosewall",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1970,
        "TOURNAMENT": "French Open",
        "WINNER": "Jan Kodes",
        "RUNNER-UP": "Zeljiko Franulovic",
        "WINNER_NATIONALITY": "Czech",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1970,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Arthur Ashe",
        "RUNNER-UP": "Dick Crealy",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1969,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Rod Laver",
        "RUNNER-UP": "Tony Roche",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1969,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Rod Laver",
        "RUNNER-UP": "John Newcombe",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1969,
        "TOURNAMENT": "French Open",
        "WINNER": "Rod Laver",
        "RUNNER-UP": "Ken Rosewall",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1969,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Rod Laver",
        "RUNNER-UP": "Andres Gimeno",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1968,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Arthur Ashe",
        "RUNNER-UP": "Tom Okker",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1968,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Rod Laver",
        "RUNNER-UP": "Tony Roche",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1968,
        "TOURNAMENT": "French Open",
        "WINNER": "Ken Rosewall",
        "RUNNER-UP": "Rod Laver",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1968,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Bill Bowrey",
        "RUNNER-UP": "Juan Gisbert",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1967,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "John Newcombe",
        "RUNNER-UP": "Clark Graebner",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1967,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "John Newcombe",
        "RUNNER-UP": "Wilhelm Bungert",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1967,
        "TOURNAMENT": "French Open",
        "WINNER": "Roy Emerson",
        "RUNNER-UP": "Tony Roche",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1967,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Roy Emerson",
        "RUNNER-UP": "Arthur Ashe",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1966,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Fred Stolle",
        "RUNNER-UP": "John Newcombe",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1966,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Manuel Santana",
        "RUNNER-UP": "Dennis Ralston",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1966,
        "TOURNAMENT": "French Open",
        "WINNER": "Tony Roche",
        "RUNNER-UP": "Istvan Gulyas",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1966,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Roy Emerson",
        "RUNNER-UP": "Arthur Ashe",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1965,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Manuel Santana",
        "RUNNER-UP": "Cliff Drysdale",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1965,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Roy Emerson",
        "RUNNER-UP": "Fred Stolle",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1965,
        "TOURNAMENT": "French Open",
        "WINNER": "Fred Stolle",
        "RUNNER-UP": "Tony Roche",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1965,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Roy Emerson",
        "RUNNER-UP": "Fred Stolle",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1964,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Roy Emerson",
        "RUNNER-UP": "Fred Stolle",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1964,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Roy Emerson",
        "RUNNER-UP": "Fred Stolle",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1964,
        "TOURNAMENT": "French Open",
        "WINNER": "Manuel Santana",
        "RUNNER-UP": "Nicola Pietrangeli",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1964,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Roy Emerson",
        "RUNNER-UP": "Fred Stolle",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1963,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Rafael Osuna",
        "RUNNER-UP": "Frank Froehling, III",
        "WINNER_NATIONALITY": "Mexican",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1963,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "C.R. McKinley",
        "RUNNER-UP": "Fred Stolle",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1963,
        "TOURNAMENT": "French Open",
        "WINNER": "Roy Emerson",
        "RUNNER-UP": "Pierre Darmon",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1963,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Roy Emerson",
        "RUNNER-UP": "Ken Fletcher",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1962,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Rod Laver",
        "RUNNER-UP": "Roy Emerson",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1962,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Rod Laver",
        "RUNNER-UP": "Martin Mulligan",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1962,
        "TOURNAMENT": "French Open",
        "WINNER": "Rod Laver",
        "RUNNER-UP": "Roy Emerson",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1962,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Rod Laver",
        "RUNNER-UP": "Roy Emerson",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1961,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Roy Emerson",
        "RUNNER-UP": "Rod Laver",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1961,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Rod Laver",
        "RUNNER-UP": "Chuck McKinley",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1961,
        "TOURNAMENT": "French Open",
        "WINNER": "Manuel Santana",
        "RUNNER-UP": "Nicola Pietrangeli",
        "WINNER_NATIONALITY": "Spanish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1961,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Roy Emerson",
        "RUNNER-UP": "Rod Laver",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1960,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Neale Fraser",
        "RUNNER-UP": "Rod Laver",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1960,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Neale Fraser",
        "RUNNER-UP": "Rod Laver",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1960,
        "TOURNAMENT": "French Open",
        "WINNER": "Nicola Pietrangeli",
        "RUNNER-UP": "Luis Ayala",
        "WINNER_NATIONALITY": "Italian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1960,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Rod Laver",
        "RUNNER-UP": "Neale Fraser",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1959,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Neale Fraser",
        "RUNNER-UP": "Alejandro Olmedo",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1959,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Alejandro Olmedo",
        "RUNNER-UP": "Rod Laver",
        "WINNER_NATIONALITY": "peruvian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1959,
        "TOURNAMENT": "French Open",
        "WINNER": "Nicola Pietrangeli",
        "RUNNER-UP": "Ian Vermaak",
        "WINNER_NATIONALITY": "Italian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1959,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Alex Olmedo",
        "RUNNER-UP": "Neale Fraser",
        "WINNER_NATIONALITY": "peruvian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1958,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Ashley J. Cooper",
        "RUNNER-UP": "Malcolm J. Anderson",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1958,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Ashley J. Cooper",
        "RUNNER-UP": "Neale Fraser",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1958,
        "TOURNAMENT": "French Open",
        "WINNER": "Mervyn Rose",
        "RUNNER-UP": "Luis Ayala",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1958,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Ashley J. Cooper",
        "RUNNER-UP": "Mal Anderson",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1957,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Malcolm J. Anderson",
        "RUNNER-UP": "Ashley J. Cooper",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1957,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Lewis Hoad",
        "RUNNER-UP": "Ashley Cooper",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1957,
        "TOURNAMENT": "French Open",
        "WINNER": "Sven Davidson",
        "RUNNER-UP": "Herbert Flam",
        "WINNER_NATIONALITY": "Swedish",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1957,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Ashley J. Cooper",
        "RUNNER-UP": "Neale Fraser",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1956,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Ken Rosewall",
        "RUNNER-UP": "Lewis Hoad",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1956,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Lewis Hoad",
        "RUNNER-UP": "Ken Rosewall",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1956,
        "TOURNAMENT": "French Open",
        "WINNER": "Lewis Hoad",
        "RUNNER-UP": "Sven Davidson",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1956,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Lewis Hoad",
        "RUNNER-UP": "Ken Rosewall",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1955,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Tony Trabert",
        "RUNNER-UP": "Ken Rosewall",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1955,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Tony Trabert",
        "RUNNER-UP": "Kurt Nielsen",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1955,
        "TOURNAMENT": "French Open",
        "WINNER": "Tony Trabert",
        "RUNNER-UP": "Sven Davidson",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1955,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Ken Rosewall",
        "RUNNER-UP": "Lew Hoad",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1954,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "E. Victor Seixas Jr.",
        "RUNNER-UP": "Rex Hartwig",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1954,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Jaroslav Drobny",
        "RUNNER-UP": "Ken Rosewall",
        "WINNER_NATIONALITY": "Czechoslovak",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1954,
        "TOURNAMENT": "French Open",
        "WINNER": "Tony Trabert",
        "RUNNER-UP": "Sven Davidson",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1954,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Mervyn Rose",
        "RUNNER-UP": "Rex Hartwig",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1953,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Tony Trabert",
        "RUNNER-UP": "E. Victor Seixas, Jr.",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1953,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "E. Victor Seixas Jr.",
        "RUNNER-UP": "Kurt Nielsen",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1953,
        "TOURNAMENT": "French Open",
        "WINNER": "Ken Rosewall",
        "RUNNER-UP": "E. Victor Seixas, Jr.",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1953,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Ken Rosewall",
        "RUNNER-UP": "Mervyn Rose",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1952,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Frank Sedgman",
        "RUNNER-UP": "Gardnar Mulloy",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1952,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "Frank Sedgman",
        "RUNNER-UP": "Jaroslav Drobny",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1952,
        "TOURNAMENT": "French Open",
        "WINNER": "Jaroslav Drobny",
        "RUNNER-UP": "Frank Sedgman",
        "WINNER_NATIONALITY": "Czechoslovak",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1952,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Ken McGregor",
        "RUNNER-UP": "Frank Sedgman",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1951,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Frank Sedgman",
        "RUNNER-UP": "E. Victor Seixas, Jr.",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1951,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "R. Savitt",
        "RUNNER-UP": "Ken McGregor",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1951,
        "TOURNAMENT": "French Open",
        "WINNER": "Jaroslav Drobny",
        "RUNNER-UP": "Eric Sturgess",
        "WINNER_NATIONALITY": "Czechoslovak",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "left",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1951,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Dick Savitt",
        "RUNNER-UP": "Ken McGregor",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1950,
        "TOURNAMENT": "U.S. Open",
        "WINNER": "Arthur Larsen",
        "RUNNER-UP": "Herbert Flam",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "outdoors",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1950,
        "TOURNAMENT": "Wimbledon",
        "WINNER": "J.E. Patty",
        "RUNNER-UP": "Frank Sedgman",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass / Outdoor",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1950,
        "TOURNAMENT": "French Open",
        "WINNER": "Budge Patty",
        "RUNNER-UP": "Jaroslav Drobny",
        "WINNER_NATIONALITY": "American",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Clay",
        "WINNER_PRIZE": 0.89
    },
    {
        "YEAR": 1950,
        "TOURNAMENT": "Australian Open",
        "WINNER": "Frank Sedgman",
        "RUNNER-UP": "Ken McGregor",
        "WINNER_NATIONALITY": "Australian",
        "WINNER_ATP_RANKING": null,
        "RUNNER-UP_ATP_RANKING": null,
        "WINNER_LEFT_OR_RIGHT_HANDED": "right",
        "TOURNAMENT_SURFACE": "Grass",
        "WINNER_PRIZE": 0.89
    }
];
const plot = _plot.plot({
    marks: [
        _plot.barX(newData, _plot.groupY({
            x: "count"
        }, {
            y: "WINNER_NATIONALITY",
            tip: true
        })),
        _plot.ruleX([
            0
        ])
    ]
});
const div = document.querySelector("#myplot");
div.append(plot);

},{"@observablehq/plot":"kXdH7"}],"kXdH7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "plot", ()=>(0, _plotJs.plot));
parcelHelpers.export(exports, "Mark", ()=>(0, _markJs.Mark));
parcelHelpers.export(exports, "marks", ()=>(0, _markJs.marks));
parcelHelpers.export(exports, "Area", ()=>(0, _areaJs.Area));
parcelHelpers.export(exports, "area", ()=>(0, _areaJs.area));
parcelHelpers.export(exports, "areaX", ()=>(0, _areaJs.areaX));
parcelHelpers.export(exports, "areaY", ()=>(0, _areaJs.areaY));
parcelHelpers.export(exports, "Arrow", ()=>(0, _arrowJs.Arrow));
parcelHelpers.export(exports, "arrow", ()=>(0, _arrowJs.arrow));
parcelHelpers.export(exports, "auto", ()=>(0, _autoJs.auto));
parcelHelpers.export(exports, "autoSpec", ()=>(0, _autoJs.autoSpec));
parcelHelpers.export(exports, "axisX", ()=>(0, _axisJs.axisX));
parcelHelpers.export(exports, "axisY", ()=>(0, _axisJs.axisY));
parcelHelpers.export(exports, "axisFx", ()=>(0, _axisJs.axisFx));
parcelHelpers.export(exports, "axisFy", ()=>(0, _axisJs.axisFy));
parcelHelpers.export(exports, "gridX", ()=>(0, _axisJs.gridX));
parcelHelpers.export(exports, "gridY", ()=>(0, _axisJs.gridY));
parcelHelpers.export(exports, "gridFx", ()=>(0, _axisJs.gridFx));
parcelHelpers.export(exports, "gridFy", ()=>(0, _axisJs.gridFy));
parcelHelpers.export(exports, "BarX", ()=>(0, _barJs.BarX));
parcelHelpers.export(exports, "BarY", ()=>(0, _barJs.BarY));
parcelHelpers.export(exports, "barX", ()=>(0, _barJs.barX));
parcelHelpers.export(exports, "barY", ()=>(0, _barJs.barY));
parcelHelpers.export(exports, "bollinger", ()=>(0, _bollingerJs.bollinger));
parcelHelpers.export(exports, "bollingerX", ()=>(0, _bollingerJs.bollingerX));
parcelHelpers.export(exports, "bollingerY", ()=>(0, _bollingerJs.bollingerY));
parcelHelpers.export(exports, "boxX", ()=>(0, _boxJs.boxX));
parcelHelpers.export(exports, "boxY", ()=>(0, _boxJs.boxY));
parcelHelpers.export(exports, "Cell", ()=>(0, _cellJs.Cell));
parcelHelpers.export(exports, "cell", ()=>(0, _cellJs.cell));
parcelHelpers.export(exports, "cellX", ()=>(0, _cellJs.cellX));
parcelHelpers.export(exports, "cellY", ()=>(0, _cellJs.cellY));
parcelHelpers.export(exports, "Contour", ()=>(0, _contourJs.Contour));
parcelHelpers.export(exports, "contour", ()=>(0, _contourJs.contour));
parcelHelpers.export(exports, "crosshair", ()=>(0, _crosshairJs.crosshair));
parcelHelpers.export(exports, "crosshairX", ()=>(0, _crosshairJs.crosshairX));
parcelHelpers.export(exports, "crosshairY", ()=>(0, _crosshairJs.crosshairY));
parcelHelpers.export(exports, "delaunayLink", ()=>(0, _delaunayJs.delaunayLink));
parcelHelpers.export(exports, "delaunayMesh", ()=>(0, _delaunayJs.delaunayMesh));
parcelHelpers.export(exports, "hull", ()=>(0, _delaunayJs.hull));
parcelHelpers.export(exports, "voronoi", ()=>(0, _delaunayJs.voronoi));
parcelHelpers.export(exports, "voronoiMesh", ()=>(0, _delaunayJs.voronoiMesh));
parcelHelpers.export(exports, "Density", ()=>(0, _densityJs.Density));
parcelHelpers.export(exports, "density", ()=>(0, _densityJs.density));
parcelHelpers.export(exports, "differenceX", ()=>(0, _differenceJs.differenceX));
parcelHelpers.export(exports, "differenceY", ()=>(0, _differenceJs.differenceY));
parcelHelpers.export(exports, "Dot", ()=>(0, _dotJs.Dot));
parcelHelpers.export(exports, "dot", ()=>(0, _dotJs.dot));
parcelHelpers.export(exports, "dotX", ()=>(0, _dotJs.dotX));
parcelHelpers.export(exports, "dotY", ()=>(0, _dotJs.dotY));
parcelHelpers.export(exports, "circle", ()=>(0, _dotJs.circle));
parcelHelpers.export(exports, "hexagon", ()=>(0, _dotJs.hexagon));
parcelHelpers.export(exports, "Frame", ()=>(0, _frameJs.Frame));
parcelHelpers.export(exports, "frame", ()=>(0, _frameJs.frame));
parcelHelpers.export(exports, "Geo", ()=>(0, _geoJs.Geo));
parcelHelpers.export(exports, "geo", ()=>(0, _geoJs.geo));
parcelHelpers.export(exports, "sphere", ()=>(0, _geoJs.sphere));
parcelHelpers.export(exports, "graticule", ()=>(0, _geoJs.graticule));
parcelHelpers.export(exports, "Hexgrid", ()=>(0, _hexgridJs.Hexgrid));
parcelHelpers.export(exports, "hexgrid", ()=>(0, _hexgridJs.hexgrid));
parcelHelpers.export(exports, "Image", ()=>(0, _imageJs.Image));
parcelHelpers.export(exports, "image", ()=>(0, _imageJs.image));
parcelHelpers.export(exports, "Line", ()=>(0, _lineJs.Line));
parcelHelpers.export(exports, "line", ()=>(0, _lineJs.line));
parcelHelpers.export(exports, "lineX", ()=>(0, _lineJs.lineX));
parcelHelpers.export(exports, "lineY", ()=>(0, _lineJs.lineY));
parcelHelpers.export(exports, "linearRegressionX", ()=>(0, _linearRegressionJs.linearRegressionX));
parcelHelpers.export(exports, "linearRegressionY", ()=>(0, _linearRegressionJs.linearRegressionY));
parcelHelpers.export(exports, "Link", ()=>(0, _linkJs.Link));
parcelHelpers.export(exports, "link", ()=>(0, _linkJs.link));
parcelHelpers.export(exports, "Raster", ()=>(0, _rasterJs.Raster));
parcelHelpers.export(exports, "raster", ()=>(0, _rasterJs.raster));
parcelHelpers.export(exports, "interpolateNone", ()=>(0, _rasterJs.interpolateNone));
parcelHelpers.export(exports, "interpolatorBarycentric", ()=>(0, _rasterJs.interpolatorBarycentric));
parcelHelpers.export(exports, "interpolateNearest", ()=>(0, _rasterJs.interpolateNearest));
parcelHelpers.export(exports, "interpolatorRandomWalk", ()=>(0, _rasterJs.interpolatorRandomWalk));
parcelHelpers.export(exports, "Rect", ()=>(0, _rectJs.Rect));
parcelHelpers.export(exports, "rect", ()=>(0, _rectJs.rect));
parcelHelpers.export(exports, "rectX", ()=>(0, _rectJs.rectX));
parcelHelpers.export(exports, "rectY", ()=>(0, _rectJs.rectY));
parcelHelpers.export(exports, "RuleX", ()=>(0, _ruleJs.RuleX));
parcelHelpers.export(exports, "RuleY", ()=>(0, _ruleJs.RuleY));
parcelHelpers.export(exports, "ruleX", ()=>(0, _ruleJs.ruleX));
parcelHelpers.export(exports, "ruleY", ()=>(0, _ruleJs.ruleY));
parcelHelpers.export(exports, "Text", ()=>(0, _textJs.Text));
parcelHelpers.export(exports, "text", ()=>(0, _textJs.text));
parcelHelpers.export(exports, "textX", ()=>(0, _textJs.textX));
parcelHelpers.export(exports, "textY", ()=>(0, _textJs.textY));
parcelHelpers.export(exports, "TickX", ()=>(0, _tickJs.TickX));
parcelHelpers.export(exports, "TickY", ()=>(0, _tickJs.TickY));
parcelHelpers.export(exports, "tickX", ()=>(0, _tickJs.tickX));
parcelHelpers.export(exports, "tickY", ()=>(0, _tickJs.tickY));
parcelHelpers.export(exports, "Tip", ()=>(0, _tipJs.Tip));
parcelHelpers.export(exports, "tip", ()=>(0, _tipJs.tip));
parcelHelpers.export(exports, "tree", ()=>(0, _treeJs.tree));
parcelHelpers.export(exports, "cluster", ()=>(0, _treeJs.cluster));
parcelHelpers.export(exports, "Vector", ()=>(0, _vectorJs.Vector));
parcelHelpers.export(exports, "vector", ()=>(0, _vectorJs.vector));
parcelHelpers.export(exports, "vectorX", ()=>(0, _vectorJs.vectorX));
parcelHelpers.export(exports, "vectorY", ()=>(0, _vectorJs.vectorY));
parcelHelpers.export(exports, "spike", ()=>(0, _vectorJs.spike));
parcelHelpers.export(exports, "WaffleX", ()=>(0, _waffleJs.WaffleX));
parcelHelpers.export(exports, "WaffleY", ()=>(0, _waffleJs.WaffleY));
parcelHelpers.export(exports, "waffleX", ()=>(0, _waffleJs.waffleX));
parcelHelpers.export(exports, "waffleY", ()=>(0, _waffleJs.waffleY));
parcelHelpers.export(exports, "valueof", ()=>(0, _optionsJs.valueof));
parcelHelpers.export(exports, "column", ()=>(0, _optionsJs.column));
parcelHelpers.export(exports, "identity", ()=>(0, _optionsJs.identity));
parcelHelpers.export(exports, "indexOf", ()=>(0, _optionsJs.indexOf));
parcelHelpers.export(exports, "filter", ()=>(0, _basicJs.filter));
parcelHelpers.export(exports, "reverse", ()=>(0, _basicJs.reverse));
parcelHelpers.export(exports, "sort", ()=>(0, _basicJs.sort));
parcelHelpers.export(exports, "shuffle", ()=>(0, _basicJs.shuffle));
parcelHelpers.export(exports, "transform", ()=>(0, _basicJs.basic));
parcelHelpers.export(exports, "initializer", ()=>(0, _basicJs.initializer));
parcelHelpers.export(exports, "bin", ()=>(0, _binJs.bin));
parcelHelpers.export(exports, "binX", ()=>(0, _binJs.binX));
parcelHelpers.export(exports, "binY", ()=>(0, _binJs.binY));
parcelHelpers.export(exports, "centroid", ()=>(0, _centroidJs.centroid));
parcelHelpers.export(exports, "geoCentroid", ()=>(0, _centroidJs.geoCentroid));
parcelHelpers.export(exports, "dodgeX", ()=>(0, _dodgeJs.dodgeX));
parcelHelpers.export(exports, "dodgeY", ()=>(0, _dodgeJs.dodgeY));
parcelHelpers.export(exports, "find", ()=>(0, _groupJs.find));
parcelHelpers.export(exports, "group", ()=>(0, _groupJs.group));
parcelHelpers.export(exports, "groupX", ()=>(0, _groupJs.groupX));
parcelHelpers.export(exports, "groupY", ()=>(0, _groupJs.groupY));
parcelHelpers.export(exports, "groupZ", ()=>(0, _groupJs.groupZ));
parcelHelpers.export(exports, "hexbin", ()=>(0, _hexbinJs.hexbin));
parcelHelpers.export(exports, "normalize", ()=>(0, _normalizeJs.normalize));
parcelHelpers.export(exports, "normalizeX", ()=>(0, _normalizeJs.normalizeX));
parcelHelpers.export(exports, "normalizeY", ()=>(0, _normalizeJs.normalizeY));
parcelHelpers.export(exports, "map", ()=>(0, _mapJs.map));
parcelHelpers.export(exports, "mapX", ()=>(0, _mapJs.mapX));
parcelHelpers.export(exports, "mapY", ()=>(0, _mapJs.mapY));
parcelHelpers.export(exports, "shiftX", ()=>(0, _shiftJs.shiftX));
parcelHelpers.export(exports, "shiftY", ()=>(0, _shiftJs.shiftY));
parcelHelpers.export(exports, "window", ()=>(0, _windowJs.window));
parcelHelpers.export(exports, "windowX", ()=>(0, _windowJs.windowX));
parcelHelpers.export(exports, "windowY", ()=>(0, _windowJs.windowY));
parcelHelpers.export(exports, "select", ()=>(0, _selectJs.select));
parcelHelpers.export(exports, "selectFirst", ()=>(0, _selectJs.selectFirst));
parcelHelpers.export(exports, "selectLast", ()=>(0, _selectJs.selectLast));
parcelHelpers.export(exports, "selectMaxX", ()=>(0, _selectJs.selectMaxX));
parcelHelpers.export(exports, "selectMaxY", ()=>(0, _selectJs.selectMaxY));
parcelHelpers.export(exports, "selectMinX", ()=>(0, _selectJs.selectMinX));
parcelHelpers.export(exports, "selectMinY", ()=>(0, _selectJs.selectMinY));
parcelHelpers.export(exports, "stackX", ()=>(0, _stackJs.stackX));
parcelHelpers.export(exports, "stackX1", ()=>(0, _stackJs.stackX1));
parcelHelpers.export(exports, "stackX2", ()=>(0, _stackJs.stackX2));
parcelHelpers.export(exports, "stackY", ()=>(0, _stackJs.stackY));
parcelHelpers.export(exports, "stackY1", ()=>(0, _stackJs.stackY1));
parcelHelpers.export(exports, "stackY2", ()=>(0, _stackJs.stackY2));
parcelHelpers.export(exports, "treeNode", ()=>(0, _treeJs1.treeNode));
parcelHelpers.export(exports, "treeLink", ()=>(0, _treeJs1.treeLink));
parcelHelpers.export(exports, "pointer", ()=>(0, _pointerJs.pointer));
parcelHelpers.export(exports, "pointerX", ()=>(0, _pointerJs.pointerX));
parcelHelpers.export(exports, "pointerY", ()=>(0, _pointerJs.pointerY));
parcelHelpers.export(exports, "formatIsoDate", ()=>(0, _formatJs.formatIsoDate));
parcelHelpers.export(exports, "formatNumber", ()=>(0, _formatJs.formatNumber));
parcelHelpers.export(exports, "formatWeekday", ()=>(0, _formatJs.formatWeekday));
parcelHelpers.export(exports, "formatMonth", ()=>(0, _formatJs.formatMonth));
parcelHelpers.export(exports, "scale", ()=>(0, _scalesJs.scale));
parcelHelpers.export(exports, "legend", ()=>(0, _legendsJs.legend));
parcelHelpers.export(exports, "numberInterval", ()=>(0, _optionsJs.numberInterval));
parcelHelpers.export(exports, "timeInterval", ()=>(0, _timeJs.timeInterval));
parcelHelpers.export(exports, "utcInterval", ()=>(0, _timeJs.utcInterval));
var _markJs = require("./mark.js");
var _plotJs = require("./plot.js");
var _areaJs = require("./marks/area.js");
var _arrowJs = require("./marks/arrow.js");
var _autoJs = require("./marks/auto.js");
var _axisJs = require("./marks/axis.js");
var _barJs = require("./marks/bar.js");
var _bollingerJs = require("./marks/bollinger.js");
var _boxJs = require("./marks/box.js");
var _cellJs = require("./marks/cell.js");
var _contourJs = require("./marks/contour.js");
var _crosshairJs = require("./marks/crosshair.js");
var _delaunayJs = require("./marks/delaunay.js");
var _densityJs = require("./marks/density.js");
var _differenceJs = require("./marks/difference.js");
var _dotJs = require("./marks/dot.js");
var _frameJs = require("./marks/frame.js");
var _geoJs = require("./marks/geo.js");
var _hexgridJs = require("./marks/hexgrid.js");
var _imageJs = require("./marks/image.js");
var _lineJs = require("./marks/line.js");
var _linearRegressionJs = require("./marks/linearRegression.js");
var _linkJs = require("./marks/link.js");
var _rasterJs = require("./marks/raster.js");
var _rectJs = require("./marks/rect.js");
var _ruleJs = require("./marks/rule.js");
var _textJs = require("./marks/text.js");
var _tickJs = require("./marks/tick.js");
var _tipJs = require("./marks/tip.js");
var _treeJs = require("./marks/tree.js");
var _vectorJs = require("./marks/vector.js");
var _waffleJs = require("./marks/waffle.js");
var _optionsJs = require("./options.js");
var _basicJs = require("./transforms/basic.js");
var _binJs = require("./transforms/bin.js");
var _centroidJs = require("./transforms/centroid.js");
var _dodgeJs = require("./transforms/dodge.js");
var _groupJs = require("./transforms/group.js");
var _hexbinJs = require("./transforms/hexbin.js");
var _normalizeJs = require("./transforms/normalize.js");
var _mapJs = require("./transforms/map.js");
var _shiftJs = require("./transforms/shift.js");
var _windowJs = require("./transforms/window.js");
var _selectJs = require("./transforms/select.js");
var _stackJs = require("./transforms/stack.js");
var _treeJs1 = require("./transforms/tree.js");
var _pointerJs = require("./interactions/pointer.js");
var _formatJs = require("./format.js");
var _scalesJs = require("./scales.js");
var _legendsJs = require("./legends.js");
var _timeJs = require("./time.js");
// Note: this side effect avoids a circular dependency.
(0, _markJs.Mark).prototype.plot = function({ marks = [], ...options } = {}) {
    return (0, _plotJs.plot)({
        ...options,
        marks: [
            ...marks,
            this
        ]
    });
};

},{"./mark.js":"a4RyP","./plot.js":"aF3GL","./marks/area.js":"jcUX2","./marks/arrow.js":"cmX6n","./marks/auto.js":"jLF8I","./marks/axis.js":"jKxJZ","./marks/bar.js":"aMpp7","./marks/bollinger.js":"fUmqG","./marks/box.js":"cJpmO","./marks/cell.js":"i3iYL","./marks/contour.js":"giIS1","./marks/crosshair.js":"31Gb5","./marks/delaunay.js":"8JN3o","./marks/density.js":"4nZZ6","./marks/difference.js":"hoYlq","./marks/dot.js":"hmb7r","./marks/frame.js":"jiFE1","./marks/geo.js":"leerq","./marks/hexgrid.js":"kpBYQ","./marks/image.js":"b1jwr","./marks/line.js":"5VKzd","./marks/linearRegression.js":"eME9u","./marks/link.js":"fEUPw","./marks/raster.js":"jW7UY","./marks/rect.js":"19Awg","./marks/rule.js":"ligGV","./marks/text.js":"5cTpv","./marks/tick.js":"eSP4V","./marks/tip.js":"c2zhy","./marks/tree.js":"383PK","./marks/vector.js":"gd2x1","./marks/waffle.js":"jk38y","./options.js":"eJmsy","./transforms/basic.js":"hU2qc","./transforms/bin.js":"4d9wn","./transforms/centroid.js":"dqf6c","./transforms/dodge.js":"5iQXi","./transforms/group.js":"1qc0A","./transforms/hexbin.js":"fDm55","./transforms/normalize.js":"5NnzW","./transforms/map.js":"awNvD","./transforms/shift.js":"bfjYA","./transforms/window.js":"fzXVx","./transforms/select.js":"iCPFr","./transforms/stack.js":"cZguR","./transforms/tree.js":"hHIzk","./interactions/pointer.js":"erI4H","./format.js":"7mxs9","./scales.js":"cZh8W","./legends.js":"itQTv","./time.js":"3rFQb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a4RyP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Mark", ()=>Mark);
parcelHelpers.export(exports, "marks", ()=>marks);
parcelHelpers.export(exports, "composeRender", ()=>composeRender);
parcelHelpers.export(exports, "withTip", ()=>withTip);
var _channelJs = require("./channel.js");
var _definedJs = require("./defined.js");
var _facetJs = require("./facet.js");
var _optionsJs = require("./options.js");
var _projectionJs = require("./projection.js");
var _styleJs = require("./style.js");
var _basicJs = require("./transforms/basic.js");
class Mark {
    constructor(data, channels = {}, options = {}, defaults){
        const { facet = "auto", facetAnchor, fx, fy, sort, dx = 0, dy = 0, margin = 0, marginTop = margin, marginRight = margin, marginBottom = margin, marginLeft = margin, className, clip = defaults?.clip, channels: extraChannels, tip, render } = options;
        this.data = data;
        this.sort = (0, _optionsJs.isDomainSort)(sort) ? sort : null;
        this.initializer = (0, _basicJs.initializer)(options).initializer;
        this.transform = this.initializer ? options.transform : (0, _basicJs.basic)(options).transform;
        if (facet === null || facet === false) this.facet = null;
        else {
            this.facet = (0, _optionsJs.keyword)(facet === true ? "include" : facet, "facet", [
                "auto",
                "include",
                "exclude",
                "super"
            ]);
            this.fx = data === (0, _optionsJs.singleton) && typeof fx === "string" ? [
                fx
            ] : fx;
            this.fy = data === (0, _optionsJs.singleton) && typeof fy === "string" ? [
                fy
            ] : fy;
        }
        this.facetAnchor = (0, _facetJs.maybeFacetAnchor)(facetAnchor);
        channels = (0, _optionsJs.maybeNamed)(channels);
        if (extraChannels !== undefined) channels = {
            ...maybeChannels(extraChannels),
            ...channels
        };
        if (defaults !== undefined) channels = {
            ...(0, _styleJs.styles)(this, options, defaults),
            ...channels
        };
        this.channels = Object.fromEntries(Object.entries(channels).map(([name, channel])=>{
            if ((0, _optionsJs.isOptions)(channel.value)) {
                // apply scale and label overrides
                const { value, label = channel.label, scale = channel.scale } = channel.value;
                channel = {
                    ...channel,
                    label,
                    scale,
                    value
                };
            }
            if (data === (0, _optionsJs.singleton) && typeof channel.value === "string") {
                // convert field names to singleton values for decoration marks (e.g., frame)
                const { value } = channel;
                channel = {
                    ...channel,
                    value: [
                        value
                    ]
                };
            }
            return [
                name,
                channel
            ];
        }).filter(([name, { value, optional }])=>{
            if (value != null) return true;
            if (optional) return false;
            throw new Error(`missing channel value: ${name}`);
        }));
        this.dx = +dx;
        this.dy = +dy;
        this.marginTop = +marginTop;
        this.marginRight = +marginRight;
        this.marginBottom = +marginBottom;
        this.marginLeft = +marginLeft;
        this.clip = (0, _optionsJs.maybeClip)(clip);
        this.tip = maybeTip(tip);
        this.className = className ? (0, _styleJs.maybeClassName)(className) : null;
        // Super-faceting currently disallow position channels; in the future, we
        // could allow position to be specified in fx and fy in addition to (or
        // instead of) x and y.
        if (this.facet === "super") {
            if (fx || fy) throw new Error(`super-faceting cannot use fx or fy`);
            for(const name in this.channels){
                const { scale } = channels[name];
                if (scale !== "x" && scale !== "y") continue;
                throw new Error(`super-faceting cannot use x or y`);
            }
        }
        if (render != null) this.render = composeRender(render, this.render);
    }
    initialize(facets, facetChannels, plotOptions) {
        let data = (0, _optionsJs.dataify)(this.data);
        if (facets === undefined && data != null) facets = [
            (0, _optionsJs.range)(data)
        ];
        const originalFacets = facets;
        if (this.transform != null) ({ facets, data } = this.transform(data, facets, plotOptions)), data = (0, _optionsJs.dataify)(data);
        if (facets !== undefined) facets.original = originalFacets; // needed to read facetChannels
        const channels = (0, _channelJs.createChannels)(this.channels, data);
        if (this.sort != null) (0, _channelJs.channelDomain)(data, facets, channels, facetChannels, this.sort); // mutates facetChannels!
        return {
            data,
            facets,
            channels
        };
    }
    filter(index, channels, values) {
        for(const name in channels){
            const { filter = (0, _definedJs.defined) } = channels[name];
            if (filter !== null) {
                const value = values[name];
                index = index.filter((i)=>filter(value[i]));
            }
        }
        return index;
    }
    // If there is a projection, and there are paired x and y channels associated
    // with the x and y scale respectively (and not already in screen coordinates
    // as with an initializer), then apply the projection, replacing the x and y
    // values. Note that the x and y scales themselves don’t exist if there is a
    // projection, but whether the channels are associated with scales still
    // determines whether the projection should apply; think of the projection as
    // a combination xy-scale.
    project(channels, values, context) {
        for(const cx in channels)if (channels[cx].scale === "x" && /^x|x$/.test(cx)) {
            const cy = cx.replace(/^x|x$/, "y");
            if (cy in channels && channels[cy].scale === "y") (0, _projectionJs.project)(cx, cy, values, context.projection);
        }
    }
    scale(channels, scales, context) {
        const values = (0, _channelJs.valueObject)(channels, scales);
        if (context.projection) this.project(channels, values, context);
        return values;
    }
}
function marks(...marks1) {
    marks1.plot = Mark.prototype.plot;
    return marks1;
}
function composeRender(r1, r2) {
    if (r1 == null) return r2 === null ? undefined : r2;
    if (r2 == null) return r1 === null ? undefined : r1;
    if (typeof r1 !== "function") throw new TypeError(`invalid render transform: ${r1}`);
    if (typeof r2 !== "function") throw new TypeError(`invalid render transform: ${r2}`);
    return function(i, s, v, d, c, next) {
        return r1.call(this, i, s, v, d, c, (i, s, v, d, c)=>{
            return r2.call(this, i, s, v, d, c, next); // preserve this
        });
    };
}
function maybeChannels(channels) {
    return Object.fromEntries(Object.entries((0, _optionsJs.maybeNamed)(channels)).map(([name, channel])=>{
        channel = typeof channel === "string" ? {
            value: channel,
            label: name
        } : (0, _optionsJs.maybeValue)(channel); // for shorthand extra channels, use name as label
        if (channel.filter === undefined && channel.scale == null) channel = {
            ...channel,
            filter: null
        };
        return [
            name,
            channel
        ];
    }));
}
function maybeTip(tip) {
    return tip === true ? "xy" : tip === false || tip == null ? null : typeof tip === "string" ? (0, _optionsJs.keyword)(tip, "tip", [
        "x",
        "y",
        "xy"
    ]) : tip; // tip options object
}
function withTip(options, pointer) {
    return options?.tip === true ? {
        ...options,
        tip: pointer
    } : (0, _optionsJs.isObject)(options?.tip) && options.tip.pointer === undefined ? {
        ...options,
        tip: {
            ...options.tip,
            pointer
        }
    } : options;
}

},{"./channel.js":"h3rWV","./defined.js":"3n4Hk","./facet.js":"4CBrW","./options.js":"eJmsy","./projection.js":"eTnHA","./style.js":"c9bmo","./transforms/basic.js":"hU2qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h3rWV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createChannel", ()=>createChannel);
parcelHelpers.export(exports, "createChannels", ()=>createChannels);
// TODO Use Float64Array for scales with numeric ranges, e.g. position?
parcelHelpers.export(exports, "valueObject", ()=>valueObject);
// If the channel uses the "auto" scale (or equivalently true), infer the scale
// from the channel name and the provided values. For color and symbol channels,
// no scale is applied if the values are literal; however for symbols, we must
// promote symbol names (e.g., "plus") to symbol implementations (symbolPlus).
// Note: mutates channel!
parcelHelpers.export(exports, "inferChannelScale", ()=>inferChannelScale);
// Note: mutates channel.domain! This is set to a function so that it is lazily
// computed; i.e., if the scale’s domain is set explicitly, that takes priority
// over the sort option, and we don’t need to do additional work.
parcelHelpers.export(exports, "channelDomain", ()=>channelDomain);
parcelHelpers.export(exports, "getSource", ()=>getSource);
var _d3 = require("d3");
var _definedJs = require("./defined.js");
var _optionsJs = require("./options.js");
var _indexJs = require("./scales/index.js");
var _symbolJs = require("./symbol.js");
var _groupJs = require("./transforms/group.js");
function createChannel(data, { scale, type, value, filter, hint, label = (0, _optionsJs.labelof)(value) }, name) {
    if (hint === undefined && typeof value?.transform === "function") hint = value.hint;
    return inferChannelScale(name, {
        scale,
        type,
        value: (0, _optionsJs.valueof)(data, value),
        label,
        filter,
        hint
    });
}
function createChannels(channels, data) {
    return Object.fromEntries(Object.entries(channels).map(([name, channel])=>[
            name,
            createChannel(data, channel, name)
        ]));
}
function valueObject(channels, scales) {
    const values = Object.fromEntries(Object.entries(channels).map(([name, { scale: scaleName, value }])=>{
        const scale = scaleName == null ? null : scales[scaleName];
        return [
            name,
            scale == null ? value : (0, _optionsJs.map)(value, scale)
        ];
    }));
    values.channels = channels; // expose channel state for advanced usage
    return values;
}
function inferChannelScale(name, channel) {
    const { scale, value } = channel;
    if (scale === true || scale === "auto") switch(name){
        case "fill":
        case "stroke":
        case "color":
            channel.scale = scale !== true && (0, _optionsJs.isEvery)(value, (0, _optionsJs.isColor)) ? null : "color";
            channel.defaultScale = "color";
            break;
        case "fillOpacity":
        case "strokeOpacity":
        case "opacity":
            channel.scale = scale !== true && (0, _optionsJs.isEvery)(value, (0, _optionsJs.isOpacity)) ? null : "opacity";
            channel.defaultScale = "opacity";
            break;
        case "symbol":
            if (scale !== true && (0, _optionsJs.isEvery)(value, (0, _symbolJs.isSymbol))) {
                channel.scale = null;
                channel.value = (0, _optionsJs.map)(value, (0, _symbolJs.maybeSymbol));
            } else channel.scale = "symbol";
            channel.defaultScale = "symbol";
            break;
        default:
            channel.scale = (0, _indexJs.registry).has(name) ? name : null;
            break;
    }
    else if (scale === false) channel.scale = null;
    else if (scale != null && !(0, _indexJs.registry).has(scale)) throw new Error(`unknown scale: ${scale}`);
    return channel;
}
function channelDomain(data, facets, channels, facetChannels, options) {
    const { order: defaultOrder, reverse: defaultReverse, reduce: defaultReduce = true, limit: defaultLimit } = options;
    for(const x in options){
        if (!(0, _indexJs.registry).has(x)) continue; // ignore unknown scale keys (including generic options)
        let { value: y, order = defaultOrder, reverse = defaultReverse, reduce = defaultReduce, limit = defaultLimit } = (0, _optionsJs.maybeValue)(options[x]); // prettier-ignore
        const negate = y?.startsWith("-");
        if (negate) y = y.slice(1);
        order = order === undefined ? negate !== (y === "width" || y === "height") ? descendingGroup : ascendingGroup : maybeOrder(order); // prettier-ignore
        if (reduce == null || reduce === false) continue; // disabled reducer
        const X = x === "fx" || x === "fy" ? reindexFacetChannel(facets, facetChannels[x]) : findScaleChannel(channels, x);
        if (!X) throw new Error(`missing channel for scale: ${x}`);
        const XV = X.value;
        const [lo = 0, hi = Infinity] = (0, _optionsJs.isIterable)(limit) ? limit : limit < 0 ? [
            limit
        ] : [
            0,
            limit
        ];
        if (y == null) X.domain = ()=>{
            let domain = Array.from(new (0, _d3.InternSet)(XV)); // remove any duplicates
            if (reverse) domain = domain.reverse();
            if (lo !== 0 || hi !== Infinity) domain = domain.slice(lo, hi);
            return domain;
        };
        else {
            const YV = y === "data" ? data : y === "height" ? difference(channels, "y1", "y2") : y === "width" ? difference(channels, "x1", "x2") : values(channels, y, y === "y" ? "y2" : y === "x" ? "x2" : undefined);
            const reducer = (0, _groupJs.maybeReduce)(reduce === true ? "max" : reduce, YV);
            X.domain = ()=>{
                let domain = (0, _d3.rollups)((0, _optionsJs.range)(XV), (I)=>reducer.reduceIndex(I, YV), (i)=>XV[i]);
                if (order) domain.sort(order);
                if (reverse) domain.reverse();
                if (lo !== 0 || hi !== Infinity) domain = domain.slice(lo, hi);
                return domain.map((0, _optionsJs.first));
            };
        }
    }
}
function findScaleChannel(channels, scale) {
    for(const name in channels){
        const channel = channels[name];
        if (channel.scale === scale) return channel;
    }
}
// Facet channels are not affected by transforms; so, to compute the domain of a
// facet scale, we must first re-index the facet channel according to the
// transformed mark index. Note: mutates channel, but that should be safe here?
function reindexFacetChannel(facets, channel) {
    const originalFacets = facets.original;
    if (originalFacets === facets) return channel; // not transformed
    const V1 = channel.value;
    const V2 = channel.value = []; // mutates channel!
    for(let i = 0; i < originalFacets.length; ++i){
        const vi = V1[originalFacets[i][0]];
        for (const j of facets[i])V2[j] = vi;
    }
    return channel;
}
function difference(channels, k1, k2) {
    const X1 = values(channels, k1);
    const X2 = values(channels, k2);
    return (0, _optionsJs.map)(X2, (x2, i)=>Math.abs(x2 - X1[i]), Float64Array);
}
function values(channels, name, alias) {
    let channel = channels[name];
    if (!channel && alias !== undefined) channel = channels[alias];
    if (channel) return channel.value;
    throw new Error(`missing channel: ${name}`);
}
function maybeOrder(order) {
    if (order == null || typeof order === "function") return order;
    switch(`${order}`.toLowerCase()){
        case "ascending":
            return ascendingGroup;
        case "descending":
            return descendingGroup;
    }
    throw new Error(`invalid order: ${order}`);
}
function ascendingGroup([ak, av], [bk, bv]) {
    return (0, _definedJs.ascendingDefined)(av, bv) || (0, _definedJs.ascendingDefined)(ak, bk);
}
function descendingGroup([ak, av], [bk, bv]) {
    return (0, _definedJs.descendingDefined)(av, bv) || (0, _definedJs.ascendingDefined)(ak, bk);
}
function getSource(channels, key) {
    let channel = channels[key];
    if (!channel) return;
    while(channel.source)channel = channel.source;
    return channel.source === null ? null : channel;
}

},{"d3":"17XFv","./defined.js":"3n4Hk","./options.js":"eJmsy","./scales/index.js":"kiF55","./symbol.js":"ePwOU","./transforms/group.js":"1qc0A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"17XFv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
parcelHelpers.exportAll(_d3Array, exports);
var _d3Axis = require("d3-axis");
parcelHelpers.exportAll(_d3Axis, exports);
var _d3Brush = require("d3-brush");
parcelHelpers.exportAll(_d3Brush, exports);
var _d3Chord = require("d3-chord");
parcelHelpers.exportAll(_d3Chord, exports);
var _d3Color = require("d3-color");
parcelHelpers.exportAll(_d3Color, exports);
var _d3Contour = require("d3-contour");
parcelHelpers.exportAll(_d3Contour, exports);
var _d3Delaunay = require("d3-delaunay");
parcelHelpers.exportAll(_d3Delaunay, exports);
var _d3Dispatch = require("d3-dispatch");
parcelHelpers.exportAll(_d3Dispatch, exports);
var _d3Drag = require("d3-drag");
parcelHelpers.exportAll(_d3Drag, exports);
var _d3Dsv = require("d3-dsv");
parcelHelpers.exportAll(_d3Dsv, exports);
var _d3Ease = require("d3-ease");
parcelHelpers.exportAll(_d3Ease, exports);
var _d3Fetch = require("d3-fetch");
parcelHelpers.exportAll(_d3Fetch, exports);
var _d3Force = require("d3-force");
parcelHelpers.exportAll(_d3Force, exports);
var _d3Format = require("d3-format");
parcelHelpers.exportAll(_d3Format, exports);
var _d3Geo = require("d3-geo");
parcelHelpers.exportAll(_d3Geo, exports);
var _d3Hierarchy = require("d3-hierarchy");
parcelHelpers.exportAll(_d3Hierarchy, exports);
var _d3Interpolate = require("d3-interpolate");
parcelHelpers.exportAll(_d3Interpolate, exports);
var _d3Path = require("d3-path");
parcelHelpers.exportAll(_d3Path, exports);
var _d3Polygon = require("d3-polygon");
parcelHelpers.exportAll(_d3Polygon, exports);
var _d3Quadtree = require("d3-quadtree");
parcelHelpers.exportAll(_d3Quadtree, exports);
var _d3Random = require("d3-random");
parcelHelpers.exportAll(_d3Random, exports);
var _d3Scale = require("d3-scale");
parcelHelpers.exportAll(_d3Scale, exports);
var _d3ScaleChromatic = require("d3-scale-chromatic");
parcelHelpers.exportAll(_d3ScaleChromatic, exports);
var _d3Selection = require("d3-selection");
parcelHelpers.exportAll(_d3Selection, exports);
var _d3Shape = require("d3-shape");
parcelHelpers.exportAll(_d3Shape, exports);
var _d3Time = require("d3-time");
parcelHelpers.exportAll(_d3Time, exports);
var _d3TimeFormat = require("d3-time-format");
parcelHelpers.exportAll(_d3TimeFormat, exports);
var _d3Timer = require("d3-timer");
parcelHelpers.exportAll(_d3Timer, exports);
var _d3Transition = require("d3-transition");
parcelHelpers.exportAll(_d3Transition, exports);
var _d3Zoom = require("d3-zoom");
parcelHelpers.exportAll(_d3Zoom, exports);

},{"d3-array":"1yX2W","d3-axis":"2g6gM","d3-brush":"7TG1H","d3-chord":false,"d3-color":"grhaa","d3-contour":"5lvYf","d3-delaunay":"aJhty","d3-dispatch":false,"d3-drag":false,"d3-dsv":false,"d3-ease":false,"d3-fetch":false,"d3-force":false,"d3-format":"4XOv2","d3-geo":"01Z75","d3-hierarchy":"ffs4h","d3-interpolate":"6jJyi","d3-path":"eY3pl","d3-polygon":false,"d3-quadtree":false,"d3-random":"60d0K","d3-scale":"UQ8g3","d3-scale-chromatic":"dfCpU","d3-selection":"gn9gd","d3-shape":"SqrXv","d3-time":"1UOEe","d3-time-format":"4FtNS","d3-timer":false,"d3-transition":"4lorl","d3-zoom":"hQoq0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1yX2W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bisect", ()=>(0, _bisectJsDefault.default));
parcelHelpers.export(exports, "bisectRight", ()=>(0, _bisectJs.bisectRight));
parcelHelpers.export(exports, "bisectLeft", ()=>(0, _bisectJs.bisectLeft));
parcelHelpers.export(exports, "bisectCenter", ()=>(0, _bisectJs.bisectCenter));
parcelHelpers.export(exports, "ascending", ()=>(0, _ascendingJsDefault.default));
parcelHelpers.export(exports, "bisector", ()=>(0, _bisectorJsDefault.default));
parcelHelpers.export(exports, "blur", ()=>(0, _blurJs.blur));
parcelHelpers.export(exports, "blur2", ()=>(0, _blurJs.blur2));
parcelHelpers.export(exports, "blurImage", ()=>(0, _blurJs.blurImage));
parcelHelpers.export(exports, "count", ()=>(0, _countJsDefault.default));
parcelHelpers.export(exports, "cross", ()=>(0, _crossJsDefault.default));
parcelHelpers.export(exports, "cumsum", ()=>(0, _cumsumJsDefault.default));
parcelHelpers.export(exports, "descending", ()=>(0, _descendingJsDefault.default));
parcelHelpers.export(exports, "deviation", ()=>(0, _deviationJsDefault.default));
parcelHelpers.export(exports, "extent", ()=>(0, _extentJsDefault.default));
parcelHelpers.export(exports, "Adder", ()=>(0, _fsumJs.Adder));
parcelHelpers.export(exports, "fsum", ()=>(0, _fsumJs.fsum));
parcelHelpers.export(exports, "fcumsum", ()=>(0, _fsumJs.fcumsum));
parcelHelpers.export(exports, "group", ()=>(0, _groupJsDefault.default));
parcelHelpers.export(exports, "flatGroup", ()=>(0, _groupJs.flatGroup));
parcelHelpers.export(exports, "flatRollup", ()=>(0, _groupJs.flatRollup));
parcelHelpers.export(exports, "groups", ()=>(0, _groupJs.groups));
parcelHelpers.export(exports, "index", ()=>(0, _groupJs.index));
parcelHelpers.export(exports, "indexes", ()=>(0, _groupJs.indexes));
parcelHelpers.export(exports, "rollup", ()=>(0, _groupJs.rollup));
parcelHelpers.export(exports, "rollups", ()=>(0, _groupJs.rollups));
parcelHelpers.export(exports, "groupSort", ()=>(0, _groupSortJsDefault.default));
parcelHelpers.export(exports, "bin", ()=>(0, _binJsDefault.default)) // Deprecated; use bin.
;
parcelHelpers.export(exports, "histogram", ()=>(0, _binJsDefault.default));
parcelHelpers.export(exports, "thresholdFreedmanDiaconis", ()=>(0, _freedmanDiaconisJsDefault.default));
parcelHelpers.export(exports, "thresholdScott", ()=>(0, _scottJsDefault.default));
parcelHelpers.export(exports, "thresholdSturges", ()=>(0, _sturgesJsDefault.default));
parcelHelpers.export(exports, "max", ()=>(0, _maxJsDefault.default));
parcelHelpers.export(exports, "maxIndex", ()=>(0, _maxIndexJsDefault.default));
parcelHelpers.export(exports, "mean", ()=>(0, _meanJsDefault.default));
parcelHelpers.export(exports, "median", ()=>(0, _medianJsDefault.default));
parcelHelpers.export(exports, "medianIndex", ()=>(0, _medianJs.medianIndex));
parcelHelpers.export(exports, "merge", ()=>(0, _mergeJsDefault.default));
parcelHelpers.export(exports, "min", ()=>(0, _minJsDefault.default));
parcelHelpers.export(exports, "minIndex", ()=>(0, _minIndexJsDefault.default));
parcelHelpers.export(exports, "mode", ()=>(0, _modeJsDefault.default));
parcelHelpers.export(exports, "nice", ()=>(0, _niceJsDefault.default));
parcelHelpers.export(exports, "pairs", ()=>(0, _pairsJsDefault.default));
parcelHelpers.export(exports, "permute", ()=>(0, _permuteJsDefault.default));
parcelHelpers.export(exports, "quantile", ()=>(0, _quantileJsDefault.default));
parcelHelpers.export(exports, "quantileIndex", ()=>(0, _quantileJs.quantileIndex));
parcelHelpers.export(exports, "quantileSorted", ()=>(0, _quantileJs.quantileSorted));
parcelHelpers.export(exports, "quickselect", ()=>(0, _quickselectJsDefault.default));
parcelHelpers.export(exports, "range", ()=>(0, _rangeJsDefault.default));
parcelHelpers.export(exports, "rank", ()=>(0, _rankJsDefault.default));
parcelHelpers.export(exports, "least", ()=>(0, _leastJsDefault.default));
parcelHelpers.export(exports, "leastIndex", ()=>(0, _leastIndexJsDefault.default));
parcelHelpers.export(exports, "greatest", ()=>(0, _greatestJsDefault.default));
parcelHelpers.export(exports, "greatestIndex", ()=>(0, _greatestIndexJsDefault.default));
parcelHelpers.export(exports, "scan", ()=>(0, _scanJsDefault.default)) // Deprecated; use leastIndex.
;
parcelHelpers.export(exports, "shuffle", ()=>(0, _shuffleJsDefault.default));
parcelHelpers.export(exports, "shuffler", ()=>(0, _shuffleJs.shuffler));
parcelHelpers.export(exports, "sum", ()=>(0, _sumJsDefault.default));
parcelHelpers.export(exports, "ticks", ()=>(0, _ticksJsDefault.default));
parcelHelpers.export(exports, "tickIncrement", ()=>(0, _ticksJs.tickIncrement));
parcelHelpers.export(exports, "tickStep", ()=>(0, _ticksJs.tickStep));
parcelHelpers.export(exports, "transpose", ()=>(0, _transposeJsDefault.default));
parcelHelpers.export(exports, "variance", ()=>(0, _varianceJsDefault.default));
parcelHelpers.export(exports, "zip", ()=>(0, _zipJsDefault.default));
parcelHelpers.export(exports, "every", ()=>(0, _everyJsDefault.default));
parcelHelpers.export(exports, "some", ()=>(0, _someJsDefault.default));
parcelHelpers.export(exports, "filter", ()=>(0, _filterJsDefault.default));
parcelHelpers.export(exports, "map", ()=>(0, _mapJsDefault.default));
parcelHelpers.export(exports, "reduce", ()=>(0, _reduceJsDefault.default));
parcelHelpers.export(exports, "reverse", ()=>(0, _reverseJsDefault.default));
parcelHelpers.export(exports, "sort", ()=>(0, _sortJsDefault.default));
parcelHelpers.export(exports, "difference", ()=>(0, _differenceJsDefault.default));
parcelHelpers.export(exports, "disjoint", ()=>(0, _disjointJsDefault.default));
parcelHelpers.export(exports, "intersection", ()=>(0, _intersectionJsDefault.default));
parcelHelpers.export(exports, "subset", ()=>(0, _subsetJsDefault.default));
parcelHelpers.export(exports, "superset", ()=>(0, _supersetJsDefault.default));
parcelHelpers.export(exports, "union", ()=>(0, _unionJsDefault.default));
parcelHelpers.export(exports, "InternMap", ()=>(0, _internmap.InternMap));
parcelHelpers.export(exports, "InternSet", ()=>(0, _internmap.InternSet));
var _bisectJs = require("./bisect.js");
var _bisectJsDefault = parcelHelpers.interopDefault(_bisectJs);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _bisectorJs = require("./bisector.js");
var _bisectorJsDefault = parcelHelpers.interopDefault(_bisectorJs);
var _blurJs = require("./blur.js");
var _countJs = require("./count.js");
var _countJsDefault = parcelHelpers.interopDefault(_countJs);
var _crossJs = require("./cross.js");
var _crossJsDefault = parcelHelpers.interopDefault(_crossJs);
var _cumsumJs = require("./cumsum.js");
var _cumsumJsDefault = parcelHelpers.interopDefault(_cumsumJs);
var _descendingJs = require("./descending.js");
var _descendingJsDefault = parcelHelpers.interopDefault(_descendingJs);
var _deviationJs = require("./deviation.js");
var _deviationJsDefault = parcelHelpers.interopDefault(_deviationJs);
var _extentJs = require("./extent.js");
var _extentJsDefault = parcelHelpers.interopDefault(_extentJs);
var _fsumJs = require("./fsum.js");
var _groupJs = require("./group.js");
var _groupJsDefault = parcelHelpers.interopDefault(_groupJs);
var _groupSortJs = require("./groupSort.js");
var _groupSortJsDefault = parcelHelpers.interopDefault(_groupSortJs);
var _binJs = require("./bin.js");
var _binJsDefault = parcelHelpers.interopDefault(_binJs);
var _freedmanDiaconisJs = require("./threshold/freedmanDiaconis.js");
var _freedmanDiaconisJsDefault = parcelHelpers.interopDefault(_freedmanDiaconisJs);
var _scottJs = require("./threshold/scott.js");
var _scottJsDefault = parcelHelpers.interopDefault(_scottJs);
var _sturgesJs = require("./threshold/sturges.js");
var _sturgesJsDefault = parcelHelpers.interopDefault(_sturgesJs);
var _maxJs = require("./max.js");
var _maxJsDefault = parcelHelpers.interopDefault(_maxJs);
var _maxIndexJs = require("./maxIndex.js");
var _maxIndexJsDefault = parcelHelpers.interopDefault(_maxIndexJs);
var _meanJs = require("./mean.js");
var _meanJsDefault = parcelHelpers.interopDefault(_meanJs);
var _medianJs = require("./median.js");
var _medianJsDefault = parcelHelpers.interopDefault(_medianJs);
var _mergeJs = require("./merge.js");
var _mergeJsDefault = parcelHelpers.interopDefault(_mergeJs);
var _minJs = require("./min.js");
var _minJsDefault = parcelHelpers.interopDefault(_minJs);
var _minIndexJs = require("./minIndex.js");
var _minIndexJsDefault = parcelHelpers.interopDefault(_minIndexJs);
var _modeJs = require("./mode.js");
var _modeJsDefault = parcelHelpers.interopDefault(_modeJs);
var _niceJs = require("./nice.js");
var _niceJsDefault = parcelHelpers.interopDefault(_niceJs);
var _pairsJs = require("./pairs.js");
var _pairsJsDefault = parcelHelpers.interopDefault(_pairsJs);
var _permuteJs = require("./permute.js");
var _permuteJsDefault = parcelHelpers.interopDefault(_permuteJs);
var _quantileJs = require("./quantile.js");
var _quantileJsDefault = parcelHelpers.interopDefault(_quantileJs);
var _quickselectJs = require("./quickselect.js");
var _quickselectJsDefault = parcelHelpers.interopDefault(_quickselectJs);
var _rangeJs = require("./range.js");
var _rangeJsDefault = parcelHelpers.interopDefault(_rangeJs);
var _rankJs = require("./rank.js");
var _rankJsDefault = parcelHelpers.interopDefault(_rankJs);
var _leastJs = require("./least.js");
var _leastJsDefault = parcelHelpers.interopDefault(_leastJs);
var _leastIndexJs = require("./leastIndex.js");
var _leastIndexJsDefault = parcelHelpers.interopDefault(_leastIndexJs);
var _greatestJs = require("./greatest.js");
var _greatestJsDefault = parcelHelpers.interopDefault(_greatestJs);
var _greatestIndexJs = require("./greatestIndex.js");
var _greatestIndexJsDefault = parcelHelpers.interopDefault(_greatestIndexJs);
var _scanJs = require("./scan.js");
var _scanJsDefault = parcelHelpers.interopDefault(_scanJs);
var _shuffleJs = require("./shuffle.js");
var _shuffleJsDefault = parcelHelpers.interopDefault(_shuffleJs);
var _sumJs = require("./sum.js");
var _sumJsDefault = parcelHelpers.interopDefault(_sumJs);
var _ticksJs = require("./ticks.js");
var _ticksJsDefault = parcelHelpers.interopDefault(_ticksJs);
var _transposeJs = require("./transpose.js");
var _transposeJsDefault = parcelHelpers.interopDefault(_transposeJs);
var _varianceJs = require("./variance.js");
var _varianceJsDefault = parcelHelpers.interopDefault(_varianceJs);
var _zipJs = require("./zip.js");
var _zipJsDefault = parcelHelpers.interopDefault(_zipJs);
var _everyJs = require("./every.js");
var _everyJsDefault = parcelHelpers.interopDefault(_everyJs);
var _someJs = require("./some.js");
var _someJsDefault = parcelHelpers.interopDefault(_someJs);
var _filterJs = require("./filter.js");
var _filterJsDefault = parcelHelpers.interopDefault(_filterJs);
var _mapJs = require("./map.js");
var _mapJsDefault = parcelHelpers.interopDefault(_mapJs);
var _reduceJs = require("./reduce.js");
var _reduceJsDefault = parcelHelpers.interopDefault(_reduceJs);
var _reverseJs = require("./reverse.js");
var _reverseJsDefault = parcelHelpers.interopDefault(_reverseJs);
var _sortJs = require("./sort.js");
var _sortJsDefault = parcelHelpers.interopDefault(_sortJs);
var _differenceJs = require("./difference.js");
var _differenceJsDefault = parcelHelpers.interopDefault(_differenceJs);
var _disjointJs = require("./disjoint.js");
var _disjointJsDefault = parcelHelpers.interopDefault(_disjointJs);
var _intersectionJs = require("./intersection.js");
var _intersectionJsDefault = parcelHelpers.interopDefault(_intersectionJs);
var _subsetJs = require("./subset.js");
var _subsetJsDefault = parcelHelpers.interopDefault(_subsetJs);
var _supersetJs = require("./superset.js");
var _supersetJsDefault = parcelHelpers.interopDefault(_supersetJs);
var _unionJs = require("./union.js");
var _unionJsDefault = parcelHelpers.interopDefault(_unionJs);
var _internmap = require("internmap");

},{"./bisect.js":"2jqf4","./ascending.js":"2iZSL","./bisector.js":"1BY0F","./blur.js":"exqNg","./count.js":"fdcqm","./cross.js":"7sblS","./cumsum.js":"2kpSh","./descending.js":"dpgkj","./deviation.js":"2qowT","./extent.js":"bpNTV","./fsum.js":"7NEFi","./group.js":"dY8VH","./groupSort.js":"7Ogmv","./bin.js":"18IDv","./threshold/freedmanDiaconis.js":"YzWbd","./threshold/scott.js":"84IpX","./threshold/sturges.js":"aAePr","./max.js":"6b1uv","./maxIndex.js":"1pqy7","./mean.js":"diWJS","./median.js":"3NuqZ","./merge.js":"hviMC","./min.js":"1KKa7","./minIndex.js":"g6uuQ","./mode.js":"9MNuy","./nice.js":"hx3lC","./pairs.js":"krmK9","./permute.js":"72FE4","./quantile.js":"etiLw","./quickselect.js":"4sTUl","./range.js":"kH8Ba","./rank.js":"bZOnA","./least.js":"69Q1F","./leastIndex.js":"9vype","./greatest.js":"4LoCm","./greatestIndex.js":"lg7Xr","./scan.js":"cKBNL","./shuffle.js":"iaAC9","./sum.js":"47K1s","./ticks.js":"iDfKX","./transpose.js":"jO6XX","./variance.js":"go0M5","./zip.js":"8wbOt","./every.js":"87TIV","./some.js":"1GQIB","./filter.js":"lrcfK","./map.js":"x1FBS","./reduce.js":"3Dobh","./reverse.js":"hee4j","./sort.js":"ApqXa","./difference.js":"l43vv","./disjoint.js":"jrbsK","./intersection.js":"cBy6r","./subset.js":"32tt1","./superset.js":"l8AhK","./union.js":"80KgN","internmap":"a6b0X","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2jqf4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bisectRight", ()=>bisectRight);
parcelHelpers.export(exports, "bisectLeft", ()=>bisectLeft);
parcelHelpers.export(exports, "bisectCenter", ()=>bisectCenter);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _bisectorJs = require("./bisector.js");
var _bisectorJsDefault = parcelHelpers.interopDefault(_bisectorJs);
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
const ascendingBisect = (0, _bisectorJsDefault.default)((0, _ascendingJsDefault.default));
const bisectRight = ascendingBisect.right;
const bisectLeft = ascendingBisect.left;
const bisectCenter = (0, _bisectorJsDefault.default)((0, _numberJsDefault.default)).center;
exports.default = bisectRight;

},{"./ascending.js":"2iZSL","./bisector.js":"1BY0F","./number.js":"imr9T","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2iZSL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>ascending);
function ascending(a, b) {
    return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"1BY0F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>bisector);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _descendingJs = require("./descending.js");
var _descendingJsDefault = parcelHelpers.interopDefault(_descendingJs);
function bisector(f) {
    let compare1, compare2, delta;
    // If an accessor is specified, promote it to a comparator. In this case we
    // can test whether the search value is (self-) comparable. We can’t do this
    // for a comparator (except for specific, known comparators) because we can’t
    // tell if the comparator is symmetric, and an asymmetric comparator can’t be
    // used to test whether a single value is comparable.
    if (f.length !== 2) {
        compare1 = (0, _ascendingJsDefault.default);
        compare2 = (d, x)=>(0, _ascendingJsDefault.default)(f(d), x);
        delta = (d, x)=>f(d) - x;
    } else {
        compare1 = f === (0, _ascendingJsDefault.default) || f === (0, _descendingJsDefault.default) ? f : zero;
        compare2 = f;
        delta = f;
    }
    function left(a, x, lo = 0, hi = a.length) {
        if (lo < hi) {
            if (compare1(x, x) !== 0) return hi;
            do {
                const mid = lo + hi >>> 1;
                if (compare2(a[mid], x) < 0) lo = mid + 1;
                else hi = mid;
            }while (lo < hi);
        }
        return lo;
    }
    function right(a, x, lo = 0, hi = a.length) {
        if (lo < hi) {
            if (compare1(x, x) !== 0) return hi;
            do {
                const mid = lo + hi >>> 1;
                if (compare2(a[mid], x) <= 0) lo = mid + 1;
                else hi = mid;
            }while (lo < hi);
        }
        return lo;
    }
    function center(a, x, lo = 0, hi = a.length) {
        const i = left(a, x, lo, hi - 1);
        return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
    }
    return {
        left,
        center,
        right
    };
}
function zero() {
    return 0;
}

},{"./ascending.js":"2iZSL","./descending.js":"dpgkj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dpgkj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>descending);
function descending(a, b) {
    return a == null || b == null ? NaN : b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"imr9T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>number);
parcelHelpers.export(exports, "numbers", ()=>numbers);
function number(x) {
    return x === null ? NaN : +x;
}
function* numbers(values, valueof) {
    if (valueof === undefined) {
        for (let value of values)if (value != null && (value = +value) >= value) yield value;
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) yield value;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"exqNg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "blur", ()=>blur);
parcelHelpers.export(exports, "blur2", ()=>blur2);
parcelHelpers.export(exports, "blurImage", ()=>blurImage);
function blur(values, r) {
    if (!((r = +r) >= 0)) throw new RangeError("invalid r");
    let length = values.length;
    if (!((length = Math.floor(length)) >= 0)) throw new RangeError("invalid length");
    if (!length || !r) return values;
    const blur = blurf(r);
    const temp = values.slice();
    blur(values, temp, 0, length, 1);
    blur(temp, values, 0, length, 1);
    blur(values, temp, 0, length, 1);
    return values;
}
const blur2 = Blur2(blurf);
const blurImage = Blur2(blurfImage);
function Blur2(blur) {
    return function(data, rx, ry = rx) {
        if (!((rx = +rx) >= 0)) throw new RangeError("invalid rx");
        if (!((ry = +ry) >= 0)) throw new RangeError("invalid ry");
        let { data: values, width, height } = data;
        if (!((width = Math.floor(width)) >= 0)) throw new RangeError("invalid width");
        if (!((height = Math.floor(height !== undefined ? height : values.length / width)) >= 0)) throw new RangeError("invalid height");
        if (!width || !height || !rx && !ry) return data;
        const blurx = rx && blur(rx);
        const blury = ry && blur(ry);
        const temp = values.slice();
        if (blurx && blury) {
            blurh(blurx, temp, values, width, height);
            blurh(blurx, values, temp, width, height);
            blurh(blurx, temp, values, width, height);
            blurv(blury, values, temp, width, height);
            blurv(blury, temp, values, width, height);
            blurv(blury, values, temp, width, height);
        } else if (blurx) {
            blurh(blurx, values, temp, width, height);
            blurh(blurx, temp, values, width, height);
            blurh(blurx, values, temp, width, height);
        } else if (blury) {
            blurv(blury, values, temp, width, height);
            blurv(blury, temp, values, width, height);
            blurv(blury, values, temp, width, height);
        }
        return data;
    };
}
function blurh(blur, T, S, w, h) {
    for(let y = 0, n = w * h; y < n;)blur(T, S, y, y += w, 1);
}
function blurv(blur, T, S, w, h) {
    for(let x = 0, n = w * h; x < w; ++x)blur(T, S, x, x + n, w);
}
function blurfImage(radius) {
    const blur = blurf(radius);
    return (T, S, start, stop, step)=>{
        start <<= 2, stop <<= 2, step <<= 2;
        blur(T, S, start + 0, stop + 0, step);
        blur(T, S, start + 1, stop + 1, step);
        blur(T, S, start + 2, stop + 2, step);
        blur(T, S, start + 3, stop + 3, step);
    };
}
// Given a target array T, a source array S, sets each value T[i] to the average
// of {S[i - r], …, S[i], …, S[i + r]}, where r = ⌊radius⌋, start <= i < stop,
// for each i, i + step, i + 2 * step, etc., and where S[j] is clamped between
// S[start] (inclusive) and S[stop] (exclusive). If the given radius is not an
// integer, S[i - r - 1] and S[i + r + 1] are added to the sum, each weighted
// according to r - ⌊radius⌋.
function blurf(radius) {
    const radius0 = Math.floor(radius);
    if (radius0 === radius) return bluri(radius);
    const t = radius - radius0;
    const w = 2 * radius + 1;
    return (T, S, start, stop, step)=>{
        if (!((stop -= step) >= start)) return; // inclusive stop
        let sum = radius0 * S[start];
        const s0 = step * radius0;
        const s1 = s0 + step;
        for(let i = start, j = start + s0; i < j; i += step)sum += S[Math.min(stop, i)];
        for(let i = start, j = stop; i <= j; i += step){
            sum += S[Math.min(stop, i + s0)];
            T[i] = (sum + t * (S[Math.max(start, i - s1)] + S[Math.min(stop, i + s1)])) / w;
            sum -= S[Math.max(start, i - s0)];
        }
    };
}
// Like blurf, but optimized for integer radius.
function bluri(radius) {
    const w = 2 * radius + 1;
    return (T, S, start, stop, step)=>{
        if (!((stop -= step) >= start)) return; // inclusive stop
        let sum = radius * S[start];
        const s = step * radius;
        for(let i = start, j = start + s; i < j; i += step)sum += S[Math.min(stop, i)];
        for(let i = start, j = stop; i <= j; i += step){
            sum += S[Math.min(stop, i + s)];
            T[i] = sum / w;
            sum -= S[Math.max(start, i - s)];
        }
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fdcqm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>count);
function count(values, valueof) {
    let count = 0;
    if (valueof === undefined) {
        for (let value of values)if (value != null && (value = +value) >= value) ++count;
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) ++count;
    }
    return count;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7sblS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>cross);
function length(array) {
    return array.length | 0;
}
function empty(length) {
    return !(length > 0);
}
function arrayify(values) {
    return typeof values !== "object" || "length" in values ? values : Array.from(values);
}
function reducer(reduce) {
    return (values)=>reduce(...values);
}
function cross(...values) {
    const reduce = typeof values[values.length - 1] === "function" && reducer(values.pop());
    values = values.map(arrayify);
    const lengths = values.map(length);
    const j = values.length - 1;
    const index = new Array(j + 1).fill(0);
    const product = [];
    if (j < 0 || lengths.some(empty)) return product;
    while(true){
        product.push(index.map((j, i)=>values[i][j]));
        let i = j;
        while(++index[i] === lengths[i]){
            if (i === 0) return reduce ? product.map(reduce) : product;
            index[i--] = 0;
        }
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2kpSh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>cumsum);
function cumsum(values, valueof) {
    var sum = 0, index = 0;
    return Float64Array.from(values, valueof === undefined ? (v)=>sum += +v || 0 : (v)=>sum += +valueof(v, index++, values) || 0);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2qowT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>deviation);
var _varianceJs = require("./variance.js");
var _varianceJsDefault = parcelHelpers.interopDefault(_varianceJs);
function deviation(values, valueof) {
    const v = (0, _varianceJsDefault.default)(values, valueof);
    return v ? Math.sqrt(v) : v;
}

},{"./variance.js":"go0M5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"go0M5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>variance);
function variance(values, valueof) {
    let count = 0;
    let delta;
    let mean = 0;
    let sum = 0;
    if (valueof === undefined) {
        for (let value of values)if (value != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
        }
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
            delta = value - mean;
            mean += delta / ++count;
            sum += delta * (value - mean);
        }
    }
    if (count > 1) return sum / (count - 1);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bpNTV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>extent);
function extent(values, valueof) {
    let min;
    let max;
    if (valueof === undefined) {
        for (const value of values)if (value != null) {
            if (min === undefined) {
                if (value >= value) min = max = value;
            } else {
                if (min > value) min = value;
                if (max < value) max = value;
            }
        }
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null) {
            if (min === undefined) {
                if (value >= value) min = max = value;
            } else {
                if (min > value) min = value;
                if (max < value) max = value;
            }
        }
    }
    return [
        min,
        max
    ];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7NEFi":[function(require,module,exports) {
// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Adder", ()=>Adder);
parcelHelpers.export(exports, "fsum", ()=>fsum);
parcelHelpers.export(exports, "fcumsum", ()=>fcumsum);
class Adder {
    constructor(){
        this._partials = new Float64Array(32);
        this._n = 0;
    }
    add(x) {
        const p = this._partials;
        let i = 0;
        for(let j = 0; j < this._n && j < 32; j++){
            const y = p[j], hi = x + y, lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
            if (lo) p[i++] = lo;
            x = hi;
        }
        p[i] = x;
        this._n = i + 1;
        return this;
    }
    valueOf() {
        const p = this._partials;
        let n = this._n, x, y, lo, hi = 0;
        if (n > 0) {
            hi = p[--n];
            while(n > 0){
                x = hi;
                y = p[--n];
                hi = x + y;
                lo = y - (hi - x);
                if (lo) break;
            }
            if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {
                y = lo * 2;
                x = hi + y;
                if (y == x - hi) hi = x;
            }
        }
        return hi;
    }
}
function fsum(values, valueof) {
    const adder = new Adder();
    if (valueof === undefined) {
        for (let value of values)if (value = +value) adder.add(value);
    } else {
        let index = -1;
        for (let value of values)if (value = +valueof(value, ++index, values)) adder.add(value);
    }
    return +adder;
}
function fcumsum(values, valueof) {
    const adder = new Adder();
    let index = -1;
    return Float64Array.from(values, valueof === undefined ? (v)=>adder.add(+v || 0) : (v)=>adder.add(+valueof(v, ++index, values) || 0));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dY8VH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>group);
parcelHelpers.export(exports, "groups", ()=>groups);
parcelHelpers.export(exports, "flatGroup", ()=>flatGroup);
parcelHelpers.export(exports, "flatRollup", ()=>flatRollup);
parcelHelpers.export(exports, "rollup", ()=>rollup);
parcelHelpers.export(exports, "rollups", ()=>rollups);
parcelHelpers.export(exports, "index", ()=>index);
parcelHelpers.export(exports, "indexes", ()=>indexes);
var _internmap = require("internmap");
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
function group(values, ...keys) {
    return nest(values, (0, _identityJsDefault.default), (0, _identityJsDefault.default), keys);
}
function groups(values, ...keys) {
    return nest(values, Array.from, (0, _identityJsDefault.default), keys);
}
function flatten(groups, keys) {
    for(let i = 1, n = keys.length; i < n; ++i)groups = groups.flatMap((g)=>g.pop().map(([key, value])=>[
                ...g,
                key,
                value
            ]));
    return groups;
}
function flatGroup(values, ...keys) {
    return flatten(groups(values, ...keys), keys);
}
function flatRollup(values, reduce, ...keys) {
    return flatten(rollups(values, reduce, ...keys), keys);
}
function rollup(values, reduce, ...keys) {
    return nest(values, (0, _identityJsDefault.default), reduce, keys);
}
function rollups(values, reduce, ...keys) {
    return nest(values, Array.from, reduce, keys);
}
function index(values, ...keys) {
    return nest(values, (0, _identityJsDefault.default), unique, keys);
}
function indexes(values, ...keys) {
    return nest(values, Array.from, unique, keys);
}
function unique(values) {
    if (values.length !== 1) throw new Error("duplicate key");
    return values[0];
}
function nest(values, map, reduce, keys) {
    return function regroup(values, i) {
        if (i >= keys.length) return reduce(values);
        const groups = new (0, _internmap.InternMap)();
        const keyof = keys[i++];
        let index = -1;
        for (const value of values){
            const key = keyof(value, ++index, values);
            const group = groups.get(key);
            if (group) group.push(value);
            else groups.set(key, [
                value
            ]);
        }
        for (const [key, values] of groups)groups.set(key, regroup(values, i));
        return map(groups);
    }(values, 0);
}

},{"internmap":"a6b0X","./identity.js":"gZYoG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a6b0X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InternMap", ()=>InternMap);
parcelHelpers.export(exports, "InternSet", ()=>InternSet);
class InternMap extends Map {
    constructor(entries, key = keyof){
        super();
        Object.defineProperties(this, {
            _intern: {
                value: new Map()
            },
            _key: {
                value: key
            }
        });
        if (entries != null) for (const [key, value] of entries)this.set(key, value);
    }
    get(key) {
        return super.get(intern_get(this, key));
    }
    has(key) {
        return super.has(intern_get(this, key));
    }
    set(key, value) {
        return super.set(intern_set(this, key), value);
    }
    delete(key) {
        return super.delete(intern_delete(this, key));
    }
}
class InternSet extends Set {
    constructor(values, key = keyof){
        super();
        Object.defineProperties(this, {
            _intern: {
                value: new Map()
            },
            _key: {
                value: key
            }
        });
        if (values != null) for (const value of values)this.add(value);
    }
    has(value) {
        return super.has(intern_get(this, value));
    }
    add(value) {
        return super.add(intern_set(this, value));
    }
    delete(value) {
        return super.delete(intern_delete(this, value));
    }
}
function intern_get({ _intern, _key }, value) {
    const key = _key(value);
    return _intern.has(key) ? _intern.get(key) : value;
}
function intern_set({ _intern, _key }, value) {
    const key = _key(value);
    if (_intern.has(key)) return _intern.get(key);
    _intern.set(key, value);
    return value;
}
function intern_delete({ _intern, _key }, value) {
    const key = _key(value);
    if (_intern.has(key)) {
        value = _intern.get(key);
        _intern.delete(key);
    }
    return value;
}
function keyof(value) {
    return value !== null && typeof value === "object" ? value.valueOf() : value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gZYoG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>identity);
function identity(x) {
    return x;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Ogmv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>groupSort);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _groupJs = require("./group.js");
var _groupJsDefault = parcelHelpers.interopDefault(_groupJs);
var _sortJs = require("./sort.js");
var _sortJsDefault = parcelHelpers.interopDefault(_sortJs);
function groupSort(values, reduce, key) {
    return (reduce.length !== 2 ? (0, _sortJsDefault.default)((0, _groupJs.rollup)(values, reduce, key), ([ak, av], [bk, bv])=>(0, _ascendingJsDefault.default)(av, bv) || (0, _ascendingJsDefault.default)(ak, bk)) : (0, _sortJsDefault.default)((0, _groupJsDefault.default)(values, key), ([ak, av], [bk, bv])=>reduce(av, bv) || (0, _ascendingJsDefault.default)(ak, bk))).map(([key])=>key);
}

},{"./ascending.js":"2iZSL","./group.js":"dY8VH","./sort.js":"ApqXa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ApqXa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>sort);
parcelHelpers.export(exports, "compareDefined", ()=>compareDefined);
parcelHelpers.export(exports, "ascendingDefined", ()=>ascendingDefined);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _permuteJs = require("./permute.js");
var _permuteJsDefault = parcelHelpers.interopDefault(_permuteJs);
function sort(values, ...F) {
    if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
    values = Array.from(values);
    let [f] = F;
    if (f && f.length !== 2 || F.length > 1) {
        const index = Uint32Array.from(values, (d, i)=>i);
        if (F.length > 1) {
            F = F.map((f)=>values.map(f));
            index.sort((i, j)=>{
                for (const f of F){
                    const c = ascendingDefined(f[i], f[j]);
                    if (c) return c;
                }
            });
        } else {
            f = values.map(f);
            index.sort((i, j)=>ascendingDefined(f[i], f[j]));
        }
        return (0, _permuteJsDefault.default)(values, index);
    }
    return values.sort(compareDefined(f));
}
function compareDefined(compare = (0, _ascendingJsDefault.default)) {
    if (compare === (0, _ascendingJsDefault.default)) return ascendingDefined;
    if (typeof compare !== "function") throw new TypeError("compare is not a function");
    return (a, b)=>{
        const x = compare(a, b);
        if (x || x === 0) return x;
        return (compare(b, b) === 0) - (compare(a, a) === 0);
    };
}
function ascendingDefined(a, b) {
    return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);
}

},{"./ascending.js":"2iZSL","./permute.js":"72FE4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"72FE4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>permute);
function permute(source, keys) {
    return Array.from(keys, (key)=>source[key]);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"18IDv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>bin);
var _arrayJs = require("./array.js");
var _bisectJs = require("./bisect.js");
var _bisectJsDefault = parcelHelpers.interopDefault(_bisectJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _extentJs = require("./extent.js");
var _extentJsDefault = parcelHelpers.interopDefault(_extentJs);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _niceJs = require("./nice.js");
var _niceJsDefault = parcelHelpers.interopDefault(_niceJs);
var _ticksJs = require("./ticks.js");
var _ticksJsDefault = parcelHelpers.interopDefault(_ticksJs);
var _sturgesJs = require("./threshold/sturges.js");
var _sturgesJsDefault = parcelHelpers.interopDefault(_sturgesJs);
function bin() {
    var value = (0, _identityJsDefault.default), domain = (0, _extentJsDefault.default), threshold = (0, _sturgesJsDefault.default);
    function histogram(data) {
        if (!Array.isArray(data)) data = Array.from(data);
        var i, n = data.length, x, step, values = new Array(n);
        for(i = 0; i < n; ++i)values[i] = value(data[i], i, data);
        var xz = domain(values), x0 = xz[0], x1 = xz[1], tz = threshold(values, x0, x1);
        // Convert number of thresholds into uniform thresholds, and nice the
        // default domain accordingly.
        if (!Array.isArray(tz)) {
            const max = x1, tn = +tz;
            if (domain === (0, _extentJsDefault.default)) [x0, x1] = (0, _niceJsDefault.default)(x0, x1, tn);
            tz = (0, _ticksJsDefault.default)(x0, x1, tn);
            // If the domain is aligned with the first tick (which it will by
            // default), then we can use quantization rather than bisection to bin
            // values, which is substantially faster.
            if (tz[0] <= x0) step = (0, _ticksJs.tickIncrement)(x0, x1, tn);
            // If the last threshold is coincident with the domain’s upper bound, the
            // last bin will be zero-width. If the default domain is used, and this
            // last threshold is coincident with the maximum input value, we can
            // extend the niced upper bound by one tick to ensure uniform bin widths;
            // otherwise, we simply remove the last threshold. Note that we don’t
            // coerce values or the domain to numbers, and thus must be careful to
            // compare order (>=) rather than strict equality (===)!
            if (tz[tz.length - 1] >= x1) {
                if (max >= x1 && domain === (0, _extentJsDefault.default)) {
                    const step = (0, _ticksJs.tickIncrement)(x0, x1, tn);
                    if (isFinite(step)) {
                        if (step > 0) x1 = (Math.floor(x1 / step) + 1) * step;
                        else if (step < 0) x1 = (Math.ceil(x1 * -step) + 1) / -step;
                    }
                } else tz.pop();
            }
        }
        // Remove any thresholds outside the domain.
        // Be careful not to mutate an array owned by the user!
        var m = tz.length, a = 0, b = m;
        while(tz[a] <= x0)++a;
        while(tz[b - 1] > x1)--b;
        if (a || b < m) tz = tz.slice(a, b), m = b - a;
        var bins = new Array(m + 1), bin;
        // Initialize bins.
        for(i = 0; i <= m; ++i){
            bin = bins[i] = [];
            bin.x0 = i > 0 ? tz[i - 1] : x0;
            bin.x1 = i < m ? tz[i] : x1;
        }
        // Assign data to bins by value, ignoring any outside the domain.
        if (isFinite(step)) {
            if (step > 0) {
                for(i = 0; i < n; ++i)if ((x = values[i]) != null && x0 <= x && x <= x1) bins[Math.min(m, Math.floor((x - x0) / step))].push(data[i]);
            } else if (step < 0) {
                for(i = 0; i < n; ++i)if ((x = values[i]) != null && x0 <= x && x <= x1) {
                    const j = Math.floor((x0 - x) * step);
                    bins[Math.min(m, j + (tz[j] <= x))].push(data[i]); // handle off-by-one due to rounding
                }
            }
        } else {
            for(i = 0; i < n; ++i)if ((x = values[i]) != null && x0 <= x && x <= x1) bins[(0, _bisectJsDefault.default)(tz, x, 0, m)].push(data[i]);
        }
        return bins;
    }
    histogram.value = function(_) {
        return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(_), histogram) : value;
    };
    histogram.domain = function(_) {
        return arguments.length ? (domain = typeof _ === "function" ? _ : (0, _constantJsDefault.default)([
            _[0],
            _[1]
        ]), histogram) : domain;
    };
    histogram.thresholds = function(_) {
        return arguments.length ? (threshold = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(Array.isArray(_) ? (0, _arrayJs.slice).call(_) : _), histogram) : threshold;
    };
    return histogram;
}

},{"./array.js":"9A0pE","./bisect.js":"2jqf4","./constant.js":"1EOU8","./extent.js":"bpNTV","./identity.js":"gZYoG","./nice.js":"hx3lC","./ticks.js":"iDfKX","./threshold/sturges.js":"aAePr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9A0pE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "slice", ()=>slice);
parcelHelpers.export(exports, "map", ()=>map);
var array = Array.prototype;
var slice = array.slice;
var map = array.map;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1EOU8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>constant);
function constant(x) {
    return ()=>x;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hx3lC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>nice);
var _ticksJs = require("./ticks.js");
function nice(start, stop, count) {
    let prestep;
    while(true){
        const step = (0, _ticksJs.tickIncrement)(start, stop, count);
        if (step === prestep || step === 0 || !isFinite(step)) return [
            start,
            stop
        ];
        else if (step > 0) {
            start = Math.floor(start / step) * step;
            stop = Math.ceil(stop / step) * step;
        } else if (step < 0) {
            start = Math.ceil(start * step) / step;
            stop = Math.floor(stop * step) / step;
        }
        prestep = step;
    }
}

},{"./ticks.js":"iDfKX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iDfKX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>ticks);
parcelHelpers.export(exports, "tickIncrement", ()=>tickIncrement);
parcelHelpers.export(exports, "tickStep", ()=>tickStep);
const e10 = Math.sqrt(50), e5 = Math.sqrt(10), e2 = Math.sqrt(2);
function tickSpec(start, stop, count) {
    const step = (stop - start) / Math.max(0, count), power = Math.floor(Math.log10(step)), error = step / Math.pow(10, power), factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
    let i1, i2, inc;
    if (power < 0) {
        inc = Math.pow(10, -power) / factor;
        i1 = Math.round(start * inc);
        i2 = Math.round(stop * inc);
        if (i1 / inc < start) ++i1;
        if (i2 / inc > stop) --i2;
        inc = -inc;
    } else {
        inc = Math.pow(10, power) * factor;
        i1 = Math.round(start / inc);
        i2 = Math.round(stop / inc);
        if (i1 * inc < start) ++i1;
        if (i2 * inc > stop) --i2;
    }
    if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);
    return [
        i1,
        i2,
        inc
    ];
}
function ticks(start, stop, count) {
    stop = +stop, start = +start, count = +count;
    if (!(count > 0)) return [];
    if (start === stop) return [
        start
    ];
    const reverse = stop < start, [i1, i2, inc] = reverse ? tickSpec(stop, start, count) : tickSpec(start, stop, count);
    if (!(i2 >= i1)) return [];
    const n = i2 - i1 + 1, ticks = new Array(n);
    if (reverse) {
        if (inc < 0) for(let i = 0; i < n; ++i)ticks[i] = (i2 - i) / -inc;
        else for(let i = 0; i < n; ++i)ticks[i] = (i2 - i) * inc;
    } else {
        if (inc < 0) for(let i = 0; i < n; ++i)ticks[i] = (i1 + i) / -inc;
        else for(let i = 0; i < n; ++i)ticks[i] = (i1 + i) * inc;
    }
    return ticks;
}
function tickIncrement(start, stop, count) {
    stop = +stop, start = +start, count = +count;
    return tickSpec(start, stop, count)[2];
}
function tickStep(start, stop, count) {
    stop = +stop, start = +start, count = +count;
    const reverse = stop < start, inc = reverse ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);
    return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aAePr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>thresholdSturges);
var _countJs = require("../count.js");
var _countJsDefault = parcelHelpers.interopDefault(_countJs);
function thresholdSturges(values) {
    return Math.max(1, Math.ceil(Math.log((0, _countJsDefault.default)(values)) / Math.LN2) + 1);
}

},{"../count.js":"fdcqm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"YzWbd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>thresholdFreedmanDiaconis);
var _countJs = require("../count.js");
var _countJsDefault = parcelHelpers.interopDefault(_countJs);
var _quantileJs = require("../quantile.js");
var _quantileJsDefault = parcelHelpers.interopDefault(_quantileJs);
function thresholdFreedmanDiaconis(values, min, max) {
    const c = (0, _countJsDefault.default)(values), d = (0, _quantileJsDefault.default)(values, 0.75) - (0, _quantileJsDefault.default)(values, 0.25);
    return c && d ? Math.ceil((max - min) / (2 * d * Math.pow(c, -1 / 3))) : 1;
}

},{"../count.js":"fdcqm","../quantile.js":"etiLw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"etiLw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>quantile);
parcelHelpers.export(exports, "quantileSorted", ()=>quantileSorted);
parcelHelpers.export(exports, "quantileIndex", ()=>quantileIndex);
var _maxJs = require("./max.js");
var _maxJsDefault = parcelHelpers.interopDefault(_maxJs);
var _maxIndexJs = require("./maxIndex.js");
var _maxIndexJsDefault = parcelHelpers.interopDefault(_maxIndexJs);
var _minJs = require("./min.js");
var _minJsDefault = parcelHelpers.interopDefault(_minJs);
var _minIndexJs = require("./minIndex.js");
var _minIndexJsDefault = parcelHelpers.interopDefault(_minIndexJs);
var _quickselectJs = require("./quickselect.js");
var _quickselectJsDefault = parcelHelpers.interopDefault(_quickselectJs);
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
var _sortJs = require("./sort.js");
var _greatestJs = require("./greatest.js");
var _greatestJsDefault = parcelHelpers.interopDefault(_greatestJs);
function quantile(values, p, valueof) {
    values = Float64Array.from((0, _numberJs.numbers)(values, valueof));
    if (!(n = values.length) || isNaN(p = +p)) return;
    if (p <= 0 || n < 2) return (0, _minJsDefault.default)(values);
    if (p >= 1) return (0, _maxJsDefault.default)(values);
    var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = (0, _maxJsDefault.default)((0, _quickselectJsDefault.default)(values, i0).subarray(0, i0 + 1)), value1 = (0, _minJsDefault.default)(values.subarray(i0 + 1));
    return value0 + (value1 - value0) * (i - i0);
}
function quantileSorted(values, p, valueof = (0, _numberJsDefault.default)) {
    if (!(n = values.length) || isNaN(p = +p)) return;
    if (p <= 0 || n < 2) return +valueof(values[0], 0, values);
    if (p >= 1) return +valueof(values[n - 1], n - 1, values);
    var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
    return value0 + (value1 - value0) * (i - i0);
}
function quantileIndex(values, p, valueof = (0, _numberJsDefault.default)) {
    if (isNaN(p = +p)) return;
    numbers = Float64Array.from(values, (_, i)=>(0, _numberJsDefault.default)(valueof(values[i], i, values)));
    if (p <= 0) return (0, _minIndexJsDefault.default)(numbers);
    if (p >= 1) return (0, _maxIndexJsDefault.default)(numbers);
    var numbers, index = Uint32Array.from(values, (_, i)=>i), j = numbers.length - 1, i = Math.floor(j * p);
    (0, _quickselectJsDefault.default)(index, i, 0, j, (i, j)=>(0, _sortJs.ascendingDefined)(numbers[i], numbers[j]));
    i = (0, _greatestJsDefault.default)(index.subarray(0, i + 1), (i)=>numbers[i]);
    return i >= 0 ? i : -1;
}

},{"./max.js":"6b1uv","./maxIndex.js":"1pqy7","./min.js":"1KKa7","./minIndex.js":"g6uuQ","./quickselect.js":"4sTUl","./number.js":"imr9T","./sort.js":"ApqXa","./greatest.js":"4LoCm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6b1uv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>max);
function max(values, valueof) {
    let max;
    if (valueof === undefined) {
        for (const value of values)if (value != null && (max < value || max === undefined && value >= value)) max = value;
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (max < value || max === undefined && value >= value)) max = value;
    }
    return max;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1pqy7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>maxIndex);
function maxIndex(values, valueof) {
    let max;
    let maxIndex = -1;
    let index = -1;
    if (valueof === undefined) for (const value of values){
        ++index;
        if (value != null && (max < value || max === undefined && value >= value)) max = value, maxIndex = index;
    }
    else {
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (max < value || max === undefined && value >= value)) max = value, maxIndex = index;
    }
    return maxIndex;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1KKa7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>min);
function min(values, valueof) {
    let min;
    if (valueof === undefined) {
        for (const value of values)if (value != null && (min > value || min === undefined && value >= value)) min = value;
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (min > value || min === undefined && value >= value)) min = value;
    }
    return min;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g6uuQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>minIndex);
function minIndex(values, valueof) {
    let min;
    let minIndex = -1;
    let index = -1;
    if (valueof === undefined) for (const value of values){
        ++index;
        if (value != null && (min > value || min === undefined && value >= value)) min = value, minIndex = index;
    }
    else {
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (min > value || min === undefined && value >= value)) min = value, minIndex = index;
    }
    return minIndex;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4sTUl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>quickselect);
var _sortJs = require("./sort.js");
function quickselect(array, k, left = 0, right = Infinity, compare) {
    k = Math.floor(k);
    left = Math.floor(Math.max(0, left));
    right = Math.floor(Math.min(array.length - 1, right));
    if (!(left <= k && k <= right)) return array;
    compare = compare === undefined ? (0, _sortJs.ascendingDefined) : (0, _sortJs.compareDefined)(compare);
    while(right > left){
        if (right - left > 600) {
            const n = right - left + 1;
            const m = k - left + 1;
            const z = Math.log(n);
            const s = 0.5 * Math.exp(2 * z / 3);
            const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
            const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
            const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
            quickselect(array, k, newLeft, newRight, compare);
        }
        const t = array[k];
        let i = left;
        let j = right;
        swap(array, left, k);
        if (compare(array[right], t) > 0) swap(array, left, right);
        while(i < j){
            swap(array, i, j), ++i, --j;
            while(compare(array[i], t) < 0)++i;
            while(compare(array[j], t) > 0)--j;
        }
        if (compare(array[left], t) === 0) swap(array, left, j);
        else ++j, swap(array, j, right);
        if (j <= k) left = j + 1;
        if (k <= j) right = j - 1;
    }
    return array;
}
function swap(array, i, j) {
    const t = array[i];
    array[i] = array[j];
    array[j] = t;
}

},{"./sort.js":"ApqXa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4LoCm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>greatest);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
function greatest(values, compare = (0, _ascendingJsDefault.default)) {
    let max;
    let defined = false;
    if (compare.length === 1) {
        let maxValue;
        for (const element of values){
            const value = compare(element);
            if (defined ? (0, _ascendingJsDefault.default)(value, maxValue) > 0 : (0, _ascendingJsDefault.default)(value, value) === 0) {
                max = element;
                maxValue = value;
                defined = true;
            }
        }
    } else {
        for (const value of values)if (defined ? compare(value, max) > 0 : compare(value, value) === 0) {
            max = value;
            defined = true;
        }
    }
    return max;
}

},{"./ascending.js":"2iZSL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"84IpX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>thresholdScott);
var _countJs = require("../count.js");
var _countJsDefault = parcelHelpers.interopDefault(_countJs);
var _deviationJs = require("../deviation.js");
var _deviationJsDefault = parcelHelpers.interopDefault(_deviationJs);
function thresholdScott(values, min, max) {
    const c = (0, _countJsDefault.default)(values), d = (0, _deviationJsDefault.default)(values);
    return c && d ? Math.ceil((max - min) * Math.cbrt(c) / (3.49 * d)) : 1;
}

},{"../count.js":"fdcqm","../deviation.js":"2qowT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"diWJS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>mean);
function mean(values, valueof) {
    let count = 0;
    let sum = 0;
    if (valueof === undefined) {
        for (let value of values)if (value != null && (value = +value) >= value) ++count, sum += value;
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) ++count, sum += value;
    }
    if (count) return sum / count;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3NuqZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>median);
parcelHelpers.export(exports, "medianIndex", ()=>medianIndex);
var _quantileJs = require("./quantile.js");
var _quantileJsDefault = parcelHelpers.interopDefault(_quantileJs);
function median(values, valueof) {
    return (0, _quantileJsDefault.default)(values, 0.5, valueof);
}
function medianIndex(values, valueof) {
    return (0, _quantileJs.quantileIndex)(values, 0.5, valueof);
}

},{"./quantile.js":"etiLw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hviMC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>merge);
function* flatten(arrays) {
    for (const array of arrays)yield* array;
}
function merge(arrays) {
    return Array.from(flatten(arrays));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9MNuy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>mode);
var _internmap = require("internmap");
function mode(values, valueof) {
    const counts = new (0, _internmap.InternMap)();
    if (valueof === undefined) {
        for (let value of values)if (value != null && value >= value) counts.set(value, (counts.get(value) || 0) + 1);
    } else {
        let index = -1;
        for (let value of values)if ((value = valueof(value, ++index, values)) != null && value >= value) counts.set(value, (counts.get(value) || 0) + 1);
    }
    let modeValue;
    let modeCount = 0;
    for (const [value, count] of counts)if (count > modeCount) {
        modeCount = count;
        modeValue = value;
    }
    return modeValue;
}

},{"internmap":"a6b0X","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"krmK9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>pairs);
parcelHelpers.export(exports, "pair", ()=>pair);
function pairs(values, pairof = pair) {
    const pairs = [];
    let previous;
    let first = false;
    for (const value of values){
        if (first) pairs.push(pairof(previous, value));
        previous = value;
        first = true;
    }
    return pairs;
}
function pair(a, b) {
    return [
        a,
        b
    ];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kH8Ba":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>range);
function range(start, stop, step) {
    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
    var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range = new Array(n);
    while(++i < n)range[i] = start + i * step;
    return range;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bZOnA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>rank);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _sortJs = require("./sort.js");
function rank(values, valueof = (0, _ascendingJsDefault.default)) {
    if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
    let V = Array.from(values);
    const R = new Float64Array(V.length);
    if (valueof.length !== 2) V = V.map(valueof), valueof = (0, _ascendingJsDefault.default);
    const compareIndex = (i, j)=>valueof(V[i], V[j]);
    let k, r;
    values = Uint32Array.from(V, (_, i)=>i);
    // Risky chaining due to Safari 14 https://github.com/d3/d3-array/issues/123
    values.sort(valueof === (0, _ascendingJsDefault.default) ? (i, j)=>(0, _sortJs.ascendingDefined)(V[i], V[j]) : (0, _sortJs.compareDefined)(compareIndex));
    values.forEach((j, i)=>{
        const c = compareIndex(j, k === undefined ? j : k);
        if (c >= 0) {
            if (k === undefined || c > 0) k = j, r = i;
            R[j] = r;
        } else R[j] = NaN;
    });
    return R;
}

},{"./ascending.js":"2iZSL","./sort.js":"ApqXa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"69Q1F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>least);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
function least(values, compare = (0, _ascendingJsDefault.default)) {
    let min;
    let defined = false;
    if (compare.length === 1) {
        let minValue;
        for (const element of values){
            const value = compare(element);
            if (defined ? (0, _ascendingJsDefault.default)(value, minValue) < 0 : (0, _ascendingJsDefault.default)(value, value) === 0) {
                min = element;
                minValue = value;
                defined = true;
            }
        }
    } else {
        for (const value of values)if (defined ? compare(value, min) < 0 : compare(value, value) === 0) {
            min = value;
            defined = true;
        }
    }
    return min;
}

},{"./ascending.js":"2iZSL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9vype":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>leastIndex);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _minIndexJs = require("./minIndex.js");
var _minIndexJsDefault = parcelHelpers.interopDefault(_minIndexJs);
function leastIndex(values, compare = (0, _ascendingJsDefault.default)) {
    if (compare.length === 1) return (0, _minIndexJsDefault.default)(values, compare);
    let minValue;
    let min = -1;
    let index = -1;
    for (const value of values){
        ++index;
        if (min < 0 ? compare(value, value) === 0 : compare(value, minValue) < 0) {
            minValue = value;
            min = index;
        }
    }
    return min;
}

},{"./ascending.js":"2iZSL","./minIndex.js":"g6uuQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lg7Xr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>greatestIndex);
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _maxIndexJs = require("./maxIndex.js");
var _maxIndexJsDefault = parcelHelpers.interopDefault(_maxIndexJs);
function greatestIndex(values, compare = (0, _ascendingJsDefault.default)) {
    if (compare.length === 1) return (0, _maxIndexJsDefault.default)(values, compare);
    let maxValue;
    let max = -1;
    let index = -1;
    for (const value of values){
        ++index;
        if (max < 0 ? compare(value, value) === 0 : compare(value, maxValue) > 0) {
            maxValue = value;
            max = index;
        }
    }
    return max;
}

},{"./ascending.js":"2iZSL","./maxIndex.js":"1pqy7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cKBNL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>scan);
var _leastIndexJs = require("./leastIndex.js");
var _leastIndexJsDefault = parcelHelpers.interopDefault(_leastIndexJs);
function scan(values, compare) {
    const index = (0, _leastIndexJsDefault.default)(values, compare);
    return index < 0 ? undefined : index;
}

},{"./leastIndex.js":"9vype","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iaAC9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "shuffler", ()=>shuffler);
exports.default = shuffler(Math.random);
function shuffler(random) {
    return function shuffle(array, i0 = 0, i1 = array.length) {
        let m = i1 - (i0 = +i0);
        while(m){
            const i = random() * m-- | 0, t = array[m + i0];
            array[m + i0] = array[i + i0];
            array[i + i0] = t;
        }
        return array;
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"47K1s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>sum);
function sum(values, valueof) {
    let sum = 0;
    if (valueof === undefined) {
        for (let value of values)if (value = +value) sum += value;
    } else {
        let index = -1;
        for (let value of values)if (value = +valueof(value, ++index, values)) sum += value;
    }
    return sum;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jO6XX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>transpose);
var _minJs = require("./min.js");
var _minJsDefault = parcelHelpers.interopDefault(_minJs);
function transpose(matrix) {
    if (!(n = matrix.length)) return [];
    for(var i = -1, m = (0, _minJsDefault.default)(matrix, length), transpose = new Array(m); ++i < m;)for(var j = -1, n, row = transpose[i] = new Array(n); ++j < n;)row[j] = matrix[j][i];
    return transpose;
}
function length(d) {
    return d.length;
}

},{"./min.js":"1KKa7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8wbOt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>zip);
var _transposeJs = require("./transpose.js");
var _transposeJsDefault = parcelHelpers.interopDefault(_transposeJs);
function zip() {
    return (0, _transposeJsDefault.default)(arguments);
}

},{"./transpose.js":"jO6XX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"87TIV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>every);
function every(values, test) {
    if (typeof test !== "function") throw new TypeError("test is not a function");
    let index = -1;
    for (const value of values){
        if (!test(value, ++index, values)) return false;
    }
    return true;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1GQIB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>some);
function some(values, test) {
    if (typeof test !== "function") throw new TypeError("test is not a function");
    let index = -1;
    for (const value of values){
        if (test(value, ++index, values)) return true;
    }
    return false;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lrcfK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>filter);
function filter(values, test) {
    if (typeof test !== "function") throw new TypeError("test is not a function");
    const array = [];
    let index = -1;
    for (const value of values)if (test(value, ++index, values)) array.push(value);
    return array;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"x1FBS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>map);
function map(values, mapper) {
    if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
    if (typeof mapper !== "function") throw new TypeError("mapper is not a function");
    return Array.from(values, (value, index)=>mapper(value, index, values));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Dobh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>reduce);
function reduce(values, reducer, value) {
    if (typeof reducer !== "function") throw new TypeError("reducer is not a function");
    const iterator = values[Symbol.iterator]();
    let done, next, index = -1;
    if (arguments.length < 3) {
        ({ done, value } = iterator.next());
        if (done) return;
        ++index;
    }
    while({ done, value: next } = iterator.next(), !done)value = reducer(value, next, ++index, values);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hee4j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>reverse);
function reverse(values) {
    if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
    return Array.from(values).reverse();
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l43vv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>difference);
var _internmap = require("internmap");
function difference(values, ...others) {
    values = new (0, _internmap.InternSet)(values);
    for (const other of others)for (const value of other)values.delete(value);
    return values;
}

},{"internmap":"a6b0X","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jrbsK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>disjoint);
var _internmap = require("internmap");
function disjoint(values, other) {
    const iterator = other[Symbol.iterator](), set = new (0, _internmap.InternSet)();
    for (const v of values){
        if (set.has(v)) return false;
        let value, done;
        while({ value, done } = iterator.next()){
            if (done) break;
            if (Object.is(v, value)) return false;
            set.add(value);
        }
    }
    return true;
}

},{"internmap":"a6b0X","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cBy6r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>intersection);
var _internmap = require("internmap");
function intersection(values, ...others) {
    values = new (0, _internmap.InternSet)(values);
    others = others.map(set);
    out: for (const value of values){
        for (const other of others)if (!other.has(value)) {
            values.delete(value);
            continue out;
        }
    }
    return values;
}
function set(values) {
    return values instanceof (0, _internmap.InternSet) ? values : new (0, _internmap.InternSet)(values);
}

},{"internmap":"a6b0X","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"32tt1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>subset);
var _supersetJs = require("./superset.js");
var _supersetJsDefault = parcelHelpers.interopDefault(_supersetJs);
function subset(values, other) {
    return (0, _supersetJsDefault.default)(other, values);
}

},{"./superset.js":"l8AhK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l8AhK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>superset);
function superset(values, other) {
    const iterator = values[Symbol.iterator](), set = new Set();
    for (const o of other){
        const io = intern(o);
        if (set.has(io)) continue;
        let value, done;
        while({ value, done } = iterator.next()){
            if (done) return false;
            const ivalue = intern(value);
            set.add(ivalue);
            if (Object.is(io, ivalue)) break;
        }
    }
    return true;
}
function intern(value) {
    return value !== null && typeof value === "object" ? value.valueOf() : value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"80KgN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>union);
var _internmap = require("internmap");
function union(...others) {
    const set = new (0, _internmap.InternSet)();
    for (const other of others)for (const o of other)set.add(o);
    return set;
}

},{"internmap":"a6b0X","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2g6gM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "axisTop", ()=>(0, _axisJs.axisTop));
parcelHelpers.export(exports, "axisRight", ()=>(0, _axisJs.axisRight));
parcelHelpers.export(exports, "axisBottom", ()=>(0, _axisJs.axisBottom));
parcelHelpers.export(exports, "axisLeft", ()=>(0, _axisJs.axisLeft));
var _axisJs = require("./axis.js");

},{"./axis.js":"lwARn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lwARn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "axisTop", ()=>axisTop);
parcelHelpers.export(exports, "axisRight", ()=>axisRight);
parcelHelpers.export(exports, "axisBottom", ()=>axisBottom);
parcelHelpers.export(exports, "axisLeft", ()=>axisLeft);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var top = 1, right = 2, bottom = 3, left = 4, epsilon = 1e-6;
function translateX(x) {
    return "translate(" + x + ",0)";
}
function translateY(y) {
    return "translate(0," + y + ")";
}
function number(scale) {
    return (d)=>+scale(d);
}
function center(scale, offset) {
    offset = Math.max(0, scale.bandwidth() - offset * 2) / 2;
    if (scale.round()) offset = Math.round(offset);
    return (d)=>+scale(d) + offset;
}
function entering() {
    return !this.__axis;
}
function axis(orient, scale) {
    var tickArguments = [], tickValues = null, tickFormat = null, tickSizeInner = 6, tickSizeOuter = 6, tickPadding = 3, offset = typeof window !== "undefined" && window.devicePixelRatio > 1 ? 0 : 0.5, k = orient === top || orient === left ? -1 : 1, x = orient === left || orient === right ? "x" : "y", transform = orient === top || orient === bottom ? translateX : translateY;
    function axis(context) {
        var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues, format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : (0, _identityJsDefault.default) : tickFormat, spacing = Math.max(tickSizeInner, 0) + tickPadding, range = scale.range(), range0 = +range[0] + offset, range1 = +range[range.length - 1] + offset, position = (scale.bandwidth ? center : number)(scale.copy(), offset), selection = context.selection ? context.selection() : context, path = selection.selectAll(".domain").data([
            null
        ]), tick = selection.selectAll(".tick").data(values, scale).order(), tickExit = tick.exit(), tickEnter = tick.enter().append("g").attr("class", "tick"), line = tick.select("line"), text = tick.select("text");
        path = path.merge(path.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
        tick = tick.merge(tickEnter);
        line = line.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x + "2", k * tickSizeInner));
        text = text.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x, k * spacing).attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));
        if (context !== selection) {
            path = path.transition(context);
            tick = tick.transition(context);
            line = line.transition(context);
            text = text.transition(context);
            tickExit = tickExit.transition(context).attr("opacity", epsilon).attr("transform", function(d) {
                return isFinite(d = position(d)) ? transform(d + offset) : this.getAttribute("transform");
            });
            tickEnter.attr("opacity", epsilon).attr("transform", function(d) {
                var p = this.parentNode.__axis;
                return transform((p && isFinite(p = p(d)) ? p : position(d)) + offset);
            });
        }
        tickExit.remove();
        path.attr("d", orient === left || orient === right ? tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H" + offset + "V" + range1 + "H" + k * tickSizeOuter : "M" + offset + "," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V" + offset + "H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + "," + offset + "H" + range1);
        tick.attr("opacity", 1).attr("transform", function(d) {
            return transform(position(d) + offset);
        });
        line.attr(x + "2", k * tickSizeInner);
        text.attr(x, k * spacing).text(format);
        selection.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
        selection.each(function() {
            this.__axis = position;
        });
    }
    axis.scale = function(_) {
        return arguments.length ? (scale = _, axis) : scale;
    };
    axis.ticks = function() {
        return tickArguments = Array.from(arguments), axis;
    };
    axis.tickArguments = function(_) {
        return arguments.length ? (tickArguments = _ == null ? [] : Array.from(_), axis) : tickArguments.slice();
    };
    axis.tickValues = function(_) {
        return arguments.length ? (tickValues = _ == null ? null : Array.from(_), axis) : tickValues && tickValues.slice();
    };
    axis.tickFormat = function(_) {
        return arguments.length ? (tickFormat = _, axis) : tickFormat;
    };
    axis.tickSize = function(_) {
        return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
    };
    axis.tickSizeInner = function(_) {
        return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
    };
    axis.tickSizeOuter = function(_) {
        return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
    };
    axis.tickPadding = function(_) {
        return arguments.length ? (tickPadding = +_, axis) : tickPadding;
    };
    axis.offset = function(_) {
        return arguments.length ? (offset = +_, axis) : offset;
    };
    return axis;
}
function axisTop(scale) {
    return axis(top, scale);
}
function axisRight(scale) {
    return axis(right, scale);
}
function axisBottom(scale) {
    return axis(bottom, scale);
}
function axisLeft(scale) {
    return axis(left, scale);
}

},{"./identity.js":"aXZUf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aXZUf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(x) {
        return x;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7TG1H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "brush", ()=>(0, _brushJsDefault.default));
parcelHelpers.export(exports, "brushX", ()=>(0, _brushJs.brushX));
parcelHelpers.export(exports, "brushY", ()=>(0, _brushJs.brushY));
parcelHelpers.export(exports, "brushSelection", ()=>(0, _brushJs.brushSelection));
var _brushJs = require("./brush.js");
var _brushJsDefault = parcelHelpers.interopDefault(_brushJs);

},{"./brush.js":"7XkAB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7XkAB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "brushSelection", ()=>brushSelection);
parcelHelpers.export(exports, "brushX", ()=>brushX);
parcelHelpers.export(exports, "brushY", ()=>brushY);
parcelHelpers.export(exports, "default", ()=>function() {
        return brush(XY);
    });
var _d3Dispatch = require("d3-dispatch");
var _d3Drag = require("d3-drag");
var _d3Interpolate = require("d3-interpolate");
var _d3Selection = require("d3-selection");
var _d3Transition = require("d3-transition");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _eventJs = require("./event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var _noeventJs = require("./noevent.js");
var _noeventJsDefault = parcelHelpers.interopDefault(_noeventJs);
var MODE_DRAG = {
    name: "drag"
}, MODE_SPACE = {
    name: "space"
}, MODE_HANDLE = {
    name: "handle"
}, MODE_CENTER = {
    name: "center"
};
const { abs, max, min } = Math;
function number1(e) {
    return [
        +e[0],
        +e[1]
    ];
}
function number2(e) {
    return [
        number1(e[0]),
        number1(e[1])
    ];
}
var X = {
    name: "x",
    handles: [
        "w",
        "e"
    ].map(type),
    input: function(x, e) {
        return x == null ? null : [
            [
                +x[0],
                e[0][1]
            ],
            [
                +x[1],
                e[1][1]
            ]
        ];
    },
    output: function(xy) {
        return xy && [
            xy[0][0],
            xy[1][0]
        ];
    }
};
var Y = {
    name: "y",
    handles: [
        "n",
        "s"
    ].map(type),
    input: function(y, e) {
        return y == null ? null : [
            [
                e[0][0],
                +y[0]
            ],
            [
                e[1][0],
                +y[1]
            ]
        ];
    },
    output: function(xy) {
        return xy && [
            xy[0][1],
            xy[1][1]
        ];
    }
};
var XY = {
    name: "xy",
    handles: [
        "n",
        "w",
        "e",
        "s",
        "nw",
        "ne",
        "sw",
        "se"
    ].map(type),
    input: function(xy) {
        return xy == null ? null : number2(xy);
    },
    output: function(xy) {
        return xy;
    }
};
var cursors = {
    overlay: "crosshair",
    selection: "move",
    n: "ns-resize",
    e: "ew-resize",
    s: "ns-resize",
    w: "ew-resize",
    nw: "nwse-resize",
    ne: "nesw-resize",
    se: "nwse-resize",
    sw: "nesw-resize"
};
var flipX = {
    e: "w",
    w: "e",
    nw: "ne",
    ne: "nw",
    se: "sw",
    sw: "se"
};
var flipY = {
    n: "s",
    s: "n",
    nw: "sw",
    ne: "se",
    se: "ne",
    sw: "nw"
};
var signsX = {
    overlay: 1,
    selection: 1,
    n: null,
    e: 1,
    s: null,
    w: -1,
    nw: -1,
    ne: 1,
    se: 1,
    sw: -1
};
var signsY = {
    overlay: 1,
    selection: 1,
    n: -1,
    e: null,
    s: 1,
    w: null,
    nw: -1,
    ne: -1,
    se: 1,
    sw: 1
};
function type(t) {
    return {
        type: t
    };
}
// Ignore right-click, since that should open the context menu.
function defaultFilter(event) {
    return !event.ctrlKey && !event.button;
}
function defaultExtent() {
    var svg = this.ownerSVGElement || this;
    if (svg.hasAttribute("viewBox")) {
        svg = svg.viewBox.baseVal;
        return [
            [
                svg.x,
                svg.y
            ],
            [
                svg.x + svg.width,
                svg.y + svg.height
            ]
        ];
    }
    return [
        [
            0,
            0
        ],
        [
            svg.width.baseVal.value,
            svg.height.baseVal.value
        ]
    ];
}
function defaultTouchable() {
    return navigator.maxTouchPoints || "ontouchstart" in this;
}
// Like d3.local, but with the name “__brush” rather than auto-generated.
function local(node) {
    while(!node.__brush)if (!(node = node.parentNode)) return;
    return node.__brush;
}
function empty(extent) {
    return extent[0][0] === extent[1][0] || extent[0][1] === extent[1][1];
}
function brushSelection(node) {
    var state = node.__brush;
    return state ? state.dim.output(state.selection) : null;
}
function brushX() {
    return brush(X);
}
function brushY() {
    return brush(Y);
}
function brush(dim) {
    var extent = defaultExtent, filter = defaultFilter, touchable = defaultTouchable, keys = true, listeners = (0, _d3Dispatch.dispatch)("start", "brush", "end"), handleSize = 6, touchending;
    function brush(group) {
        var overlay = group.property("__brush", initialize).selectAll(".overlay").data([
            type("overlay")
        ]);
        overlay.enter().append("rect").attr("class", "overlay").attr("pointer-events", "all").attr("cursor", cursors.overlay).merge(overlay).each(function() {
            var extent = local(this).extent;
            (0, _d3Selection.select)(this).attr("x", extent[0][0]).attr("y", extent[0][1]).attr("width", extent[1][0] - extent[0][0]).attr("height", extent[1][1] - extent[0][1]);
        });
        group.selectAll(".selection").data([
            type("selection")
        ]).enter().append("rect").attr("class", "selection").attr("cursor", cursors.selection).attr("fill", "#777").attr("fill-opacity", 0.3).attr("stroke", "#fff").attr("shape-rendering", "crispEdges");
        var handle = group.selectAll(".handle").data(dim.handles, function(d) {
            return d.type;
        });
        handle.exit().remove();
        handle.enter().append("rect").attr("class", function(d) {
            return "handle handle--" + d.type;
        }).attr("cursor", function(d) {
            return cursors[d.type];
        });
        group.each(redraw).attr("fill", "none").attr("pointer-events", "all").on("mousedown.brush", started).filter(touchable).on("touchstart.brush", started).on("touchmove.brush", touchmoved).on("touchend.brush touchcancel.brush", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }
    brush.move = function(group, selection, event) {
        if (group.tween) group.on("start.brush", function(event) {
            emitter(this, arguments).beforestart().start(event);
        }).on("interrupt.brush end.brush", function(event) {
            emitter(this, arguments).end(event);
        }).tween("brush", function() {
            var that = this, state = that.__brush, emit = emitter(that, arguments), selection0 = state.selection, selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent), i = (0, _d3Interpolate.interpolate)(selection0, selection1);
            function tween(t) {
                state.selection = t === 1 && selection1 === null ? null : i(t);
                redraw.call(that);
                emit.brush();
            }
            return selection0 !== null && selection1 !== null ? tween : tween(1);
        });
        else group.each(function() {
            var that = this, args = arguments, state = that.__brush, selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent), emit = emitter(that, args).beforestart();
            (0, _d3Transition.interrupt)(that);
            state.selection = selection1 === null ? null : selection1;
            redraw.call(that);
            emit.start(event).brush(event).end(event);
        });
    };
    brush.clear = function(group, event) {
        brush.move(group, null, event);
    };
    function redraw() {
        var group = (0, _d3Selection.select)(this), selection = local(this).selection;
        if (selection) {
            group.selectAll(".selection").style("display", null).attr("x", selection[0][0]).attr("y", selection[0][1]).attr("width", selection[1][0] - selection[0][0]).attr("height", selection[1][1] - selection[0][1]);
            group.selectAll(".handle").style("display", null).attr("x", function(d) {
                return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2;
            }).attr("y", function(d) {
                return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2;
            }).attr("width", function(d) {
                return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize;
            }).attr("height", function(d) {
                return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize;
            });
        } else group.selectAll(".selection,.handle").style("display", "none").attr("x", null).attr("y", null).attr("width", null).attr("height", null);
    }
    function emitter(that, args, clean) {
        var emit = that.__brush.emitter;
        return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);
    }
    function Emitter(that, args, clean) {
        this.that = that;
        this.args = args;
        this.state = that.__brush;
        this.active = 0;
        this.clean = clean;
    }
    Emitter.prototype = {
        beforestart: function() {
            if (++this.active === 1) this.state.emitter = this, this.starting = true;
            return this;
        },
        start: function(event, mode) {
            if (this.starting) this.starting = false, this.emit("start", event, mode);
            else this.emit("brush", event);
            return this;
        },
        brush: function(event, mode) {
            this.emit("brush", event, mode);
            return this;
        },
        end: function(event, mode) {
            if (--this.active === 0) delete this.state.emitter, this.emit("end", event, mode);
            return this;
        },
        emit: function(type, event, mode) {
            var d = (0, _d3Selection.select)(this.that).datum();
            listeners.call(type, this.that, new (0, _eventJsDefault.default)(type, {
                sourceEvent: event,
                target: brush,
                selection: dim.output(this.state.selection),
                mode,
                dispatch: listeners
            }), d);
        }
    };
    function started(event) {
        if (touchending && !event.touches) return;
        if (!filter.apply(this, arguments)) return;
        var that = this, type = event.target.__data__.type, mode = (keys && event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : keys && event.altKey ? MODE_CENTER : MODE_HANDLE, signX = dim === Y ? null : signsX[type], signY = dim === X ? null : signsY[type], state = local(that), extent = state.extent, selection = state.selection, W = extent[0][0], w0, w1, N = extent[0][1], n0, n1, E = extent[1][0], e0, e1, S = extent[1][1], s0, s1, dx = 0, dy = 0, moving, shifting = signX && signY && keys && event.shiftKey, lockX, lockY, points = Array.from(event.touches || [
            event
        ], (t)=>{
            const i = t.identifier;
            t = (0, _d3Selection.pointer)(t, that);
            t.point0 = t.slice();
            t.identifier = i;
            return t;
        });
        (0, _d3Transition.interrupt)(that);
        var emit = emitter(that, arguments, true).beforestart();
        if (type === "overlay") {
            if (selection) moving = true;
            const pts = [
                points[0],
                points[1] || points[0]
            ];
            state.selection = selection = [
                [
                    w0 = dim === Y ? W : min(pts[0][0], pts[1][0]),
                    n0 = dim === X ? N : min(pts[0][1], pts[1][1])
                ],
                [
                    e0 = dim === Y ? E : max(pts[0][0], pts[1][0]),
                    s0 = dim === X ? S : max(pts[0][1], pts[1][1])
                ]
            ];
            if (points.length > 1) move(event);
        } else {
            w0 = selection[0][0];
            n0 = selection[0][1];
            e0 = selection[1][0];
            s0 = selection[1][1];
        }
        w1 = w0;
        n1 = n0;
        e1 = e0;
        s1 = s0;
        var group = (0, _d3Selection.select)(that).attr("pointer-events", "none");
        var overlay = group.selectAll(".overlay").attr("cursor", cursors[type]);
        if (event.touches) {
            emit.moved = moved;
            emit.ended = ended;
        } else {
            var view = (0, _d3Selection.select)(event.view).on("mousemove.brush", moved, true).on("mouseup.brush", ended, true);
            if (keys) view.on("keydown.brush", keydowned, true).on("keyup.brush", keyupped, true);
            (0, _d3Drag.dragDisable)(event.view);
        }
        redraw.call(that);
        emit.start(event, mode.name);
        function moved(event) {
            for (const p of event.changedTouches || [
                event
            ]){
                for (const d of points)if (d.identifier === p.identifier) d.cur = (0, _d3Selection.pointer)(p, that);
            }
            if (shifting && !lockX && !lockY && points.length === 1) {
                const point = points[0];
                if (abs(point.cur[0] - point[0]) > abs(point.cur[1] - point[1])) lockY = true;
                else lockX = true;
            }
            for (const point of points)if (point.cur) point[0] = point.cur[0], point[1] = point.cur[1];
            moving = true;
            (0, _noeventJsDefault.default)(event);
            move(event);
        }
        function move(event) {
            const point = points[0], point0 = point.point0;
            var t;
            dx = point[0] - point0[0];
            dy = point[1] - point0[1];
            switch(mode){
                case MODE_SPACE:
                case MODE_DRAG:
                    if (signX) dx = max(W - w0, min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
                    if (signY) dy = max(N - n0, min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
                    break;
                case MODE_HANDLE:
                    if (points[1]) {
                        if (signX) w1 = max(W, min(E, points[0][0])), e1 = max(W, min(E, points[1][0])), signX = 1;
                        if (signY) n1 = max(N, min(S, points[0][1])), s1 = max(N, min(S, points[1][1])), signY = 1;
                    } else {
                        if (signX < 0) dx = max(W - w0, min(E - w0, dx)), w1 = w0 + dx, e1 = e0;
                        else if (signX > 0) dx = max(W - e0, min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
                        if (signY < 0) dy = max(N - n0, min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
                        else if (signY > 0) dy = max(N - s0, min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
                    }
                    break;
                case MODE_CENTER:
                    if (signX) w1 = max(W, min(E, w0 - dx * signX)), e1 = max(W, min(E, e0 + dx * signX));
                    if (signY) n1 = max(N, min(S, n0 - dy * signY)), s1 = max(N, min(S, s0 + dy * signY));
                    break;
            }
            if (e1 < w1) {
                signX *= -1;
                t = w0, w0 = e0, e0 = t;
                t = w1, w1 = e1, e1 = t;
                if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
            }
            if (s1 < n1) {
                signY *= -1;
                t = n0, n0 = s0, s0 = t;
                t = n1, n1 = s1, s1 = t;
                if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
            }
            if (state.selection) selection = state.selection; // May be set by brush.move!
            if (lockX) w1 = selection[0][0], e1 = selection[1][0];
            if (lockY) n1 = selection[0][1], s1 = selection[1][1];
            if (selection[0][0] !== w1 || selection[0][1] !== n1 || selection[1][0] !== e1 || selection[1][1] !== s1) {
                state.selection = [
                    [
                        w1,
                        n1
                    ],
                    [
                        e1,
                        s1
                    ]
                ];
                redraw.call(that);
                emit.brush(event, mode.name);
            }
        }
        function ended(event) {
            (0, _noeventJs.nopropagation)(event);
            if (event.touches) {
                if (event.touches.length) return;
                if (touchending) clearTimeout(touchending);
                touchending = setTimeout(function() {
                    touchending = null;
                }, 500); // Ghost clicks are delayed!
            } else {
                (0, _d3Drag.dragEnable)(event.view, moving);
                view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
            }
            group.attr("pointer-events", "all");
            overlay.attr("cursor", cursors.overlay);
            if (state.selection) selection = state.selection; // May be set by brush.move (on start)!
            if (empty(selection)) state.selection = null, redraw.call(that);
            emit.end(event, mode.name);
        }
        function keydowned(event) {
            switch(event.keyCode){
                case 16:
                    shifting = signX && signY;
                    break;
                case 18:
                    if (mode === MODE_HANDLE) {
                        if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                        if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                        mode = MODE_CENTER;
                        move(event);
                    }
                    break;
                case 32:
                    if (mode === MODE_HANDLE || mode === MODE_CENTER) {
                        if (signX < 0) e0 = e1 - dx;
                        else if (signX > 0) w0 = w1 - dx;
                        if (signY < 0) s0 = s1 - dy;
                        else if (signY > 0) n0 = n1 - dy;
                        mode = MODE_SPACE;
                        overlay.attr("cursor", cursors.selection);
                        move(event);
                    }
                    break;
                default:
                    return;
            }
            (0, _noeventJsDefault.default)(event);
        }
        function keyupped(event) {
            switch(event.keyCode){
                case 16:
                    if (shifting) {
                        lockX = lockY = shifting = false;
                        move(event);
                    }
                    break;
                case 18:
                    if (mode === MODE_CENTER) {
                        if (signX < 0) e0 = e1;
                        else if (signX > 0) w0 = w1;
                        if (signY < 0) s0 = s1;
                        else if (signY > 0) n0 = n1;
                        mode = MODE_HANDLE;
                        move(event);
                    }
                    break;
                case 32:
                    if (mode === MODE_SPACE) {
                        if (event.altKey) {
                            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
                            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
                            mode = MODE_CENTER;
                        } else {
                            if (signX < 0) e0 = e1;
                            else if (signX > 0) w0 = w1;
                            if (signY < 0) s0 = s1;
                            else if (signY > 0) n0 = n1;
                            mode = MODE_HANDLE;
                        }
                        overlay.attr("cursor", cursors[type]);
                        move(event);
                    }
                    break;
                default:
                    return;
            }
            (0, _noeventJsDefault.default)(event);
        }
    }
    function touchmoved(event) {
        emitter(this, arguments).moved(event);
    }
    function touchended(event) {
        emitter(this, arguments).ended(event);
    }
    function initialize() {
        var state = this.__brush || {
            selection: null
        };
        state.extent = number2(extent.apply(this, arguments));
        state.dim = dim;
        return state;
    }
    brush.extent = function(_) {
        return arguments.length ? (extent = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(number2(_)), brush) : extent;
    };
    brush.filter = function(_) {
        return arguments.length ? (filter = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(!!_), brush) : filter;
    };
    brush.touchable = function(_) {
        return arguments.length ? (touchable = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(!!_), brush) : touchable;
    };
    brush.handleSize = function(_) {
        return arguments.length ? (handleSize = +_, brush) : handleSize;
    };
    brush.keyModifiers = function(_) {
        return arguments.length ? (keys = !!_, brush) : keys;
    };
    brush.on = function() {
        var value = listeners.on.apply(listeners, arguments);
        return value === listeners ? brush : value;
    };
    return brush;
}

},{"d3-dispatch":"5WtHO","d3-drag":"hGy7N","d3-interpolate":"6jJyi","d3-selection":"gn9gd","d3-transition":"4lorl","./constant.js":"fmgIQ","./event.js":"6f6C1","./noevent.js":"cozwm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5WtHO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dispatch", ()=>(0, _dispatchJsDefault.default));
var _dispatchJs = require("./dispatch.js");
var _dispatchJsDefault = parcelHelpers.interopDefault(_dispatchJs);

},{"./dispatch.js":"8Hmyd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Hmyd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var noop = {
    value: ()=>{}
};
function dispatch() {
    for(var i = 0, n = arguments.length, _ = {}, t; i < n; ++i){
        if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
        _[t] = [];
    }
    return new Dispatch(_);
}
function Dispatch(_) {
    this._ = _;
}
function parseTypenames(typenames, types) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
        return {
            type: t,
            name: name
        };
    });
}
Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    on: function(typename, callback) {
        var _ = this._, T = parseTypenames(typename + "", _), t, i = -1, n = T.length;
        // If no callback was specified, return the callback of the given type and name.
        if (arguments.length < 2) {
            while(++i < n)if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
            return;
        }
        // If a type was specified, set the callback for the given type and name.
        // Otherwise, if a null callback was specified, remove callbacks of the given name.
        if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
        while(++i < n){
            if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
            else if (callback == null) for(t in _)_[t] = set(_[t], typename.name, null);
        }
        return this;
    },
    copy: function() {
        var copy = {}, _ = this._;
        for(var t in _)copy[t] = _[t].slice();
        return new Dispatch(copy);
    },
    call: function(type, that) {
        if ((n = arguments.length - 2) > 0) for(var args = new Array(n), i = 0, n, t; i < n; ++i)args[i] = arguments[i + 2];
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for(t = this._[type], i = 0, n = t.length; i < n; ++i)t[i].value.apply(that, args);
    },
    apply: function(type, that, args) {
        if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
        for(var t = this._[type], i = 0, n = t.length; i < n; ++i)t[i].value.apply(that, args);
    }
};
function get(type, name) {
    for(var i = 0, n = type.length, c; i < n; ++i){
        if ((c = type[i]).name === name) return c.value;
    }
}
function set(type, name, callback) {
    for(var i = 0, n = type.length; i < n; ++i)if (type[i].name === name) {
        type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
        break;
    }
    if (callback != null) type.push({
        name: name,
        value: callback
    });
    return type;
}
exports.default = dispatch;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hGy7N":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "drag", ()=>(0, _dragJsDefault.default));
parcelHelpers.export(exports, "dragDisable", ()=>(0, _nodragJsDefault.default));
parcelHelpers.export(exports, "dragEnable", ()=>(0, _nodragJs.yesdrag));
var _dragJs = require("./drag.js");
var _dragJsDefault = parcelHelpers.interopDefault(_dragJs);
var _nodragJs = require("./nodrag.js");
var _nodragJsDefault = parcelHelpers.interopDefault(_nodragJs);

},{"./drag.js":false,"./nodrag.js":"la87z","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"la87z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(view) {
        var root = view.document.documentElement, selection = (0, _d3Selection.select)(view).on("dragstart.drag", (0, _noeventJsDefault.default), (0, _noeventJs.nonpassivecapture));
        if ("onselectstart" in root) selection.on("selectstart.drag", (0, _noeventJsDefault.default), (0, _noeventJs.nonpassivecapture));
        else {
            root.__noselect = root.style.MozUserSelect;
            root.style.MozUserSelect = "none";
        }
    });
parcelHelpers.export(exports, "yesdrag", ()=>yesdrag);
var _d3Selection = require("d3-selection");
var _noeventJs = require("./noevent.js");
var _noeventJsDefault = parcelHelpers.interopDefault(_noeventJs);
function yesdrag(view, noclick) {
    var root = view.document.documentElement, selection = (0, _d3Selection.select)(view).on("dragstart.drag", null);
    if (noclick) {
        selection.on("click.drag", (0, _noeventJsDefault.default), (0, _noeventJs.nonpassivecapture));
        setTimeout(function() {
            selection.on("click.drag", null);
        }, 0);
    }
    if ("onselectstart" in root) selection.on("selectstart.drag", null);
    else {
        root.style.MozUserSelect = root.__noselect;
        delete root.__noselect;
    }
}

},{"d3-selection":"gn9gd","./noevent.js":"chHoc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gn9gd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "create", ()=>(0, _createJsDefault.default));
parcelHelpers.export(exports, "creator", ()=>(0, _creatorJsDefault.default));
parcelHelpers.export(exports, "local", ()=>(0, _localJsDefault.default));
parcelHelpers.export(exports, "matcher", ()=>(0, _matcherJsDefault.default));
parcelHelpers.export(exports, "namespace", ()=>(0, _namespaceJsDefault.default));
parcelHelpers.export(exports, "namespaces", ()=>(0, _namespacesJsDefault.default));
parcelHelpers.export(exports, "pointer", ()=>(0, _pointerJsDefault.default));
parcelHelpers.export(exports, "pointers", ()=>(0, _pointersJsDefault.default));
parcelHelpers.export(exports, "select", ()=>(0, _selectJsDefault.default));
parcelHelpers.export(exports, "selectAll", ()=>(0, _selectAllJsDefault.default));
parcelHelpers.export(exports, "selection", ()=>(0, _indexJsDefault.default));
parcelHelpers.export(exports, "selector", ()=>(0, _selectorJsDefault.default));
parcelHelpers.export(exports, "selectorAll", ()=>(0, _selectorAllJsDefault.default));
parcelHelpers.export(exports, "style", ()=>(0, _styleJs.styleValue));
parcelHelpers.export(exports, "window", ()=>(0, _windowJsDefault.default));
var _createJs = require("./create.js");
var _createJsDefault = parcelHelpers.interopDefault(_createJs);
var _creatorJs = require("./creator.js");
var _creatorJsDefault = parcelHelpers.interopDefault(_creatorJs);
var _localJs = require("./local.js");
var _localJsDefault = parcelHelpers.interopDefault(_localJs);
var _matcherJs = require("./matcher.js");
var _matcherJsDefault = parcelHelpers.interopDefault(_matcherJs);
var _namespaceJs = require("./namespace.js");
var _namespaceJsDefault = parcelHelpers.interopDefault(_namespaceJs);
var _namespacesJs = require("./namespaces.js");
var _namespacesJsDefault = parcelHelpers.interopDefault(_namespacesJs);
var _pointerJs = require("./pointer.js");
var _pointerJsDefault = parcelHelpers.interopDefault(_pointerJs);
var _pointersJs = require("./pointers.js");
var _pointersJsDefault = parcelHelpers.interopDefault(_pointersJs);
var _selectJs = require("./select.js");
var _selectJsDefault = parcelHelpers.interopDefault(_selectJs);
var _selectAllJs = require("./selectAll.js");
var _selectAllJsDefault = parcelHelpers.interopDefault(_selectAllJs);
var _indexJs = require("./selection/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _selectorJs = require("./selector.js");
var _selectorJsDefault = parcelHelpers.interopDefault(_selectorJs);
var _selectorAllJs = require("./selectorAll.js");
var _selectorAllJsDefault = parcelHelpers.interopDefault(_selectorAllJs);
var _styleJs = require("./selection/style.js");
var _windowJs = require("./window.js");
var _windowJsDefault = parcelHelpers.interopDefault(_windowJs);

},{"./create.js":false,"./creator.js":"a6062","./local.js":false,"./matcher.js":"hovSo","./namespace.js":"a23xG","./namespaces.js":"dDfgS","./pointer.js":"bs1Eh","./pointers.js":false,"./select.js":"4pqgd","./selectAll.js":false,"./selection/index.js":"fK3Dl","./selector.js":"7VF9r","./selectorAll.js":"2SKTE","./selection/style.js":"GUHZ1","./window.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a6062":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(name) {
        var fullname = (0, _namespaceJsDefault.default)(name);
        return (fullname.local ? creatorFixed : creatorInherit)(fullname);
    });
var _namespaceJs = require("./namespace.js");
var _namespaceJsDefault = parcelHelpers.interopDefault(_namespaceJs);
var _namespacesJs = require("./namespaces.js");
function creatorInherit(name) {
    return function() {
        var document = this.ownerDocument, uri = this.namespaceURI;
        return uri === (0, _namespacesJs.xhtml) && document.documentElement.namespaceURI === (0, _namespacesJs.xhtml) ? document.createElement(name) : document.createElementNS(uri, name);
    };
}
function creatorFixed(fullname) {
    return function() {
        return this.ownerDocument.createElementNS(fullname.space, fullname.local);
    };
}

},{"./namespace.js":"a23xG","./namespaces.js":"dDfgS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a23xG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(name) {
        var prefix = name += "", i = prefix.indexOf(":");
        if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
        return (0, _namespacesJsDefault.default).hasOwnProperty(prefix) ? {
            space: (0, _namespacesJsDefault.default)[prefix],
            local: name
        } : name; // eslint-disable-line no-prototype-builtins
    });
var _namespacesJs = require("./namespaces.js");
var _namespacesJsDefault = parcelHelpers.interopDefault(_namespacesJs);

},{"./namespaces.js":"dDfgS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dDfgS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "xhtml", ()=>xhtml);
var xhtml = "http://www.w3.org/1999/xhtml";
exports.default = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: xhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hovSo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(selector) {
        return function() {
            return this.matches(selector);
        };
    });
parcelHelpers.export(exports, "childMatcher", ()=>childMatcher);
function childMatcher(selector) {
    return function(node) {
        return node.matches(selector);
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bs1Eh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(event, node) {
        event = (0, _sourceEventJsDefault.default)(event);
        if (node === undefined) node = event.currentTarget;
        if (node) {
            var svg = node.ownerSVGElement || node;
            if (svg.createSVGPoint) {
                var point = svg.createSVGPoint();
                point.x = event.clientX, point.y = event.clientY;
                point = point.matrixTransform(node.getScreenCTM().inverse());
                return [
                    point.x,
                    point.y
                ];
            }
            if (node.getBoundingClientRect) {
                var rect = node.getBoundingClientRect();
                return [
                    event.clientX - rect.left - node.clientLeft,
                    event.clientY - rect.top - node.clientTop
                ];
            }
        }
        return [
            event.pageX,
            event.pageY
        ];
    });
var _sourceEventJs = require("./sourceEvent.js");
var _sourceEventJsDefault = parcelHelpers.interopDefault(_sourceEventJs);

},{"./sourceEvent.js":"cDi5d","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cDi5d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(event) {
        let sourceEvent;
        while(sourceEvent = event.sourceEvent)event = sourceEvent;
        return event;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4pqgd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(selector) {
        return typeof selector === "string" ? new (0, _indexJs.Selection)([
            [
                document.querySelector(selector)
            ]
        ], [
            document.documentElement
        ]) : new (0, _indexJs.Selection)([
            [
                selector
            ]
        ], (0, _indexJs.root));
    });
var _indexJs = require("./selection/index.js");

},{"./selection/index.js":"fK3Dl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fK3Dl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "root", ()=>root);
parcelHelpers.export(exports, "Selection", ()=>Selection);
var _selectJs = require("./select.js");
var _selectJsDefault = parcelHelpers.interopDefault(_selectJs);
var _selectAllJs = require("./selectAll.js");
var _selectAllJsDefault = parcelHelpers.interopDefault(_selectAllJs);
var _selectChildJs = require("./selectChild.js");
var _selectChildJsDefault = parcelHelpers.interopDefault(_selectChildJs);
var _selectChildrenJs = require("./selectChildren.js");
var _selectChildrenJsDefault = parcelHelpers.interopDefault(_selectChildrenJs);
var _filterJs = require("./filter.js");
var _filterJsDefault = parcelHelpers.interopDefault(_filterJs);
var _dataJs = require("./data.js");
var _dataJsDefault = parcelHelpers.interopDefault(_dataJs);
var _enterJs = require("./enter.js");
var _enterJsDefault = parcelHelpers.interopDefault(_enterJs);
var _exitJs = require("./exit.js");
var _exitJsDefault = parcelHelpers.interopDefault(_exitJs);
var _joinJs = require("./join.js");
var _joinJsDefault = parcelHelpers.interopDefault(_joinJs);
var _mergeJs = require("./merge.js");
var _mergeJsDefault = parcelHelpers.interopDefault(_mergeJs);
var _orderJs = require("./order.js");
var _orderJsDefault = parcelHelpers.interopDefault(_orderJs);
var _sortJs = require("./sort.js");
var _sortJsDefault = parcelHelpers.interopDefault(_sortJs);
var _callJs = require("./call.js");
var _callJsDefault = parcelHelpers.interopDefault(_callJs);
var _nodesJs = require("./nodes.js");
var _nodesJsDefault = parcelHelpers.interopDefault(_nodesJs);
var _nodeJs = require("./node.js");
var _nodeJsDefault = parcelHelpers.interopDefault(_nodeJs);
var _sizeJs = require("./size.js");
var _sizeJsDefault = parcelHelpers.interopDefault(_sizeJs);
var _emptyJs = require("./empty.js");
var _emptyJsDefault = parcelHelpers.interopDefault(_emptyJs);
var _eachJs = require("./each.js");
var _eachJsDefault = parcelHelpers.interopDefault(_eachJs);
var _attrJs = require("./attr.js");
var _attrJsDefault = parcelHelpers.interopDefault(_attrJs);
var _styleJs = require("./style.js");
var _styleJsDefault = parcelHelpers.interopDefault(_styleJs);
var _propertyJs = require("./property.js");
var _propertyJsDefault = parcelHelpers.interopDefault(_propertyJs);
var _classedJs = require("./classed.js");
var _classedJsDefault = parcelHelpers.interopDefault(_classedJs);
var _textJs = require("./text.js");
var _textJsDefault = parcelHelpers.interopDefault(_textJs);
var _htmlJs = require("./html.js");
var _htmlJsDefault = parcelHelpers.interopDefault(_htmlJs);
var _raiseJs = require("./raise.js");
var _raiseJsDefault = parcelHelpers.interopDefault(_raiseJs);
var _lowerJs = require("./lower.js");
var _lowerJsDefault = parcelHelpers.interopDefault(_lowerJs);
var _appendJs = require("./append.js");
var _appendJsDefault = parcelHelpers.interopDefault(_appendJs);
var _insertJs = require("./insert.js");
var _insertJsDefault = parcelHelpers.interopDefault(_insertJs);
var _removeJs = require("./remove.js");
var _removeJsDefault = parcelHelpers.interopDefault(_removeJs);
var _cloneJs = require("./clone.js");
var _cloneJsDefault = parcelHelpers.interopDefault(_cloneJs);
var _datumJs = require("./datum.js");
var _datumJsDefault = parcelHelpers.interopDefault(_datumJs);
var _onJs = require("./on.js");
var _onJsDefault = parcelHelpers.interopDefault(_onJs);
var _dispatchJs = require("./dispatch.js");
var _dispatchJsDefault = parcelHelpers.interopDefault(_dispatchJs);
var _iteratorJs = require("./iterator.js");
var _iteratorJsDefault = parcelHelpers.interopDefault(_iteratorJs);
var root = [
    null
];
function Selection(groups, parents) {
    this._groups = groups;
    this._parents = parents;
}
function selection() {
    return new Selection([
        [
            document.documentElement
        ]
    ], root);
}
function selection_selection() {
    return this;
}
Selection.prototype = selection.prototype = {
    constructor: Selection,
    select: (0, _selectJsDefault.default),
    selectAll: (0, _selectAllJsDefault.default),
    selectChild: (0, _selectChildJsDefault.default),
    selectChildren: (0, _selectChildrenJsDefault.default),
    filter: (0, _filterJsDefault.default),
    data: (0, _dataJsDefault.default),
    enter: (0, _enterJsDefault.default),
    exit: (0, _exitJsDefault.default),
    join: (0, _joinJsDefault.default),
    merge: (0, _mergeJsDefault.default),
    selection: selection_selection,
    order: (0, _orderJsDefault.default),
    sort: (0, _sortJsDefault.default),
    call: (0, _callJsDefault.default),
    nodes: (0, _nodesJsDefault.default),
    node: (0, _nodeJsDefault.default),
    size: (0, _sizeJsDefault.default),
    empty: (0, _emptyJsDefault.default),
    each: (0, _eachJsDefault.default),
    attr: (0, _attrJsDefault.default),
    style: (0, _styleJsDefault.default),
    property: (0, _propertyJsDefault.default),
    classed: (0, _classedJsDefault.default),
    text: (0, _textJsDefault.default),
    html: (0, _htmlJsDefault.default),
    raise: (0, _raiseJsDefault.default),
    lower: (0, _lowerJsDefault.default),
    append: (0, _appendJsDefault.default),
    insert: (0, _insertJsDefault.default),
    remove: (0, _removeJsDefault.default),
    clone: (0, _cloneJsDefault.default),
    datum: (0, _datumJsDefault.default),
    on: (0, _onJsDefault.default),
    dispatch: (0, _dispatchJsDefault.default),
    [Symbol.iterator]: (0, _iteratorJsDefault.default)
};
exports.default = selection;

},{"./select.js":"aK9lB","./selectAll.js":"8U28K","./selectChild.js":"hBGg0","./selectChildren.js":"hnJ1V","./filter.js":"i1GfU","./data.js":"jIP7J","./enter.js":"27tIy","./exit.js":"6ubri","./join.js":"g7QcH","./merge.js":"fXm9Z","./order.js":"cmxvd","./sort.js":"4UUI2","./call.js":"bsAaT","./nodes.js":"jjFrN","./node.js":"gPGkg","./size.js":"coOTw","./empty.js":"8ybxO","./each.js":"9Y1px","./attr.js":"k8cb1","./style.js":"GUHZ1","./property.js":"f4q4V","./classed.js":"jd3ig","./text.js":"dVAdB","./html.js":"egFAg","./raise.js":"4Xi1m","./lower.js":"l1I8n","./append.js":"1GNgv","./insert.js":"3Xphl","./remove.js":"iNsSa","./clone.js":"jfNc9","./datum.js":"lMowl","./on.js":"ktlxw","./dispatch.js":"eZMTj","./iterator.js":"32Fgr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aK9lB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(select) {
        if (typeof select !== "function") select = (0, _selectorJsDefault.default)(select);
        for(var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j){
            for(var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i)if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
                if ("__data__" in node) subnode.__data__ = node.__data__;
                subgroup[i] = subnode;
            }
        }
        return new (0, _indexJs.Selection)(subgroups, this._parents);
    });
var _indexJs = require("./index.js");
var _selectorJs = require("../selector.js");
var _selectorJsDefault = parcelHelpers.interopDefault(_selectorJs);

},{"./index.js":"fK3Dl","../selector.js":"7VF9r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7VF9r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(selector) {
        return selector == null ? none : function() {
            return this.querySelector(selector);
        };
    });
function none() {}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8U28K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(select) {
        if (typeof select === "function") select = arrayAll(select);
        else select = (0, _selectorAllJsDefault.default)(select);
        for(var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j){
            for(var group = groups[j], n = group.length, node, i = 0; i < n; ++i)if (node = group[i]) {
                subgroups.push(select.call(node, node.__data__, i, group));
                parents.push(node);
            }
        }
        return new (0, _indexJs.Selection)(subgroups, parents);
    });
var _indexJs = require("./index.js");
var _arrayJs = require("../array.js");
var _arrayJsDefault = parcelHelpers.interopDefault(_arrayJs);
var _selectorAllJs = require("../selectorAll.js");
var _selectorAllJsDefault = parcelHelpers.interopDefault(_selectorAllJs);
function arrayAll(select) {
    return function() {
        return (0, _arrayJsDefault.default)(select.apply(this, arguments));
    };
}

},{"./index.js":"fK3Dl","../array.js":"9WejU","../selectorAll.js":"2SKTE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9WejU":[function(require,module,exports) {
// Given something array like (or null), returns something that is strictly an
// array. This is used to ensure that array-like objects passed to d3.selectAll
// or selection.selectAll are converted into proper arrays when creating a
// selection; we don’t ever want to create a selection backed by a live
// HTMLCollection or NodeList. However, note that selection.selectAll will use a
// static NodeList as a group, since it safely derived from querySelectorAll.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>array);
function array(x) {
    return x == null ? [] : Array.isArray(x) ? x : Array.from(x);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2SKTE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(selector) {
        return selector == null ? empty : function() {
            return this.querySelectorAll(selector);
        };
    });
function empty() {
    return [];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hBGg0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(match) {
        return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : (0, _matcherJs.childMatcher)(match)));
    });
var _matcherJs = require("../matcher.js");
var find = Array.prototype.find;
function childFind(match) {
    return function() {
        return find.call(this.children, match);
    };
}
function childFirst() {
    return this.firstElementChild;
}

},{"../matcher.js":"hovSo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hnJ1V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(match) {
        return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : (0, _matcherJs.childMatcher)(match)));
    });
var _matcherJs = require("../matcher.js");
var filter = Array.prototype.filter;
function children() {
    return Array.from(this.children);
}
function childrenFilter(match) {
    return function() {
        return filter.call(this.children, match);
    };
}

},{"../matcher.js":"hovSo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i1GfU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(match) {
        if (typeof match !== "function") match = (0, _matcherJsDefault.default)(match);
        for(var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j){
            for(var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i)if ((node = group[i]) && match.call(node, node.__data__, i, group)) subgroup.push(node);
        }
        return new (0, _indexJs.Selection)(subgroups, this._parents);
    });
var _indexJs = require("./index.js");
var _matcherJs = require("../matcher.js");
var _matcherJsDefault = parcelHelpers.interopDefault(_matcherJs);

},{"./index.js":"fK3Dl","../matcher.js":"hovSo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jIP7J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(value, key) {
        if (!arguments.length) return Array.from(this, datum);
        var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
        if (typeof value !== "function") value = (0, _constantJsDefault.default)(value);
        for(var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j){
            var parent = parents[j], group = groups[j], groupLength = group.length, data = arraylike(value.call(parent, parent && parent.__data__, j, parents)), dataLength = data.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
            bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);
            // Now connect the enter nodes to their following update node, such that
            // appendChild can insert the materialized enter node before this node,
            // rather than at the end of the parent node.
            for(var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0)if (previous = enterGroup[i0]) {
                if (i0 >= i1) i1 = i0 + 1;
                while(!(next = updateGroup[i1]) && ++i1 < dataLength);
                previous._next = next || null;
            }
        }
        update = new (0, _indexJs.Selection)(update, parents);
        update._enter = enter;
        update._exit = exit;
        return update;
    });
var _indexJs = require("./index.js");
var _enterJs = require("./enter.js");
var _constantJs = require("../constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
function bindIndex(parent, group, enter, update, exit, data) {
    var i = 0, node, groupLength = group.length, dataLength = data.length;
    // Put any non-null nodes that fit into update.
    // Put any null nodes into enter.
    // Put any remaining data into enter.
    for(; i < dataLength; ++i)if (node = group[i]) {
        node.__data__ = data[i];
        update[i] = node;
    } else enter[i] = new (0, _enterJs.EnterNode)(parent, data[i]);
    // Put any non-null nodes that don’t fit into exit.
    for(; i < groupLength; ++i)if (node = group[i]) exit[i] = node;
}
function bindKey(parent, group, enter, update, exit, data, key) {
    var i, node, nodeByKeyValue = new Map, groupLength = group.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
    // Compute the key for each node.
    // If multiple nodes have the same key, the duplicates are added to exit.
    for(i = 0; i < groupLength; ++i)if (node = group[i]) {
        keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
        if (nodeByKeyValue.has(keyValue)) exit[i] = node;
        else nodeByKeyValue.set(keyValue, node);
    }
    // Compute the key for each datum.
    // If there a node associated with this key, join and add it to update.
    // If there is not (or the key is a duplicate), add it to enter.
    for(i = 0; i < dataLength; ++i){
        keyValue = key.call(parent, data[i], i, data) + "";
        if (node = nodeByKeyValue.get(keyValue)) {
            update[i] = node;
            node.__data__ = data[i];
            nodeByKeyValue.delete(keyValue);
        } else enter[i] = new (0, _enterJs.EnterNode)(parent, data[i]);
    }
    // Add any remaining nodes that were not bound to data to exit.
    for(i = 0; i < groupLength; ++i)if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) exit[i] = node;
}
function datum(node) {
    return node.__data__;
}
// Given some data, this returns an array-like view of it: an object that
// exposes a length property and allows numeric indexing. Note that unlike
// selectAll, this isn’t worried about “live” collections because the resulting
// array will only be used briefly while data is being bound. (It is possible to
// cause the data to change while iterating by using a key function, but please
// don’t; we’d rather avoid a gratuitous copy.)
function arraylike(data) {
    return typeof data === "object" && "length" in data ? data // Array, TypedArray, NodeList, array-like
     : Array.from(data); // Map, Set, iterable, string, or anything else
}

},{"./index.js":"fK3Dl","./enter.js":"27tIy","../constant.js":"1wZol","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"27tIy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        return new (0, _indexJs.Selection)(this._enter || this._groups.map((0, _sparseJsDefault.default)), this._parents);
    });
parcelHelpers.export(exports, "EnterNode", ()=>EnterNode);
var _sparseJs = require("./sparse.js");
var _sparseJsDefault = parcelHelpers.interopDefault(_sparseJs);
var _indexJs = require("./index.js");
function EnterNode(parent, datum) {
    this.ownerDocument = parent.ownerDocument;
    this.namespaceURI = parent.namespaceURI;
    this._next = null;
    this._parent = parent;
    this.__data__ = datum;
}
EnterNode.prototype = {
    constructor: EnterNode,
    appendChild: function(child) {
        return this._parent.insertBefore(child, this._next);
    },
    insertBefore: function(child, next) {
        return this._parent.insertBefore(child, next);
    },
    querySelector: function(selector) {
        return this._parent.querySelector(selector);
    },
    querySelectorAll: function(selector) {
        return this._parent.querySelectorAll(selector);
    }
};

},{"./sparse.js":"juhNo","./index.js":"fK3Dl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"juhNo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(update) {
        return new Array(update.length);
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1wZol":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(x) {
        return function() {
            return x;
        };
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6ubri":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        return new (0, _indexJs.Selection)(this._exit || this._groups.map((0, _sparseJsDefault.default)), this._parents);
    });
var _sparseJs = require("./sparse.js");
var _sparseJsDefault = parcelHelpers.interopDefault(_sparseJs);
var _indexJs = require("./index.js");

},{"./sparse.js":"juhNo","./index.js":"fK3Dl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g7QcH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(onenter, onupdate, onexit) {
        var enter = this.enter(), update = this, exit = this.exit();
        if (typeof onenter === "function") {
            enter = onenter(enter);
            if (enter) enter = enter.selection();
        } else enter = enter.append(onenter + "");
        if (onupdate != null) {
            update = onupdate(update);
            if (update) update = update.selection();
        }
        if (onexit == null) exit.remove();
        else onexit(exit);
        return enter && update ? enter.merge(update).order() : update;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fXm9Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(context) {
        var selection = context.selection ? context.selection() : context;
        for(var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j){
            for(var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i)if (node = group0[i] || group1[i]) merge[i] = node;
        }
        for(; j < m0; ++j)merges[j] = groups0[j];
        return new (0, _indexJs.Selection)(merges, this._parents);
    });
var _indexJs = require("./index.js");

},{"./index.js":"fK3Dl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cmxvd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        for(var groups = this._groups, j = -1, m = groups.length; ++j < m;){
            for(var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;)if (node = group[i]) {
                if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
                next = node;
            }
        }
        return this;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4UUI2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(compare) {
        if (!compare) compare = ascending;
        function compareNode(a, b) {
            return a && b ? compare(a.__data__, b.__data__) : !a - !b;
        }
        for(var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j){
            for(var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i)if (node = group[i]) sortgroup[i] = node;
            sortgroup.sort(compareNode);
        }
        return new (0, _indexJs.Selection)(sortgroups, this._parents).order();
    });
var _indexJs = require("./index.js");
function ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}

},{"./index.js":"fK3Dl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bsAaT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        var callback = arguments[0];
        arguments[0] = this;
        callback.apply(null, arguments);
        return this;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jjFrN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        return Array.from(this);
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gPGkg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        for(var groups = this._groups, j = 0, m = groups.length; j < m; ++j)for(var group = groups[j], i = 0, n = group.length; i < n; ++i){
            var node = group[i];
            if (node) return node;
        }
        return null;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"coOTw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        let size = 0;
        for (const node of this)++size; // eslint-disable-line no-unused-vars
        return size;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8ybxO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        return !this.node();
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Y1px":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(callback) {
        for(var groups = this._groups, j = 0, m = groups.length; j < m; ++j){
            for(var group = groups[j], i = 0, n = group.length, node; i < n; ++i)if (node = group[i]) callback.call(node, node.__data__, i, group);
        }
        return this;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k8cb1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(name, value) {
        var fullname = (0, _namespaceJsDefault.default)(name);
        if (arguments.length < 2) {
            var node = this.node();
            return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
        }
        return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
    });
var _namespaceJs = require("../namespace.js");
var _namespaceJsDefault = parcelHelpers.interopDefault(_namespaceJs);
function attrRemove(name) {
    return function() {
        this.removeAttribute(name);
    };
}
function attrRemoveNS(fullname) {
    return function() {
        this.removeAttributeNS(fullname.space, fullname.local);
    };
}
function attrConstant(name, value) {
    return function() {
        this.setAttribute(name, value);
    };
}
function attrConstantNS(fullname, value) {
    return function() {
        this.setAttributeNS(fullname.space, fullname.local, value);
    };
}
function attrFunction(name, value) {
    return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttribute(name);
        else this.setAttribute(name, v);
    };
}
function attrFunctionNS(fullname, value) {
    return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
        else this.setAttributeNS(fullname.space, fullname.local, v);
    };
}

},{"../namespace.js":"a23xG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"GUHZ1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(name, value, priority) {
        return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
    });
parcelHelpers.export(exports, "styleValue", ()=>styleValue);
var _windowJs = require("../window.js");
var _windowJsDefault = parcelHelpers.interopDefault(_windowJs);
function styleRemove(name) {
    return function() {
        this.style.removeProperty(name);
    };
}
function styleConstant(name, value, priority) {
    return function() {
        this.style.setProperty(name, value, priority);
    };
}
function styleFunction(name, value, priority) {
    return function() {
        var v = value.apply(this, arguments);
        if (v == null) this.style.removeProperty(name);
        else this.style.setProperty(name, v, priority);
    };
}
function styleValue(node, name) {
    return node.style.getPropertyValue(name) || (0, _windowJsDefault.default)(node).getComputedStyle(node, null).getPropertyValue(name);
}

},{"../window.js":"6di7h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6di7h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(node) {
        return node.ownerDocument && node.ownerDocument.defaultView // node is a Node
         || node.document && node // node is a Window
         || node.defaultView; // node is a Document
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f4q4V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(name, value) {
        return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
    });
function propertyRemove(name) {
    return function() {
        delete this[name];
    };
}
function propertyConstant(name, value) {
    return function() {
        this[name] = value;
    };
}
function propertyFunction(name, value) {
    return function() {
        var v = value.apply(this, arguments);
        if (v == null) delete this[name];
        else this[name] = v;
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jd3ig":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(name, value) {
        var names = classArray(name + "");
        if (arguments.length < 2) {
            var list = classList(this.node()), i = -1, n = names.length;
            while(++i < n)if (!list.contains(names[i])) return false;
            return true;
        }
        return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
    });
function classArray(string) {
    return string.trim().split(/^|\s+/);
}
function classList(node) {
    return node.classList || new ClassList(node);
}
function ClassList(node) {
    this._node = node;
    this._names = classArray(node.getAttribute("class") || "");
}
ClassList.prototype = {
    add: function(name) {
        var i = this._names.indexOf(name);
        if (i < 0) {
            this._names.push(name);
            this._node.setAttribute("class", this._names.join(" "));
        }
    },
    remove: function(name) {
        var i = this._names.indexOf(name);
        if (i >= 0) {
            this._names.splice(i, 1);
            this._node.setAttribute("class", this._names.join(" "));
        }
    },
    contains: function(name) {
        return this._names.indexOf(name) >= 0;
    }
};
function classedAdd(node, names) {
    var list = classList(node), i = -1, n = names.length;
    while(++i < n)list.add(names[i]);
}
function classedRemove(node, names) {
    var list = classList(node), i = -1, n = names.length;
    while(++i < n)list.remove(names[i]);
}
function classedTrue(names) {
    return function() {
        classedAdd(this, names);
    };
}
function classedFalse(names) {
    return function() {
        classedRemove(this, names);
    };
}
function classedFunction(names, value) {
    return function() {
        (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dVAdB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(value) {
        return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
    });
function textRemove() {
    this.textContent = "";
}
function textConstant(value) {
    return function() {
        this.textContent = value;
    };
}
function textFunction(value) {
    return function() {
        var v = value.apply(this, arguments);
        this.textContent = v == null ? "" : v;
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"egFAg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(value) {
        return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
    });
function htmlRemove() {
    this.innerHTML = "";
}
function htmlConstant(value) {
    return function() {
        this.innerHTML = value;
    };
}
function htmlFunction(value) {
    return function() {
        var v = value.apply(this, arguments);
        this.innerHTML = v == null ? "" : v;
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Xi1m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        return this.each(raise);
    });
function raise() {
    if (this.nextSibling) this.parentNode.appendChild(this);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l1I8n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        return this.each(lower);
    });
function lower() {
    if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1GNgv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(name) {
        var create = typeof name === "function" ? name : (0, _creatorJsDefault.default)(name);
        return this.select(function() {
            return this.appendChild(create.apply(this, arguments));
        });
    });
var _creatorJs = require("../creator.js");
var _creatorJsDefault = parcelHelpers.interopDefault(_creatorJs);

},{"../creator.js":"a6062","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Xphl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(name, before) {
        var create = typeof name === "function" ? name : (0, _creatorJsDefault.default)(name), select = before == null ? constantNull : typeof before === "function" ? before : (0, _selectorJsDefault.default)(before);
        return this.select(function() {
            return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
        });
    });
var _creatorJs = require("../creator.js");
var _creatorJsDefault = parcelHelpers.interopDefault(_creatorJs);
var _selectorJs = require("../selector.js");
var _selectorJsDefault = parcelHelpers.interopDefault(_selectorJs);
function constantNull() {
    return null;
}

},{"../creator.js":"a6062","../selector.js":"7VF9r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iNsSa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        return this.each(remove);
    });
function remove() {
    var parent = this.parentNode;
    if (parent) parent.removeChild(this);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jfNc9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(deep) {
        return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
    });
function selection_cloneShallow() {
    var clone = this.cloneNode(false), parent = this.parentNode;
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function selection_cloneDeep() {
    var clone = this.cloneNode(true), parent = this.parentNode;
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lMowl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(value) {
        return arguments.length ? this.property("__data__", value) : this.node().__data__;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ktlxw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(typename, value, options) {
        var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;
        if (arguments.length < 2) {
            var on = this.node().__on;
            if (on) for(var j = 0, m = on.length, o; j < m; ++j)for(i = 0, o = on[j]; i < n; ++i){
                if ((t = typenames[i]).type === o.type && t.name === o.name) return o.value;
            }
            return;
        }
        on = value ? onAdd : onRemove;
        for(i = 0; i < n; ++i)this.each(on(typenames[i], value, options));
        return this;
    });
function contextListener(listener) {
    return function(event) {
        listener.call(this, event, this.__data__);
    };
}
function parseTypenames(typenames) {
    return typenames.trim().split(/^|\s+/).map(function(t) {
        var name = "", i = t.indexOf(".");
        if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
        return {
            type: t,
            name: name
        };
    });
}
function onRemove(typename) {
    return function() {
        var on = this.__on;
        if (!on) return;
        for(var j = 0, i = -1, m = on.length, o; j < m; ++j)if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) this.removeEventListener(o.type, o.listener, o.options);
        else on[++i] = o;
        if (++i) on.length = i;
        else delete this.__on;
    };
}
function onAdd(typename, value, options) {
    return function() {
        var on = this.__on, o, listener = contextListener(value);
        if (on) {
            for(var j = 0, m = on.length; j < m; ++j)if ((o = on[j]).type === typename.type && o.name === typename.name) {
                this.removeEventListener(o.type, o.listener, o.options);
                this.addEventListener(o.type, o.listener = listener, o.options = options);
                o.value = value;
                return;
            }
        }
        this.addEventListener(typename.type, listener, options);
        o = {
            type: typename.type,
            name: typename.name,
            value: value,
            listener: listener,
            options: options
        };
        if (!on) this.__on = [
            o
        ];
        else on.push(o);
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eZMTj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(type, params) {
        return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
    });
var _windowJs = require("../window.js");
var _windowJsDefault = parcelHelpers.interopDefault(_windowJs);
function dispatchEvent(node, type, params) {
    var window = (0, _windowJsDefault.default)(node), event = window.CustomEvent;
    if (typeof event === "function") event = new event(type, params);
    else {
        event = window.document.createEvent("Event");
        if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
        else event.initEvent(type, false, false);
    }
    node.dispatchEvent(event);
}
function dispatchConstant(type, params) {
    return function() {
        return dispatchEvent(this, type, params);
    };
}
function dispatchFunction(type, params) {
    return function() {
        return dispatchEvent(this, type, params.apply(this, arguments));
    };
}

},{"../window.js":"6di7h","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"32Fgr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function*() {
        for(var groups = this._groups, j = 0, m = groups.length; j < m; ++j){
            for(var group = groups[j], i = 0, n = group.length, node; i < n; ++i)if (node = group[i]) yield node;
        }
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"chHoc":[function(require,module,exports) {
// These are typically used in conjunction with noevent to ensure that we can
// preventDefault on the event.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nonpassive", ()=>nonpassive);
parcelHelpers.export(exports, "nonpassivecapture", ()=>nonpassivecapture);
parcelHelpers.export(exports, "nopropagation", ()=>nopropagation);
parcelHelpers.export(exports, "default", ()=>function(event) {
        event.preventDefault();
        event.stopImmediatePropagation();
    });
const nonpassive = {
    passive: false
};
const nonpassivecapture = {
    capture: true,
    passive: false
};
function nopropagation(event) {
    event.stopImmediatePropagation();
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6jJyi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "interpolate", ()=>(0, _valueJsDefault.default));
parcelHelpers.export(exports, "interpolateArray", ()=>(0, _arrayJsDefault.default));
parcelHelpers.export(exports, "interpolateBasis", ()=>(0, _basisJsDefault.default));
parcelHelpers.export(exports, "interpolateBasisClosed", ()=>(0, _basisClosedJsDefault.default));
parcelHelpers.export(exports, "interpolateDate", ()=>(0, _dateJsDefault.default));
parcelHelpers.export(exports, "interpolateDiscrete", ()=>(0, _discreteJsDefault.default));
parcelHelpers.export(exports, "interpolateHue", ()=>(0, _hueJsDefault.default));
parcelHelpers.export(exports, "interpolateNumber", ()=>(0, _numberJsDefault.default));
parcelHelpers.export(exports, "interpolateNumberArray", ()=>(0, _numberArrayJsDefault.default));
parcelHelpers.export(exports, "interpolateObject", ()=>(0, _objectJsDefault.default));
parcelHelpers.export(exports, "interpolateRound", ()=>(0, _roundJsDefault.default));
parcelHelpers.export(exports, "interpolateString", ()=>(0, _stringJsDefault.default));
parcelHelpers.export(exports, "interpolateTransformCss", ()=>(0, _indexJs.interpolateTransformCss));
parcelHelpers.export(exports, "interpolateTransformSvg", ()=>(0, _indexJs.interpolateTransformSvg));
parcelHelpers.export(exports, "interpolateZoom", ()=>(0, _zoomJsDefault.default));
parcelHelpers.export(exports, "interpolateRgb", ()=>(0, _rgbJsDefault.default));
parcelHelpers.export(exports, "interpolateRgbBasis", ()=>(0, _rgbJs.rgbBasis));
parcelHelpers.export(exports, "interpolateRgbBasisClosed", ()=>(0, _rgbJs.rgbBasisClosed));
parcelHelpers.export(exports, "interpolateHsl", ()=>(0, _hslJsDefault.default));
parcelHelpers.export(exports, "interpolateHslLong", ()=>(0, _hslJs.hslLong));
parcelHelpers.export(exports, "interpolateLab", ()=>(0, _labJsDefault.default));
parcelHelpers.export(exports, "interpolateHcl", ()=>(0, _hclJsDefault.default));
parcelHelpers.export(exports, "interpolateHclLong", ()=>(0, _hclJs.hclLong));
parcelHelpers.export(exports, "interpolateCubehelix", ()=>(0, _cubehelixJsDefault.default));
parcelHelpers.export(exports, "interpolateCubehelixLong", ()=>(0, _cubehelixJs.cubehelixLong));
parcelHelpers.export(exports, "piecewise", ()=>(0, _piecewiseJsDefault.default));
parcelHelpers.export(exports, "quantize", ()=>(0, _quantizeJsDefault.default));
var _valueJs = require("./value.js");
var _valueJsDefault = parcelHelpers.interopDefault(_valueJs);
var _arrayJs = require("./array.js");
var _arrayJsDefault = parcelHelpers.interopDefault(_arrayJs);
var _basisJs = require("./basis.js");
var _basisJsDefault = parcelHelpers.interopDefault(_basisJs);
var _basisClosedJs = require("./basisClosed.js");
var _basisClosedJsDefault = parcelHelpers.interopDefault(_basisClosedJs);
var _dateJs = require("./date.js");
var _dateJsDefault = parcelHelpers.interopDefault(_dateJs);
var _discreteJs = require("./discrete.js");
var _discreteJsDefault = parcelHelpers.interopDefault(_discreteJs);
var _hueJs = require("./hue.js");
var _hueJsDefault = parcelHelpers.interopDefault(_hueJs);
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
var _numberArrayJs = require("./numberArray.js");
var _numberArrayJsDefault = parcelHelpers.interopDefault(_numberArrayJs);
var _objectJs = require("./object.js");
var _objectJsDefault = parcelHelpers.interopDefault(_objectJs);
var _roundJs = require("./round.js");
var _roundJsDefault = parcelHelpers.interopDefault(_roundJs);
var _stringJs = require("./string.js");
var _stringJsDefault = parcelHelpers.interopDefault(_stringJs);
var _indexJs = require("./transform/index.js");
var _zoomJs = require("./zoom.js");
var _zoomJsDefault = parcelHelpers.interopDefault(_zoomJs);
var _rgbJs = require("./rgb.js");
var _rgbJsDefault = parcelHelpers.interopDefault(_rgbJs);
var _hslJs = require("./hsl.js");
var _hslJsDefault = parcelHelpers.interopDefault(_hslJs);
var _labJs = require("./lab.js");
var _labJsDefault = parcelHelpers.interopDefault(_labJs);
var _hclJs = require("./hcl.js");
var _hclJsDefault = parcelHelpers.interopDefault(_hclJs);
var _cubehelixJs = require("./cubehelix.js");
var _cubehelixJsDefault = parcelHelpers.interopDefault(_cubehelixJs);
var _piecewiseJs = require("./piecewise.js");
var _piecewiseJsDefault = parcelHelpers.interopDefault(_piecewiseJs);
var _quantizeJs = require("./quantize.js");
var _quantizeJsDefault = parcelHelpers.interopDefault(_quantizeJs);

},{"./value.js":"2GpMq","./array.js":false,"./basis.js":false,"./basisClosed.js":false,"./date.js":false,"./discrete.js":false,"./hue.js":false,"./number.js":"fZAq5","./numberArray.js":false,"./object.js":false,"./round.js":"8lHW7","./string.js":"Qre8m","./transform/index.js":"jDBQO","./zoom.js":"7nRsd","./rgb.js":"gHrgo","./hsl.js":"9jAYx","./lab.js":"b6zM3","./hcl.js":"afUSw","./cubehelix.js":"7oITO","./piecewise.js":"1W7eI","./quantize.js":"cTNfr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2GpMq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(a, b) {
        var t = typeof b, c;
        return b == null || t === "boolean" ? (0, _constantJsDefault.default)(b) : (t === "number" ? (0, _numberJsDefault.default) : t === "string" ? (c = (0, _d3Color.color)(b)) ? (b = c, _rgbJsDefault.default) : (0, _stringJsDefault.default) : b instanceof (0, _d3Color.color) ? (0, _rgbJsDefault.default) : b instanceof Date ? (0, _dateJsDefault.default) : (0, _numberArrayJs.isNumberArray)(b) ? (0, _numberArrayJsDefault.default) : Array.isArray(b) ? (0, _arrayJs.genericArray) : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? (0, _objectJsDefault.default) : (0, _numberJsDefault.default))(a, b);
    });
var _d3Color = require("d3-color");
var _rgbJs = require("./rgb.js");
var _rgbJsDefault = parcelHelpers.interopDefault(_rgbJs);
var _arrayJs = require("./array.js");
var _dateJs = require("./date.js");
var _dateJsDefault = parcelHelpers.interopDefault(_dateJs);
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
var _objectJs = require("./object.js");
var _objectJsDefault = parcelHelpers.interopDefault(_objectJs);
var _stringJs = require("./string.js");
var _stringJsDefault = parcelHelpers.interopDefault(_stringJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _numberArrayJs = require("./numberArray.js");
var _numberArrayJsDefault = parcelHelpers.interopDefault(_numberArrayJs);

},{"d3-color":"grhaa","./rgb.js":"gHrgo","./array.js":"bQXK0","./date.js":"cCKgJ","./number.js":"fZAq5","./object.js":"hdyKg","./string.js":"Qre8m","./constant.js":"aXv76","./numberArray.js":"l29YZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"grhaa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "color", ()=>(0, _colorJsDefault.default));
parcelHelpers.export(exports, "rgb", ()=>(0, _colorJs.rgb));
parcelHelpers.export(exports, "hsl", ()=>(0, _colorJs.hsl));
parcelHelpers.export(exports, "lab", ()=>(0, _labJsDefault.default));
parcelHelpers.export(exports, "hcl", ()=>(0, _labJs.hcl));
parcelHelpers.export(exports, "lch", ()=>(0, _labJs.lch));
parcelHelpers.export(exports, "gray", ()=>(0, _labJs.gray));
parcelHelpers.export(exports, "cubehelix", ()=>(0, _cubehelixJsDefault.default));
var _colorJs = require("./color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
var _labJs = require("./lab.js");
var _labJsDefault = parcelHelpers.interopDefault(_labJs);
var _cubehelixJs = require("./cubehelix.js");
var _cubehelixJsDefault = parcelHelpers.interopDefault(_cubehelixJs);

},{"./color.js":"cNCyv","./lab.js":"5gBZc","./cubehelix.js":"805Dt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cNCyv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Color", ()=>Color);
parcelHelpers.export(exports, "darker", ()=>darker);
parcelHelpers.export(exports, "brighter", ()=>brighter);
parcelHelpers.export(exports, "default", ()=>color);
parcelHelpers.export(exports, "rgbConvert", ()=>rgbConvert);
parcelHelpers.export(exports, "rgb", ()=>rgb);
parcelHelpers.export(exports, "Rgb", ()=>Rgb);
parcelHelpers.export(exports, "hslConvert", ()=>hslConvert);
parcelHelpers.export(exports, "hsl", ()=>hsl);
var _defineJs = require("./define.js");
var _defineJsDefault = parcelHelpers.interopDefault(_defineJs);
function Color() {}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*", reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*", reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*", reHex = /^#([0-9a-f]{3,8})$/, reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`), reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`), reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`), reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`), reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`), reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
    aliceblue: 0xf0f8ff,
    antiquewhite: 0xfaebd7,
    aqua: 0x00ffff,
    aquamarine: 0x7fffd4,
    azure: 0xf0ffff,
    beige: 0xf5f5dc,
    bisque: 0xffe4c4,
    black: 0x000000,
    blanchedalmond: 0xffebcd,
    blue: 0x0000ff,
    blueviolet: 0x8a2be2,
    brown: 0xa52a2a,
    burlywood: 0xdeb887,
    cadetblue: 0x5f9ea0,
    chartreuse: 0x7fff00,
    chocolate: 0xd2691e,
    coral: 0xff7f50,
    cornflowerblue: 0x6495ed,
    cornsilk: 0xfff8dc,
    crimson: 0xdc143c,
    cyan: 0x00ffff,
    darkblue: 0x00008b,
    darkcyan: 0x008b8b,
    darkgoldenrod: 0xb8860b,
    darkgray: 0xa9a9a9,
    darkgreen: 0x006400,
    darkgrey: 0xa9a9a9,
    darkkhaki: 0xbdb76b,
    darkmagenta: 0x8b008b,
    darkolivegreen: 0x556b2f,
    darkorange: 0xff8c00,
    darkorchid: 0x9932cc,
    darkred: 0x8b0000,
    darksalmon: 0xe9967a,
    darkseagreen: 0x8fbc8f,
    darkslateblue: 0x483d8b,
    darkslategray: 0x2f4f4f,
    darkslategrey: 0x2f4f4f,
    darkturquoise: 0x00ced1,
    darkviolet: 0x9400d3,
    deeppink: 0xff1493,
    deepskyblue: 0x00bfff,
    dimgray: 0x696969,
    dimgrey: 0x696969,
    dodgerblue: 0x1e90ff,
    firebrick: 0xb22222,
    floralwhite: 0xfffaf0,
    forestgreen: 0x228b22,
    fuchsia: 0xff00ff,
    gainsboro: 0xdcdcdc,
    ghostwhite: 0xf8f8ff,
    gold: 0xffd700,
    goldenrod: 0xdaa520,
    gray: 0x808080,
    green: 0x008000,
    greenyellow: 0xadff2f,
    grey: 0x808080,
    honeydew: 0xf0fff0,
    hotpink: 0xff69b4,
    indianred: 0xcd5c5c,
    indigo: 0x4b0082,
    ivory: 0xfffff0,
    khaki: 0xf0e68c,
    lavender: 0xe6e6fa,
    lavenderblush: 0xfff0f5,
    lawngreen: 0x7cfc00,
    lemonchiffon: 0xfffacd,
    lightblue: 0xadd8e6,
    lightcoral: 0xf08080,
    lightcyan: 0xe0ffff,
    lightgoldenrodyellow: 0xfafad2,
    lightgray: 0xd3d3d3,
    lightgreen: 0x90ee90,
    lightgrey: 0xd3d3d3,
    lightpink: 0xffb6c1,
    lightsalmon: 0xffa07a,
    lightseagreen: 0x20b2aa,
    lightskyblue: 0x87cefa,
    lightslategray: 0x778899,
    lightslategrey: 0x778899,
    lightsteelblue: 0xb0c4de,
    lightyellow: 0xffffe0,
    lime: 0x00ff00,
    limegreen: 0x32cd32,
    linen: 0xfaf0e6,
    magenta: 0xff00ff,
    maroon: 0x800000,
    mediumaquamarine: 0x66cdaa,
    mediumblue: 0x0000cd,
    mediumorchid: 0xba55d3,
    mediumpurple: 0x9370db,
    mediumseagreen: 0x3cb371,
    mediumslateblue: 0x7b68ee,
    mediumspringgreen: 0x00fa9a,
    mediumturquoise: 0x48d1cc,
    mediumvioletred: 0xc71585,
    midnightblue: 0x191970,
    mintcream: 0xf5fffa,
    mistyrose: 0xffe4e1,
    moccasin: 0xffe4b5,
    navajowhite: 0xffdead,
    navy: 0x000080,
    oldlace: 0xfdf5e6,
    olive: 0x808000,
    olivedrab: 0x6b8e23,
    orange: 0xffa500,
    orangered: 0xff4500,
    orchid: 0xda70d6,
    palegoldenrod: 0xeee8aa,
    palegreen: 0x98fb98,
    paleturquoise: 0xafeeee,
    palevioletred: 0xdb7093,
    papayawhip: 0xffefd5,
    peachpuff: 0xffdab9,
    peru: 0xcd853f,
    pink: 0xffc0cb,
    plum: 0xdda0dd,
    powderblue: 0xb0e0e6,
    purple: 0x800080,
    rebeccapurple: 0x663399,
    red: 0xff0000,
    rosybrown: 0xbc8f8f,
    royalblue: 0x4169e1,
    saddlebrown: 0x8b4513,
    salmon: 0xfa8072,
    sandybrown: 0xf4a460,
    seagreen: 0x2e8b57,
    seashell: 0xfff5ee,
    sienna: 0xa0522d,
    silver: 0xc0c0c0,
    skyblue: 0x87ceeb,
    slateblue: 0x6a5acd,
    slategray: 0x708090,
    slategrey: 0x708090,
    snow: 0xfffafa,
    springgreen: 0x00ff7f,
    steelblue: 0x4682b4,
    tan: 0xd2b48c,
    teal: 0x008080,
    thistle: 0xd8bfd8,
    tomato: 0xff6347,
    turquoise: 0x40e0d0,
    violet: 0xee82ee,
    wheat: 0xf5deb3,
    white: 0xffffff,
    whitesmoke: 0xf5f5f5,
    yellow: 0xffff00,
    yellowgreen: 0x9acd32
};
(0, _defineJsDefault.default)(Color, color, {
    copy (channels) {
        return Object.assign(new this.constructor, this, channels);
    },
    displayable () {
        return this.rgb().displayable();
    },
    hex: color_formatHex,
    formatHex: color_formatHex,
    formatHex8: color_formatHex8,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
});
function color_formatHex() {
    return this.rgb().formatHex();
}
function color_formatHex8() {
    return this.rgb().formatHex8();
}
function color_formatHsl() {
    return hslConvert(this).formatHsl();
}
function color_formatRgb() {
    return this.rgb().formatRgb();
}
function color(format) {
    var m, l;
    format = (format + "").trim().toLowerCase();
    return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
     : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
     : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
     : l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000
     : null // invalid hex
    ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
     : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
     : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
     : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
     : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
     : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
     : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
     : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
    return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}
function rgba(r, g, b, a) {
    if (a <= 0) r = g = b = NaN;
    return new Rgb(r, g, b, a);
}
function rgbConvert(o) {
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Rgb;
    o = o.rgb();
    return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
    this.r = +r;
    this.g = +g;
    this.b = +b;
    this.opacity = +opacity;
}
(0, _defineJsDefault.default)(Rgb, rgb, (0, _defineJs.extend)(Color, {
    brighter (k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    darker (k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
    },
    rgb () {
        return this;
    },
    clamp () {
        return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
    },
    displayable () {
        return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
    },
    hex: rgb_formatHex,
    formatHex: rgb_formatHex,
    formatHex8: rgb_formatHex8,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
}));
function rgb_formatHex() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
    const a = clampa(this.opacity);
    return `${a === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;
}
function clampa(opacity) {
    return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
    return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
    value = clampi(value);
    return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s, l, a) {
    if (a <= 0) h = s = l = NaN;
    else if (l <= 0 || l >= 1) h = s = NaN;
    else if (s <= 0) h = NaN;
    return new Hsl(h, s, l, a);
}
function hslConvert(o) {
    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Hsl;
    if (o instanceof Hsl) return o;
    o = o.rgb();
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, min = Math.min(r, g, b), max = Math.max(r, g, b), h = NaN, s = max - min, l = (max + min) / 2;
    if (s) {
        if (r === max) h = (g - b) / s + (g < b) * 6;
        else if (g === max) h = (b - r) / s + 2;
        else h = (r - g) / s + 4;
        s /= l < 0.5 ? max + min : 2 - max - min;
        h *= 60;
    } else s = l > 0 && l < 1 ? 0 : h;
    return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
}
(0, _defineJsDefault.default)(Hsl, hsl, (0, _defineJs.extend)(Color, {
    brighter (k) {
        k = k == null ? brighter : Math.pow(brighter, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    darker (k) {
        k = k == null ? darker : Math.pow(darker, k);
        return new Hsl(this.h, this.s, this.l * k, this.opacity);
    },
    rgb () {
        var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
        return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
    },
    clamp () {
        return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
    },
    displayable () {
        return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
    },
    formatHsl () {
        const a = clampa(this.opacity);
        return `${a === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
    }
}));
function clamph(value) {
    value = (value || 0) % 360;
    return value < 0 ? value + 360 : value;
}
function clampt(value) {
    return Math.max(0, Math.min(1, value || 0));
}
/* From FvD 13.37, CSS Color Module Level 3 */ function hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}

},{"./define.js":"avQOe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"avQOe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(constructor, factory, prototype) {
        constructor.prototype = factory.prototype = prototype;
        prototype.constructor = constructor;
    });
parcelHelpers.export(exports, "extend", ()=>extend);
function extend(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for(var key in definition)prototype[key] = definition[key];
    return prototype;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5gBZc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gray", ()=>gray);
parcelHelpers.export(exports, "default", ()=>lab);
parcelHelpers.export(exports, "Lab", ()=>Lab);
parcelHelpers.export(exports, "lch", ()=>lch);
parcelHelpers.export(exports, "hcl", ()=>hcl);
parcelHelpers.export(exports, "Hcl", ()=>Hcl);
var _defineJs = require("./define.js");
var _defineJsDefault = parcelHelpers.interopDefault(_defineJs);
var _colorJs = require("./color.js");
var _mathJs = require("./math.js");
// https://observablehq.com/@mbostock/lab-and-rgb
const K = 18, Xn = 0.96422, Yn = 1, Zn = 0.82521, t0 = 4 / 29, t1 = 6 / 29, t2 = 3 * t1 * t1, t3 = t1 * t1 * t1;
function labConvert(o) {
    if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
    if (o instanceof Hcl) return hcl2lab(o);
    if (!(o instanceof (0, _colorJs.Rgb))) o = (0, _colorJs.rgbConvert)(o);
    var r = rgb2lrgb(o.r), g = rgb2lrgb(o.g), b = rgb2lrgb(o.b), y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
    if (r === g && g === b) x = z = y;
    else {
        x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
        z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
    }
    return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}
function gray(l, opacity) {
    return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
}
function lab(l, a, b, opacity) {
    return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}
function Lab(l, a, b, opacity) {
    this.l = +l;
    this.a = +a;
    this.b = +b;
    this.opacity = +opacity;
}
(0, _defineJsDefault.default)(Lab, lab, (0, _defineJs.extend)((0, _colorJs.Color), {
    brighter (k) {
        return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
    },
    darker (k) {
        return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
    },
    rgb () {
        var y = (this.l + 16) / 116, x = isNaN(this.a) ? y : y + this.a / 500, z = isNaN(this.b) ? y : y - this.b / 200;
        x = Xn * lab2xyz(x);
        y = Yn * lab2xyz(y);
        z = Zn * lab2xyz(z);
        return new (0, _colorJs.Rgb)(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
    }
}));
function xyz2lab(t) {
    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}
function lab2xyz(t) {
    return t > t1 ? t * t * t : t2 * (t - t0);
}
function lrgb2rgb(x) {
    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}
function rgb2lrgb(x) {
    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}
function hclConvert(o) {
    if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
    if (!(o instanceof Lab)) o = labConvert(o);
    if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);
    var h = Math.atan2(o.b, o.a) * (0, _mathJs.degrees);
    return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}
function lch(l, c, h, opacity) {
    return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}
function hcl(h, c, l, opacity) {
    return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}
function Hcl(h, c, l, opacity) {
    this.h = +h;
    this.c = +c;
    this.l = +l;
    this.opacity = +opacity;
}
function hcl2lab(o) {
    if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
    var h = o.h * (0, _mathJs.radians);
    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}
(0, _defineJsDefault.default)(Hcl, hcl, (0, _defineJs.extend)((0, _colorJs.Color), {
    brighter (k) {
        return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
    },
    darker (k) {
        return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
    },
    rgb () {
        return hcl2lab(this).rgb();
    }
}));

},{"./define.js":"avQOe","./color.js":"cNCyv","./math.js":"beC5A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"beC5A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "radians", ()=>radians);
parcelHelpers.export(exports, "degrees", ()=>degrees);
const radians = Math.PI / 180;
const degrees = 180 / Math.PI;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"805Dt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>cubehelix);
parcelHelpers.export(exports, "Cubehelix", ()=>Cubehelix);
var _defineJs = require("./define.js");
var _defineJsDefault = parcelHelpers.interopDefault(_defineJs);
var _colorJs = require("./color.js");
var _mathJs = require("./math.js");
var A = -0.14861, B = 1.78277, C = -0.29227, D = -0.90649, E = 1.97294, ED = E * D, EB = E * B, BC_DA = B * C - D * A;
function cubehelixConvert(o) {
    if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof (0, _colorJs.Rgb))) o = (0, _colorJs.rgbConvert)(o);
    var r = o.r / 255, g = o.g / 255, b = o.b / 255, l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB), bl = b - l, k = (E * (g - l) - C * bl) / D, s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), h = s ? Math.atan2(k, bl) * (0, _mathJs.degrees) - 120 : NaN;
    return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}
function cubehelix(h, s, l, opacity) {
    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}
function Cubehelix(h, s, l, opacity) {
    this.h = +h;
    this.s = +s;
    this.l = +l;
    this.opacity = +opacity;
}
(0, _defineJsDefault.default)(Cubehelix, cubehelix, (0, _defineJs.extend)((0, _colorJs.Color), {
    brighter (k) {
        k = k == null ? (0, _colorJs.brighter) : Math.pow((0, _colorJs.brighter), k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
    },
    darker (k) {
        k = k == null ? (0, _colorJs.darker) : Math.pow((0, _colorJs.darker), k);
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
    },
    rgb () {
        var h = isNaN(this.h) ? 0 : (this.h + 120) * (0, _mathJs.radians), l = +this.l, a = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh = Math.cos(h), sinh = Math.sin(h);
        return new (0, _colorJs.Rgb)(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
    }
}));

},{"./define.js":"avQOe","./color.js":"cNCyv","./math.js":"beC5A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gHrgo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rgbBasis", ()=>rgbBasis);
parcelHelpers.export(exports, "rgbBasisClosed", ()=>rgbBasisClosed);
var _d3Color = require("d3-color");
var _basisJs = require("./basis.js");
var _basisJsDefault = parcelHelpers.interopDefault(_basisJs);
var _basisClosedJs = require("./basisClosed.js");
var _basisClosedJsDefault = parcelHelpers.interopDefault(_basisClosedJs);
var _colorJs = require("./color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
exports.default = function rgbGamma(y) {
    var color = (0, _colorJs.gamma)(y);
    function rgb(start, end) {
        var r = color((start = (0, _d3Color.rgb)(start)).r, (end = (0, _d3Color.rgb)(end)).r), g = color(start.g, end.g), b = color(start.b, end.b), opacity = (0, _colorJsDefault.default)(start.opacity, end.opacity);
        return function(t) {
            start.r = r(t);
            start.g = g(t);
            start.b = b(t);
            start.opacity = opacity(t);
            return start + "";
        };
    }
    rgb.gamma = rgbGamma;
    return rgb;
}(1);
function rgbSpline(spline) {
    return function(colors) {
        var n = colors.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color;
        for(i = 0; i < n; ++i){
            color = (0, _d3Color.rgb)(colors[i]);
            r[i] = color.r || 0;
            g[i] = color.g || 0;
            b[i] = color.b || 0;
        }
        r = spline(r);
        g = spline(g);
        b = spline(b);
        color.opacity = 1;
        return function(t) {
            color.r = r(t);
            color.g = g(t);
            color.b = b(t);
            return color + "";
        };
    };
}
var rgbBasis = rgbSpline((0, _basisJsDefault.default));
var rgbBasisClosed = rgbSpline((0, _basisClosedJsDefault.default));

},{"d3-color":"grhaa","./basis.js":"enhcL","./basisClosed.js":"gdZAO","./color.js":"1eZq9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"enhcL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "basis", ()=>basis);
parcelHelpers.export(exports, "default", ()=>function(values) {
        var n = values.length - 1;
        return function(t) {
            var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
            return basis((t - i / n) * n, v0, v1, v2, v3);
        };
    });
function basis(t1, v0, v1, v2, v3) {
    var t2 = t1 * t1, t3 = t2 * t1;
    return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gdZAO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(values) {
        var n = values.length;
        return function(t) {
            var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
            return (0, _basisJs.basis)((t - i / n) * n, v0, v1, v2, v3);
        };
    });
var _basisJs = require("./basis.js");

},{"./basis.js":"enhcL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1eZq9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hue", ()=>hue);
parcelHelpers.export(exports, "gamma", ()=>gamma);
parcelHelpers.export(exports, "default", ()=>nogamma);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
function linear(a, d) {
    return function(t) {
        return a + t * d;
    };
}
function exponential(a, b, y) {
    return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
        return Math.pow(a + t * b, y);
    };
}
function hue(a, b) {
    var d = b - a;
    return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : (0, _constantJsDefault.default)(isNaN(a) ? b : a);
}
function gamma(y) {
    return (y = +y) === 1 ? nogamma : function(a, b) {
        return b - a ? exponential(a, b, y) : (0, _constantJsDefault.default)(isNaN(a) ? b : a);
    };
}
function nogamma(a, b) {
    var d = b - a;
    return d ? linear(a, d) : (0, _constantJsDefault.default)(isNaN(a) ? b : a);
}

},{"./constant.js":"aXv76","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aXv76":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (x)=>()=>x;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bQXK0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(a, b) {
        return ((0, _numberArrayJs.isNumberArray)(b) ? (0, _numberArrayJsDefault.default) : genericArray)(a, b);
    });
parcelHelpers.export(exports, "genericArray", ()=>genericArray);
var _valueJs = require("./value.js");
var _valueJsDefault = parcelHelpers.interopDefault(_valueJs);
var _numberArrayJs = require("./numberArray.js");
var _numberArrayJsDefault = parcelHelpers.interopDefault(_numberArrayJs);
function genericArray(a, b) {
    var nb = b ? b.length : 0, na = a ? Math.min(nb, a.length) : 0, x = new Array(na), c = new Array(nb), i;
    for(i = 0; i < na; ++i)x[i] = (0, _valueJsDefault.default)(a[i], b[i]);
    for(; i < nb; ++i)c[i] = b[i];
    return function(t) {
        for(i = 0; i < na; ++i)c[i] = x[i](t);
        return c;
    };
}

},{"./value.js":"2GpMq","./numberArray.js":"l29YZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l29YZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(a, b) {
        if (!b) b = [];
        var n = a ? Math.min(b.length, a.length) : 0, c = b.slice(), i;
        return function(t) {
            for(i = 0; i < n; ++i)c[i] = a[i] * (1 - t) + b[i] * t;
            return c;
        };
    });
parcelHelpers.export(exports, "isNumberArray", ()=>isNumberArray);
function isNumberArray(x) {
    return ArrayBuffer.isView(x) && !(x instanceof DataView);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cCKgJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(a, b) {
        var d = new Date;
        return a = +a, b = +b, function(t) {
            return d.setTime(a * (1 - t) + b * t), d;
        };
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fZAq5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(a, b) {
        return a = +a, b = +b, function(t) {
            return a * (1 - t) + b * t;
        };
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hdyKg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(a, b) {
        var i = {}, c = {}, k;
        if (a === null || typeof a !== "object") a = {};
        if (b === null || typeof b !== "object") b = {};
        for(k in b)if (k in a) i[k] = (0, _valueJsDefault.default)(a[k], b[k]);
        else c[k] = b[k];
        return function(t) {
            for(k in i)c[k] = i[k](t);
            return c;
        };
    });
var _valueJs = require("./value.js");
var _valueJsDefault = parcelHelpers.interopDefault(_valueJs);

},{"./value.js":"2GpMq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"Qre8m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(a, b) {
        var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = []; // number interpolators
        // Coerce inputs to strings.
        a = a + "", b = b + "";
        // Interpolate pairs of numbers in a & b.
        while((am = reA.exec(a)) && (bm = reB.exec(b))){
            if ((bs = bm.index) > bi) {
                bs = b.slice(bi, bs);
                if (s[i]) s[i] += bs; // coalesce with previous string
                else s[++i] = bs;
            }
            if ((am = am[0]) === (bm = bm[0])) {
                if (s[i]) s[i] += bm; // coalesce with previous string
                else s[++i] = bm;
            } else {
                s[++i] = null;
                q.push({
                    i: i,
                    x: (0, _numberJsDefault.default)(am, bm)
                });
            }
            bi = reB.lastIndex;
        }
        // Add remains of b.
        if (bi < b.length) {
            bs = b.slice(bi);
            if (s[i]) s[i] += bs; // coalesce with previous string
            else s[++i] = bs;
        }
        // Special optimization for only a single match.
        // Otherwise, interpolate each of the numbers and rejoin the string.
        return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function(t) {
            for(var i = 0, o; i < b; ++i)s[(o = q[i]).i] = o.x(t);
            return s.join("");
        });
    });
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, reB = new RegExp(reA.source, "g");
function zero(b) {
    return function() {
        return b;
    };
}
function one(b) {
    return function(t) {
        return b(t) + "";
    };
}

},{"./number.js":"fZAq5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8lHW7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(a, b) {
        return a = +a, b = +b, function(t) {
            return Math.round(a * (1 - t) + b * t);
        };
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jDBQO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "interpolateTransformCss", ()=>interpolateTransformCss);
parcelHelpers.export(exports, "interpolateTransformSvg", ()=>interpolateTransformSvg);
var _numberJs = require("../number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
var _parseJs = require("./parse.js");
function interpolateTransform(parse, pxComma, pxParen, degParen) {
    function pop(s) {
        return s.length ? s.pop() + " " : "";
    }
    function translate(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
            var i = s.push("translate(", null, pxComma, null, pxParen);
            q.push({
                i: i - 4,
                x: (0, _numberJsDefault.default)(xa, xb)
            }, {
                i: i - 2,
                x: (0, _numberJsDefault.default)(ya, yb)
            });
        } else if (xb || yb) s.push("translate(" + xb + pxComma + yb + pxParen);
    }
    function rotate(a, b, s, q) {
        if (a !== b) {
            if (a - b > 180) b += 360;
            else if (b - a > 180) a += 360; // shortest path
            q.push({
                i: s.push(pop(s) + "rotate(", null, degParen) - 2,
                x: (0, _numberJsDefault.default)(a, b)
            });
        } else if (b) s.push(pop(s) + "rotate(" + b + degParen);
    }
    function skewX(a, b, s, q) {
        if (a !== b) q.push({
            i: s.push(pop(s) + "skewX(", null, degParen) - 2,
            x: (0, _numberJsDefault.default)(a, b)
        });
        else if (b) s.push(pop(s) + "skewX(" + b + degParen);
    }
    function scale(xa, ya, xb, yb, s, q) {
        if (xa !== xb || ya !== yb) {
            var i = s.push(pop(s) + "scale(", null, ",", null, ")");
            q.push({
                i: i - 4,
                x: (0, _numberJsDefault.default)(xa, xb)
            }, {
                i: i - 2,
                x: (0, _numberJsDefault.default)(ya, yb)
            });
        } else if (xb !== 1 || yb !== 1) s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
    return function(a, b) {
        var s = [], q = []; // number interpolators
        a = parse(a), b = parse(b);
        translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
        rotate(a.rotate, b.rotate, s, q);
        skewX(a.skewX, b.skewX, s, q);
        scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
        a = b = null; // gc
        return function(t) {
            var i = -1, n = q.length, o;
            while(++i < n)s[(o = q[i]).i] = o.x(t);
            return s.join("");
        };
    };
}
var interpolateTransformCss = interpolateTransform((0, _parseJs.parseCss), "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform((0, _parseJs.parseSvg), ", ", ")", ")");

},{"../number.js":"fZAq5","./parse.js":"dwvtF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dwvtF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable no-undef */ parcelHelpers.export(exports, "parseCss", ()=>parseCss);
parcelHelpers.export(exports, "parseSvg", ()=>parseSvg);
var _decomposeJs = require("./decompose.js");
var _decomposeJsDefault = parcelHelpers.interopDefault(_decomposeJs);
var svgNode;
function parseCss(value) {
    const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
    return m.isIdentity ? (0, _decomposeJs.identity) : (0, _decomposeJsDefault.default)(m.a, m.b, m.c, m.d, m.e, m.f);
}
function parseSvg(value) {
    if (value == null) return 0, _decomposeJs.identity;
    if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
    svgNode.setAttribute("transform", value);
    if (!(value = svgNode.transform.baseVal.consolidate())) return 0, _decomposeJs.identity;
    value = value.matrix;
    return (0, _decomposeJsDefault.default)(value.a, value.b, value.c, value.d, value.e, value.f);
}

},{"./decompose.js":"7Ejbr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Ejbr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "identity", ()=>identity);
parcelHelpers.export(exports, "default", ()=>function(a, b, c, d, e, f) {
        var scaleX, scaleY, skewX;
        if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
        if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
        if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
        if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
        return {
            translateX: e,
            translateY: f,
            rotate: Math.atan2(b, a) * degrees,
            skewX: Math.atan(skewX) * degrees,
            scaleX: scaleX,
            scaleY: scaleY
        };
    });
var degrees = 180 / Math.PI;
var identity = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7nRsd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var epsilon2 = 1e-12;
function cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
}
function sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
}
function tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}
exports.default = function zoomRho(rho, rho2, rho4) {
    // p0 = [ux0, uy0, w0]
    // p1 = [ux1, uy1, w1]
    function zoom(p0, p1) {
        var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
        // Special case for u0 ≅ u1.
        if (d2 < epsilon2) {
            S = Math.log(w1 / w0) / rho;
            i = function(t) {
                return [
                    ux0 + t * dx,
                    uy0 + t * dy,
                    w0 * Math.exp(rho * t * S)
                ];
            };
        } else {
            var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
            S = (r1 - r0) / rho;
            i = function(t) {
                var s = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
                return [
                    ux0 + u * dx,
                    uy0 + u * dy,
                    w0 * coshr0 / cosh(rho * s + r0)
                ];
            };
        }
        i.duration = S * 1000 * rho / Math.SQRT2;
        return i;
    }
    zoom.rho = function(_) {
        var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
        return zoomRho(_1, _2, _4);
    };
    return zoom;
}(Math.SQRT2, 2, 4);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9jAYx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hslLong", ()=>hslLong);
var _d3Color = require("d3-color");
var _colorJs = require("./color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
function hsl(hue) {
    return function(start, end) {
        var h = hue((start = (0, _d3Color.hsl)(start)).h, (end = (0, _d3Color.hsl)(end)).h), s = (0, _colorJsDefault.default)(start.s, end.s), l = (0, _colorJsDefault.default)(start.l, end.l), opacity = (0, _colorJsDefault.default)(start.opacity, end.opacity);
        return function(t) {
            start.h = h(t);
            start.s = s(t);
            start.l = l(t);
            start.opacity = opacity(t);
            return start + "";
        };
    };
}
exports.default = hsl((0, _colorJs.hue));
var hslLong = hsl((0, _colorJsDefault.default));

},{"d3-color":"grhaa","./color.js":"1eZq9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b6zM3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>lab);
var _d3Color = require("d3-color");
var _colorJs = require("./color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
function lab(start, end) {
    var l = (0, _colorJsDefault.default)((start = (0, _d3Color.lab)(start)).l, (end = (0, _d3Color.lab)(end)).l), a = (0, _colorJsDefault.default)(start.a, end.a), b = (0, _colorJsDefault.default)(start.b, end.b), opacity = (0, _colorJsDefault.default)(start.opacity, end.opacity);
    return function(t) {
        start.l = l(t);
        start.a = a(t);
        start.b = b(t);
        start.opacity = opacity(t);
        return start + "";
    };
}

},{"d3-color":"grhaa","./color.js":"1eZq9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"afUSw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hclLong", ()=>hclLong);
var _d3Color = require("d3-color");
var _colorJs = require("./color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
function hcl(hue) {
    return function(start, end) {
        var h = hue((start = (0, _d3Color.hcl)(start)).h, (end = (0, _d3Color.hcl)(end)).h), c = (0, _colorJsDefault.default)(start.c, end.c), l = (0, _colorJsDefault.default)(start.l, end.l), opacity = (0, _colorJsDefault.default)(start.opacity, end.opacity);
        return function(t) {
            start.h = h(t);
            start.c = c(t);
            start.l = l(t);
            start.opacity = opacity(t);
            return start + "";
        };
    };
}
exports.default = hcl((0, _colorJs.hue));
var hclLong = hcl((0, _colorJsDefault.default));

},{"d3-color":"grhaa","./color.js":"1eZq9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7oITO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cubehelixLong", ()=>cubehelixLong);
var _d3Color = require("d3-color");
var _colorJs = require("./color.js");
var _colorJsDefault = parcelHelpers.interopDefault(_colorJs);
function cubehelix(hue) {
    return function cubehelixGamma(y) {
        y = +y;
        function cubehelix(start, end) {
            var h = hue((start = (0, _d3Color.cubehelix)(start)).h, (end = (0, _d3Color.cubehelix)(end)).h), s = (0, _colorJsDefault.default)(start.s, end.s), l = (0, _colorJsDefault.default)(start.l, end.l), opacity = (0, _colorJsDefault.default)(start.opacity, end.opacity);
            return function(t) {
                start.h = h(t);
                start.s = s(t);
                start.l = l(Math.pow(t, y));
                start.opacity = opacity(t);
                return start + "";
            };
        }
        cubehelix.gamma = cubehelixGamma;
        return cubehelix;
    }(1);
}
exports.default = cubehelix((0, _colorJs.hue));
var cubehelixLong = cubehelix((0, _colorJsDefault.default));

},{"d3-color":"grhaa","./color.js":"1eZq9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1W7eI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>piecewise);
var _valueJs = require("./value.js");
var _valueJsDefault = parcelHelpers.interopDefault(_valueJs);
function piecewise(interpolate, values) {
    if (values === undefined) values = interpolate, interpolate = (0, _valueJsDefault.default);
    var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
    while(i < n)I[i] = interpolate(v, v = values[++i]);
    return function(t) {
        var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
        return I[i](t - i);
    };
}

},{"./value.js":"2GpMq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cTNfr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(interpolator, n) {
        var samples = new Array(n);
        for(var i = 0; i < n; ++i)samples[i] = interpolator(i / (n - 1));
        return samples;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4lorl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transition", ()=>(0, _indexJsDefault.default));
parcelHelpers.export(exports, "active", ()=>(0, _activeJsDefault.default));
parcelHelpers.export(exports, "interrupt", ()=>(0, _interruptJsDefault.default));
var _indexJs = require("./selection/index.js");
var _indexJs1 = require("./transition/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs1);
var _activeJs = require("./active.js");
var _activeJsDefault = parcelHelpers.interopDefault(_activeJs);
var _interruptJs = require("./interrupt.js");
var _interruptJsDefault = parcelHelpers.interopDefault(_interruptJs);

},{"./selection/index.js":"heX1u","./transition/index.js":false,"./active.js":false,"./interrupt.js":"j3g05","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"heX1u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _d3Selection = require("d3-selection");
var _interruptJs = require("./interrupt.js");
var _interruptJsDefault = parcelHelpers.interopDefault(_interruptJs);
var _transitionJs = require("./transition.js");
var _transitionJsDefault = parcelHelpers.interopDefault(_transitionJs);
(0, _d3Selection.selection).prototype.interrupt = (0, _interruptJsDefault.default);
(0, _d3Selection.selection).prototype.transition = (0, _transitionJsDefault.default);

},{"d3-selection":"gn9gd","./interrupt.js":"ecsW0","./transition.js":"aZzEX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ecsW0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(name) {
        return this.each(function() {
            (0, _interruptJsDefault.default)(this, name);
        });
    });
var _interruptJs = require("../interrupt.js");
var _interruptJsDefault = parcelHelpers.interopDefault(_interruptJs);

},{"../interrupt.js":"j3g05","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j3g05":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(node, name) {
        var schedules = node.__transition, schedule, active, empty = true, i;
        if (!schedules) return;
        name = name == null ? null : name + "";
        for(i in schedules){
            if ((schedule = schedules[i]).name !== name) {
                empty = false;
                continue;
            }
            active = schedule.state > (0, _scheduleJs.STARTING) && schedule.state < (0, _scheduleJs.ENDING);
            schedule.state = (0, _scheduleJs.ENDED);
            schedule.timer.stop();
            schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
            delete schedules[i];
        }
        if (empty) delete node.__transition;
    });
var _scheduleJs = require("./transition/schedule.js");

},{"./transition/schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"de74c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CREATED", ()=>CREATED);
parcelHelpers.export(exports, "SCHEDULED", ()=>SCHEDULED);
parcelHelpers.export(exports, "STARTING", ()=>STARTING);
parcelHelpers.export(exports, "STARTED", ()=>STARTED);
parcelHelpers.export(exports, "RUNNING", ()=>RUNNING);
parcelHelpers.export(exports, "ENDING", ()=>ENDING);
parcelHelpers.export(exports, "ENDED", ()=>ENDED);
parcelHelpers.export(exports, "default", ()=>function(node, name, id, index, group, timing) {
        var schedules = node.__transition;
        if (!schedules) node.__transition = {};
        else if (id in schedules) return;
        create(node, id, {
            name: name,
            index: index,
            group: group,
            on: emptyOn,
            tween: emptyTween,
            time: timing.time,
            delay: timing.delay,
            duration: timing.duration,
            ease: timing.ease,
            timer: null,
            state: CREATED
        });
    });
parcelHelpers.export(exports, "init", ()=>init);
parcelHelpers.export(exports, "set", ()=>set);
parcelHelpers.export(exports, "get", ()=>get);
var _d3Dispatch = require("d3-dispatch");
var _d3Timer = require("d3-timer");
var emptyOn = (0, _d3Dispatch.dispatch)("start", "end", "cancel", "interrupt");
var emptyTween = [];
var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;
function init(node, id) {
    var schedule = get(node, id);
    if (schedule.state > CREATED) throw new Error("too late; already scheduled");
    return schedule;
}
function set(node, id) {
    var schedule = get(node, id);
    if (schedule.state > STARTED) throw new Error("too late; already running");
    return schedule;
}
function get(node, id) {
    var schedule = node.__transition;
    if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
    return schedule;
}
function create(node, id, self) {
    var schedules = node.__transition, tween;
    // Initialize the self timer when the transition is created.
    // Note the actual delay is not known until the first callback!
    schedules[id] = self;
    self.timer = (0, _d3Timer.timer)(schedule, 0, self.time);
    function schedule(elapsed) {
        self.state = SCHEDULED;
        self.timer.restart(start, self.delay, self.time);
        // If the elapsed delay is less than our first sleep, start immediately.
        if (self.delay <= elapsed) start(elapsed - self.delay);
    }
    function start(elapsed) {
        var i, j, n, o;
        // If the state is not SCHEDULED, then we previously errored on start.
        if (self.state !== SCHEDULED) return stop();
        for(i in schedules){
            o = schedules[i];
            if (o.name !== self.name) continue;
            // While this element already has a starting transition during this frame,
            // defer starting an interrupting transition until that transition has a
            // chance to tick (and possibly end); see d3/d3-transition#54!
            if (o.state === STARTED) return (0, _d3Timer.timeout)(start);
            // Interrupt the active transition, if any.
            if (o.state === RUNNING) {
                o.state = ENDED;
                o.timer.stop();
                o.on.call("interrupt", node, node.__data__, o.index, o.group);
                delete schedules[i];
            } else if (+i < id) {
                o.state = ENDED;
                o.timer.stop();
                o.on.call("cancel", node, node.__data__, o.index, o.group);
                delete schedules[i];
            }
        }
        // Defer the first tick to end of the current frame; see d3/d3#1576.
        // Note the transition may be canceled after start and before the first tick!
        // Note this must be scheduled before the start event; see d3/d3-transition#16!
        // Assuming this is successful, subsequent callbacks go straight to tick.
        (0, _d3Timer.timeout)(function() {
            if (self.state === STARTED) {
                self.state = RUNNING;
                self.timer.restart(tick, self.delay, self.time);
                tick(elapsed);
            }
        });
        // Dispatch the start event.
        // Note this must be done before the tween are initialized.
        self.state = STARTING;
        self.on.call("start", node, node.__data__, self.index, self.group);
        if (self.state !== STARTING) return; // interrupted
        self.state = STARTED;
        // Initialize the tween, deleting null tween.
        tween = new Array(n = self.tween.length);
        for(i = 0, j = -1; i < n; ++i)if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) tween[++j] = o;
        tween.length = j + 1;
    }
    function tick(elapsed) {
        var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1), i = -1, n = tween.length;
        while(++i < n)tween[i].call(node, t);
        // Dispatch the end event.
        if (self.state === ENDING) {
            self.on.call("end", node, node.__data__, self.index, self.group);
            stop();
        }
    }
    function stop() {
        self.state = ENDED;
        self.timer.stop();
        delete schedules[id];
        for(var i in schedules)return; // eslint-disable-line no-unused-vars
        delete node.__transition;
    }
}

},{"d3-dispatch":"5WtHO","d3-timer":"7TEss","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7TEss":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "now", ()=>(0, _timerJs.now));
parcelHelpers.export(exports, "timer", ()=>(0, _timerJs.timer));
parcelHelpers.export(exports, "timerFlush", ()=>(0, _timerJs.timerFlush));
parcelHelpers.export(exports, "timeout", ()=>(0, _timeoutJsDefault.default));
parcelHelpers.export(exports, "interval", ()=>(0, _intervalJsDefault.default));
var _timerJs = require("./timer.js");
var _timeoutJs = require("./timeout.js");
var _timeoutJsDefault = parcelHelpers.interopDefault(_timeoutJs);
var _intervalJs = require("./interval.js");
var _intervalJsDefault = parcelHelpers.interopDefault(_intervalJs);

},{"./timer.js":"bfF2F","./timeout.js":"ioM7O","./interval.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bfF2F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "now", ()=>now);
parcelHelpers.export(exports, "Timer", ()=>Timer);
parcelHelpers.export(exports, "timer", ()=>timer);
parcelHelpers.export(exports, "timerFlush", ()=>timerFlush);
var frame = 0, timeout = 0, interval = 0, pokeDelay = 1000, taskHead, taskTail, clockLast = 0, clockNow = 0, clockSkew = 0, clock = typeof performance === "object" && performance.now ? performance : Date, setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
    setTimeout(f, 17);
};
function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
    clockNow = 0;
}
function Timer() {
    this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
    constructor: Timer,
    restart: function(callback, delay, time) {
        if (typeof callback !== "function") throw new TypeError("callback is not a function");
        time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
        if (!this._next && taskTail !== this) {
            if (taskTail) taskTail._next = this;
            else taskHead = this;
            taskTail = this;
        }
        this._call = callback;
        this._time = time;
        sleep();
    },
    stop: function() {
        if (this._call) {
            this._call = null;
            this._time = Infinity;
            sleep();
        }
    }
};
function timer(callback, delay, time) {
    var t = new Timer;
    t.restart(callback, delay, time);
    return t;
}
function timerFlush() {
    now(); // Get the current time, if not already set.
    ++frame; // Pretend we’ve set an alarm, if we haven’t already.
    var t = taskHead, e;
    while(t){
        if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);
        t = t._next;
    }
    --frame;
}
function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew;
    frame = timeout = 0;
    try {
        timerFlush();
    } finally{
        frame = 0;
        nap();
        clockNow = 0;
    }
}
function poke() {
    var now = clock.now(), delay = now - clockLast;
    if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}
function nap() {
    var t0, t1 = taskHead, t2, time = Infinity;
    while(t1)if (t1._call) {
        if (time > t1._time) time = t1._time;
        t0 = t1, t1 = t1._next;
    } else {
        t2 = t1._next, t1._next = null;
        t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
    taskTail = t0;
    sleep(time);
}
function sleep(time) {
    if (frame) return; // Soonest alarm already set, or will be.
    if (timeout) timeout = clearTimeout(timeout);
    var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
    if (delay > 24) {
        if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
        if (interval) interval = clearInterval(interval);
    } else {
        if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
        frame = 1, setFrame(wake);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ioM7O":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(callback, delay, time) {
        var t = new (0, _timerJs.Timer);
        delay = delay == null ? 0 : +delay;
        t.restart((elapsed)=>{
            t.stop();
            callback(elapsed + delay);
        }, delay, time);
        return t;
    });
var _timerJs = require("./timer.js");

},{"./timer.js":"bfF2F","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aZzEX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(name) {
        var id, timing;
        if (name instanceof (0, _indexJs.Transition)) id = name._id, name = name._name;
        else id = (0, _indexJs.newId)(), (timing = defaultTiming).time = (0, _d3Timer.now)(), name = name == null ? null : name + "";
        for(var groups = this._groups, m = groups.length, j = 0; j < m; ++j){
            for(var group = groups[j], n = group.length, node, i = 0; i < n; ++i)if (node = group[i]) (0, _scheduleJsDefault.default)(node, name, id, i, group, timing || inherit(node, id));
        }
        return new (0, _indexJs.Transition)(groups, this._parents, name, id);
    });
var _indexJs = require("../transition/index.js");
var _scheduleJs = require("../transition/schedule.js");
var _scheduleJsDefault = parcelHelpers.interopDefault(_scheduleJs);
var _d3Ease = require("d3-ease");
var _d3Timer = require("d3-timer");
var defaultTiming = {
    time: null,
    delay: 0,
    duration: 250,
    ease: (0, _d3Ease.easeCubicInOut)
};
function inherit(node, id) {
    var timing;
    while(!(timing = node.__transition) || !(timing = timing[id])){
        if (!(node = node.parentNode)) throw new Error(`transition ${id} not found`);
    }
    return timing;
}

},{"../transition/index.js":"h2Srb","../transition/schedule.js":"de74c","d3-ease":"8sCNl","d3-timer":"7TEss","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h2Srb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Transition", ()=>Transition);
parcelHelpers.export(exports, "default", ()=>transition);
parcelHelpers.export(exports, "newId", ()=>newId);
var _d3Selection = require("d3-selection");
var _attrJs = require("./attr.js");
var _attrJsDefault = parcelHelpers.interopDefault(_attrJs);
var _attrTweenJs = require("./attrTween.js");
var _attrTweenJsDefault = parcelHelpers.interopDefault(_attrTweenJs);
var _delayJs = require("./delay.js");
var _delayJsDefault = parcelHelpers.interopDefault(_delayJs);
var _durationJs = require("./duration.js");
var _durationJsDefault = parcelHelpers.interopDefault(_durationJs);
var _easeJs = require("./ease.js");
var _easeJsDefault = parcelHelpers.interopDefault(_easeJs);
var _easeVaryingJs = require("./easeVarying.js");
var _easeVaryingJsDefault = parcelHelpers.interopDefault(_easeVaryingJs);
var _filterJs = require("./filter.js");
var _filterJsDefault = parcelHelpers.interopDefault(_filterJs);
var _mergeJs = require("./merge.js");
var _mergeJsDefault = parcelHelpers.interopDefault(_mergeJs);
var _onJs = require("./on.js");
var _onJsDefault = parcelHelpers.interopDefault(_onJs);
var _removeJs = require("./remove.js");
var _removeJsDefault = parcelHelpers.interopDefault(_removeJs);
var _selectJs = require("./select.js");
var _selectJsDefault = parcelHelpers.interopDefault(_selectJs);
var _selectAllJs = require("./selectAll.js");
var _selectAllJsDefault = parcelHelpers.interopDefault(_selectAllJs);
var _selectionJs = require("./selection.js");
var _selectionJsDefault = parcelHelpers.interopDefault(_selectionJs);
var _styleJs = require("./style.js");
var _styleJsDefault = parcelHelpers.interopDefault(_styleJs);
var _styleTweenJs = require("./styleTween.js");
var _styleTweenJsDefault = parcelHelpers.interopDefault(_styleTweenJs);
var _textJs = require("./text.js");
var _textJsDefault = parcelHelpers.interopDefault(_textJs);
var _textTweenJs = require("./textTween.js");
var _textTweenJsDefault = parcelHelpers.interopDefault(_textTweenJs);
var _transitionJs = require("./transition.js");
var _transitionJsDefault = parcelHelpers.interopDefault(_transitionJs);
var _tweenJs = require("./tween.js");
var _tweenJsDefault = parcelHelpers.interopDefault(_tweenJs);
var _endJs = require("./end.js");
var _endJsDefault = parcelHelpers.interopDefault(_endJs);
var id = 0;
function Transition(groups, parents, name, id) {
    this._groups = groups;
    this._parents = parents;
    this._name = name;
    this._id = id;
}
function transition(name) {
    return (0, _d3Selection.selection)().transition(name);
}
function newId() {
    return ++id;
}
var selection_prototype = (0, _d3Selection.selection).prototype;
Transition.prototype = transition.prototype = {
    constructor: Transition,
    select: (0, _selectJsDefault.default),
    selectAll: (0, _selectAllJsDefault.default),
    selectChild: selection_prototype.selectChild,
    selectChildren: selection_prototype.selectChildren,
    filter: (0, _filterJsDefault.default),
    merge: (0, _mergeJsDefault.default),
    selection: (0, _selectionJsDefault.default),
    transition: (0, _transitionJsDefault.default),
    call: selection_prototype.call,
    nodes: selection_prototype.nodes,
    node: selection_prototype.node,
    size: selection_prototype.size,
    empty: selection_prototype.empty,
    each: selection_prototype.each,
    on: (0, _onJsDefault.default),
    attr: (0, _attrJsDefault.default),
    attrTween: (0, _attrTweenJsDefault.default),
    style: (0, _styleJsDefault.default),
    styleTween: (0, _styleTweenJsDefault.default),
    text: (0, _textJsDefault.default),
    textTween: (0, _textTweenJsDefault.default),
    remove: (0, _removeJsDefault.default),
    tween: (0, _tweenJsDefault.default),
    delay: (0, _delayJsDefault.default),
    duration: (0, _durationJsDefault.default),
    ease: (0, _easeJsDefault.default),
    easeVarying: (0, _easeVaryingJsDefault.default),
    end: (0, _endJsDefault.default),
    [Symbol.iterator]: selection_prototype[Symbol.iterator]
};

},{"d3-selection":"gn9gd","./attr.js":"9UgA3","./attrTween.js":"1hMpn","./delay.js":"2BzOF","./duration.js":"ei298","./ease.js":"lCGHM","./easeVarying.js":"aju4f","./filter.js":"d3Uia","./merge.js":"9odBi","./on.js":"3XrBC","./remove.js":"aZLkz","./select.js":"bgUUX","./selectAll.js":"lqPi4","./selection.js":"iWTRA","./style.js":"44QDP","./styleTween.js":"42AvL","./text.js":"6mGEx","./textTween.js":"kqC5z","./transition.js":"50tVR","./tween.js":"1Kbbg","./end.js":"ev0ir","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9UgA3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(name, value) {
        var fullname = (0, _d3Selection.namespace)(name), i = fullname === "transform" ? (0, _d3Interpolate.interpolateTransformSvg) : (0, _interpolateJsDefault.default);
        return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, (0, _tweenJs.tweenValue)(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname) : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
    });
var _d3Interpolate = require("d3-interpolate");
var _d3Selection = require("d3-selection");
var _tweenJs = require("./tween.js");
var _interpolateJs = require("./interpolate.js");
var _interpolateJsDefault = parcelHelpers.interopDefault(_interpolateJs);
function attrRemove(name) {
    return function() {
        this.removeAttribute(name);
    };
}
function attrRemoveNS(fullname) {
    return function() {
        this.removeAttributeNS(fullname.space, fullname.local);
    };
}
function attrConstant(name, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
        var string0 = this.getAttribute(name);
        return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
}
function attrConstantNS(fullname, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
        var string0 = this.getAttributeNS(fullname.space, fullname.local);
        return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
}
function attrFunction(name, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
        var string0, value1 = value(this), string1;
        if (value1 == null) return void this.removeAttribute(name);
        string0 = this.getAttribute(name);
        string1 = value1 + "";
        return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
}
function attrFunctionNS(fullname, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
        var string0, value1 = value(this), string1;
        if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
        string0 = this.getAttributeNS(fullname.space, fullname.local);
        string1 = value1 + "";
        return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
}

},{"d3-interpolate":"6jJyi","d3-selection":"gn9gd","./tween.js":"1Kbbg","./interpolate.js":"69lgs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Kbbg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(name, value) {
        var id = this._id;
        name += "";
        if (arguments.length < 2) {
            var tween = (0, _scheduleJs.get)(this.node(), id).tween;
            for(var i = 0, n = tween.length, t; i < n; ++i){
                if ((t = tween[i]).name === name) return t.value;
            }
            return null;
        }
        return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
    });
parcelHelpers.export(exports, "tweenValue", ()=>tweenValue);
var _scheduleJs = require("./schedule.js");
function tweenRemove(id, name) {
    var tween0, tween1;
    return function() {
        var schedule = (0, _scheduleJs.set)(this, id), tween = schedule.tween;
        // If this node shared tween with the previous node,
        // just assign the updated shared tween and we’re done!
        // Otherwise, copy-on-write.
        if (tween !== tween0) {
            tween1 = tween0 = tween;
            for(var i = 0, n = tween1.length; i < n; ++i)if (tween1[i].name === name) {
                tween1 = tween1.slice();
                tween1.splice(i, 1);
                break;
            }
        }
        schedule.tween = tween1;
    };
}
function tweenFunction(id, name, value) {
    var tween0, tween1;
    if (typeof value !== "function") throw new Error;
    return function() {
        var schedule = (0, _scheduleJs.set)(this, id), tween = schedule.tween;
        // If this node shared tween with the previous node,
        // just assign the updated shared tween and we’re done!
        // Otherwise, copy-on-write.
        if (tween !== tween0) {
            tween1 = (tween0 = tween).slice();
            for(var t = {
                name: name,
                value: value
            }, i = 0, n = tween1.length; i < n; ++i)if (tween1[i].name === name) {
                tween1[i] = t;
                break;
            }
            if (i === n) tween1.push(t);
        }
        schedule.tween = tween1;
    };
}
function tweenValue(transition, name, value) {
    var id = transition._id;
    transition.each(function() {
        var schedule = (0, _scheduleJs.set)(this, id);
        (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
    });
    return function(node) {
        return (0, _scheduleJs.get)(node, id).value[name];
    };
}

},{"./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"69lgs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(a, b) {
        var c;
        return (typeof b === "number" ? (0, _d3Interpolate.interpolateNumber) : b instanceof (0, _d3Color.color) ? (0, _d3Interpolate.interpolateRgb) : (c = (0, _d3Color.color)(b)) ? (b = c, _d3Interpolate.interpolateRgb) : (0, _d3Interpolate.interpolateString))(a, b);
    });
var _d3Color = require("d3-color");
var _d3Interpolate = require("d3-interpolate");

},{"d3-color":"grhaa","d3-interpolate":"6jJyi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1hMpn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(name, value) {
        var key = "attr." + name;
        if (arguments.length < 2) return (key = this.tween(key)) && key._value;
        if (value == null) return this.tween(key, null);
        if (typeof value !== "function") throw new Error;
        var fullname = (0, _d3Selection.namespace)(name);
        return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
    });
var _d3Selection = require("d3-selection");
function attrInterpolate(name, i) {
    return function(t) {
        this.setAttribute(name, i.call(this, t));
    };
}
function attrInterpolateNS(fullname, i) {
    return function(t) {
        this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
    };
}
function attrTweenNS(fullname, value) {
    var t0, i0;
    function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
        return t0;
    }
    tween._value = value;
    return tween;
}
function attrTween(name, value) {
    var t0, i0;
    function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
        return t0;
    }
    tween._value = value;
    return tween;
}

},{"d3-selection":"gn9gd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2BzOF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(value) {
        var id = this._id;
        return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id, value)) : (0, _scheduleJs.get)(this.node(), id).delay;
    });
var _scheduleJs = require("./schedule.js");
function delayFunction(id, value) {
    return function() {
        (0, _scheduleJs.init)(this, id).delay = +value.apply(this, arguments);
    };
}
function delayConstant(id, value) {
    return value = +value, function() {
        (0, _scheduleJs.init)(this, id).delay = value;
    };
}

},{"./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ei298":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(value) {
        var id = this._id;
        return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id, value)) : (0, _scheduleJs.get)(this.node(), id).duration;
    });
var _scheduleJs = require("./schedule.js");
function durationFunction(id, value) {
    return function() {
        (0, _scheduleJs.set)(this, id).duration = +value.apply(this, arguments);
    };
}
function durationConstant(id, value) {
    return value = +value, function() {
        (0, _scheduleJs.set)(this, id).duration = value;
    };
}

},{"./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lCGHM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(value) {
        var id = this._id;
        return arguments.length ? this.each(easeConstant(id, value)) : (0, _scheduleJs.get)(this.node(), id).ease;
    });
var _scheduleJs = require("./schedule.js");
function easeConstant(id, value) {
    if (typeof value !== "function") throw new Error;
    return function() {
        (0, _scheduleJs.set)(this, id).ease = value;
    };
}

},{"./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aju4f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(value) {
        if (typeof value !== "function") throw new Error;
        return this.each(easeVarying(this._id, value));
    });
var _scheduleJs = require("./schedule.js");
function easeVarying(id, value) {
    return function() {
        var v = value.apply(this, arguments);
        if (typeof v !== "function") throw new Error;
        (0, _scheduleJs.set)(this, id).ease = v;
    };
}

},{"./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d3Uia":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(match) {
        if (typeof match !== "function") match = (0, _d3Selection.matcher)(match);
        for(var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j){
            for(var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i)if ((node = group[i]) && match.call(node, node.__data__, i, group)) subgroup.push(node);
        }
        return new (0, _indexJs.Transition)(subgroups, this._parents, this._name, this._id);
    });
var _d3Selection = require("d3-selection");
var _indexJs = require("./index.js");

},{"d3-selection":"gn9gd","./index.js":"h2Srb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9odBi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(transition) {
        if (transition._id !== this._id) throw new Error;
        for(var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j){
            for(var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i)if (node = group0[i] || group1[i]) merge[i] = node;
        }
        for(; j < m0; ++j)merges[j] = groups0[j];
        return new (0, _indexJs.Transition)(merges, this._parents, this._name, this._id);
    });
var _indexJs = require("./index.js");

},{"./index.js":"h2Srb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3XrBC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(name, listener) {
        var id = this._id;
        return arguments.length < 2 ? (0, _scheduleJs.get)(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
    });
var _scheduleJs = require("./schedule.js");
function start(name) {
    return (name + "").trim().split(/^|\s+/).every(function(t) {
        var i = t.indexOf(".");
        if (i >= 0) t = t.slice(0, i);
        return !t || t === "start";
    });
}
function onFunction(id, name, listener) {
    var on0, on1, sit = start(name) ? (0, _scheduleJs.init) : (0, _scheduleJs.set);
    return function() {
        var schedule = sit(this, id), on = schedule.on;
        // If this node shared a dispatch with the previous node,
        // just assign the updated shared dispatch and we’re done!
        // Otherwise, copy-on-write.
        if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);
        schedule.on = on1;
    };
}

},{"./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aZLkz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        return this.on("end.remove", removeFunction(this._id));
    });
function removeFunction(id) {
    return function() {
        var parent = this.parentNode;
        for(var i in this.__transition)if (+i !== id) return;
        if (parent) parent.removeChild(this);
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bgUUX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(select) {
        var name = this._name, id = this._id;
        if (typeof select !== "function") select = (0, _d3Selection.selector)(select);
        for(var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j){
            for(var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i)if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
                if ("__data__" in node) subnode.__data__ = node.__data__;
                subgroup[i] = subnode;
                (0, _scheduleJsDefault.default)(subgroup[i], name, id, i, subgroup, (0, _scheduleJs.get)(node, id));
            }
        }
        return new (0, _indexJs.Transition)(subgroups, this._parents, name, id);
    });
var _d3Selection = require("d3-selection");
var _indexJs = require("./index.js");
var _scheduleJs = require("./schedule.js");
var _scheduleJsDefault = parcelHelpers.interopDefault(_scheduleJs);

},{"d3-selection":"gn9gd","./index.js":"h2Srb","./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lqPi4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(select) {
        var name = this._name, id = this._id;
        if (typeof select !== "function") select = (0, _d3Selection.selectorAll)(select);
        for(var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j){
            for(var group = groups[j], n = group.length, node, i = 0; i < n; ++i)if (node = group[i]) {
                for(var children = select.call(node, node.__data__, i, group), child, inherit = (0, _scheduleJs.get)(node, id), k = 0, l = children.length; k < l; ++k)if (child = children[k]) (0, _scheduleJsDefault.default)(child, name, id, k, children, inherit);
                subgroups.push(children);
                parents.push(node);
            }
        }
        return new (0, _indexJs.Transition)(subgroups, parents, name, id);
    });
var _d3Selection = require("d3-selection");
var _indexJs = require("./index.js");
var _scheduleJs = require("./schedule.js");
var _scheduleJsDefault = parcelHelpers.interopDefault(_scheduleJs);

},{"d3-selection":"gn9gd","./index.js":"h2Srb","./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iWTRA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        return new Selection(this._groups, this._parents);
    });
var _d3Selection = require("d3-selection");
var Selection = (0, _d3Selection.selection).prototype.constructor;

},{"d3-selection":"gn9gd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"44QDP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(name, value, priority) {
        var i = (name += "") === "transform" ? (0, _d3Interpolate.interpolateTransformCss) : (0, _interpolateJsDefault.default);
        return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove(name)) : typeof value === "function" ? this.styleTween(name, styleFunction(name, i, (0, _tweenJs.tweenValue)(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant(name, i, value), priority).on("end.style." + name, null);
    });
var _d3Interpolate = require("d3-interpolate");
var _d3Selection = require("d3-selection");
var _scheduleJs = require("./schedule.js");
var _tweenJs = require("./tween.js");
var _interpolateJs = require("./interpolate.js");
var _interpolateJsDefault = parcelHelpers.interopDefault(_interpolateJs);
function styleNull(name, interpolate) {
    var string00, string10, interpolate0;
    return function() {
        var string0 = (0, _d3Selection.style)(this, name), string1 = (this.style.removeProperty(name), (0, _d3Selection.style)(this, name));
        return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
    };
}
function styleRemove(name) {
    return function() {
        this.style.removeProperty(name);
    };
}
function styleConstant(name, interpolate, value1) {
    var string00, string1 = value1 + "", interpolate0;
    return function() {
        var string0 = (0, _d3Selection.style)(this, name);
        return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
    };
}
function styleFunction(name, interpolate, value) {
    var string00, string10, interpolate0;
    return function() {
        var string0 = (0, _d3Selection.style)(this, name), value1 = value(this), string1 = value1 + "";
        if (value1 == null) string1 = value1 = (this.style.removeProperty(name), (0, _d3Selection.style)(this, name));
        return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
    };
}
function styleMaybeRemove(id, name) {
    var on0, on1, listener0, key = "style." + name, event = "end." + key, remove;
    return function() {
        var schedule = (0, _scheduleJs.set)(this, id), on = schedule.on, listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined;
        // If this node shared a dispatch with the previous node,
        // just assign the updated shared dispatch and we’re done!
        // Otherwise, copy-on-write.
        if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);
        schedule.on = on1;
    };
}

},{"d3-interpolate":"6jJyi","d3-selection":"gn9gd","./schedule.js":"de74c","./tween.js":"1Kbbg","./interpolate.js":"69lgs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"42AvL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(name, value, priority) {
        var key = "style." + (name += "");
        if (arguments.length < 2) return (key = this.tween(key)) && key._value;
        if (value == null) return this.tween(key, null);
        if (typeof value !== "function") throw new Error;
        return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
    });
function styleInterpolate(name, i, priority) {
    return function(t) {
        this.style.setProperty(name, i.call(this, t), priority);
    };
}
function styleTween(name, value, priority) {
    var t, i0;
    function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
        return t;
    }
    tween._value = value;
    return tween;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6mGEx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(value) {
        return this.tween("text", typeof value === "function" ? textFunction((0, _tweenJs.tweenValue)(this, "text", value)) : textConstant(value == null ? "" : value + ""));
    });
var _tweenJs = require("./tween.js");
function textConstant(value) {
    return function() {
        this.textContent = value;
    };
}
function textFunction(value) {
    return function() {
        var value1 = value(this);
        this.textContent = value1 == null ? "" : value1;
    };
}

},{"./tween.js":"1Kbbg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kqC5z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(value) {
        var key = "text";
        if (arguments.length < 1) return (key = this.tween(key)) && key._value;
        if (value == null) return this.tween(key, null);
        if (typeof value !== "function") throw new Error;
        return this.tween(key, textTween(value));
    });
function textInterpolate(i) {
    return function(t) {
        this.textContent = i.call(this, t);
    };
}
function textTween(value) {
    var t0, i0;
    function tween() {
        var i = value.apply(this, arguments);
        if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
        return t0;
    }
    tween._value = value;
    return tween;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"50tVR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        var name = this._name, id0 = this._id, id1 = (0, _indexJs.newId)();
        for(var groups = this._groups, m = groups.length, j = 0; j < m; ++j){
            for(var group = groups[j], n = group.length, node, i = 0; i < n; ++i)if (node = group[i]) {
                var inherit = (0, _scheduleJs.get)(node, id0);
                (0, _scheduleJsDefault.default)(node, name, id1, i, group, {
                    time: inherit.time + inherit.delay + inherit.duration,
                    delay: 0,
                    duration: inherit.duration,
                    ease: inherit.ease
                });
            }
        }
        return new (0, _indexJs.Transition)(groups, this._parents, name, id1);
    });
var _indexJs = require("./index.js");
var _scheduleJs = require("./schedule.js");
var _scheduleJsDefault = parcelHelpers.interopDefault(_scheduleJs);

},{"./index.js":"h2Srb","./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ev0ir":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        var on0, on1, that = this, id = that._id, size = that.size();
        return new Promise(function(resolve, reject) {
            var cancel = {
                value: reject
            }, end = {
                value: function() {
                    if (--size === 0) resolve();
                }
            };
            that.each(function() {
                var schedule = (0, _scheduleJs.set)(this, id), on = schedule.on;
                // If this node shared a dispatch with the previous node,
                // just assign the updated shared dispatch and we’re done!
                // Otherwise, copy-on-write.
                if (on !== on0) {
                    on1 = (on0 = on).copy();
                    on1._.cancel.push(cancel);
                    on1._.interrupt.push(cancel);
                    on1._.end.push(end);
                }
                schedule.on = on1;
            });
            // The selection was empty, resolve end immediately
            if (size === 0) resolve();
        });
    });
var _scheduleJs = require("./schedule.js");

},{"./schedule.js":"de74c","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8sCNl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "easeLinear", ()=>(0, _linearJs.linear));
parcelHelpers.export(exports, "easeQuad", ()=>(0, _quadJs.quadInOut));
parcelHelpers.export(exports, "easeQuadIn", ()=>(0, _quadJs.quadIn));
parcelHelpers.export(exports, "easeQuadOut", ()=>(0, _quadJs.quadOut));
parcelHelpers.export(exports, "easeQuadInOut", ()=>(0, _quadJs.quadInOut));
parcelHelpers.export(exports, "easeCubic", ()=>(0, _cubicJs.cubicInOut));
parcelHelpers.export(exports, "easeCubicIn", ()=>(0, _cubicJs.cubicIn));
parcelHelpers.export(exports, "easeCubicOut", ()=>(0, _cubicJs.cubicOut));
parcelHelpers.export(exports, "easeCubicInOut", ()=>(0, _cubicJs.cubicInOut));
parcelHelpers.export(exports, "easePoly", ()=>(0, _polyJs.polyInOut));
parcelHelpers.export(exports, "easePolyIn", ()=>(0, _polyJs.polyIn));
parcelHelpers.export(exports, "easePolyOut", ()=>(0, _polyJs.polyOut));
parcelHelpers.export(exports, "easePolyInOut", ()=>(0, _polyJs.polyInOut));
parcelHelpers.export(exports, "easeSin", ()=>(0, _sinJs.sinInOut));
parcelHelpers.export(exports, "easeSinIn", ()=>(0, _sinJs.sinIn));
parcelHelpers.export(exports, "easeSinOut", ()=>(0, _sinJs.sinOut));
parcelHelpers.export(exports, "easeSinInOut", ()=>(0, _sinJs.sinInOut));
parcelHelpers.export(exports, "easeExp", ()=>(0, _expJs.expInOut));
parcelHelpers.export(exports, "easeExpIn", ()=>(0, _expJs.expIn));
parcelHelpers.export(exports, "easeExpOut", ()=>(0, _expJs.expOut));
parcelHelpers.export(exports, "easeExpInOut", ()=>(0, _expJs.expInOut));
parcelHelpers.export(exports, "easeCircle", ()=>(0, _circleJs.circleInOut));
parcelHelpers.export(exports, "easeCircleIn", ()=>(0, _circleJs.circleIn));
parcelHelpers.export(exports, "easeCircleOut", ()=>(0, _circleJs.circleOut));
parcelHelpers.export(exports, "easeCircleInOut", ()=>(0, _circleJs.circleInOut));
parcelHelpers.export(exports, "easeBounce", ()=>(0, _bounceJs.bounceOut));
parcelHelpers.export(exports, "easeBounceIn", ()=>(0, _bounceJs.bounceIn));
parcelHelpers.export(exports, "easeBounceOut", ()=>(0, _bounceJs.bounceOut));
parcelHelpers.export(exports, "easeBounceInOut", ()=>(0, _bounceJs.bounceInOut));
parcelHelpers.export(exports, "easeBack", ()=>(0, _backJs.backInOut));
parcelHelpers.export(exports, "easeBackIn", ()=>(0, _backJs.backIn));
parcelHelpers.export(exports, "easeBackOut", ()=>(0, _backJs.backOut));
parcelHelpers.export(exports, "easeBackInOut", ()=>(0, _backJs.backInOut));
parcelHelpers.export(exports, "easeElastic", ()=>(0, _elasticJs.elasticOut));
parcelHelpers.export(exports, "easeElasticIn", ()=>(0, _elasticJs.elasticIn));
parcelHelpers.export(exports, "easeElasticOut", ()=>(0, _elasticJs.elasticOut));
parcelHelpers.export(exports, "easeElasticInOut", ()=>(0, _elasticJs.elasticInOut));
var _linearJs = require("./linear.js");
var _quadJs = require("./quad.js");
var _cubicJs = require("./cubic.js");
var _polyJs = require("./poly.js");
var _sinJs = require("./sin.js");
var _expJs = require("./exp.js");
var _circleJs = require("./circle.js");
var _bounceJs = require("./bounce.js");
var _backJs = require("./back.js");
var _elasticJs = require("./elastic.js");

},{"./linear.js":false,"./quad.js":false,"./cubic.js":"cGjk7","./poly.js":false,"./sin.js":false,"./exp.js":false,"./circle.js":false,"./bounce.js":false,"./back.js":false,"./elastic.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cGjk7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cubicIn", ()=>cubicIn);
parcelHelpers.export(exports, "cubicOut", ()=>cubicOut);
parcelHelpers.export(exports, "cubicInOut", ()=>cubicInOut);
function cubicIn(t) {
    return t * t * t;
}
function cubicOut(t) {
    return --t * t * t + 1;
}
function cubicInOut(t) {
    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fmgIQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (x)=>()=>x;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6f6C1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>BrushEvent);
function BrushEvent(type, { sourceEvent, target, selection, mode, dispatch }) {
    Object.defineProperties(this, {
        type: {
            value: type,
            enumerable: true,
            configurable: true
        },
        sourceEvent: {
            value: sourceEvent,
            enumerable: true,
            configurable: true
        },
        target: {
            value: target,
            enumerable: true,
            configurable: true
        },
        selection: {
            value: selection,
            enumerable: true,
            configurable: true
        },
        mode: {
            value: mode,
            enumerable: true,
            configurable: true
        },
        _: {
            value: dispatch
        }
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cozwm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nopropagation", ()=>nopropagation);
parcelHelpers.export(exports, "default", ()=>function(event) {
        event.preventDefault();
        event.stopImmediatePropagation();
    });
function nopropagation(event) {
    event.stopImmediatePropagation();
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5lvYf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "contours", ()=>(0, _contoursJsDefault.default));
parcelHelpers.export(exports, "contourDensity", ()=>(0, _densityJsDefault.default));
var _contoursJs = require("./contours.js");
var _contoursJsDefault = parcelHelpers.interopDefault(_contoursJs);
var _densityJs = require("./density.js");
var _densityJsDefault = parcelHelpers.interopDefault(_densityJs);

},{"./contours.js":"7N8hX","./density.js":"DY8zZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7N8hX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        var dx = 1, dy = 1, threshold = (0, _d3Array.thresholdSturges), smooth = smoothLinear;
        function contours(values) {
            var tz = threshold(values);
            // Convert number of thresholds into uniform thresholds.
            if (!Array.isArray(tz)) {
                const e = (0, _d3Array.extent)(values, finite);
                tz = (0, _d3Array.ticks)(...(0, _d3Array.nice)(e[0], e[1], tz), tz);
                while(tz[tz.length - 1] >= e[1])tz.pop();
                while(tz[1] < e[0])tz.shift();
            } else tz = tz.slice().sort((0, _ascendingJsDefault.default));
            return tz.map((value)=>contour(values, value));
        }
        // Accumulate, smooth contour rings, assign holes to exterior rings.
        // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js
        function contour(values, value) {
            const v = value == null ? NaN : +value;
            if (isNaN(v)) throw new Error(`invalid value: ${value}`);
            var polygons = [], holes = [];
            isorings(values, v, function(ring) {
                smooth(ring, values, v);
                if ((0, _areaJsDefault.default)(ring) > 0) polygons.push([
                    ring
                ]);
                else holes.push(ring);
            });
            holes.forEach(function(hole) {
                for(var i = 0, n = polygons.length, polygon; i < n; ++i)if ((0, _containsJsDefault.default)((polygon = polygons[i])[0], hole) !== -1) {
                    polygon.push(hole);
                    return;
                }
            });
            return {
                type: "MultiPolygon",
                value: value,
                coordinates: polygons
            };
        }
        // Marching squares with isolines stitched into rings.
        // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js
        function isorings(values, value, callback) {
            var fragmentByStart = new Array, fragmentByEnd = new Array, x, y, t0, t1, t2, t3;
            // Special case for the first row (y = -1, t2 = t3 = 0).
            x = y = -1;
            t1 = above(values[0], value);
            cases[t1 << 1].forEach(stitch);
            while(++x < dx - 1){
                t0 = t1, t1 = above(values[x + 1], value);
                cases[t0 | t1 << 1].forEach(stitch);
            }
            cases[t1 << 0].forEach(stitch);
            // General case for the intermediate rows.
            while(++y < dy - 1){
                x = -1;
                t1 = above(values[y * dx + dx], value);
                t2 = above(values[y * dx], value);
                cases[t1 << 1 | t2 << 2].forEach(stitch);
                while(++x < dx - 1){
                    t0 = t1, t1 = above(values[y * dx + dx + x + 1], value);
                    t3 = t2, t2 = above(values[y * dx + x + 1], value);
                    cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
                }
                cases[t1 | t2 << 3].forEach(stitch);
            }
            // Special case for the last row (y = dy - 1, t0 = t1 = 0).
            x = -1;
            t2 = values[y * dx] >= value;
            cases[t2 << 2].forEach(stitch);
            while(++x < dx - 1){
                t3 = t2, t2 = above(values[y * dx + x + 1], value);
                cases[t2 << 2 | t3 << 3].forEach(stitch);
            }
            cases[t2 << 3].forEach(stitch);
            function stitch(line) {
                var start = [
                    line[0][0] + x,
                    line[0][1] + y
                ], end = [
                    line[1][0] + x,
                    line[1][1] + y
                ], startIndex = index(start), endIndex = index(end), f, g;
                if (f = fragmentByEnd[startIndex]) {
                    if (g = fragmentByStart[endIndex]) {
                        delete fragmentByEnd[f.end];
                        delete fragmentByStart[g.start];
                        if (f === g) {
                            f.ring.push(end);
                            callback(f.ring);
                        } else fragmentByStart[f.start] = fragmentByEnd[g.end] = {
                            start: f.start,
                            end: g.end,
                            ring: f.ring.concat(g.ring)
                        };
                    } else {
                        delete fragmentByEnd[f.end];
                        f.ring.push(end);
                        fragmentByEnd[f.end = endIndex] = f;
                    }
                } else if (f = fragmentByStart[endIndex]) {
                    if (g = fragmentByEnd[startIndex]) {
                        delete fragmentByStart[f.start];
                        delete fragmentByEnd[g.end];
                        if (f === g) {
                            f.ring.push(end);
                            callback(f.ring);
                        } else fragmentByStart[g.start] = fragmentByEnd[f.end] = {
                            start: g.start,
                            end: f.end,
                            ring: g.ring.concat(f.ring)
                        };
                    } else {
                        delete fragmentByStart[f.start];
                        f.ring.unshift(start);
                        fragmentByStart[f.start = startIndex] = f;
                    }
                } else fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {
                    start: startIndex,
                    end: endIndex,
                    ring: [
                        start,
                        end
                    ]
                };
            }
        }
        function index(point) {
            return point[0] * 2 + point[1] * (dx + 1) * 4;
        }
        function smoothLinear(ring, values, value) {
            ring.forEach(function(point) {
                var x = point[0], y = point[1], xt = x | 0, yt = y | 0, v1 = valid(values[yt * dx + xt]);
                if (x > 0 && x < dx && xt === x) point[0] = smooth1(x, valid(values[yt * dx + xt - 1]), v1, value);
                if (y > 0 && y < dy && yt === y) point[1] = smooth1(y, valid(values[(yt - 1) * dx + xt]), v1, value);
            });
        }
        contours.contour = contour;
        contours.size = function(_) {
            if (!arguments.length) return [
                dx,
                dy
            ];
            var _0 = Math.floor(_[0]), _1 = Math.floor(_[1]);
            if (!(_0 >= 0 && _1 >= 0)) throw new Error("invalid size");
            return dx = _0, dy = _1, contours;
        };
        contours.thresholds = function(_) {
            return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constantJsDefault.default)((0, _arrayJs.slice).call(_)) : (0, _constantJsDefault.default)(_), contours) : threshold;
        };
        contours.smooth = function(_) {
            return arguments.length ? (smooth = _ ? smoothLinear : (0, _noopJsDefault.default), contours) : smooth === smoothLinear;
        };
        return contours;
    });
var _d3Array = require("d3-array");
var _arrayJs = require("./array.js");
var _ascendingJs = require("./ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _areaJs = require("./area.js");
var _areaJsDefault = parcelHelpers.interopDefault(_areaJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _containsJs = require("./contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _noopJs = require("./noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var cases = [
    [],
    [
        [
            [
                1.0,
                1.5
            ],
            [
                0.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                1.5,
                1.0
            ],
            [
                1.0,
                1.5
            ]
        ]
    ],
    [
        [
            [
                1.5,
                1.0
            ],
            [
                0.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                1.0,
                0.5
            ],
            [
                1.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                1.0,
                1.5
            ],
            [
                0.5,
                1.0
            ]
        ],
        [
            [
                1.0,
                0.5
            ],
            [
                1.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                1.0,
                0.5
            ],
            [
                1.0,
                1.5
            ]
        ]
    ],
    [
        [
            [
                1.0,
                0.5
            ],
            [
                0.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                0.5,
                1.0
            ],
            [
                1.0,
                0.5
            ]
        ]
    ],
    [
        [
            [
                1.0,
                1.5
            ],
            [
                1.0,
                0.5
            ]
        ]
    ],
    [
        [
            [
                0.5,
                1.0
            ],
            [
                1.0,
                0.5
            ]
        ],
        [
            [
                1.5,
                1.0
            ],
            [
                1.0,
                1.5
            ]
        ]
    ],
    [
        [
            [
                1.5,
                1.0
            ],
            [
                1.0,
                0.5
            ]
        ]
    ],
    [
        [
            [
                0.5,
                1.0
            ],
            [
                1.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                1.0,
                1.5
            ],
            [
                1.5,
                1.0
            ]
        ]
    ],
    [
        [
            [
                0.5,
                1.0
            ],
            [
                1.0,
                1.5
            ]
        ]
    ],
    []
];
// When computing the extent, ignore infinite values (as well as invalid ones).
function finite(x) {
    return isFinite(x) ? x : NaN;
}
// Is the (possibly invalid) x greater than or equal to the (known valid) value?
// Treat any invalid value as below negative infinity.
function above(x, value) {
    return x == null ? false : +x >= value;
}
// During smoothing, treat any invalid value as negative infinity.
function valid(v) {
    return v == null || isNaN(v = +v) ? -Infinity : v;
}
function smooth1(x, v0, v1, value) {
    const a = value - v0;
    const b = v1 - v0;
    const d = isFinite(a) || isFinite(b) ? a / b : Math.sign(a) / Math.sign(b);
    return isNaN(d) ? x : x + d - 0.5;
}

},{"d3-array":"1yX2W","./array.js":"cTTg2","./ascending.js":"12QEH","./area.js":"giDHO","./constant.js":"analX","./contains.js":"hnvZ5","./noop.js":"l7gSP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cTTg2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "slice", ()=>slice);
var array = Array.prototype;
var slice = array.slice;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"12QEH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(a, b) {
        return a - b;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"giDHO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(ring) {
        var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
        while(++i < n)area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
        return area;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"analX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (x)=>()=>x;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hnvZ5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(ring, hole) {
        var i = -1, n = hole.length, c;
        while(++i < n)if (c = ringContains(ring, hole[i])) return c;
        return 0;
    });
function ringContains(ring, point) {
    var x = point[0], y = point[1], contains = -1;
    for(var i = 0, n = ring.length, j = n - 1; i < n; j = i++){
        var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];
        if (segmentContains(pi, pj, point)) return 0;
        if (yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi) contains = -contains;
    }
    return contains;
}
function segmentContains(a, b, c) {
    var i;
    return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
}
function collinear(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
}
function within(p, q, r) {
    return p <= q && q <= r || r <= q && q <= p;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l7gSP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {});

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"DY8zZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        var x = defaultX, y = defaultY, weight = defaultWeight, dx = 960, dy = 500, r = 20, k = 2, o = r * 3, n = dx + o * 2 >> k, m = dy + o * 2 >> k, threshold = (0, _constantJsDefault.default)(20);
        function grid(data) {
            var values = new Float32Array(n * m), pow2k = Math.pow(2, -k), i = -1;
            for (const d of data){
                var xi = (x(d, ++i, data) + o) * pow2k, yi = (y(d, i, data) + o) * pow2k, wi = +weight(d, i, data);
                if (wi && xi >= 0 && xi < n && yi >= 0 && yi < m) {
                    var x0 = Math.floor(xi), y0 = Math.floor(yi), xt = xi - x0 - 0.5, yt = yi - y0 - 0.5;
                    values[x0 + y0 * n] += (1 - xt) * (1 - yt) * wi;
                    values[x0 + 1 + y0 * n] += xt * (1 - yt) * wi;
                    values[x0 + 1 + (y0 + 1) * n] += xt * yt * wi;
                    values[x0 + (y0 + 1) * n] += (1 - xt) * yt * wi;
                }
            }
            (0, _d3Array.blur2)({
                data: values,
                width: n,
                height: m
            }, r * pow2k);
            return values;
        }
        function density(data) {
            var values = grid(data), tz = threshold(values), pow4k = Math.pow(2, 2 * k);
            // Convert number of thresholds into uniform thresholds.
            if (!Array.isArray(tz)) tz = (0, _d3Array.ticks)(Number.MIN_VALUE, (0, _d3Array.max)(values) / pow4k, tz);
            return (0, _contoursJsDefault.default)().size([
                n,
                m
            ]).thresholds(tz.map((d)=>d * pow4k))(values).map((c, i)=>(c.value = +tz[i], transform(c)));
        }
        density.contours = function(data) {
            var values = grid(data), contours = (0, _contoursJsDefault.default)().size([
                n,
                m
            ]), pow4k = Math.pow(2, 2 * k), contour = (value)=>{
                value = +value;
                var c = transform(contours.contour(values, value * pow4k));
                c.value = value; // preserve exact threshold value
                return c;
            };
            Object.defineProperty(contour, "max", {
                get: ()=>(0, _d3Array.max)(values) / pow4k
            });
            return contour;
        };
        function transform(geometry) {
            geometry.coordinates.forEach(transformPolygon);
            return geometry;
        }
        function transformPolygon(coordinates) {
            coordinates.forEach(transformRing);
        }
        function transformRing(coordinates) {
            coordinates.forEach(transformPoint);
        }
        // TODO Optimize.
        function transformPoint(coordinates) {
            coordinates[0] = coordinates[0] * Math.pow(2, k) - o;
            coordinates[1] = coordinates[1] * Math.pow(2, k) - o;
        }
        function resize() {
            o = r * 3;
            n = dx + o * 2 >> k;
            m = dy + o * 2 >> k;
            return density;
        }
        density.x = function(_) {
            return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), density) : x;
        };
        density.y = function(_) {
            return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), density) : y;
        };
        density.weight = function(_) {
            return arguments.length ? (weight = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), density) : weight;
        };
        density.size = function(_) {
            if (!arguments.length) return [
                dx,
                dy
            ];
            var _0 = +_[0], _1 = +_[1];
            if (!(_0 >= 0 && _1 >= 0)) throw new Error("invalid size");
            return dx = _0, dy = _1, resize();
        };
        density.cellSize = function(_) {
            if (!arguments.length) return 1 << k;
            if (!((_ = +_) >= 1)) throw new Error("invalid cell size");
            return k = Math.floor(Math.log(_) / Math.LN2), resize();
        };
        density.thresholds = function(_) {
            return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constantJsDefault.default)((0, _arrayJs.slice).call(_)) : (0, _constantJsDefault.default)(_), density) : threshold;
        };
        density.bandwidth = function(_) {
            if (!arguments.length) return Math.sqrt(r * (r + 1));
            if (!((_ = +_) >= 0)) throw new Error("invalid bandwidth");
            return r = (Math.sqrt(4 * _ * _ + 1) - 1) / 2, resize();
        };
        return density;
    });
var _d3Array = require("d3-array");
var _arrayJs = require("./array.js");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _contoursJs = require("./contours.js");
var _contoursJsDefault = parcelHelpers.interopDefault(_contoursJs);
function defaultX(d) {
    return d[0];
}
function defaultY(d) {
    return d[1];
}
function defaultWeight() {
    return 1;
}

},{"d3-array":"1yX2W","./array.js":"cTTg2","./constant.js":"analX","./contours.js":"7N8hX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aJhty":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Delaunay", ()=>(0, _delaunayJsDefault.default));
parcelHelpers.export(exports, "Voronoi", ()=>(0, _voronoiJsDefault.default));
var _delaunayJs = require("./delaunay.js");
var _delaunayJsDefault = parcelHelpers.interopDefault(_delaunayJs);
var _voronoiJs = require("./voronoi.js");
var _voronoiJsDefault = parcelHelpers.interopDefault(_voronoiJs);

},{"./delaunay.js":"1OBAg","./voronoi.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1OBAg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _delaunator = require("delaunator");
var _delaunatorDefault = parcelHelpers.interopDefault(_delaunator);
var _pathJs = require("./path.js");
var _pathJsDefault = parcelHelpers.interopDefault(_pathJs);
var _polygonJs = require("./polygon.js");
var _polygonJsDefault = parcelHelpers.interopDefault(_polygonJs);
var _voronoiJs = require("./voronoi.js");
var _voronoiJsDefault = parcelHelpers.interopDefault(_voronoiJs);
const tau = 2 * Math.PI, pow = Math.pow;
function pointX(p) {
    return p[0];
}
function pointY(p) {
    return p[1];
}
// A triangulation is collinear if all its triangles have a non-null area
function collinear(d) {
    const { triangles, coords } = d;
    for(let i = 0; i < triangles.length; i += 3){
        const a = 2 * triangles[i], b = 2 * triangles[i + 1], c = 2 * triangles[i + 2], cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1]) - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);
        if (cross > 1e-10) return false;
    }
    return true;
}
function jitter(x, y, r) {
    return [
        x + Math.sin(x + y) * r,
        y + Math.cos(x - y) * r
    ];
}
class Delaunay {
    static from(points, fx = pointX, fy = pointY, that) {
        return new Delaunay("length" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));
    }
    constructor(points){
        this._delaunator = new (0, _delaunatorDefault.default)(points);
        this.inedges = new Int32Array(points.length / 2);
        this._hullIndex = new Int32Array(points.length / 2);
        this.points = this._delaunator.coords;
        this._init();
    }
    update() {
        this._delaunator.update();
        this._init();
        return this;
    }
    _init() {
        const d = this._delaunator, points = this.points;
        // check for collinear
        if (d.hull && d.hull.length > 2 && collinear(d)) {
            this.collinear = Int32Array.from({
                length: points.length / 2
            }, (_, i)=>i).sort((i, j)=>points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors
            const e = this.collinear[0], f = this.collinear[this.collinear.length - 1], bounds = [
                points[2 * e],
                points[2 * e + 1],
                points[2 * f],
                points[2 * f + 1]
            ], r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
            for(let i = 0, n = points.length / 2; i < n; ++i){
                const p = jitter(points[2 * i], points[2 * i + 1], r);
                points[2 * i] = p[0];
                points[2 * i + 1] = p[1];
            }
            this._delaunator = new (0, _delaunatorDefault.default)(points);
        } else delete this.collinear;
        const halfedges = this.halfedges = this._delaunator.halfedges;
        const hull = this.hull = this._delaunator.hull;
        const triangles = this.triangles = this._delaunator.triangles;
        const inedges = this.inedges.fill(-1);
        const hullIndex = this._hullIndex.fill(-1);
        // Compute an index from each point to an (arbitrary) incoming halfedge
        // Used to give the first neighbor of each point; for this reason,
        // on the hull we give priority to exterior halfedges
        for(let e = 0, n = halfedges.length; e < n; ++e){
            const p = triangles[e % 3 === 2 ? e - 2 : e + 1];
            if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;
        }
        for(let i = 0, n = hull.length; i < n; ++i)hullIndex[hull[i]] = i;
        // degenerate case: 1 or 2 (distinct) points
        if (hull.length <= 2 && hull.length > 0) {
            this.triangles = new Int32Array(3).fill(-1);
            this.halfedges = new Int32Array(3).fill(-1);
            this.triangles[0] = hull[0];
            inedges[hull[0]] = 1;
            if (hull.length === 2) {
                inedges[hull[1]] = 0;
                this.triangles[1] = hull[1];
                this.triangles[2] = hull[1];
            }
        }
    }
    voronoi(bounds) {
        return new (0, _voronoiJsDefault.default)(this, bounds);
    }
    *neighbors(i) {
        const { inedges, hull, _hullIndex, halfedges, triangles, collinear } = this;
        // degenerate case with several collinear points
        if (collinear) {
            const l = collinear.indexOf(i);
            if (l > 0) yield collinear[l - 1];
            if (l < collinear.length - 1) yield collinear[l + 1];
            return;
        }
        const e0 = inedges[i];
        if (e0 === -1) return; // coincident point
        let e = e0, p0 = -1;
        do {
            yield p0 = triangles[e];
            e = e % 3 === 2 ? e - 2 : e + 1;
            if (triangles[e] !== i) return; // bad triangulation
            e = halfedges[e];
            if (e === -1) {
                const p = hull[(_hullIndex[i] + 1) % hull.length];
                if (p !== p0) yield p;
                return;
            }
        }while (e !== e0);
    }
    find(x, y, i = 0) {
        if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;
        const i0 = i;
        let c;
        while((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0)i = c;
        return c;
    }
    _step(i, x, y) {
        const { inedges, hull, _hullIndex, halfedges, triangles, points } = this;
        if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);
        let c = i;
        let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);
        const e0 = inedges[i];
        let e = e0;
        do {
            let t = triangles[e];
            const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);
            if (dt < dc) dc = dt, c = t;
            e = e % 3 === 2 ? e - 2 : e + 1;
            if (triangles[e] !== i) break; // bad triangulation
            e = halfedges[e];
            if (e === -1) {
                e = hull[(_hullIndex[i] + 1) % hull.length];
                if (e !== t) {
                    if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;
                }
                break;
            }
        }while (e !== e0);
        return c;
    }
    render(context) {
        const buffer = context == null ? context = new (0, _pathJsDefault.default) : undefined;
        const { points, halfedges, triangles } = this;
        for(let i = 0, n = halfedges.length; i < n; ++i){
            const j = halfedges[i];
            if (j < i) continue;
            const ti = triangles[i] * 2;
            const tj = triangles[j] * 2;
            context.moveTo(points[ti], points[ti + 1]);
            context.lineTo(points[tj], points[tj + 1]);
        }
        this.renderHull(context);
        return buffer && buffer.value();
    }
    renderPoints(context, r) {
        if (r === undefined && (!context || typeof context.moveTo !== "function")) r = context, context = null;
        r = r == undefined ? 2 : +r;
        const buffer = context == null ? context = new (0, _pathJsDefault.default) : undefined;
        const { points } = this;
        for(let i = 0, n = points.length; i < n; i += 2){
            const x = points[i], y = points[i + 1];
            context.moveTo(x + r, y);
            context.arc(x, y, r, 0, tau);
        }
        return buffer && buffer.value();
    }
    renderHull(context) {
        const buffer = context == null ? context = new (0, _pathJsDefault.default) : undefined;
        const { hull, points } = this;
        const h = hull[0] * 2, n = hull.length;
        context.moveTo(points[h], points[h + 1]);
        for(let i = 1; i < n; ++i){
            const h = 2 * hull[i];
            context.lineTo(points[h], points[h + 1]);
        }
        context.closePath();
        return buffer && buffer.value();
    }
    hullPolygon() {
        const polygon = new (0, _polygonJsDefault.default);
        this.renderHull(polygon);
        return polygon.value();
    }
    renderTriangle(i, context) {
        const buffer = context == null ? context = new (0, _pathJsDefault.default) : undefined;
        const { points, triangles } = this;
        const t0 = triangles[i *= 3] * 2;
        const t1 = triangles[i + 1] * 2;
        const t2 = triangles[i + 2] * 2;
        context.moveTo(points[t0], points[t0 + 1]);
        context.lineTo(points[t1], points[t1 + 1]);
        context.lineTo(points[t2], points[t2 + 1]);
        context.closePath();
        return buffer && buffer.value();
    }
    *trianglePolygons() {
        const { triangles } = this;
        for(let i = 0, n = triangles.length / 3; i < n; ++i)yield this.trianglePolygon(i);
    }
    trianglePolygon(i) {
        const polygon = new (0, _polygonJsDefault.default);
        this.renderTriangle(i, polygon);
        return polygon.value();
    }
}
exports.default = Delaunay;
function flatArray(points, fx, fy, that) {
    const n = points.length;
    const array = new Float64Array(n * 2);
    for(let i = 0; i < n; ++i){
        const p = points[i];
        array[i * 2] = fx.call(that, p, i, points);
        array[i * 2 + 1] = fy.call(that, p, i, points);
    }
    return array;
}
function* flatIterable(points, fx, fy, that) {
    let i = 0;
    for (const p of points){
        yield fx.call(that, p, i, points);
        yield fy.call(that, p, i, points);
        ++i;
    }
}

},{"delaunator":"1U5NA","./path.js":"j1aS4","./polygon.js":"1mwL9","./voronoi.js":"h3ABT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1U5NA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _robustPredicates = require("robust-predicates");
const EPSILON = Math.pow(2, -52);
const EDGE_STACK = new Uint32Array(512);
class Delaunator {
    static from(points, getX = defaultGetX, getY = defaultGetY) {
        const n = points.length;
        const coords = new Float64Array(n * 2);
        for(let i = 0; i < n; i++){
            const p = points[i];
            coords[2 * i] = getX(p);
            coords[2 * i + 1] = getY(p);
        }
        return new Delaunator(coords);
    }
    constructor(coords){
        const n = coords.length >> 1;
        if (n > 0 && typeof coords[0] !== "number") throw new Error("Expected coords to contain numbers.");
        this.coords = coords;
        // arrays that will store the triangulation graph
        const maxTriangles = Math.max(2 * n - 5, 0);
        this._triangles = new Uint32Array(maxTriangles * 3);
        this._halfedges = new Int32Array(maxTriangles * 3);
        // temporary arrays for tracking the edges of the advancing convex hull
        this._hashSize = Math.ceil(Math.sqrt(n));
        this._hullPrev = new Uint32Array(n); // edge to prev edge
        this._hullNext = new Uint32Array(n); // edge to next edge
        this._hullTri = new Uint32Array(n); // edge to adjacent triangle
        this._hullHash = new Int32Array(this._hashSize); // angular edge hash
        // temporary arrays for sorting points
        this._ids = new Uint32Array(n);
        this._dists = new Float64Array(n);
        this.update();
    }
    update() {
        const { coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash } = this;
        const n = coords.length >> 1;
        // populate an array of point indices; calculate input data bbox
        let minX = Infinity;
        let minY = Infinity;
        let maxX = -Infinity;
        let maxY = -Infinity;
        for(let i = 0; i < n; i++){
            const x = coords[2 * i];
            const y = coords[2 * i + 1];
            if (x < minX) minX = x;
            if (y < minY) minY = y;
            if (x > maxX) maxX = x;
            if (y > maxY) maxY = y;
            this._ids[i] = i;
        }
        const cx = (minX + maxX) / 2;
        const cy = (minY + maxY) / 2;
        let i0, i1, i2;
        // pick a seed point close to the center
        for(let i = 0, minDist = Infinity; i < n; i++){
            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);
            if (d < minDist) {
                i0 = i;
                minDist = d;
            }
        }
        const i0x = coords[2 * i0];
        const i0y = coords[2 * i0 + 1];
        // find the point closest to the seed
        for(let i = 0, minDist = Infinity; i < n; i++){
            if (i === i0) continue;
            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);
            if (d < minDist && d > 0) {
                i1 = i;
                minDist = d;
            }
        }
        let i1x = coords[2 * i1];
        let i1y = coords[2 * i1 + 1];
        let minRadius = Infinity;
        // find the third point which forms the smallest circumcircle with the first two
        for(let i = 0; i < n; i++){
            if (i === i0 || i === i1) continue;
            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);
            if (r < minRadius) {
                i2 = i;
                minRadius = r;
            }
        }
        let i2x = coords[2 * i2];
        let i2y = coords[2 * i2 + 1];
        if (minRadius === Infinity) {
            // order collinear points by dx (or dy if all x are identical)
            // and return the list as a hull
            for(let i = 0; i < n; i++)this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1];
            quicksort(this._ids, this._dists, 0, n - 1);
            const hull = new Uint32Array(n);
            let j = 0;
            for(let i = 0, d0 = -Infinity; i < n; i++){
                const id = this._ids[i];
                const d = this._dists[id];
                if (d > d0) {
                    hull[j++] = id;
                    d0 = d;
                }
            }
            this.hull = hull.subarray(0, j);
            this.triangles = new Uint32Array(0);
            this.halfedges = new Uint32Array(0);
            return;
        }
        // swap the order of the seed points for counter-clockwise orientation
        if ((0, _robustPredicates.orient2d)(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {
            const i = i1;
            const x = i1x;
            const y = i1y;
            i1 = i2;
            i1x = i2x;
            i1y = i2y;
            i2 = i;
            i2x = x;
            i2y = y;
        }
        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
        this._cx = center.x;
        this._cy = center.y;
        for(let i = 0; i < n; i++)this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);
        // sort the points by distance from the seed triangle circumcenter
        quicksort(this._ids, this._dists, 0, n - 1);
        // set up the seed triangle as the starting hull
        this._hullStart = i0;
        let hullSize = 3;
        hullNext[i0] = hullPrev[i2] = i1;
        hullNext[i1] = hullPrev[i0] = i2;
        hullNext[i2] = hullPrev[i1] = i0;
        hullTri[i0] = 0;
        hullTri[i1] = 1;
        hullTri[i2] = 2;
        hullHash.fill(-1);
        hullHash[this._hashKey(i0x, i0y)] = i0;
        hullHash[this._hashKey(i1x, i1y)] = i1;
        hullHash[this._hashKey(i2x, i2y)] = i2;
        this.trianglesLen = 0;
        this._addTriangle(i0, i1, i2, -1, -1, -1);
        for(let k = 0, xp, yp; k < this._ids.length; k++){
            const i = this._ids[k];
            const x = coords[2 * i];
            const y = coords[2 * i + 1];
            // skip near-duplicate points
            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;
            xp = x;
            yp = y;
            // skip seed triangle points
            if (i === i0 || i === i1 || i === i2) continue;
            // find a visible edge on the convex hull using edge hash
            let start = 0;
            for(let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++){
                start = hullHash[(key + j) % this._hashSize];
                if (start !== -1 && start !== hullNext[start]) break;
            }
            start = hullPrev[start];
            let e = start, q;
            while(q = hullNext[e], (0, _robustPredicates.orient2d)(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0){
                e = q;
                if (e === start) {
                    e = -1;
                    break;
                }
            }
            if (e === -1) continue; // likely a near-duplicate point; skip it
            // add the first triangle from the point
            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);
            // recursively flip triangles from the point until they satisfy the Delaunay condition
            hullTri[i] = this._legalize(t + 2);
            hullTri[e] = t; // keep track of boundary triangles on the hull
            hullSize++;
            // walk forward through the hull, adding more triangles and flipping recursively
            let n = hullNext[e];
            while(q = hullNext[n], (0, _robustPredicates.orient2d)(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0){
                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);
                hullTri[i] = this._legalize(t + 2);
                hullNext[n] = n; // mark as removed
                hullSize--;
                n = q;
            }
            // walk backward from the other side, adding more triangles and flipping
            if (e === start) while(q = hullPrev[e], (0, _robustPredicates.orient2d)(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0){
                t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);
                this._legalize(t + 2);
                hullTri[q] = t;
                hullNext[e] = e; // mark as removed
                hullSize--;
                e = q;
            }
            // update the hull indices
            this._hullStart = hullPrev[i] = e;
            hullNext[e] = hullPrev[n] = i;
            hullNext[i] = n;
            // save the two new edges in the hash table
            hullHash[this._hashKey(x, y)] = i;
            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;
        }
        this.hull = new Uint32Array(hullSize);
        for(let i = 0, e = this._hullStart; i < hullSize; i++){
            this.hull[i] = e;
            e = hullNext[e];
        }
        // trim typed triangle mesh arrays
        this.triangles = this._triangles.subarray(0, this.trianglesLen);
        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
    }
    _hashKey(x, y) {
        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;
    }
    _legalize(a) {
        const { _triangles: triangles, _halfedges: halfedges, coords } = this;
        let i = 0;
        let ar = 0;
        // recursion eliminated with a fixed-size stack
        while(true){
            const b = halfedges[a];
            /* if the pair of triangles doesn't satisfy the Delaunay condition
             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,
             * then do the same check/flip recursively for the new pair of triangles
             *
             *           pl                    pl
             *          /||\                  /  \
             *       al/ || \bl            al/    \a
             *        /  ||  \              /      \
             *       /  a||b  \    flip    /___ar___\
             *     p0\   ||   /p1   =>   p0\---bl---/p1
             *        \  ||  /              \      /
             *       ar\ || /br             b\    /br
             *          \||/                  \  /
             *           pr                    pr
             */ const a0 = a - a % 3;
            ar = a0 + (a + 2) % 3;
            if (b === -1) {
                if (i === 0) break;
                a = EDGE_STACK[--i];
                continue;
            }
            const b0 = b - b % 3;
            const al = a0 + (a + 1) % 3;
            const bl = b0 + (b + 2) % 3;
            const p0 = triangles[ar];
            const pr = triangles[a];
            const pl = triangles[al];
            const p1 = triangles[bl];
            const illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);
            if (illegal) {
                triangles[a] = p1;
                triangles[b] = p0;
                const hbl = halfedges[bl];
                // edge swapped on the other side of the hull (rare); fix the halfedge reference
                if (hbl === -1) {
                    let e = this._hullStart;
                    do {
                        if (this._hullTri[e] === bl) {
                            this._hullTri[e] = a;
                            break;
                        }
                        e = this._hullPrev[e];
                    }while (e !== this._hullStart);
                }
                this._link(a, hbl);
                this._link(b, halfedges[ar]);
                this._link(ar, bl);
                const br = b0 + (b + 1) % 3;
                // don't worry about hitting the cap: it can only happen on extremely degenerate input
                if (i < EDGE_STACK.length) EDGE_STACK[i++] = br;
            } else {
                if (i === 0) break;
                a = EDGE_STACK[--i];
            }
        }
        return ar;
    }
    _link(a, b) {
        this._halfedges[a] = b;
        if (b !== -1) this._halfedges[b] = a;
    }
    // add a new triangle given vertex indices and adjacent half-edge ids
    _addTriangle(i0, i1, i2, a, b, c) {
        const t = this.trianglesLen;
        this._triangles[t] = i0;
        this._triangles[t + 1] = i1;
        this._triangles[t + 2] = i2;
        this._link(t, a);
        this._link(t + 1, b);
        this._link(t + 2, c);
        this.trianglesLen += 3;
        return t;
    }
}
exports.default = Delaunator;
// monotonically increases with real angle, but doesn't need expensive trigonometry
function pseudoAngle(dx, dy) {
    const p = dx / (Math.abs(dx) + Math.abs(dy));
    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]
}
function dist(ax, ay, bx, by) {
    const dx = ax - bx;
    const dy = ay - by;
    return dx * dx + dy * dy;
}
function inCircle(ax, ay, bx, by, cx, cy, px, py) {
    const dx = ax - px;
    const dy = ay - py;
    const ex = bx - px;
    const ey = by - py;
    const fx = cx - px;
    const fy = cy - py;
    const ap = dx * dx + dy * dy;
    const bp = ex * ex + ey * ey;
    const cp = fx * fx + fy * fy;
    return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
}
function circumradius(ax, ay, bx, by, cx, cy) {
    const dx = bx - ax;
    const dy = by - ay;
    const ex = cx - ax;
    const ey = cy - ay;
    const bl = dx * dx + dy * dy;
    const cl = ex * ex + ey * ey;
    const d = 0.5 / (dx * ey - dy * ex);
    const x = (ey * bl - dy * cl) * d;
    const y = (dx * cl - ex * bl) * d;
    return x * x + y * y;
}
function circumcenter(ax, ay, bx, by, cx, cy) {
    const dx = bx - ax;
    const dy = by - ay;
    const ex = cx - ax;
    const ey = cy - ay;
    const bl = dx * dx + dy * dy;
    const cl = ex * ex + ey * ey;
    const d = 0.5 / (dx * ey - dy * ex);
    const x = ax + (ey * bl - dy * cl) * d;
    const y = ay + (dx * cl - ex * bl) * d;
    return {
        x,
        y
    };
}
function quicksort(ids, dists, left, right) {
    if (right - left <= 20) for(let i = left + 1; i <= right; i++){
        const temp = ids[i];
        const tempDist = dists[temp];
        let j = i - 1;
        while(j >= left && dists[ids[j]] > tempDist)ids[j + 1] = ids[j--];
        ids[j + 1] = temp;
    }
    else {
        const median = left + right >> 1;
        let i = left + 1;
        let j = right;
        swap(ids, median, i);
        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);
        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);
        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);
        const temp = ids[i];
        const tempDist = dists[temp];
        while(true){
            do i++;
            while (dists[ids[i]] < tempDist);
            do j--;
            while (dists[ids[j]] > tempDist);
            if (j < i) break;
            swap(ids, i, j);
        }
        ids[left + 1] = ids[j];
        ids[j] = temp;
        if (right - i + 1 >= j - left) {
            quicksort(ids, dists, i, right);
            quicksort(ids, dists, left, j - 1);
        } else {
            quicksort(ids, dists, left, j - 1);
            quicksort(ids, dists, i, right);
        }
    }
}
function swap(arr, i, j) {
    const tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
}
function defaultGetX(p) {
    return p[0];
}
function defaultGetY(p) {
    return p[1];
}

},{"robust-predicates":"7e0QE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7e0QE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "orient2d", ()=>(0, _orient2DJs.orient2d));
parcelHelpers.export(exports, "orient2dfast", ()=>(0, _orient2DJs.orient2dfast));
parcelHelpers.export(exports, "orient3d", ()=>(0, _orient3DJs.orient3d));
parcelHelpers.export(exports, "orient3dfast", ()=>(0, _orient3DJs.orient3dfast));
parcelHelpers.export(exports, "incircle", ()=>(0, _incircleJs.incircle));
parcelHelpers.export(exports, "incirclefast", ()=>(0, _incircleJs.incirclefast));
parcelHelpers.export(exports, "insphere", ()=>(0, _insphereJs.insphere));
parcelHelpers.export(exports, "inspherefast", ()=>(0, _insphereJs.inspherefast));
var _orient2DJs = require("./esm/orient2d.js");
var _orient3DJs = require("./esm/orient3d.js");
var _incircleJs = require("./esm/incircle.js");
var _insphereJs = require("./esm/insphere.js");

},{"./esm/orient2d.js":"gHqC4","./esm/orient3d.js":"dt5pN","./esm/incircle.js":"6yBsv","./esm/insphere.js":"6qjhA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gHqC4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "orient2d", ()=>orient2d);
parcelHelpers.export(exports, "orient2dfast", ()=>orient2dfast);
var _utilJs = require("./util.js");
const ccwerrboundA = (3 + 16 * (0, _utilJs.epsilon)) * (0, _utilJs.epsilon);
const ccwerrboundB = (2 + 12 * (0, _utilJs.epsilon)) * (0, _utilJs.epsilon);
const ccwerrboundC = (9 + 64 * (0, _utilJs.epsilon)) * (0, _utilJs.epsilon) * (0, _utilJs.epsilon);
const B = (0, _utilJs.vec)(4);
const C1 = (0, _utilJs.vec)(8);
const C2 = (0, _utilJs.vec)(12);
const D = (0, _utilJs.vec)(16);
const u = (0, _utilJs.vec)(4);
function orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {
    let acxtail, acytail, bcxtail, bcytail;
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;
    const acx = ax - cx;
    const bcx = bx - cx;
    const acy = ay - cy;
    const bcy = by - cy;
    s1 = acx * bcy;
    c = (0, _utilJs.splitter) * acx;
    ahi = c - (c - acx);
    alo = acx - ahi;
    c = (0, _utilJs.splitter) * bcy;
    bhi = c - (c - bcy);
    blo = bcy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acy * bcx;
    c = (0, _utilJs.splitter) * acy;
    ahi = c - (c - acy);
    alo = acy - ahi;
    c = (0, _utilJs.splitter) * bcx;
    bhi = c - (c - bcx);
    blo = bcx - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    B[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    B[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    B[2] = _j - (u3 - bvirt) + (_i - bvirt);
    B[3] = u3;
    let det = (0, _utilJs.estimate)(4, B);
    let errbound = ccwerrboundB * detsum;
    if (det >= errbound || -det >= errbound) return det;
    bvirt = ax - acx;
    acxtail = ax - (acx + bvirt) + (bvirt - cx);
    bvirt = bx - bcx;
    bcxtail = bx - (bcx + bvirt) + (bvirt - cx);
    bvirt = ay - acy;
    acytail = ay - (acy + bvirt) + (bvirt - cy);
    bvirt = by - bcy;
    bcytail = by - (bcy + bvirt) + (bvirt - cy);
    if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) return det;
    errbound = ccwerrboundC * detsum + (0, _utilJs.resulterrbound) * Math.abs(det);
    det += acx * bcytail + bcy * acxtail - (acy * bcxtail + bcx * acytail);
    if (det >= errbound || -det >= errbound) return det;
    s1 = acxtail * bcy;
    c = (0, _utilJs.splitter) * acxtail;
    ahi = c - (c - acxtail);
    alo = acxtail - ahi;
    c = (0, _utilJs.splitter) * bcy;
    bhi = c - (c - bcy);
    blo = bcy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acytail * bcx;
    c = (0, _utilJs.splitter) * acytail;
    ahi = c - (c - acytail);
    alo = acytail - ahi;
    c = (0, _utilJs.splitter) * bcx;
    bhi = c - (c - bcx);
    blo = bcx - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    u[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    u[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    u[2] = _j - (u3 - bvirt) + (_i - bvirt);
    u[3] = u3;
    const C1len = (0, _utilJs.sum)(4, B, 4, u, C1);
    s1 = acx * bcytail;
    c = (0, _utilJs.splitter) * acx;
    ahi = c - (c - acx);
    alo = acx - ahi;
    c = (0, _utilJs.splitter) * bcytail;
    bhi = c - (c - bcytail);
    blo = bcytail - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acy * bcxtail;
    c = (0, _utilJs.splitter) * acy;
    ahi = c - (c - acy);
    alo = acy - ahi;
    c = (0, _utilJs.splitter) * bcxtail;
    bhi = c - (c - bcxtail);
    blo = bcxtail - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    u[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    u[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    u[2] = _j - (u3 - bvirt) + (_i - bvirt);
    u[3] = u3;
    const C2len = (0, _utilJs.sum)(C1len, C1, 4, u, C2);
    s1 = acxtail * bcytail;
    c = (0, _utilJs.splitter) * acxtail;
    ahi = c - (c - acxtail);
    alo = acxtail - ahi;
    c = (0, _utilJs.splitter) * bcytail;
    bhi = c - (c - bcytail);
    blo = bcytail - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acytail * bcxtail;
    c = (0, _utilJs.splitter) * acytail;
    ahi = c - (c - acytail);
    alo = acytail - ahi;
    c = (0, _utilJs.splitter) * bcxtail;
    bhi = c - (c - bcxtail);
    blo = bcxtail - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    u[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    u[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    u[2] = _j - (u3 - bvirt) + (_i - bvirt);
    u[3] = u3;
    const Dlen = (0, _utilJs.sum)(C2len, C2, 4, u, D);
    return D[Dlen - 1];
}
function orient2d(ax, ay, bx, by, cx, cy) {
    const detleft = (ay - cy) * (bx - cx);
    const detright = (ax - cx) * (by - cy);
    const det = detleft - detright;
    const detsum = Math.abs(detleft + detright);
    if (Math.abs(det) >= ccwerrboundA * detsum) return det;
    return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);
}
function orient2dfast(ax, ay, bx, by, cx, cy) {
    return (ay - cy) * (bx - cx) - (ax - cx) * (by - cy);
}

},{"./util.js":"3OxkP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3OxkP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "epsilon", ()=>epsilon);
parcelHelpers.export(exports, "splitter", ()=>splitter);
parcelHelpers.export(exports, "resulterrbound", ()=>resulterrbound);
// fast_expansion_sum_zeroelim routine from oritinal code
parcelHelpers.export(exports, "sum", ()=>sum);
parcelHelpers.export(exports, "sum_three", ()=>sum_three);
// scale_expansion_zeroelim routine from oritinal code
parcelHelpers.export(exports, "scale", ()=>scale);
parcelHelpers.export(exports, "negate", ()=>negate);
parcelHelpers.export(exports, "estimate", ()=>estimate);
parcelHelpers.export(exports, "vec", ()=>vec);
const epsilon = 1.1102230246251565e-16;
const splitter = 134217729;
const resulterrbound = (3 + 8 * epsilon) * epsilon;
function sum(elen, e, flen, f, h) {
    let Q, Qnew, hh, bvirt;
    let enow = e[0];
    let fnow = f[0];
    let eindex = 0;
    let findex = 0;
    if (fnow > enow === fnow > -enow) {
        Q = enow;
        enow = e[++eindex];
    } else {
        Q = fnow;
        fnow = f[++findex];
    }
    let hindex = 0;
    if (eindex < elen && findex < flen) {
        if (fnow > enow === fnow > -enow) {
            Qnew = enow + Q;
            hh = Q - (Qnew - enow);
            enow = e[++eindex];
        } else {
            Qnew = fnow + Q;
            hh = Q - (Qnew - fnow);
            fnow = f[++findex];
        }
        Q = Qnew;
        if (hh !== 0) h[hindex++] = hh;
        while(eindex < elen && findex < flen){
            if (fnow > enow === fnow > -enow) {
                Qnew = Q + enow;
                bvirt = Qnew - Q;
                hh = Q - (Qnew - bvirt) + (enow - bvirt);
                enow = e[++eindex];
            } else {
                Qnew = Q + fnow;
                bvirt = Qnew - Q;
                hh = Q - (Qnew - bvirt) + (fnow - bvirt);
                fnow = f[++findex];
            }
            Q = Qnew;
            if (hh !== 0) h[hindex++] = hh;
        }
    }
    while(eindex < elen){
        Qnew = Q + enow;
        bvirt = Qnew - Q;
        hh = Q - (Qnew - bvirt) + (enow - bvirt);
        enow = e[++eindex];
        Q = Qnew;
        if (hh !== 0) h[hindex++] = hh;
    }
    while(findex < flen){
        Qnew = Q + fnow;
        bvirt = Qnew - Q;
        hh = Q - (Qnew - bvirt) + (fnow - bvirt);
        fnow = f[++findex];
        Q = Qnew;
        if (hh !== 0) h[hindex++] = hh;
    }
    if (Q !== 0 || hindex === 0) h[hindex++] = Q;
    return hindex;
}
function sum_three(alen, a, blen, b, clen, c, tmp, out) {
    return sum(sum(alen, a, blen, b, tmp), tmp, clen, c, out);
}
function scale(elen, e, b, h) {
    let Q, sum, hh, product1, product0;
    let bvirt, c, ahi, alo, bhi, blo;
    c = splitter * b;
    bhi = c - (c - b);
    blo = b - bhi;
    let enow = e[0];
    Q = enow * b;
    c = splitter * enow;
    ahi = c - (c - enow);
    alo = enow - ahi;
    hh = alo * blo - (Q - ahi * bhi - alo * bhi - ahi * blo);
    let hindex = 0;
    if (hh !== 0) h[hindex++] = hh;
    for(let i = 1; i < elen; i++){
        enow = e[i];
        product1 = enow * b;
        c = splitter * enow;
        ahi = c - (c - enow);
        alo = enow - ahi;
        product0 = alo * blo - (product1 - ahi * bhi - alo * bhi - ahi * blo);
        sum = Q + product0;
        bvirt = sum - Q;
        hh = Q - (sum - bvirt) + (product0 - bvirt);
        if (hh !== 0) h[hindex++] = hh;
        Q = product1 + sum;
        hh = sum - (Q - product1);
        if (hh !== 0) h[hindex++] = hh;
    }
    if (Q !== 0 || hindex === 0) h[hindex++] = Q;
    return hindex;
}
function negate(elen, e) {
    for(let i = 0; i < elen; i++)e[i] = -e[i];
    return elen;
}
function estimate(elen, e) {
    let Q = e[0];
    for(let i = 1; i < elen; i++)Q += e[i];
    return Q;
}
function vec(n) {
    return new Float64Array(n);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dt5pN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "orient3d", ()=>orient3d);
parcelHelpers.export(exports, "orient3dfast", ()=>orient3dfast);
var _utilJs = require("./util.js");
const o3derrboundA = (7 + 56 * (0, _utilJs.epsilon)) * (0, _utilJs.epsilon);
const o3derrboundB = (3 + 28 * (0, _utilJs.epsilon)) * (0, _utilJs.epsilon);
const o3derrboundC = (26 + 288 * (0, _utilJs.epsilon)) * (0, _utilJs.epsilon) * (0, _utilJs.epsilon);
const bc = (0, _utilJs.vec)(4);
const ca = (0, _utilJs.vec)(4);
const ab = (0, _utilJs.vec)(4);
const at_b = (0, _utilJs.vec)(4);
const at_c = (0, _utilJs.vec)(4);
const bt_c = (0, _utilJs.vec)(4);
const bt_a = (0, _utilJs.vec)(4);
const ct_a = (0, _utilJs.vec)(4);
const ct_b = (0, _utilJs.vec)(4);
const bct = (0, _utilJs.vec)(8);
const cat = (0, _utilJs.vec)(8);
const abt = (0, _utilJs.vec)(8);
const u = (0, _utilJs.vec)(4);
const _8 = (0, _utilJs.vec)(8);
const _8b = (0, _utilJs.vec)(8);
const _16 = (0, _utilJs.vec)(8);
const _12 = (0, _utilJs.vec)(12);
let fin = (0, _utilJs.vec)(192);
let fin2 = (0, _utilJs.vec)(192);
function finadd(finlen, alen, a) {
    finlen = (0, _utilJs.sum)(finlen, fin, alen, a, fin2);
    const tmp = fin;
    fin = fin2;
    fin2 = tmp;
    return finlen;
}
function tailinit(xtail, ytail, ax, ay, bx, by, a, b) {
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, t1, t0, u3, negate;
    if (xtail === 0) {
        if (ytail === 0) {
            a[0] = 0;
            b[0] = 0;
            return 1;
        } else {
            negate = -ytail;
            s1 = negate * ax;
            c = (0, _utilJs.splitter) * negate;
            ahi = c - (c - negate);
            alo = negate - ahi;
            c = (0, _utilJs.splitter) * ax;
            bhi = c - (c - ax);
            blo = ax - bhi;
            a[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            a[1] = s1;
            s1 = ytail * bx;
            c = (0, _utilJs.splitter) * ytail;
            ahi = c - (c - ytail);
            alo = ytail - ahi;
            c = (0, _utilJs.splitter) * bx;
            bhi = c - (c - bx);
            blo = bx - bhi;
            b[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            b[1] = s1;
            return 2;
        }
    } else if (ytail === 0) {
        s1 = xtail * ay;
        c = (0, _utilJs.splitter) * xtail;
        ahi = c - (c - xtail);
        alo = xtail - ahi;
        c = (0, _utilJs.splitter) * ay;
        bhi = c - (c - ay);
        blo = ay - bhi;
        a[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        a[1] = s1;
        negate = -xtail;
        s1 = negate * by;
        c = (0, _utilJs.splitter) * negate;
        ahi = c - (c - negate);
        alo = negate - ahi;
        c = (0, _utilJs.splitter) * by;
        bhi = c - (c - by);
        blo = by - bhi;
        b[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        b[1] = s1;
        return 2;
    } else {
        s1 = xtail * ay;
        c = (0, _utilJs.splitter) * xtail;
        ahi = c - (c - xtail);
        alo = xtail - ahi;
        c = (0, _utilJs.splitter) * ay;
        bhi = c - (c - ay);
        blo = ay - bhi;
        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        t1 = ytail * ax;
        c = (0, _utilJs.splitter) * ytail;
        ahi = c - (c - ytail);
        alo = ytail - ahi;
        c = (0, _utilJs.splitter) * ax;
        bhi = c - (c - ax);
        blo = ax - bhi;
        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
        _i = s0 - t0;
        bvirt = s0 - _i;
        a[0] = s0 - (_i + bvirt) + (bvirt - t0);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 - t1;
        bvirt = _0 - _i;
        a[1] = _0 - (_i + bvirt) + (bvirt - t1);
        u3 = _j + _i;
        bvirt = u3 - _j;
        a[2] = _j - (u3 - bvirt) + (_i - bvirt);
        a[3] = u3;
        s1 = ytail * bx;
        c = (0, _utilJs.splitter) * ytail;
        ahi = c - (c - ytail);
        alo = ytail - ahi;
        c = (0, _utilJs.splitter) * bx;
        bhi = c - (c - bx);
        blo = bx - bhi;
        s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
        t1 = xtail * by;
        c = (0, _utilJs.splitter) * xtail;
        ahi = c - (c - xtail);
        alo = xtail - ahi;
        c = (0, _utilJs.splitter) * by;
        bhi = c - (c - by);
        blo = by - bhi;
        t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
        _i = s0 - t0;
        bvirt = s0 - _i;
        b[0] = s0 - (_i + bvirt) + (bvirt - t0);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 - t1;
        bvirt = _0 - _i;
        b[1] = _0 - (_i + bvirt) + (bvirt - t1);
        u3 = _j + _i;
        bvirt = u3 - _j;
        b[2] = _j - (u3 - bvirt) + (_i - bvirt);
        b[3] = u3;
        return 4;
    }
}
function tailadd(finlen, a, b, k, z) {
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, u3;
    s1 = a * b;
    c = (0, _utilJs.splitter) * a;
    ahi = c - (c - a);
    alo = a - ahi;
    c = (0, _utilJs.splitter) * b;
    bhi = c - (c - b);
    blo = b - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    c = (0, _utilJs.splitter) * k;
    bhi = c - (c - k);
    blo = k - bhi;
    _i = s0 * k;
    c = (0, _utilJs.splitter) * s0;
    ahi = c - (c - s0);
    alo = s0 - ahi;
    u[0] = alo * blo - (_i - ahi * bhi - alo * bhi - ahi * blo);
    _j = s1 * k;
    c = (0, _utilJs.splitter) * s1;
    ahi = c - (c - s1);
    alo = s1 - ahi;
    _0 = alo * blo - (_j - ahi * bhi - alo * bhi - ahi * blo);
    _k = _i + _0;
    bvirt = _k - _i;
    u[1] = _i - (_k - bvirt) + (_0 - bvirt);
    u3 = _j + _k;
    u[2] = _k - (u3 - _j);
    u[3] = u3;
    finlen = finadd(finlen, 4, u);
    if (z !== 0) {
        c = (0, _utilJs.splitter) * z;
        bhi = c - (c - z);
        blo = z - bhi;
        _i = s0 * z;
        c = (0, _utilJs.splitter) * s0;
        ahi = c - (c - s0);
        alo = s0 - ahi;
        u[0] = alo * blo - (_i - ahi * bhi - alo * bhi - ahi * blo);
        _j = s1 * z;
        c = (0, _utilJs.splitter) * s1;
        ahi = c - (c - s1);
        alo = s1 - ahi;
        _0 = alo * blo - (_j - ahi * bhi - alo * bhi - ahi * blo);
        _k = _i + _0;
        bvirt = _k - _i;
        u[1] = _i - (_k - bvirt) + (_0 - bvirt);
        u3 = _j + _k;
        u[2] = _k - (u3 - _j);
        u[3] = u3;
        finlen = finadd(finlen, 4, u);
    }
    return finlen;
}
function orient3dadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, permanent) {
    let finlen;
    let adxtail, bdxtail, cdxtail;
    let adytail, bdytail, cdytail;
    let adztail, bdztail, cdztail;
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, t1, t0, u3;
    const adx = ax - dx;
    const bdx = bx - dx;
    const cdx = cx - dx;
    const ady = ay - dy;
    const bdy = by - dy;
    const cdy = cy - dy;
    const adz = az - dz;
    const bdz = bz - dz;
    const cdz = cz - dz;
    s1 = bdx * cdy;
    c = (0, _utilJs.splitter) * bdx;
    ahi = c - (c - bdx);
    alo = bdx - ahi;
    c = (0, _utilJs.splitter) * cdy;
    bhi = c - (c - cdy);
    blo = cdy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = cdx * bdy;
    c = (0, _utilJs.splitter) * cdx;
    ahi = c - (c - cdx);
    alo = cdx - ahi;
    c = (0, _utilJs.splitter) * bdy;
    bhi = c - (c - bdy);
    blo = bdy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);
    bc[3] = u3;
    s1 = cdx * ady;
    c = (0, _utilJs.splitter) * cdx;
    ahi = c - (c - cdx);
    alo = cdx - ahi;
    c = (0, _utilJs.splitter) * ady;
    bhi = c - (c - ady);
    blo = ady - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = adx * cdy;
    c = (0, _utilJs.splitter) * adx;
    ahi = c - (c - adx);
    alo = adx - ahi;
    c = (0, _utilJs.splitter) * cdy;
    bhi = c - (c - cdy);
    blo = cdy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ca[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ca[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    ca[2] = _j - (u3 - bvirt) + (_i - bvirt);
    ca[3] = u3;
    s1 = adx * bdy;
    c = (0, _utilJs.splitter) * adx;
    ahi = c - (c - adx);
    alo = adx - ahi;
    c = (0, _utilJs.splitter) * bdy;
    bhi = c - (c - bdy);
    blo = bdy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = bdx * ady;
    c = (0, _utilJs.splitter) * bdx;
    ahi = c - (c - bdx);
    alo = bdx - ahi;
    c = (0, _utilJs.splitter) * ady;
    bhi = c - (c - ady);
    blo = ady - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);
    ab[3] = u3;
    finlen = (0, _utilJs.sum)((0, _utilJs.sum)((0, _utilJs.scale)(4, bc, adz, _8), _8, (0, _utilJs.scale)(4, ca, bdz, _8b), _8b, _16), _16, (0, _utilJs.scale)(4, ab, cdz, _8), _8, fin);
    let det = (0, _utilJs.estimate)(finlen, fin);
    let errbound = o3derrboundB * permanent;
    if (det >= errbound || -det >= errbound) return det;
    bvirt = ax - adx;
    adxtail = ax - (adx + bvirt) + (bvirt - dx);
    bvirt = bx - bdx;
    bdxtail = bx - (bdx + bvirt) + (bvirt - dx);
    bvirt = cx - cdx;
    cdxtail = cx - (cdx + bvirt) + (bvirt - dx);
    bvirt = ay - ady;
    adytail = ay - (ady + bvirt) + (bvirt - dy);
    bvirt = by - bdy;
    bdytail = by - (bdy + bvirt) + (bvirt - dy);
    bvirt = cy - cdy;
    cdytail = cy - (cdy + bvirt) + (bvirt - dy);
    bvirt = az - adz;
    adztail = az - (adz + bvirt) + (bvirt - dz);
    bvirt = bz - bdz;
    bdztail = bz - (bdz + bvirt) + (bvirt - dz);
    bvirt = cz - cdz;
    cdztail = cz - (cdz + bvirt) + (bvirt - dz);
    if (adxtail === 0 && bdxtail === 0 && cdxtail === 0 && adytail === 0 && bdytail === 0 && cdytail === 0 && adztail === 0 && bdztail === 0 && cdztail === 0) return det;
    errbound = o3derrboundC * permanent + (0, _utilJs.resulterrbound) * Math.abs(det);
    det += adz * (bdx * cdytail + cdy * bdxtail - (bdy * cdxtail + cdx * bdytail)) + adztail * (bdx * cdy - bdy * cdx) + bdz * (cdx * adytail + ady * cdxtail - (cdy * adxtail + adx * cdytail)) + bdztail * (cdx * ady - cdy * adx) + cdz * (adx * bdytail + bdy * adxtail - (ady * bdxtail + bdx * adytail)) + cdztail * (adx * bdy - ady * bdx);
    if (det >= errbound || -det >= errbound) return det;
    const at_len = tailinit(adxtail, adytail, bdx, bdy, cdx, cdy, at_b, at_c);
    const bt_len = tailinit(bdxtail, bdytail, cdx, cdy, adx, ady, bt_c, bt_a);
    const ct_len = tailinit(cdxtail, cdytail, adx, ady, bdx, bdy, ct_a, ct_b);
    const bctlen = (0, _utilJs.sum)(bt_len, bt_c, ct_len, ct_b, bct);
    finlen = finadd(finlen, (0, _utilJs.scale)(bctlen, bct, adz, _16), _16);
    const catlen = (0, _utilJs.sum)(ct_len, ct_a, at_len, at_c, cat);
    finlen = finadd(finlen, (0, _utilJs.scale)(catlen, cat, bdz, _16), _16);
    const abtlen = (0, _utilJs.sum)(at_len, at_b, bt_len, bt_a, abt);
    finlen = finadd(finlen, (0, _utilJs.scale)(abtlen, abt, cdz, _16), _16);
    if (adztail !== 0) {
        finlen = finadd(finlen, (0, _utilJs.scale)(4, bc, adztail, _12), _12);
        finlen = finadd(finlen, (0, _utilJs.scale)(bctlen, bct, adztail, _16), _16);
    }
    if (bdztail !== 0) {
        finlen = finadd(finlen, (0, _utilJs.scale)(4, ca, bdztail, _12), _12);
        finlen = finadd(finlen, (0, _utilJs.scale)(catlen, cat, bdztail, _16), _16);
    }
    if (cdztail !== 0) {
        finlen = finadd(finlen, (0, _utilJs.scale)(4, ab, cdztail, _12), _12);
        finlen = finadd(finlen, (0, _utilJs.scale)(abtlen, abt, cdztail, _16), _16);
    }
    if (adxtail !== 0) {
        if (bdytail !== 0) finlen = tailadd(finlen, adxtail, bdytail, cdz, cdztail);
        if (cdytail !== 0) finlen = tailadd(finlen, -adxtail, cdytail, bdz, bdztail);
    }
    if (bdxtail !== 0) {
        if (cdytail !== 0) finlen = tailadd(finlen, bdxtail, cdytail, adz, adztail);
        if (adytail !== 0) finlen = tailadd(finlen, -bdxtail, adytail, cdz, cdztail);
    }
    if (cdxtail !== 0) {
        if (adytail !== 0) finlen = tailadd(finlen, cdxtail, adytail, bdz, bdztail);
        if (bdytail !== 0) finlen = tailadd(finlen, -cdxtail, bdytail, adz, adztail);
    }
    return fin[finlen - 1];
}
function orient3d(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz) {
    const adx = ax - dx;
    const bdx = bx - dx;
    const cdx = cx - dx;
    const ady = ay - dy;
    const bdy = by - dy;
    const cdy = cy - dy;
    const adz = az - dz;
    const bdz = bz - dz;
    const cdz = cz - dz;
    const bdxcdy = bdx * cdy;
    const cdxbdy = cdx * bdy;
    const cdxady = cdx * ady;
    const adxcdy = adx * cdy;
    const adxbdy = adx * bdy;
    const bdxady = bdx * ady;
    const det = adz * (bdxcdy - cdxbdy) + bdz * (cdxady - adxcdy) + cdz * (adxbdy - bdxady);
    const permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz) + (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz) + (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz);
    const errbound = o3derrboundA * permanent;
    if (det > errbound || -det > errbound) return det;
    return orient3dadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, permanent);
}
function orient3dfast(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz) {
    const adx = ax - dx;
    const bdx = bx - dx;
    const cdx = cx - dx;
    const ady = ay - dy;
    const bdy = by - dy;
    const cdy = cy - dy;
    const adz = az - dz;
    const bdz = bz - dz;
    const cdz = cz - dz;
    return adx * (bdy * cdz - bdz * cdy) + bdx * (cdy * adz - cdz * ady) + cdx * (ady * bdz - adz * bdy);
}

},{"./util.js":"3OxkP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6yBsv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "incircle", ()=>incircle);
parcelHelpers.export(exports, "incirclefast", ()=>incirclefast);
var _utilJs = require("./util.js");
const iccerrboundA = (10 + 96 * (0, _utilJs.epsilon)) * (0, _utilJs.epsilon);
const iccerrboundB = (4 + 48 * (0, _utilJs.epsilon)) * (0, _utilJs.epsilon);
const iccerrboundC = (44 + 576 * (0, _utilJs.epsilon)) * (0, _utilJs.epsilon) * (0, _utilJs.epsilon);
const bc = (0, _utilJs.vec)(4);
const ca = (0, _utilJs.vec)(4);
const ab = (0, _utilJs.vec)(4);
const aa = (0, _utilJs.vec)(4);
const bb = (0, _utilJs.vec)(4);
const cc = (0, _utilJs.vec)(4);
const u = (0, _utilJs.vec)(4);
const v = (0, _utilJs.vec)(4);
const axtbc = (0, _utilJs.vec)(8);
const aytbc = (0, _utilJs.vec)(8);
const bxtca = (0, _utilJs.vec)(8);
const bytca = (0, _utilJs.vec)(8);
const cxtab = (0, _utilJs.vec)(8);
const cytab = (0, _utilJs.vec)(8);
const abt = (0, _utilJs.vec)(8);
const bct = (0, _utilJs.vec)(8);
const cat = (0, _utilJs.vec)(8);
const abtt = (0, _utilJs.vec)(4);
const bctt = (0, _utilJs.vec)(4);
const catt = (0, _utilJs.vec)(4);
const _8 = (0, _utilJs.vec)(8);
const _16 = (0, _utilJs.vec)(16);
const _16b = (0, _utilJs.vec)(16);
const _16c = (0, _utilJs.vec)(16);
const _32 = (0, _utilJs.vec)(32);
const _32b = (0, _utilJs.vec)(32);
const _48 = (0, _utilJs.vec)(48);
const _64 = (0, _utilJs.vec)(64);
let fin = (0, _utilJs.vec)(1152);
let fin2 = (0, _utilJs.vec)(1152);
function finadd(finlen, a, alen) {
    finlen = (0, _utilJs.sum)(finlen, fin, a, alen, fin2);
    const tmp = fin;
    fin = fin2;
    fin2 = tmp;
    return finlen;
}
function incircleadapt(ax, ay, bx, by, cx, cy, dx, dy, permanent) {
    let finlen;
    let adxtail, bdxtail, cdxtail, adytail, bdytail, cdytail;
    let axtbclen, aytbclen, bxtcalen, bytcalen, cxtablen, cytablen;
    let abtlen, bctlen, catlen;
    let abttlen, bcttlen, cattlen;
    let n1, n0;
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;
    const adx = ax - dx;
    const bdx = bx - dx;
    const cdx = cx - dx;
    const ady = ay - dy;
    const bdy = by - dy;
    const cdy = cy - dy;
    s1 = bdx * cdy;
    c = (0, _utilJs.splitter) * bdx;
    ahi = c - (c - bdx);
    alo = bdx - ahi;
    c = (0, _utilJs.splitter) * cdy;
    bhi = c - (c - cdy);
    blo = cdy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = cdx * bdy;
    c = (0, _utilJs.splitter) * cdx;
    ahi = c - (c - cdx);
    alo = cdx - ahi;
    c = (0, _utilJs.splitter) * bdy;
    bhi = c - (c - bdy);
    blo = bdy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);
    bc[3] = u3;
    s1 = cdx * ady;
    c = (0, _utilJs.splitter) * cdx;
    ahi = c - (c - cdx);
    alo = cdx - ahi;
    c = (0, _utilJs.splitter) * ady;
    bhi = c - (c - ady);
    blo = ady - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = adx * cdy;
    c = (0, _utilJs.splitter) * adx;
    ahi = c - (c - adx);
    alo = adx - ahi;
    c = (0, _utilJs.splitter) * cdy;
    bhi = c - (c - cdy);
    blo = cdy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ca[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ca[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    ca[2] = _j - (u3 - bvirt) + (_i - bvirt);
    ca[3] = u3;
    s1 = adx * bdy;
    c = (0, _utilJs.splitter) * adx;
    ahi = c - (c - adx);
    alo = adx - ahi;
    c = (0, _utilJs.splitter) * bdy;
    bhi = c - (c - bdy);
    blo = bdy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = bdx * ady;
    c = (0, _utilJs.splitter) * bdx;
    ahi = c - (c - bdx);
    alo = bdx - ahi;
    c = (0, _utilJs.splitter) * ady;
    bhi = c - (c - ady);
    blo = ady - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);
    ab[3] = u3;
    finlen = (0, _utilJs.sum)((0, _utilJs.sum)((0, _utilJs.sum)((0, _utilJs.scale)((0, _utilJs.scale)(4, bc, adx, _8), _8, adx, _16), _16, (0, _utilJs.scale)((0, _utilJs.scale)(4, bc, ady, _8), _8, ady, _16b), _16b, _32), _32, (0, _utilJs.sum)((0, _utilJs.scale)((0, _utilJs.scale)(4, ca, bdx, _8), _8, bdx, _16), _16, (0, _utilJs.scale)((0, _utilJs.scale)(4, ca, bdy, _8), _8, bdy, _16b), _16b, _32b), _32b, _64), _64, (0, _utilJs.sum)((0, _utilJs.scale)((0, _utilJs.scale)(4, ab, cdx, _8), _8, cdx, _16), _16, (0, _utilJs.scale)((0, _utilJs.scale)(4, ab, cdy, _8), _8, cdy, _16b), _16b, _32), _32, fin);
    let det = (0, _utilJs.estimate)(finlen, fin);
    let errbound = iccerrboundB * permanent;
    if (det >= errbound || -det >= errbound) return det;
    bvirt = ax - adx;
    adxtail = ax - (adx + bvirt) + (bvirt - dx);
    bvirt = ay - ady;
    adytail = ay - (ady + bvirt) + (bvirt - dy);
    bvirt = bx - bdx;
    bdxtail = bx - (bdx + bvirt) + (bvirt - dx);
    bvirt = by - bdy;
    bdytail = by - (bdy + bvirt) + (bvirt - dy);
    bvirt = cx - cdx;
    cdxtail = cx - (cdx + bvirt) + (bvirt - dx);
    bvirt = cy - cdy;
    cdytail = cy - (cdy + bvirt) + (bvirt - dy);
    if (adxtail === 0 && bdxtail === 0 && cdxtail === 0 && adytail === 0 && bdytail === 0 && cdytail === 0) return det;
    errbound = iccerrboundC * permanent + (0, _utilJs.resulterrbound) * Math.abs(det);
    det += (adx * adx + ady * ady) * (bdx * cdytail + cdy * bdxtail - (bdy * cdxtail + cdx * bdytail)) + 2 * (adx * adxtail + ady * adytail) * (bdx * cdy - bdy * cdx) + ((bdx * bdx + bdy * bdy) * (cdx * adytail + ady * cdxtail - (cdy * adxtail + adx * cdytail)) + 2 * (bdx * bdxtail + bdy * bdytail) * (cdx * ady - cdy * adx)) + ((cdx * cdx + cdy * cdy) * (adx * bdytail + bdy * adxtail - (ady * bdxtail + bdx * adytail)) + 2 * (cdx * cdxtail + cdy * cdytail) * (adx * bdy - ady * bdx));
    if (det >= errbound || -det >= errbound) return det;
    if (bdxtail !== 0 || bdytail !== 0 || cdxtail !== 0 || cdytail !== 0) {
        s1 = adx * adx;
        c = (0, _utilJs.splitter) * adx;
        ahi = c - (c - adx);
        alo = adx - ahi;
        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);
        t1 = ady * ady;
        c = (0, _utilJs.splitter) * ady;
        ahi = c - (c - ady);
        alo = ady - ahi;
        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);
        _i = s0 + t0;
        bvirt = _i - s0;
        aa[0] = s0 - (_i - bvirt) + (t0 - bvirt);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 + t1;
        bvirt = _i - _0;
        aa[1] = _0 - (_i - bvirt) + (t1 - bvirt);
        u3 = _j + _i;
        bvirt = u3 - _j;
        aa[2] = _j - (u3 - bvirt) + (_i - bvirt);
        aa[3] = u3;
    }
    if (cdxtail !== 0 || cdytail !== 0 || adxtail !== 0 || adytail !== 0) {
        s1 = bdx * bdx;
        c = (0, _utilJs.splitter) * bdx;
        ahi = c - (c - bdx);
        alo = bdx - ahi;
        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);
        t1 = bdy * bdy;
        c = (0, _utilJs.splitter) * bdy;
        ahi = c - (c - bdy);
        alo = bdy - ahi;
        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);
        _i = s0 + t0;
        bvirt = _i - s0;
        bb[0] = s0 - (_i - bvirt) + (t0 - bvirt);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 + t1;
        bvirt = _i - _0;
        bb[1] = _0 - (_i - bvirt) + (t1 - bvirt);
        u3 = _j + _i;
        bvirt = u3 - _j;
        bb[2] = _j - (u3 - bvirt) + (_i - bvirt);
        bb[3] = u3;
    }
    if (adxtail !== 0 || adytail !== 0 || bdxtail !== 0 || bdytail !== 0) {
        s1 = cdx * cdx;
        c = (0, _utilJs.splitter) * cdx;
        ahi = c - (c - cdx);
        alo = cdx - ahi;
        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);
        t1 = cdy * cdy;
        c = (0, _utilJs.splitter) * cdy;
        ahi = c - (c - cdy);
        alo = cdy - ahi;
        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);
        _i = s0 + t0;
        bvirt = _i - s0;
        cc[0] = s0 - (_i - bvirt) + (t0 - bvirt);
        _j = s1 + _i;
        bvirt = _j - s1;
        _0 = s1 - (_j - bvirt) + (_i - bvirt);
        _i = _0 + t1;
        bvirt = _i - _0;
        cc[1] = _0 - (_i - bvirt) + (t1 - bvirt);
        u3 = _j + _i;
        bvirt = u3 - _j;
        cc[2] = _j - (u3 - bvirt) + (_i - bvirt);
        cc[3] = u3;
    }
    if (adxtail !== 0) {
        axtbclen = (0, _utilJs.scale)(4, bc, adxtail, axtbc);
        finlen = finadd(finlen, (0, _utilJs.sum_three)((0, _utilJs.scale)(axtbclen, axtbc, 2 * adx, _16), _16, (0, _utilJs.scale)((0, _utilJs.scale)(4, cc, adxtail, _8), _8, bdy, _16b), _16b, (0, _utilJs.scale)((0, _utilJs.scale)(4, bb, adxtail, _8), _8, -cdy, _16c), _16c, _32, _48), _48);
    }
    if (adytail !== 0) {
        aytbclen = (0, _utilJs.scale)(4, bc, adytail, aytbc);
        finlen = finadd(finlen, (0, _utilJs.sum_three)((0, _utilJs.scale)(aytbclen, aytbc, 2 * ady, _16), _16, (0, _utilJs.scale)((0, _utilJs.scale)(4, bb, adytail, _8), _8, cdx, _16b), _16b, (0, _utilJs.scale)((0, _utilJs.scale)(4, cc, adytail, _8), _8, -bdx, _16c), _16c, _32, _48), _48);
    }
    if (bdxtail !== 0) {
        bxtcalen = (0, _utilJs.scale)(4, ca, bdxtail, bxtca);
        finlen = finadd(finlen, (0, _utilJs.sum_three)((0, _utilJs.scale)(bxtcalen, bxtca, 2 * bdx, _16), _16, (0, _utilJs.scale)((0, _utilJs.scale)(4, aa, bdxtail, _8), _8, cdy, _16b), _16b, (0, _utilJs.scale)((0, _utilJs.scale)(4, cc, bdxtail, _8), _8, -ady, _16c), _16c, _32, _48), _48);
    }
    if (bdytail !== 0) {
        bytcalen = (0, _utilJs.scale)(4, ca, bdytail, bytca);
        finlen = finadd(finlen, (0, _utilJs.sum_three)((0, _utilJs.scale)(bytcalen, bytca, 2 * bdy, _16), _16, (0, _utilJs.scale)((0, _utilJs.scale)(4, cc, bdytail, _8), _8, adx, _16b), _16b, (0, _utilJs.scale)((0, _utilJs.scale)(4, aa, bdytail, _8), _8, -cdx, _16c), _16c, _32, _48), _48);
    }
    if (cdxtail !== 0) {
        cxtablen = (0, _utilJs.scale)(4, ab, cdxtail, cxtab);
        finlen = finadd(finlen, (0, _utilJs.sum_three)((0, _utilJs.scale)(cxtablen, cxtab, 2 * cdx, _16), _16, (0, _utilJs.scale)((0, _utilJs.scale)(4, bb, cdxtail, _8), _8, ady, _16b), _16b, (0, _utilJs.scale)((0, _utilJs.scale)(4, aa, cdxtail, _8), _8, -bdy, _16c), _16c, _32, _48), _48);
    }
    if (cdytail !== 0) {
        cytablen = (0, _utilJs.scale)(4, ab, cdytail, cytab);
        finlen = finadd(finlen, (0, _utilJs.sum_three)((0, _utilJs.scale)(cytablen, cytab, 2 * cdy, _16), _16, (0, _utilJs.scale)((0, _utilJs.scale)(4, aa, cdytail, _8), _8, bdx, _16b), _16b, (0, _utilJs.scale)((0, _utilJs.scale)(4, bb, cdytail, _8), _8, -adx, _16c), _16c, _32, _48), _48);
    }
    if (adxtail !== 0 || adytail !== 0) {
        if (bdxtail !== 0 || bdytail !== 0 || cdxtail !== 0 || cdytail !== 0) {
            s1 = bdxtail * cdy;
            c = (0, _utilJs.splitter) * bdxtail;
            ahi = c - (c - bdxtail);
            alo = bdxtail - ahi;
            c = (0, _utilJs.splitter) * cdy;
            bhi = c - (c - cdy);
            blo = cdy - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = bdx * cdytail;
            c = (0, _utilJs.splitter) * bdx;
            ahi = c - (c - bdx);
            alo = bdx - ahi;
            c = (0, _utilJs.splitter) * cdytail;
            bhi = c - (c - cdytail);
            blo = cdytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 + t0;
            bvirt = _i - s0;
            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 + t1;
            bvirt = _i - _0;
            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);
            u3 = _j + _i;
            bvirt = u3 - _j;
            u[2] = _j - (u3 - bvirt) + (_i - bvirt);
            u[3] = u3;
            s1 = cdxtail * -bdy;
            c = (0, _utilJs.splitter) * cdxtail;
            ahi = c - (c - cdxtail);
            alo = cdxtail - ahi;
            c = (0, _utilJs.splitter) * -bdy;
            bhi = c - (c - -bdy);
            blo = -bdy - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = cdx * -bdytail;
            c = (0, _utilJs.splitter) * cdx;
            ahi = c - (c - cdx);
            alo = cdx - ahi;
            c = (0, _utilJs.splitter) * -bdytail;
            bhi = c - (c - -bdytail);
            blo = -bdytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 + t0;
            bvirt = _i - s0;
            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 + t1;
            bvirt = _i - _0;
            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);
            u3 = _j + _i;
            bvirt = u3 - _j;
            v[2] = _j - (u3 - bvirt) + (_i - bvirt);
            v[3] = u3;
            bctlen = (0, _utilJs.sum)(4, u, 4, v, bct);
            s1 = bdxtail * cdytail;
            c = (0, _utilJs.splitter) * bdxtail;
            ahi = c - (c - bdxtail);
            alo = bdxtail - ahi;
            c = (0, _utilJs.splitter) * cdytail;
            bhi = c - (c - cdytail);
            blo = cdytail - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = cdxtail * bdytail;
            c = (0, _utilJs.splitter) * cdxtail;
            ahi = c - (c - cdxtail);
            alo = cdxtail - ahi;
            c = (0, _utilJs.splitter) * bdytail;
            bhi = c - (c - bdytail);
            blo = bdytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 - t0;
            bvirt = s0 - _i;
            bctt[0] = s0 - (_i + bvirt) + (bvirt - t0);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 - t1;
            bvirt = _0 - _i;
            bctt[1] = _0 - (_i + bvirt) + (bvirt - t1);
            u3 = _j + _i;
            bvirt = u3 - _j;
            bctt[2] = _j - (u3 - bvirt) + (_i - bvirt);
            bctt[3] = u3;
            bcttlen = 4;
        } else {
            bct[0] = 0;
            bctlen = 1;
            bctt[0] = 0;
            bcttlen = 1;
        }
        if (adxtail !== 0) {
            const len = (0, _utilJs.scale)(bctlen, bct, adxtail, _16c);
            finlen = finadd(finlen, (0, _utilJs.sum)((0, _utilJs.scale)(axtbclen, axtbc, adxtail, _16), _16, (0, _utilJs.scale)(len, _16c, 2 * adx, _32), _32, _48), _48);
            const len2 = (0, _utilJs.scale)(bcttlen, bctt, adxtail, _8);
            finlen = finadd(finlen, (0, _utilJs.sum_three)((0, _utilJs.scale)(len2, _8, 2 * adx, _16), _16, (0, _utilJs.scale)(len2, _8, adxtail, _16b), _16b, (0, _utilJs.scale)(len, _16c, adxtail, _32), _32, _32b, _64), _64);
            if (bdytail !== 0) finlen = finadd(finlen, (0, _utilJs.scale)((0, _utilJs.scale)(4, cc, adxtail, _8), _8, bdytail, _16), _16);
            if (cdytail !== 0) finlen = finadd(finlen, (0, _utilJs.scale)((0, _utilJs.scale)(4, bb, -adxtail, _8), _8, cdytail, _16), _16);
        }
        if (adytail !== 0) {
            const len = (0, _utilJs.scale)(bctlen, bct, adytail, _16c);
            finlen = finadd(finlen, (0, _utilJs.sum)((0, _utilJs.scale)(aytbclen, aytbc, adytail, _16), _16, (0, _utilJs.scale)(len, _16c, 2 * ady, _32), _32, _48), _48);
            const len2 = (0, _utilJs.scale)(bcttlen, bctt, adytail, _8);
            finlen = finadd(finlen, (0, _utilJs.sum_three)((0, _utilJs.scale)(len2, _8, 2 * ady, _16), _16, (0, _utilJs.scale)(len2, _8, adytail, _16b), _16b, (0, _utilJs.scale)(len, _16c, adytail, _32), _32, _32b, _64), _64);
        }
    }
    if (bdxtail !== 0 || bdytail !== 0) {
        if (cdxtail !== 0 || cdytail !== 0 || adxtail !== 0 || adytail !== 0) {
            s1 = cdxtail * ady;
            c = (0, _utilJs.splitter) * cdxtail;
            ahi = c - (c - cdxtail);
            alo = cdxtail - ahi;
            c = (0, _utilJs.splitter) * ady;
            bhi = c - (c - ady);
            blo = ady - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = cdx * adytail;
            c = (0, _utilJs.splitter) * cdx;
            ahi = c - (c - cdx);
            alo = cdx - ahi;
            c = (0, _utilJs.splitter) * adytail;
            bhi = c - (c - adytail);
            blo = adytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 + t0;
            bvirt = _i - s0;
            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 + t1;
            bvirt = _i - _0;
            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);
            u3 = _j + _i;
            bvirt = u3 - _j;
            u[2] = _j - (u3 - bvirt) + (_i - bvirt);
            u[3] = u3;
            n1 = -cdy;
            n0 = -cdytail;
            s1 = adxtail * n1;
            c = (0, _utilJs.splitter) * adxtail;
            ahi = c - (c - adxtail);
            alo = adxtail - ahi;
            c = (0, _utilJs.splitter) * n1;
            bhi = c - (c - n1);
            blo = n1 - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = adx * n0;
            c = (0, _utilJs.splitter) * adx;
            ahi = c - (c - adx);
            alo = adx - ahi;
            c = (0, _utilJs.splitter) * n0;
            bhi = c - (c - n0);
            blo = n0 - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 + t0;
            bvirt = _i - s0;
            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 + t1;
            bvirt = _i - _0;
            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);
            u3 = _j + _i;
            bvirt = u3 - _j;
            v[2] = _j - (u3 - bvirt) + (_i - bvirt);
            v[3] = u3;
            catlen = (0, _utilJs.sum)(4, u, 4, v, cat);
            s1 = cdxtail * adytail;
            c = (0, _utilJs.splitter) * cdxtail;
            ahi = c - (c - cdxtail);
            alo = cdxtail - ahi;
            c = (0, _utilJs.splitter) * adytail;
            bhi = c - (c - adytail);
            blo = adytail - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = adxtail * cdytail;
            c = (0, _utilJs.splitter) * adxtail;
            ahi = c - (c - adxtail);
            alo = adxtail - ahi;
            c = (0, _utilJs.splitter) * cdytail;
            bhi = c - (c - cdytail);
            blo = cdytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 - t0;
            bvirt = s0 - _i;
            catt[0] = s0 - (_i + bvirt) + (bvirt - t0);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 - t1;
            bvirt = _0 - _i;
            catt[1] = _0 - (_i + bvirt) + (bvirt - t1);
            u3 = _j + _i;
            bvirt = u3 - _j;
            catt[2] = _j - (u3 - bvirt) + (_i - bvirt);
            catt[3] = u3;
            cattlen = 4;
        } else {
            cat[0] = 0;
            catlen = 1;
            catt[0] = 0;
            cattlen = 1;
        }
        if (bdxtail !== 0) {
            const len = (0, _utilJs.scale)(catlen, cat, bdxtail, _16c);
            finlen = finadd(finlen, (0, _utilJs.sum)((0, _utilJs.scale)(bxtcalen, bxtca, bdxtail, _16), _16, (0, _utilJs.scale)(len, _16c, 2 * bdx, _32), _32, _48), _48);
            const len2 = (0, _utilJs.scale)(cattlen, catt, bdxtail, _8);
            finlen = finadd(finlen, (0, _utilJs.sum_three)((0, _utilJs.scale)(len2, _8, 2 * bdx, _16), _16, (0, _utilJs.scale)(len2, _8, bdxtail, _16b), _16b, (0, _utilJs.scale)(len, _16c, bdxtail, _32), _32, _32b, _64), _64);
            if (cdytail !== 0) finlen = finadd(finlen, (0, _utilJs.scale)((0, _utilJs.scale)(4, aa, bdxtail, _8), _8, cdytail, _16), _16);
            if (adytail !== 0) finlen = finadd(finlen, (0, _utilJs.scale)((0, _utilJs.scale)(4, cc, -bdxtail, _8), _8, adytail, _16), _16);
        }
        if (bdytail !== 0) {
            const len = (0, _utilJs.scale)(catlen, cat, bdytail, _16c);
            finlen = finadd(finlen, (0, _utilJs.sum)((0, _utilJs.scale)(bytcalen, bytca, bdytail, _16), _16, (0, _utilJs.scale)(len, _16c, 2 * bdy, _32), _32, _48), _48);
            const len2 = (0, _utilJs.scale)(cattlen, catt, bdytail, _8);
            finlen = finadd(finlen, (0, _utilJs.sum_three)((0, _utilJs.scale)(len2, _8, 2 * bdy, _16), _16, (0, _utilJs.scale)(len2, _8, bdytail, _16b), _16b, (0, _utilJs.scale)(len, _16c, bdytail, _32), _32, _32b, _64), _64);
        }
    }
    if (cdxtail !== 0 || cdytail !== 0) {
        if (adxtail !== 0 || adytail !== 0 || bdxtail !== 0 || bdytail !== 0) {
            s1 = adxtail * bdy;
            c = (0, _utilJs.splitter) * adxtail;
            ahi = c - (c - adxtail);
            alo = adxtail - ahi;
            c = (0, _utilJs.splitter) * bdy;
            bhi = c - (c - bdy);
            blo = bdy - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = adx * bdytail;
            c = (0, _utilJs.splitter) * adx;
            ahi = c - (c - adx);
            alo = adx - ahi;
            c = (0, _utilJs.splitter) * bdytail;
            bhi = c - (c - bdytail);
            blo = bdytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 + t0;
            bvirt = _i - s0;
            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 + t1;
            bvirt = _i - _0;
            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);
            u3 = _j + _i;
            bvirt = u3 - _j;
            u[2] = _j - (u3 - bvirt) + (_i - bvirt);
            u[3] = u3;
            n1 = -ady;
            n0 = -adytail;
            s1 = bdxtail * n1;
            c = (0, _utilJs.splitter) * bdxtail;
            ahi = c - (c - bdxtail);
            alo = bdxtail - ahi;
            c = (0, _utilJs.splitter) * n1;
            bhi = c - (c - n1);
            blo = n1 - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = bdx * n0;
            c = (0, _utilJs.splitter) * bdx;
            ahi = c - (c - bdx);
            alo = bdx - ahi;
            c = (0, _utilJs.splitter) * n0;
            bhi = c - (c - n0);
            blo = n0 - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 + t0;
            bvirt = _i - s0;
            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 + t1;
            bvirt = _i - _0;
            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);
            u3 = _j + _i;
            bvirt = u3 - _j;
            v[2] = _j - (u3 - bvirt) + (_i - bvirt);
            v[3] = u3;
            abtlen = (0, _utilJs.sum)(4, u, 4, v, abt);
            s1 = adxtail * bdytail;
            c = (0, _utilJs.splitter) * adxtail;
            ahi = c - (c - adxtail);
            alo = adxtail - ahi;
            c = (0, _utilJs.splitter) * bdytail;
            bhi = c - (c - bdytail);
            blo = bdytail - bhi;
            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
            t1 = bdxtail * adytail;
            c = (0, _utilJs.splitter) * bdxtail;
            ahi = c - (c - bdxtail);
            alo = bdxtail - ahi;
            c = (0, _utilJs.splitter) * adytail;
            bhi = c - (c - adytail);
            blo = adytail - bhi;
            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
            _i = s0 - t0;
            bvirt = s0 - _i;
            abtt[0] = s0 - (_i + bvirt) + (bvirt - t0);
            _j = s1 + _i;
            bvirt = _j - s1;
            _0 = s1 - (_j - bvirt) + (_i - bvirt);
            _i = _0 - t1;
            bvirt = _0 - _i;
            abtt[1] = _0 - (_i + bvirt) + (bvirt - t1);
            u3 = _j + _i;
            bvirt = u3 - _j;
            abtt[2] = _j - (u3 - bvirt) + (_i - bvirt);
            abtt[3] = u3;
            abttlen = 4;
        } else {
            abt[0] = 0;
            abtlen = 1;
            abtt[0] = 0;
            abttlen = 1;
        }
        if (cdxtail !== 0) {
            const len = (0, _utilJs.scale)(abtlen, abt, cdxtail, _16c);
            finlen = finadd(finlen, (0, _utilJs.sum)((0, _utilJs.scale)(cxtablen, cxtab, cdxtail, _16), _16, (0, _utilJs.scale)(len, _16c, 2 * cdx, _32), _32, _48), _48);
            const len2 = (0, _utilJs.scale)(abttlen, abtt, cdxtail, _8);
            finlen = finadd(finlen, (0, _utilJs.sum_three)((0, _utilJs.scale)(len2, _8, 2 * cdx, _16), _16, (0, _utilJs.scale)(len2, _8, cdxtail, _16b), _16b, (0, _utilJs.scale)(len, _16c, cdxtail, _32), _32, _32b, _64), _64);
            if (adytail !== 0) finlen = finadd(finlen, (0, _utilJs.scale)((0, _utilJs.scale)(4, bb, cdxtail, _8), _8, adytail, _16), _16);
            if (bdytail !== 0) finlen = finadd(finlen, (0, _utilJs.scale)((0, _utilJs.scale)(4, aa, -cdxtail, _8), _8, bdytail, _16), _16);
        }
        if (cdytail !== 0) {
            const len = (0, _utilJs.scale)(abtlen, abt, cdytail, _16c);
            finlen = finadd(finlen, (0, _utilJs.sum)((0, _utilJs.scale)(cytablen, cytab, cdytail, _16), _16, (0, _utilJs.scale)(len, _16c, 2 * cdy, _32), _32, _48), _48);
            const len2 = (0, _utilJs.scale)(abttlen, abtt, cdytail, _8);
            finlen = finadd(finlen, (0, _utilJs.sum_three)((0, _utilJs.scale)(len2, _8, 2 * cdy, _16), _16, (0, _utilJs.scale)(len2, _8, cdytail, _16b), _16b, (0, _utilJs.scale)(len, _16c, cdytail, _32), _32, _32b, _64), _64);
        }
    }
    return fin[finlen - 1];
}
function incircle(ax, ay, bx, by, cx, cy, dx, dy) {
    const adx = ax - dx;
    const bdx = bx - dx;
    const cdx = cx - dx;
    const ady = ay - dy;
    const bdy = by - dy;
    const cdy = cy - dy;
    const bdxcdy = bdx * cdy;
    const cdxbdy = cdx * bdy;
    const alift = adx * adx + ady * ady;
    const cdxady = cdx * ady;
    const adxcdy = adx * cdy;
    const blift = bdx * bdx + bdy * bdy;
    const adxbdy = adx * bdy;
    const bdxady = bdx * ady;
    const clift = cdx * cdx + cdy * cdy;
    const det = alift * (bdxcdy - cdxbdy) + blift * (cdxady - adxcdy) + clift * (adxbdy - bdxady);
    const permanent = (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * alift + (Math.abs(cdxady) + Math.abs(adxcdy)) * blift + (Math.abs(adxbdy) + Math.abs(bdxady)) * clift;
    const errbound = iccerrboundA * permanent;
    if (det > errbound || -det > errbound) return det;
    return incircleadapt(ax, ay, bx, by, cx, cy, dx, dy, permanent);
}
function incirclefast(ax, ay, bx, by, cx, cy, dx, dy) {
    const adx = ax - dx;
    const ady = ay - dy;
    const bdx = bx - dx;
    const bdy = by - dy;
    const cdx = cx - dx;
    const cdy = cy - dy;
    const abdet = adx * bdy - bdx * ady;
    const bcdet = bdx * cdy - cdx * bdy;
    const cadet = cdx * ady - adx * cdy;
    const alift = adx * adx + ady * ady;
    const blift = bdx * bdx + bdy * bdy;
    const clift = cdx * cdx + cdy * cdy;
    return alift * bcdet + blift * cadet + clift * abdet;
}

},{"./util.js":"3OxkP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6qjhA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "insphere", ()=>insphere);
parcelHelpers.export(exports, "inspherefast", ()=>inspherefast);
var _utilJs = require("./util.js");
const isperrboundA = (16 + 224 * (0, _utilJs.epsilon)) * (0, _utilJs.epsilon);
const isperrboundB = (5 + 72 * (0, _utilJs.epsilon)) * (0, _utilJs.epsilon);
const isperrboundC = (71 + 1408 * (0, _utilJs.epsilon)) * (0, _utilJs.epsilon) * (0, _utilJs.epsilon);
const ab = (0, _utilJs.vec)(4);
const bc = (0, _utilJs.vec)(4);
const cd = (0, _utilJs.vec)(4);
const de = (0, _utilJs.vec)(4);
const ea = (0, _utilJs.vec)(4);
const ac = (0, _utilJs.vec)(4);
const bd = (0, _utilJs.vec)(4);
const ce = (0, _utilJs.vec)(4);
const da = (0, _utilJs.vec)(4);
const eb = (0, _utilJs.vec)(4);
const abc = (0, _utilJs.vec)(24);
const bcd = (0, _utilJs.vec)(24);
const cde = (0, _utilJs.vec)(24);
const dea = (0, _utilJs.vec)(24);
const eab = (0, _utilJs.vec)(24);
const abd = (0, _utilJs.vec)(24);
const bce = (0, _utilJs.vec)(24);
const cda = (0, _utilJs.vec)(24);
const deb = (0, _utilJs.vec)(24);
const eac = (0, _utilJs.vec)(24);
const adet = (0, _utilJs.vec)(1152);
const bdet = (0, _utilJs.vec)(1152);
const cdet = (0, _utilJs.vec)(1152);
const ddet = (0, _utilJs.vec)(1152);
const edet = (0, _utilJs.vec)(1152);
const abdet = (0, _utilJs.vec)(2304);
const cddet = (0, _utilJs.vec)(2304);
const cdedet = (0, _utilJs.vec)(3456);
const deter = (0, _utilJs.vec)(5760);
const _8 = (0, _utilJs.vec)(8);
const _8b = (0, _utilJs.vec)(8);
const _8c = (0, _utilJs.vec)(8);
const _16 = (0, _utilJs.vec)(16);
const _24 = (0, _utilJs.vec)(24);
const _48 = (0, _utilJs.vec)(48);
const _48b = (0, _utilJs.vec)(48);
const _96 = (0, _utilJs.vec)(96);
const _192 = (0, _utilJs.vec)(192);
const _384x = (0, _utilJs.vec)(384);
const _384y = (0, _utilJs.vec)(384);
const _384z = (0, _utilJs.vec)(384);
const _768 = (0, _utilJs.vec)(768);
function sum_three_scale(a, b, c, az, bz, cz, out) {
    return (0, _utilJs.sum_three)((0, _utilJs.scale)(4, a, az, _8), _8, (0, _utilJs.scale)(4, b, bz, _8b), _8b, (0, _utilJs.scale)(4, c, cz, _8c), _8c, _16, out);
}
function liftexact(alen, a, blen, b, clen, c, dlen, d, x, y, z, out) {
    const len = (0, _utilJs.sum)((0, _utilJs.sum)(alen, a, blen, b, _48), _48, (0, _utilJs.negate)((0, _utilJs.sum)(clen, c, dlen, d, _48b), _48b), _48b, _96);
    return (0, _utilJs.sum_three)((0, _utilJs.scale)((0, _utilJs.scale)(len, _96, x, _192), _192, x, _384x), _384x, (0, _utilJs.scale)((0, _utilJs.scale)(len, _96, y, _192), _192, y, _384y), _384y, (0, _utilJs.scale)((0, _utilJs.scale)(len, _96, z, _192), _192, z, _384z), _384z, _768, out);
}
function insphereexact(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez) {
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;
    s1 = ax * by;
    c = (0, _utilJs.splitter) * ax;
    ahi = c - (c - ax);
    alo = ax - ahi;
    c = (0, _utilJs.splitter) * by;
    bhi = c - (c - by);
    blo = by - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = bx * ay;
    c = (0, _utilJs.splitter) * bx;
    ahi = c - (c - bx);
    alo = bx - ahi;
    c = (0, _utilJs.splitter) * ay;
    bhi = c - (c - ay);
    blo = ay - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);
    ab[3] = u3;
    s1 = bx * cy;
    c = (0, _utilJs.splitter) * bx;
    ahi = c - (c - bx);
    alo = bx - ahi;
    c = (0, _utilJs.splitter) * cy;
    bhi = c - (c - cy);
    blo = cy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = cx * by;
    c = (0, _utilJs.splitter) * cx;
    ahi = c - (c - cx);
    alo = cx - ahi;
    c = (0, _utilJs.splitter) * by;
    bhi = c - (c - by);
    blo = by - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);
    bc[3] = u3;
    s1 = cx * dy;
    c = (0, _utilJs.splitter) * cx;
    ahi = c - (c - cx);
    alo = cx - ahi;
    c = (0, _utilJs.splitter) * dy;
    bhi = c - (c - dy);
    blo = dy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = dx * cy;
    c = (0, _utilJs.splitter) * dx;
    ahi = c - (c - dx);
    alo = dx - ahi;
    c = (0, _utilJs.splitter) * cy;
    bhi = c - (c - cy);
    blo = cy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    cd[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    cd[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    cd[2] = _j - (u3 - bvirt) + (_i - bvirt);
    cd[3] = u3;
    s1 = dx * ey;
    c = (0, _utilJs.splitter) * dx;
    ahi = c - (c - dx);
    alo = dx - ahi;
    c = (0, _utilJs.splitter) * ey;
    bhi = c - (c - ey);
    blo = ey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = ex * dy;
    c = (0, _utilJs.splitter) * ex;
    ahi = c - (c - ex);
    alo = ex - ahi;
    c = (0, _utilJs.splitter) * dy;
    bhi = c - (c - dy);
    blo = dy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    de[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    de[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    de[2] = _j - (u3 - bvirt) + (_i - bvirt);
    de[3] = u3;
    s1 = ex * ay;
    c = (0, _utilJs.splitter) * ex;
    ahi = c - (c - ex);
    alo = ex - ahi;
    c = (0, _utilJs.splitter) * ay;
    bhi = c - (c - ay);
    blo = ay - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = ax * ey;
    c = (0, _utilJs.splitter) * ax;
    ahi = c - (c - ax);
    alo = ax - ahi;
    c = (0, _utilJs.splitter) * ey;
    bhi = c - (c - ey);
    blo = ey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ea[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ea[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    ea[2] = _j - (u3 - bvirt) + (_i - bvirt);
    ea[3] = u3;
    s1 = ax * cy;
    c = (0, _utilJs.splitter) * ax;
    ahi = c - (c - ax);
    alo = ax - ahi;
    c = (0, _utilJs.splitter) * cy;
    bhi = c - (c - cy);
    blo = cy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = cx * ay;
    c = (0, _utilJs.splitter) * cx;
    ahi = c - (c - cx);
    alo = cx - ahi;
    c = (0, _utilJs.splitter) * ay;
    bhi = c - (c - ay);
    blo = ay - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ac[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ac[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    ac[2] = _j - (u3 - bvirt) + (_i - bvirt);
    ac[3] = u3;
    s1 = bx * dy;
    c = (0, _utilJs.splitter) * bx;
    ahi = c - (c - bx);
    alo = bx - ahi;
    c = (0, _utilJs.splitter) * dy;
    bhi = c - (c - dy);
    blo = dy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = dx * by;
    c = (0, _utilJs.splitter) * dx;
    ahi = c - (c - dx);
    alo = dx - ahi;
    c = (0, _utilJs.splitter) * by;
    bhi = c - (c - by);
    blo = by - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    bd[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    bd[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    bd[2] = _j - (u3 - bvirt) + (_i - bvirt);
    bd[3] = u3;
    s1 = cx * ey;
    c = (0, _utilJs.splitter) * cx;
    ahi = c - (c - cx);
    alo = cx - ahi;
    c = (0, _utilJs.splitter) * ey;
    bhi = c - (c - ey);
    blo = ey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = ex * cy;
    c = (0, _utilJs.splitter) * ex;
    ahi = c - (c - ex);
    alo = ex - ahi;
    c = (0, _utilJs.splitter) * cy;
    bhi = c - (c - cy);
    blo = cy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ce[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ce[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    ce[2] = _j - (u3 - bvirt) + (_i - bvirt);
    ce[3] = u3;
    s1 = dx * ay;
    c = (0, _utilJs.splitter) * dx;
    ahi = c - (c - dx);
    alo = dx - ahi;
    c = (0, _utilJs.splitter) * ay;
    bhi = c - (c - ay);
    blo = ay - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = ax * dy;
    c = (0, _utilJs.splitter) * ax;
    ahi = c - (c - ax);
    alo = ax - ahi;
    c = (0, _utilJs.splitter) * dy;
    bhi = c - (c - dy);
    blo = dy - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    da[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    da[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    da[2] = _j - (u3 - bvirt) + (_i - bvirt);
    da[3] = u3;
    s1 = ex * by;
    c = (0, _utilJs.splitter) * ex;
    ahi = c - (c - ex);
    alo = ex - ahi;
    c = (0, _utilJs.splitter) * by;
    bhi = c - (c - by);
    blo = by - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = bx * ey;
    c = (0, _utilJs.splitter) * bx;
    ahi = c - (c - bx);
    alo = bx - ahi;
    c = (0, _utilJs.splitter) * ey;
    bhi = c - (c - ey);
    blo = ey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    eb[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    eb[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    eb[2] = _j - (u3 - bvirt) + (_i - bvirt);
    eb[3] = u3;
    const abclen = sum_three_scale(ab, bc, ac, cz, az, -bz, abc);
    const bcdlen = sum_three_scale(bc, cd, bd, dz, bz, -cz, bcd);
    const cdelen = sum_three_scale(cd, de, ce, ez, cz, -dz, cde);
    const dealen = sum_three_scale(de, ea, da, az, dz, -ez, dea);
    const eablen = sum_three_scale(ea, ab, eb, bz, ez, -az, eab);
    const abdlen = sum_three_scale(ab, bd, da, dz, az, bz, abd);
    const bcelen = sum_three_scale(bc, ce, eb, ez, bz, cz, bce);
    const cdalen = sum_three_scale(cd, da, ac, az, cz, dz, cda);
    const deblen = sum_three_scale(de, eb, bd, bz, dz, ez, deb);
    const eaclen = sum_three_scale(ea, ac, ce, cz, ez, az, eac);
    const deterlen = (0, _utilJs.sum_three)(liftexact(cdelen, cde, bcelen, bce, deblen, deb, bcdlen, bcd, ax, ay, az, adet), adet, liftexact(dealen, dea, cdalen, cda, eaclen, eac, cdelen, cde, bx, by, bz, bdet), bdet, (0, _utilJs.sum_three)(liftexact(eablen, eab, deblen, deb, abdlen, abd, dealen, dea, cx, cy, cz, cdet), cdet, liftexact(abclen, abc, eaclen, eac, bcelen, bce, eablen, eab, dx, dy, dz, ddet), ddet, liftexact(bcdlen, bcd, abdlen, abd, cdalen, cda, abclen, abc, ex, ey, ez, edet), edet, cddet, cdedet), cdedet, abdet, deter);
    return deter[deterlen - 1];
}
const xdet = (0, _utilJs.vec)(96);
const ydet = (0, _utilJs.vec)(96);
const zdet = (0, _utilJs.vec)(96);
const fin = (0, _utilJs.vec)(1152);
function liftadapt(a, b, c, az, bz, cz, x, y, z, out) {
    const len = sum_three_scale(a, b, c, az, bz, cz, _24);
    return (0, _utilJs.sum_three)((0, _utilJs.scale)((0, _utilJs.scale)(len, _24, x, _48), _48, x, xdet), xdet, (0, _utilJs.scale)((0, _utilJs.scale)(len, _24, y, _48), _48, y, ydet), ydet, (0, _utilJs.scale)((0, _utilJs.scale)(len, _24, z, _48), _48, z, zdet), zdet, _192, out);
}
function insphereadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez, permanent) {
    let ab3, bc3, cd3, da3, ac3, bd3;
    let aextail, bextail, cextail, dextail;
    let aeytail, beytail, ceytail, deytail;
    let aeztail, beztail, ceztail, deztail;
    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0;
    const aex = ax - ex;
    const bex = bx - ex;
    const cex = cx - ex;
    const dex = dx - ex;
    const aey = ay - ey;
    const bey = by - ey;
    const cey = cy - ey;
    const dey = dy - ey;
    const aez = az - ez;
    const bez = bz - ez;
    const cez = cz - ez;
    const dez = dz - ez;
    s1 = aex * bey;
    c = (0, _utilJs.splitter) * aex;
    ahi = c - (c - aex);
    alo = aex - ahi;
    c = (0, _utilJs.splitter) * bey;
    bhi = c - (c - bey);
    blo = bey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = bex * aey;
    c = (0, _utilJs.splitter) * bex;
    ahi = c - (c - bex);
    alo = bex - ahi;
    c = (0, _utilJs.splitter) * aey;
    bhi = c - (c - aey);
    blo = aey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);
    ab3 = _j + _i;
    bvirt = ab3 - _j;
    ab[2] = _j - (ab3 - bvirt) + (_i - bvirt);
    ab[3] = ab3;
    s1 = bex * cey;
    c = (0, _utilJs.splitter) * bex;
    ahi = c - (c - bex);
    alo = bex - ahi;
    c = (0, _utilJs.splitter) * cey;
    bhi = c - (c - cey);
    blo = cey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = cex * bey;
    c = (0, _utilJs.splitter) * cex;
    ahi = c - (c - cex);
    alo = cex - ahi;
    c = (0, _utilJs.splitter) * bey;
    bhi = c - (c - bey);
    blo = bey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);
    bc3 = _j + _i;
    bvirt = bc3 - _j;
    bc[2] = _j - (bc3 - bvirt) + (_i - bvirt);
    bc[3] = bc3;
    s1 = cex * dey;
    c = (0, _utilJs.splitter) * cex;
    ahi = c - (c - cex);
    alo = cex - ahi;
    c = (0, _utilJs.splitter) * dey;
    bhi = c - (c - dey);
    blo = dey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = dex * cey;
    c = (0, _utilJs.splitter) * dex;
    ahi = c - (c - dex);
    alo = dex - ahi;
    c = (0, _utilJs.splitter) * cey;
    bhi = c - (c - cey);
    blo = cey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    cd[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    cd[1] = _0 - (_i + bvirt) + (bvirt - t1);
    cd3 = _j + _i;
    bvirt = cd3 - _j;
    cd[2] = _j - (cd3 - bvirt) + (_i - bvirt);
    cd[3] = cd3;
    s1 = dex * aey;
    c = (0, _utilJs.splitter) * dex;
    ahi = c - (c - dex);
    alo = dex - ahi;
    c = (0, _utilJs.splitter) * aey;
    bhi = c - (c - aey);
    blo = aey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = aex * dey;
    c = (0, _utilJs.splitter) * aex;
    ahi = c - (c - aex);
    alo = aex - ahi;
    c = (0, _utilJs.splitter) * dey;
    bhi = c - (c - dey);
    blo = dey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    da[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    da[1] = _0 - (_i + bvirt) + (bvirt - t1);
    da3 = _j + _i;
    bvirt = da3 - _j;
    da[2] = _j - (da3 - bvirt) + (_i - bvirt);
    da[3] = da3;
    s1 = aex * cey;
    c = (0, _utilJs.splitter) * aex;
    ahi = c - (c - aex);
    alo = aex - ahi;
    c = (0, _utilJs.splitter) * cey;
    bhi = c - (c - cey);
    blo = cey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = cex * aey;
    c = (0, _utilJs.splitter) * cex;
    ahi = c - (c - cex);
    alo = cex - ahi;
    c = (0, _utilJs.splitter) * aey;
    bhi = c - (c - aey);
    blo = aey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    ac[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    ac[1] = _0 - (_i + bvirt) + (bvirt - t1);
    ac3 = _j + _i;
    bvirt = ac3 - _j;
    ac[2] = _j - (ac3 - bvirt) + (_i - bvirt);
    ac[3] = ac3;
    s1 = bex * dey;
    c = (0, _utilJs.splitter) * bex;
    ahi = c - (c - bex);
    alo = bex - ahi;
    c = (0, _utilJs.splitter) * dey;
    bhi = c - (c - dey);
    blo = dey - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = dex * bey;
    c = (0, _utilJs.splitter) * dex;
    ahi = c - (c - dex);
    alo = dex - ahi;
    c = (0, _utilJs.splitter) * bey;
    bhi = c - (c - bey);
    blo = bey - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    bd[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    bd[1] = _0 - (_i + bvirt) + (bvirt - t1);
    bd3 = _j + _i;
    bvirt = bd3 - _j;
    bd[2] = _j - (bd3 - bvirt) + (_i - bvirt);
    bd[3] = bd3;
    const finlen = (0, _utilJs.sum)((0, _utilJs.sum)((0, _utilJs.negate)(liftadapt(bc, cd, bd, dez, bez, -cez, aex, aey, aez, adet), adet), adet, liftadapt(cd, da, ac, aez, cez, dez, bex, bey, bez, bdet), bdet, abdet), abdet, (0, _utilJs.sum)((0, _utilJs.negate)(liftadapt(da, ab, bd, bez, dez, aez, cex, cey, cez, cdet), cdet), cdet, liftadapt(ab, bc, ac, cez, aez, -bez, dex, dey, dez, ddet), ddet, cddet), cddet, fin);
    let det = (0, _utilJs.estimate)(finlen, fin);
    let errbound = isperrboundB * permanent;
    if (det >= errbound || -det >= errbound) return det;
    bvirt = ax - aex;
    aextail = ax - (aex + bvirt) + (bvirt - ex);
    bvirt = ay - aey;
    aeytail = ay - (aey + bvirt) + (bvirt - ey);
    bvirt = az - aez;
    aeztail = az - (aez + bvirt) + (bvirt - ez);
    bvirt = bx - bex;
    bextail = bx - (bex + bvirt) + (bvirt - ex);
    bvirt = by - bey;
    beytail = by - (bey + bvirt) + (bvirt - ey);
    bvirt = bz - bez;
    beztail = bz - (bez + bvirt) + (bvirt - ez);
    bvirt = cx - cex;
    cextail = cx - (cex + bvirt) + (bvirt - ex);
    bvirt = cy - cey;
    ceytail = cy - (cey + bvirt) + (bvirt - ey);
    bvirt = cz - cez;
    ceztail = cz - (cez + bvirt) + (bvirt - ez);
    bvirt = dx - dex;
    dextail = dx - (dex + bvirt) + (bvirt - ex);
    bvirt = dy - dey;
    deytail = dy - (dey + bvirt) + (bvirt - ey);
    bvirt = dz - dez;
    deztail = dz - (dez + bvirt) + (bvirt - ez);
    if (aextail === 0 && aeytail === 0 && aeztail === 0 && bextail === 0 && beytail === 0 && beztail === 0 && cextail === 0 && ceytail === 0 && ceztail === 0 && dextail === 0 && deytail === 0 && deztail === 0) return det;
    errbound = isperrboundC * permanent + (0, _utilJs.resulterrbound) * Math.abs(det);
    const abeps = aex * beytail + bey * aextail - (aey * bextail + bex * aeytail);
    const bceps = bex * ceytail + cey * bextail - (bey * cextail + cex * beytail);
    const cdeps = cex * deytail + dey * cextail - (cey * dextail + dex * ceytail);
    const daeps = dex * aeytail + aey * dextail - (dey * aextail + aex * deytail);
    const aceps = aex * ceytail + cey * aextail - (aey * cextail + cex * aeytail);
    const bdeps = bex * deytail + dey * bextail - (bey * dextail + dex * beytail);
    det += (bex * bex + bey * bey + bez * bez) * (cez * daeps + dez * aceps + aez * cdeps + (ceztail * da3 + deztail * ac3 + aeztail * cd3)) + (dex * dex + dey * dey + dez * dez) * (aez * bceps - bez * aceps + cez * abeps + (aeztail * bc3 - beztail * ac3 + ceztail * ab3)) - ((aex * aex + aey * aey + aez * aez) * (bez * cdeps - cez * bdeps + dez * bceps + (beztail * cd3 - ceztail * bd3 + deztail * bc3)) + (cex * cex + cey * cey + cez * cez) * (dez * abeps + aez * bdeps + bez * daeps + (deztail * ab3 + aeztail * bd3 + beztail * da3))) + 2 * ((bex * bextail + bey * beytail + bez * beztail) * (cez * da3 + dez * ac3 + aez * cd3) + (dex * dextail + dey * deytail + dez * deztail) * (aez * bc3 - bez * ac3 + cez * ab3) - ((aex * aextail + aey * aeytail + aez * aeztail) * (bez * cd3 - cez * bd3 + dez * bc3) + (cex * cextail + cey * ceytail + cez * ceztail) * (dez * ab3 + aez * bd3 + bez * da3)));
    if (det >= errbound || -det >= errbound) return det;
    return insphereexact(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez);
}
function insphere(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez) {
    const aex = ax - ex;
    const bex = bx - ex;
    const cex = cx - ex;
    const dex = dx - ex;
    const aey = ay - ey;
    const bey = by - ey;
    const cey = cy - ey;
    const dey = dy - ey;
    const aez = az - ez;
    const bez = bz - ez;
    const cez = cz - ez;
    const dez = dz - ez;
    const aexbey = aex * bey;
    const bexaey = bex * aey;
    const ab = aexbey - bexaey;
    const bexcey = bex * cey;
    const cexbey = cex * bey;
    const bc = bexcey - cexbey;
    const cexdey = cex * dey;
    const dexcey = dex * cey;
    const cd = cexdey - dexcey;
    const dexaey = dex * aey;
    const aexdey = aex * dey;
    const da = dexaey - aexdey;
    const aexcey = aex * cey;
    const cexaey = cex * aey;
    const ac = aexcey - cexaey;
    const bexdey = bex * dey;
    const dexbey = dex * bey;
    const bd = bexdey - dexbey;
    const alift = aex * aex + aey * aey + aez * aez;
    const blift = bex * bex + bey * bey + bez * bez;
    const clift = cex * cex + cey * cey + cez * cez;
    const dlift = dex * dex + dey * dey + dez * dez;
    const det = clift * (dez * ab + aez * bd + bez * da) - dlift * (aez * bc - bez * ac + cez * ab) + (alift * (bez * cd - cez * bd + dez * bc) - blift * (cez * da + dez * ac + aez * cd));
    const aezplus = Math.abs(aez);
    const bezplus = Math.abs(bez);
    const cezplus = Math.abs(cez);
    const dezplus = Math.abs(dez);
    const aexbeyplus = Math.abs(aexbey) + Math.abs(bexaey);
    const bexceyplus = Math.abs(bexcey) + Math.abs(cexbey);
    const cexdeyplus = Math.abs(cexdey) + Math.abs(dexcey);
    const dexaeyplus = Math.abs(dexaey) + Math.abs(aexdey);
    const aexceyplus = Math.abs(aexcey) + Math.abs(cexaey);
    const bexdeyplus = Math.abs(bexdey) + Math.abs(dexbey);
    const permanent = (cexdeyplus * bezplus + bexdeyplus * cezplus + bexceyplus * dezplus) * alift + (dexaeyplus * cezplus + aexceyplus * dezplus + cexdeyplus * aezplus) * blift + (aexbeyplus * dezplus + bexdeyplus * aezplus + dexaeyplus * bezplus) * clift + (bexceyplus * aezplus + aexceyplus * bezplus + aexbeyplus * cezplus) * dlift;
    const errbound = isperrboundA * permanent;
    if (det > errbound || -det > errbound) return det;
    return -insphereadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez, permanent);
}
function inspherefast(pax, pay, paz, pbx, pby, pbz, pcx, pcy, pcz, pdx, pdy, pdz, pex, pey, pez) {
    const aex = pax - pex;
    const bex = pbx - pex;
    const cex = pcx - pex;
    const dex = pdx - pex;
    const aey = pay - pey;
    const bey = pby - pey;
    const cey = pcy - pey;
    const dey = pdy - pey;
    const aez = paz - pez;
    const bez = pbz - pez;
    const cez = pcz - pez;
    const dez = pdz - pez;
    const ab = aex * bey - bex * aey;
    const bc = bex * cey - cex * bey;
    const cd = cex * dey - dex * cey;
    const da = dex * aey - aex * dey;
    const ac = aex * cey - cex * aey;
    const bd = bex * dey - dex * bey;
    const abc = aez * bc - bez * ac + cez * ab;
    const bcd = bez * cd - cez * bd + dez * bc;
    const cda = cez * da + dez * ac + aez * cd;
    const dab = dez * ab + aez * bd + bez * da;
    const alift = aex * aex + aey * aey + aez * aez;
    const blift = bex * bex + bey * bey + bez * bez;
    const clift = cex * cex + cey * cey + cez * cez;
    const dlift = dex * dex + dey * dey + dez * dez;
    return clift * dab - dlift * abc + (alift * bcd - blift * cda);
}

},{"./util.js":"3OxkP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j1aS4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
const epsilon = 1e-6;
class Path {
    constructor(){
        this._x0 = this._y0 = this._x1 = this._y1 = null; // end of current subpath
        this._ = "";
    }
    moveTo(x, y) {
        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
    }
    closePath() {
        if (this._x1 !== null) {
            this._x1 = this._x0, this._y1 = this._y0;
            this._ += "Z";
        }
    }
    lineTo(x, y) {
        this._ += `L${this._x1 = +x},${this._y1 = +y}`;
    }
    arc(x, y, r) {
        x = +x, y = +y, r = +r;
        const x0 = x + r;
        const y0 = y;
        if (r < 0) throw new Error("negative radius");
        if (this._x1 === null) this._ += `M${x0},${y0}`;
        else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += "L" + x0 + "," + y0;
        if (!r) return;
        this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
    }
    rect(x, y, w, h) {
        this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;
    }
    value() {
        return this._ || null;
    }
}
exports.default = Path;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1mwL9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
class Polygon {
    constructor(){
        this._ = [];
    }
    moveTo(x, y) {
        this._.push([
            x,
            y
        ]);
    }
    closePath() {
        this._.push(this._[0].slice());
    }
    lineTo(x, y) {
        this._.push([
            x,
            y
        ]);
    }
    value() {
        return this._.length ? this._ : null;
    }
}
exports.default = Polygon;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h3ABT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _pathJs = require("./path.js");
var _pathJsDefault = parcelHelpers.interopDefault(_pathJs);
var _polygonJs = require("./polygon.js");
var _polygonJsDefault = parcelHelpers.interopDefault(_polygonJs);
class Voronoi {
    constructor(delaunay, [xmin, ymin, xmax, ymax] = [
        0,
        0,
        960,
        500
    ]){
        if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error("invalid bounds");
        this.delaunay = delaunay;
        this._circumcenters = new Float64Array(delaunay.points.length * 2);
        this.vectors = new Float64Array(delaunay.points.length * 2);
        this.xmax = xmax, this.xmin = xmin;
        this.ymax = ymax, this.ymin = ymin;
        this._init();
    }
    update() {
        this.delaunay.update();
        this._init();
        return this;
    }
    _init() {
        const { delaunay: { points, hull, triangles }, vectors } = this;
        let bx, by; // lazily computed barycenter of the hull
        // Compute circumcenters.
        const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
        for(let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2){
            const t1 = triangles[i] * 2;
            const t2 = triangles[i + 1] * 2;
            const t3 = triangles[i + 2] * 2;
            const x1 = points[t1];
            const y1 = points[t1 + 1];
            const x2 = points[t2];
            const y2 = points[t2 + 1];
            const x3 = points[t3];
            const y3 = points[t3 + 1];
            const dx = x2 - x1;
            const dy = y2 - y1;
            const ex = x3 - x1;
            const ey = y3 - y1;
            const ab = (dx * ey - dy * ex) * 2;
            if (Math.abs(ab) < 1e-9) {
                // For a degenerate triangle, the circumcenter is at the infinity, in a
                // direction orthogonal to the halfedge and away from the “center” of
                // the diagram <bx, by>, defined as the hull’s barycenter.
                if (bx === undefined) {
                    bx = by = 0;
                    for (const i of hull)bx += points[i * 2], by += points[i * 2 + 1];
                    bx /= hull.length, by /= hull.length;
                }
                const a = 1e9 * Math.sign((bx - x1) * ey - (by - y1) * ex);
                x = (x1 + x3) / 2 - a * ey;
                y = (y1 + y3) / 2 + a * ex;
            } else {
                const d = 1 / ab;
                const bl = dx * dx + dy * dy;
                const cl = ex * ex + ey * ey;
                x = x1 + (ey * bl - dy * cl) * d;
                y = y1 + (dx * cl - ex * bl) * d;
            }
            circumcenters[j] = x;
            circumcenters[j + 1] = y;
        }
        // Compute exterior cell rays.
        let h = hull[hull.length - 1];
        let p0, p1 = h * 4;
        let x0, x1 = points[2 * h];
        let y0, y1 = points[2 * h + 1];
        vectors.fill(0);
        for(let i = 0; i < hull.length; ++i){
            h = hull[i];
            p0 = p1, x0 = x1, y0 = y1;
            p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];
            vectors[p0 + 2] = vectors[p1] = y0 - y1;
            vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
        }
    }
    render(context) {
        const buffer = context == null ? context = new (0, _pathJsDefault.default) : undefined;
        const { delaunay: { halfedges, inedges, hull }, circumcenters, vectors } = this;
        if (hull.length <= 1) return null;
        for(let i = 0, n = halfedges.length; i < n; ++i){
            const j = halfedges[i];
            if (j < i) continue;
            const ti = Math.floor(i / 3) * 2;
            const tj = Math.floor(j / 3) * 2;
            const xi = circumcenters[ti];
            const yi = circumcenters[ti + 1];
            const xj = circumcenters[tj];
            const yj = circumcenters[tj + 1];
            this._renderSegment(xi, yi, xj, yj, context);
        }
        let h0, h1 = hull[hull.length - 1];
        for(let i = 0; i < hull.length; ++i){
            h0 = h1, h1 = hull[i];
            const t = Math.floor(inedges[h1] / 3) * 2;
            const x = circumcenters[t];
            const y = circumcenters[t + 1];
            const v = h0 * 4;
            const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);
            if (p) this._renderSegment(x, y, p[0], p[1], context);
        }
        return buffer && buffer.value();
    }
    renderBounds(context) {
        const buffer = context == null ? context = new (0, _pathJsDefault.default) : undefined;
        context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
        return buffer && buffer.value();
    }
    renderCell(i, context) {
        const buffer = context == null ? context = new (0, _pathJsDefault.default) : undefined;
        const points = this._clip(i);
        if (points === null || !points.length) return;
        context.moveTo(points[0], points[1]);
        let n = points.length;
        while(points[0] === points[n - 2] && points[1] === points[n - 1] && n > 1)n -= 2;
        for(let i = 2; i < n; i += 2)if (points[i] !== points[i - 2] || points[i + 1] !== points[i - 1]) context.lineTo(points[i], points[i + 1]);
        context.closePath();
        return buffer && buffer.value();
    }
    *cellPolygons() {
        const { delaunay: { points } } = this;
        for(let i = 0, n = points.length / 2; i < n; ++i){
            const cell = this.cellPolygon(i);
            if (cell) cell.index = i, yield cell;
        }
    }
    cellPolygon(i) {
        const polygon = new (0, _polygonJsDefault.default);
        this.renderCell(i, polygon);
        return polygon.value();
    }
    _renderSegment(x0, y0, x1, y1, context) {
        let S;
        const c0 = this._regioncode(x0, y0);
        const c1 = this._regioncode(x1, y1);
        if (c0 === 0 && c1 === 0) {
            context.moveTo(x0, y0);
            context.lineTo(x1, y1);
        } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {
            context.moveTo(S[0], S[1]);
            context.lineTo(S[2], S[3]);
        }
    }
    contains(i, x, y) {
        if ((x = +x, x !== x) || (y = +y, y !== y)) return false;
        return this.delaunay._step(i, x, y) === i;
    }
    *neighbors(i) {
        const ci = this._clip(i);
        if (ci) for (const j of this.delaunay.neighbors(i)){
            const cj = this._clip(j);
            // find the common edge
            if (cj) loop: for(let ai = 0, li = ci.length; ai < li; ai += 2){
                for(let aj = 0, lj = cj.length; aj < lj; aj += 2)if (ci[ai] === cj[aj] && ci[ai + 1] === cj[aj + 1] && ci[(ai + 2) % li] === cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] === cj[(aj + lj - 1) % lj]) {
                    yield j;
                    break loop;
                }
            }
        }
    }
    _cell(i) {
        const { circumcenters, delaunay: { inedges, halfedges, triangles } } = this;
        const e0 = inedges[i];
        if (e0 === -1) return null; // coincident point
        const points = [];
        let e = e0;
        do {
            const t = Math.floor(e / 3);
            points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);
            e = e % 3 === 2 ? e - 2 : e + 1;
            if (triangles[e] !== i) break; // bad triangulation
            e = halfedges[e];
        }while (e !== e0 && e !== -1);
        return points;
    }
    _clip(i) {
        // degenerate case (1 valid point: return the box)
        if (i === 0 && this.delaunay.hull.length === 1) return [
            this.xmax,
            this.ymin,
            this.xmax,
            this.ymax,
            this.xmin,
            this.ymax,
            this.xmin,
            this.ymin
        ];
        const points = this._cell(i);
        if (points === null) return null;
        const { vectors: V } = this;
        const v = i * 4;
        return this._simplify(V[v] || V[v + 1] ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3]) : this._clipFinite(i, points));
    }
    _clipFinite(i, points) {
        const n = points.length;
        let P = null;
        let x0, y0, x1 = points[n - 2], y1 = points[n - 1];
        let c0, c1 = this._regioncode(x1, y1);
        let e0, e1 = 0;
        for(let j = 0; j < n; j += 2){
            x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];
            c0 = c1, c1 = this._regioncode(x1, y1);
            if (c0 === 0 && c1 === 0) {
                e0 = e1, e1 = 0;
                if (P) P.push(x1, y1);
                else P = [
                    x1,
                    y1
                ];
            } else {
                let S, sx0, sy0, sx1, sy1;
                if (c0 === 0) {
                    if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;
                    [sx0, sy0, sx1, sy1] = S;
                } else {
                    if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;
                    [sx1, sy1, sx0, sy0] = S;
                    e0 = e1, e1 = this._edgecode(sx0, sy0);
                    if (e0 && e1) this._edge(i, e0, e1, P, P.length);
                    if (P) P.push(sx0, sy0);
                    else P = [
                        sx0,
                        sy0
                    ];
                }
                e0 = e1, e1 = this._edgecode(sx1, sy1);
                if (e0 && e1) this._edge(i, e0, e1, P, P.length);
                if (P) P.push(sx1, sy1);
                else P = [
                    sx1,
                    sy1
                ];
            }
        }
        if (P) {
            e0 = e1, e1 = this._edgecode(P[0], P[1]);
            if (e0 && e1) this._edge(i, e0, e1, P, P.length);
        } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) return [
            this.xmax,
            this.ymin,
            this.xmax,
            this.ymax,
            this.xmin,
            this.ymax,
            this.xmin,
            this.ymin
        ];
        return P;
    }
    _clipSegment(x0, y0, x1, y1, c0, c1) {
        // for more robustness, always consider the segment in the same order
        const flip = c0 < c1;
        if (flip) [x0, y0, x1, y1, c0, c1] = [
            x1,
            y1,
            x0,
            y0,
            c1,
            c0
        ];
        while(true){
            if (c0 === 0 && c1 === 0) return flip ? [
                x1,
                y1,
                x0,
                y0
            ] : [
                x0,
                y0,
                x1,
                y1
            ];
            if (c0 & c1) return null;
            let x, y, c = c0 || c1;
            if (c & 8) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;
            else if (c & 4) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;
            else if (c & 2) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;
            else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;
            if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);
            else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);
        }
    }
    _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
        let P = Array.from(points), p;
        if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);
        if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);
        if (P = this._clipFinite(i, P)) for(let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2){
            c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);
            if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;
        }
        else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) P = [
            this.xmin,
            this.ymin,
            this.xmax,
            this.ymin,
            this.xmax,
            this.ymax,
            this.xmin,
            this.ymax
        ];
        return P;
    }
    _edge(i, e0, e1, P, j) {
        while(e0 !== e1){
            let x, y;
            switch(e0){
                case 5:
                    e0 = 4;
                    continue; // top-left
                case 4:
                    e0 = 6, x = this.xmax, y = this.ymin;
                    break; // top
                case 6:
                    e0 = 2;
                    continue; // top-right
                case 2:
                    e0 = 10, x = this.xmax, y = this.ymax;
                    break; // right
                case 10:
                    e0 = 8;
                    continue; // bottom-right
                case 8:
                    e0 = 9, x = this.xmin, y = this.ymax;
                    break; // bottom
                case 9:
                    e0 = 1;
                    continue; // bottom-left
                case 1:
                    e0 = 5, x = this.xmin, y = this.ymin;
                    break; // left
            }
            // Note: this implicitly checks for out of bounds: if P[j] or P[j+1] are
            // undefined, the conditional statement will be executed.
            if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) P.splice(j, 0, x, y), j += 2;
        }
        return j;
    }
    _project(x0, y0, vx, vy) {
        let t = Infinity, c, x, y;
        if (vy < 0) {
            if (y0 <= this.ymin) return null;
            if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;
        } else if (vy > 0) {
            if (y0 >= this.ymax) return null;
            if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;
        }
        if (vx > 0) {
            if (x0 >= this.xmax) return null;
            if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;
        } else if (vx < 0) {
            if (x0 <= this.xmin) return null;
            if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;
        }
        return [
            x,
            y
        ];
    }
    _edgecode(x, y) {
        return (x === this.xmin ? 1 : x === this.xmax ? 2 : 0) | (y === this.ymin ? 4 : y === this.ymax ? 8 : 0);
    }
    _regioncode(x, y) {
        return (x < this.xmin ? 1 : x > this.xmax ? 2 : 0) | (y < this.ymin ? 4 : y > this.ymax ? 8 : 0);
    }
    _simplify(P) {
        if (P && P.length > 4) {
            for(let i = 0; i < P.length; i += 2){
                const j = (i + 2) % P.length, k = (i + 4) % P.length;
                if (P[i] === P[j] && P[j] === P[k] || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1]) P.splice(j, 2), i -= 2;
            }
            if (!P.length) P = null;
        }
        return P;
    }
}
exports.default = Voronoi;

},{"./path.js":"j1aS4","./polygon.js":"1mwL9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4XOv2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formatDefaultLocale", ()=>(0, _defaultLocaleJsDefault.default));
parcelHelpers.export(exports, "format", ()=>(0, _defaultLocaleJs.format));
parcelHelpers.export(exports, "formatPrefix", ()=>(0, _defaultLocaleJs.formatPrefix));
parcelHelpers.export(exports, "formatLocale", ()=>(0, _localeJsDefault.default));
parcelHelpers.export(exports, "formatSpecifier", ()=>(0, _formatSpecifierJsDefault.default));
parcelHelpers.export(exports, "FormatSpecifier", ()=>(0, _formatSpecifierJs.FormatSpecifier));
parcelHelpers.export(exports, "precisionFixed", ()=>(0, _precisionFixedJsDefault.default));
parcelHelpers.export(exports, "precisionPrefix", ()=>(0, _precisionPrefixJsDefault.default));
parcelHelpers.export(exports, "precisionRound", ()=>(0, _precisionRoundJsDefault.default));
var _defaultLocaleJs = require("./defaultLocale.js");
var _defaultLocaleJsDefault = parcelHelpers.interopDefault(_defaultLocaleJs);
var _localeJs = require("./locale.js");
var _localeJsDefault = parcelHelpers.interopDefault(_localeJs);
var _formatSpecifierJs = require("./formatSpecifier.js");
var _formatSpecifierJsDefault = parcelHelpers.interopDefault(_formatSpecifierJs);
var _precisionFixedJs = require("./precisionFixed.js");
var _precisionFixedJsDefault = parcelHelpers.interopDefault(_precisionFixedJs);
var _precisionPrefixJs = require("./precisionPrefix.js");
var _precisionPrefixJsDefault = parcelHelpers.interopDefault(_precisionPrefixJs);
var _precisionRoundJs = require("./precisionRound.js");
var _precisionRoundJsDefault = parcelHelpers.interopDefault(_precisionRoundJs);

},{"./defaultLocale.js":"g4Ai7","./locale.js":false,"./formatSpecifier.js":"4gfsY","./precisionFixed.js":"kCBOH","./precisionPrefix.js":"anfJX","./precisionRound.js":"djznD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g4Ai7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "format", ()=>format);
parcelHelpers.export(exports, "formatPrefix", ()=>formatPrefix);
parcelHelpers.export(exports, "default", ()=>defaultLocale);
var _localeJs = require("./locale.js");
var _localeJsDefault = parcelHelpers.interopDefault(_localeJs);
var locale;
var format;
var formatPrefix;
defaultLocale({
    thousands: ",",
    grouping: [
        3
    ],
    currency: [
        "$",
        ""
    ]
});
function defaultLocale(definition) {
    locale = (0, _localeJsDefault.default)(definition);
    format = locale.format;
    formatPrefix = locale.formatPrefix;
    return locale;
}

},{"./locale.js":"8sic5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8sic5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(locale) {
        var group = locale.grouping === undefined || locale.thousands === undefined ? (0, _identityJsDefault.default) : (0, _formatGroupJsDefault.default)(map.call(locale.grouping, Number), locale.thousands + ""), currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "", currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "", decimal = locale.decimal === undefined ? "." : locale.decimal + "", numerals = locale.numerals === undefined ? (0, _identityJsDefault.default) : (0, _formatNumeralsJsDefault.default)(map.call(locale.numerals, String)), percent = locale.percent === undefined ? "%" : locale.percent + "", minus = locale.minus === undefined ? "\u2212" : locale.minus + "", nan = locale.nan === undefined ? "NaN" : locale.nan + "";
        function newFormat(specifier) {
            specifier = (0, _formatSpecifierJsDefault.default)(specifier);
            var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
            // The "n" type is an alias for ",g".
            if (type === "n") comma = true, type = "g";
            else if (!(0, _formatTypesJsDefault.default)[type]) precision === undefined && (precision = 12), trim = true, type = "g";
            // If zero fill is specified, padding goes after sign and before digits.
            if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "=";
            // Compute the prefix and suffix.
            // For SI-prefix, the suffix is lazily computed.
            var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
            // What format function should we use?
            // Is this an integer type?
            // Can this type generate exponential notation?
            var formatType = (0, _formatTypesJsDefault.default)[type], maybeSuffix = /[defgprs%]/.test(type);
            // Set the default precision if not specified,
            // or clamp the specified precision to the supported range.
            // For significant precision, it must be in [1, 21].
            // For fixed precision, it must be in [0, 20].
            precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
            function format(value) {
                var valuePrefix = prefix, valueSuffix = suffix, i, n, c;
                if (type === "c") {
                    valueSuffix = formatType(value) + valueSuffix;
                    value = "";
                } else {
                    value = +value;
                    // Determine the sign. -0 is not less than 0, but 1 / -0 is!
                    var valueNegative = value < 0 || 1 / value < 0;
                    // Perform the initial formatting.
                    value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
                    // Trim insignificant zeros.
                    if (trim) value = (0, _formatTrimJsDefault.default)(value);
                    // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
                    if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;
                    // Compute the prefix and suffix.
                    valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
                    valueSuffix = (type === "s" ? prefixes[8 + (0, _formatPrefixAutoJs.prefixExponent) / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
                    // Break the formatted value into the integer “value” part that can be
                    // grouped, and fractional or exponential “suffix” part that is not.
                    if (maybeSuffix) {
                        i = -1, n = value.length;
                        while(++i < n)if (c = value.charCodeAt(i), 48 > c || c > 57) {
                            valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                            value = value.slice(0, i);
                            break;
                        }
                    }
                }
                // If the fill character is not "0", grouping is applied before padding.
                if (comma && !zero) value = group(value, Infinity);
                // Compute the padding.
                var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
                // If the fill character is "0", grouping is applied after padding.
                if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
                // Reconstruct the final output based on the desired alignment.
                switch(align){
                    case "<":
                        value = valuePrefix + value + valueSuffix + padding;
                        break;
                    case "=":
                        value = valuePrefix + padding + value + valueSuffix;
                        break;
                    case "^":
                        value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
                        break;
                    default:
                        value = padding + valuePrefix + value + valueSuffix;
                        break;
                }
                return numerals(value);
            }
            format.toString = function() {
                return specifier + "";
            };
            return format;
        }
        function formatPrefix(specifier, value) {
            var f = newFormat((specifier = (0, _formatSpecifierJsDefault.default)(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor((0, _exponentJsDefault.default)(value) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
            return function(value) {
                return f(k * value) + prefix;
            };
        }
        return {
            format: newFormat,
            formatPrefix: formatPrefix
        };
    });
var _exponentJs = require("./exponent.js");
var _exponentJsDefault = parcelHelpers.interopDefault(_exponentJs);
var _formatGroupJs = require("./formatGroup.js");
var _formatGroupJsDefault = parcelHelpers.interopDefault(_formatGroupJs);
var _formatNumeralsJs = require("./formatNumerals.js");
var _formatNumeralsJsDefault = parcelHelpers.interopDefault(_formatNumeralsJs);
var _formatSpecifierJs = require("./formatSpecifier.js");
var _formatSpecifierJsDefault = parcelHelpers.interopDefault(_formatSpecifierJs);
var _formatTrimJs = require("./formatTrim.js");
var _formatTrimJsDefault = parcelHelpers.interopDefault(_formatTrimJs);
var _formatTypesJs = require("./formatTypes.js");
var _formatTypesJsDefault = parcelHelpers.interopDefault(_formatTypesJs);
var _formatPrefixAutoJs = require("./formatPrefixAuto.js");
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var map = Array.prototype.map, prefixes = [
    "y",
    "z",
    "a",
    "f",
    "p",
    "n",
    "\xb5",
    "m",
    "",
    "k",
    "M",
    "G",
    "T",
    "P",
    "E",
    "Z",
    "Y"
];

},{"./exponent.js":"7L05r","./formatGroup.js":"97wNI","./formatNumerals.js":"bnEku","./formatSpecifier.js":"4gfsY","./formatTrim.js":"cGiOx","./formatTypes.js":"aVp9c","./formatPrefixAuto.js":"lOwtK","./identity.js":"9nHXj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7L05r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(x) {
        return x = (0, _formatDecimalJs.formatDecimalParts)(Math.abs(x)), x ? x[1] : NaN;
    });
var _formatDecimalJs = require("./formatDecimal.js");

},{"./formatDecimal.js":"fkS16","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fkS16":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(x) {
        return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
    });
// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimalParts(1.23) returns ["123", 0].
parcelHelpers.export(exports, "formatDecimalParts", ()=>formatDecimalParts);
function formatDecimalParts(x, p) {
    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
    var i, coefficient = x.slice(0, i);
    // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
    // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
    return [
        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
        +x.slice(i + 1)
    ];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"97wNI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(grouping, thousands) {
        return function(value, width) {
            var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
            while(i > 0 && g > 0){
                if (length + g + 1 > width) g = Math.max(1, width - length);
                t.push(value.substring(i -= g, i + g));
                if ((length += g + 1) > width) break;
                g = grouping[j = (j + 1) % grouping.length];
            }
            return t.reverse().join(thousands);
        };
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bnEku":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(numerals) {
        return function(value) {
            return value.replace(/[0-9]/g, function(i) {
                return numerals[+i];
            });
        };
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4gfsY":[function(require,module,exports) {
// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>formatSpecifier);
parcelHelpers.export(exports, "FormatSpecifier", ()=>FormatSpecifier);
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
    if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
    var match;
    return new FormatSpecifier({
        fill: match[1],
        align: match[2],
        sign: match[3],
        symbol: match[4],
        zero: match[5],
        width: match[6],
        comma: match[7],
        precision: match[8] && match[8].slice(1),
        trim: match[9],
        type: match[10]
    });
}
formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof
function FormatSpecifier(specifier) {
    this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
    this.align = specifier.align === undefined ? ">" : specifier.align + "";
    this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
    this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
    this.zero = !!specifier.zero;
    this.width = specifier.width === undefined ? undefined : +specifier.width;
    this.comma = !!specifier.comma;
    this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
    this.trim = !!specifier.trim;
    this.type = specifier.type === undefined ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cGiOx":[function(require,module,exports) {
// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(s) {
        out: for(var n = s.length, i = 1, i0 = -1, i1; i < n; ++i)switch(s[i]){
            case ".":
                i0 = i1 = i;
                break;
            case "0":
                if (i0 === 0) i0 = i;
                i1 = i;
                break;
            default:
                if (!+s[i]) break out;
                if (i0 > 0) i0 = 0;
                break;
        }
        return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aVp9c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _formatDecimalJs = require("./formatDecimal.js");
var _formatDecimalJsDefault = parcelHelpers.interopDefault(_formatDecimalJs);
var _formatPrefixAutoJs = require("./formatPrefixAuto.js");
var _formatPrefixAutoJsDefault = parcelHelpers.interopDefault(_formatPrefixAutoJs);
var _formatRoundedJs = require("./formatRounded.js");
var _formatRoundedJsDefault = parcelHelpers.interopDefault(_formatRoundedJs);
exports.default = {
    "%": (x, p)=>(x * 100).toFixed(p),
    "b": (x)=>Math.round(x).toString(2),
    "c": (x)=>x + "",
    "d": (0, _formatDecimalJsDefault.default),
    "e": (x, p)=>x.toExponential(p),
    "f": (x, p)=>x.toFixed(p),
    "g": (x, p)=>x.toPrecision(p),
    "o": (x)=>Math.round(x).toString(8),
    "p": (x, p)=>(0, _formatRoundedJsDefault.default)(x * 100, p),
    "r": (0, _formatRoundedJsDefault.default),
    "s": (0, _formatPrefixAutoJsDefault.default),
    "X": (x)=>Math.round(x).toString(16).toUpperCase(),
    "x": (x)=>Math.round(x).toString(16)
};

},{"./formatDecimal.js":"fkS16","./formatPrefixAuto.js":"lOwtK","./formatRounded.js":"gq71u","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lOwtK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "prefixExponent", ()=>prefixExponent);
parcelHelpers.export(exports, "default", ()=>function(x, p) {
        var d = (0, _formatDecimalJs.formatDecimalParts)(x, p);
        if (!d) return x + "";
        var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
        return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + (0, _formatDecimalJs.formatDecimalParts)(x, Math.max(0, p + i - 1))[0]; // less than 1y!
    });
var _formatDecimalJs = require("./formatDecimal.js");
var prefixExponent;

},{"./formatDecimal.js":"fkS16","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gq71u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(x, p) {
        var d = (0, _formatDecimalJs.formatDecimalParts)(x, p);
        if (!d) return x + "";
        var coefficient = d[0], exponent = d[1];
        return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
    });
var _formatDecimalJs = require("./formatDecimal.js");

},{"./formatDecimal.js":"fkS16","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9nHXj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(x) {
        return x;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kCBOH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(step) {
        return Math.max(0, -(0, _exponentJsDefault.default)(Math.abs(step)));
    });
var _exponentJs = require("./exponent.js");
var _exponentJsDefault = parcelHelpers.interopDefault(_exponentJs);

},{"./exponent.js":"7L05r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"anfJX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(step, value) {
        return Math.max(0, Math.max(-8, Math.min(8, Math.floor((0, _exponentJsDefault.default)(value) / 3))) * 3 - (0, _exponentJsDefault.default)(Math.abs(step)));
    });
var _exponentJs = require("./exponent.js");
var _exponentJsDefault = parcelHelpers.interopDefault(_exponentJs);

},{"./exponent.js":"7L05r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"djznD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(step, max) {
        step = Math.abs(step), max = Math.abs(max) - step;
        return Math.max(0, (0, _exponentJsDefault.default)(max) - (0, _exponentJsDefault.default)(step)) + 1;
    });
var _exponentJs = require("./exponent.js");
var _exponentJsDefault = parcelHelpers.interopDefault(_exponentJs);

},{"./exponent.js":"7L05r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"01Z75":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "geoArea", ()=>(0, _areaJsDefault.default));
parcelHelpers.export(exports, "geoBounds", ()=>(0, _boundsJsDefault.default));
parcelHelpers.export(exports, "geoCentroid", ()=>(0, _centroidJsDefault.default));
parcelHelpers.export(exports, "geoCircle", ()=>(0, _circleJsDefault.default));
parcelHelpers.export(exports, "geoClipAntimeridian", ()=>(0, _antimeridianJsDefault.default));
parcelHelpers.export(exports, "geoClipCircle", ()=>(0, _circleJsDefault1.default));
parcelHelpers.export(exports, "geoClipExtent", ()=>(0, _extentJsDefault.default)) // DEPRECATED! Use d3.geoIdentity().clipExtent(…).
;
parcelHelpers.export(exports, "geoClipRectangle", ()=>(0, _rectangleJsDefault.default));
parcelHelpers.export(exports, "geoContains", ()=>(0, _containsJsDefault.default));
parcelHelpers.export(exports, "geoDistance", ()=>(0, _distanceJsDefault.default));
parcelHelpers.export(exports, "geoGraticule", ()=>(0, _graticuleJsDefault.default));
parcelHelpers.export(exports, "geoGraticule10", ()=>(0, _graticuleJs.graticule10));
parcelHelpers.export(exports, "geoInterpolate", ()=>(0, _interpolateJsDefault.default));
parcelHelpers.export(exports, "geoLength", ()=>(0, _lengthJsDefault.default));
parcelHelpers.export(exports, "geoPath", ()=>(0, _indexJsDefault.default));
parcelHelpers.export(exports, "geoAlbers", ()=>(0, _albersJsDefault.default));
parcelHelpers.export(exports, "geoAlbersUsa", ()=>(0, _albersUsaJsDefault.default));
parcelHelpers.export(exports, "geoAzimuthalEqualArea", ()=>(0, _azimuthalEqualAreaJsDefault.default));
parcelHelpers.export(exports, "geoAzimuthalEqualAreaRaw", ()=>(0, _azimuthalEqualAreaJs.azimuthalEqualAreaRaw));
parcelHelpers.export(exports, "geoAzimuthalEquidistant", ()=>(0, _azimuthalEquidistantJsDefault.default));
parcelHelpers.export(exports, "geoAzimuthalEquidistantRaw", ()=>(0, _azimuthalEquidistantJs.azimuthalEquidistantRaw));
parcelHelpers.export(exports, "geoConicConformal", ()=>(0, _conicConformalJsDefault.default));
parcelHelpers.export(exports, "geoConicConformalRaw", ()=>(0, _conicConformalJs.conicConformalRaw));
parcelHelpers.export(exports, "geoConicEqualArea", ()=>(0, _conicEqualAreaJsDefault.default));
parcelHelpers.export(exports, "geoConicEqualAreaRaw", ()=>(0, _conicEqualAreaJs.conicEqualAreaRaw));
parcelHelpers.export(exports, "geoConicEquidistant", ()=>(0, _conicEquidistantJsDefault.default));
parcelHelpers.export(exports, "geoConicEquidistantRaw", ()=>(0, _conicEquidistantJs.conicEquidistantRaw));
parcelHelpers.export(exports, "geoEqualEarth", ()=>(0, _equalEarthJsDefault.default));
parcelHelpers.export(exports, "geoEqualEarthRaw", ()=>(0, _equalEarthJs.equalEarthRaw));
parcelHelpers.export(exports, "geoEquirectangular", ()=>(0, _equirectangularJsDefault.default));
parcelHelpers.export(exports, "geoEquirectangularRaw", ()=>(0, _equirectangularJs.equirectangularRaw));
parcelHelpers.export(exports, "geoGnomonic", ()=>(0, _gnomonicJsDefault.default));
parcelHelpers.export(exports, "geoGnomonicRaw", ()=>(0, _gnomonicJs.gnomonicRaw));
parcelHelpers.export(exports, "geoIdentity", ()=>(0, _identityJsDefault.default));
parcelHelpers.export(exports, "geoProjection", ()=>(0, _indexJsDefault1.default));
parcelHelpers.export(exports, "geoProjectionMutator", ()=>(0, _indexJs1.projectionMutator));
parcelHelpers.export(exports, "geoMercator", ()=>(0, _mercatorJsDefault.default));
parcelHelpers.export(exports, "geoMercatorRaw", ()=>(0, _mercatorJs.mercatorRaw));
parcelHelpers.export(exports, "geoNaturalEarth1", ()=>(0, _naturalEarth1JsDefault.default));
parcelHelpers.export(exports, "geoNaturalEarth1Raw", ()=>(0, _naturalEarth1Js.naturalEarth1Raw));
parcelHelpers.export(exports, "geoOrthographic", ()=>(0, _orthographicJsDefault.default));
parcelHelpers.export(exports, "geoOrthographicRaw", ()=>(0, _orthographicJs.orthographicRaw));
parcelHelpers.export(exports, "geoStereographic", ()=>(0, _stereographicJsDefault.default));
parcelHelpers.export(exports, "geoStereographicRaw", ()=>(0, _stereographicJs.stereographicRaw));
parcelHelpers.export(exports, "geoTransverseMercator", ()=>(0, _transverseMercatorJsDefault.default));
parcelHelpers.export(exports, "geoTransverseMercatorRaw", ()=>(0, _transverseMercatorJs.transverseMercatorRaw));
parcelHelpers.export(exports, "geoRotation", ()=>(0, _rotationJsDefault.default));
parcelHelpers.export(exports, "geoStream", ()=>(0, _streamJsDefault.default));
parcelHelpers.export(exports, "geoTransform", ()=>(0, _transformJsDefault.default));
var _areaJs = require("./area.js");
var _areaJsDefault = parcelHelpers.interopDefault(_areaJs);
var _boundsJs = require("./bounds.js");
var _boundsJsDefault = parcelHelpers.interopDefault(_boundsJs);
var _centroidJs = require("./centroid.js");
var _centroidJsDefault = parcelHelpers.interopDefault(_centroidJs);
var _circleJs = require("./circle.js");
var _circleJsDefault = parcelHelpers.interopDefault(_circleJs);
var _antimeridianJs = require("./clip/antimeridian.js");
var _antimeridianJsDefault = parcelHelpers.interopDefault(_antimeridianJs);
var _circleJs1 = require("./clip/circle.js");
var _circleJsDefault1 = parcelHelpers.interopDefault(_circleJs1);
var _extentJs = require("./clip/extent.js");
var _extentJsDefault = parcelHelpers.interopDefault(_extentJs);
var _rectangleJs = require("./clip/rectangle.js");
var _rectangleJsDefault = parcelHelpers.interopDefault(_rectangleJs);
var _containsJs = require("./contains.js");
var _containsJsDefault = parcelHelpers.interopDefault(_containsJs);
var _distanceJs = require("./distance.js");
var _distanceJsDefault = parcelHelpers.interopDefault(_distanceJs);
var _graticuleJs = require("./graticule.js");
var _graticuleJsDefault = parcelHelpers.interopDefault(_graticuleJs);
var _interpolateJs = require("./interpolate.js");
var _interpolateJsDefault = parcelHelpers.interopDefault(_interpolateJs);
var _lengthJs = require("./length.js");
var _lengthJsDefault = parcelHelpers.interopDefault(_lengthJs);
var _indexJs = require("./path/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _albersJs = require("./projection/albers.js");
var _albersJsDefault = parcelHelpers.interopDefault(_albersJs);
var _albersUsaJs = require("./projection/albersUsa.js");
var _albersUsaJsDefault = parcelHelpers.interopDefault(_albersUsaJs);
var _azimuthalEqualAreaJs = require("./projection/azimuthalEqualArea.js");
var _azimuthalEqualAreaJsDefault = parcelHelpers.interopDefault(_azimuthalEqualAreaJs);
var _azimuthalEquidistantJs = require("./projection/azimuthalEquidistant.js");
var _azimuthalEquidistantJsDefault = parcelHelpers.interopDefault(_azimuthalEquidistantJs);
var _conicConformalJs = require("./projection/conicConformal.js");
var _conicConformalJsDefault = parcelHelpers.interopDefault(_conicConformalJs);
var _conicEqualAreaJs = require("./projection/conicEqualArea.js");
var _conicEqualAreaJsDefault = parcelHelpers.interopDefault(_conicEqualAreaJs);
var _conicEquidistantJs = require("./projection/conicEquidistant.js");
var _conicEquidistantJsDefault = parcelHelpers.interopDefault(_conicEquidistantJs);
var _equalEarthJs = require("./projection/equalEarth.js");
var _equalEarthJsDefault = parcelHelpers.interopDefault(_equalEarthJs);
var _equirectangularJs = require("./projection/equirectangular.js");
var _equirectangularJsDefault = parcelHelpers.interopDefault(_equirectangularJs);
var _gnomonicJs = require("./projection/gnomonic.js");
var _gnomonicJsDefault = parcelHelpers.interopDefault(_gnomonicJs);
var _identityJs = require("./projection/identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _indexJs1 = require("./projection/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _mercatorJs = require("./projection/mercator.js");
var _mercatorJsDefault = parcelHelpers.interopDefault(_mercatorJs);
var _naturalEarth1Js = require("./projection/naturalEarth1.js");
var _naturalEarth1JsDefault = parcelHelpers.interopDefault(_naturalEarth1Js);
var _orthographicJs = require("./projection/orthographic.js");
var _orthographicJsDefault = parcelHelpers.interopDefault(_orthographicJs);
var _stereographicJs = require("./projection/stereographic.js");
var _stereographicJsDefault = parcelHelpers.interopDefault(_stereographicJs);
var _transverseMercatorJs = require("./projection/transverseMercator.js");
var _transverseMercatorJsDefault = parcelHelpers.interopDefault(_transverseMercatorJs);
var _rotationJs = require("./rotation.js");
var _rotationJsDefault = parcelHelpers.interopDefault(_rotationJs);
var _streamJs = require("./stream.js");
var _streamJsDefault = parcelHelpers.interopDefault(_streamJs);
var _transformJs = require("./transform.js");
var _transformJsDefault = parcelHelpers.interopDefault(_transformJs);

},{"./area.js":false,"./bounds.js":false,"./centroid.js":"l7phM","./circle.js":false,"./clip/antimeridian.js":false,"./clip/circle.js":false,"./clip/extent.js":false,"./clip/rectangle.js":"5auAi","./contains.js":false,"./distance.js":false,"./graticule.js":"4rtBH","./interpolate.js":false,"./length.js":false,"./path/index.js":"lnhfi","./projection/albers.js":"bvQZA","./projection/albersUsa.js":"5OqWl","./projection/azimuthalEqualArea.js":"7sbiV","./projection/azimuthalEquidistant.js":"3Cc8n","./projection/conicConformal.js":"33sbR","./projection/conicEqualArea.js":"cfI84","./projection/conicEquidistant.js":"fOM7Z","./projection/equalEarth.js":"67lWy","./projection/equirectangular.js":"5qip6","./projection/gnomonic.js":"auBfP","./projection/identity.js":false,"./projection/index.js":false,"./projection/mercator.js":"eCRDH","./projection/naturalEarth1.js":false,"./projection/orthographic.js":"1rxyV","./projection/stereographic.js":"lsi6D","./projection/transverseMercator.js":"6KvxX","./rotation.js":false,"./stream.js":"lpKxD","./transform.js":"AaiPA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l7phM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(object) {
        W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = 0;
        X2 = new (0, _d3Array.Adder)();
        Y2 = new (0, _d3Array.Adder)();
        Z2 = new (0, _d3Array.Adder)();
        (0, _streamJsDefault.default)(object, centroidStream);
        var x = +X2, y = +Y2, z = +Z2, m = (0, _mathJs.hypot)(x, y, z);
        // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
        if (m < (0, _mathJs.epsilon2)) {
            x = X1, y = Y1, z = Z1;
            // If the feature has zero length, fall back to arithmetic mean of point vectors.
            if (W1 < (0, _mathJs.epsilon)) x = X0, y = Y0, z = Z0;
            m = (0, _mathJs.hypot)(x, y, z);
            // If the feature still has an undefined ccentroid, then return.
            if (m < (0, _mathJs.epsilon2)) return [
                NaN,
                NaN
            ];
        }
        return [
            (0, _mathJs.atan2)(y, x) * (0, _mathJs.degrees),
            (0, _mathJs.asin)(z / m) * (0, _mathJs.degrees)
        ];
    });
var _d3Array = require("d3-array");
var _mathJs = require("./math.js");
var _noopJs = require("./noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _streamJs = require("./stream.js");
var _streamJsDefault = parcelHelpers.interopDefault(_streamJs);
var W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00, phi00, x0, y0, z0; // previous point
var centroidStream = {
    sphere: (0, _noopJsDefault.default),
    point: centroidPoint,
    lineStart: centroidLineStart,
    lineEnd: centroidLineEnd,
    polygonStart: function() {
        centroidStream.lineStart = centroidRingStart;
        centroidStream.lineEnd = centroidRingEnd;
    },
    polygonEnd: function() {
        centroidStream.lineStart = centroidLineStart;
        centroidStream.lineEnd = centroidLineEnd;
    }
};
// Arithmetic mean of Cartesian vectors.
function centroidPoint(lambda, phi) {
    lambda *= (0, _mathJs.radians), phi *= (0, _mathJs.radians);
    var cosPhi = (0, _mathJs.cos)(phi);
    centroidPointCartesian(cosPhi * (0, _mathJs.cos)(lambda), cosPhi * (0, _mathJs.sin)(lambda), (0, _mathJs.sin)(phi));
}
function centroidPointCartesian(x, y, z) {
    ++W0;
    X0 += (x - X0) / W0;
    Y0 += (y - Y0) / W0;
    Z0 += (z - Z0) / W0;
}
function centroidLineStart() {
    centroidStream.point = centroidLinePointFirst;
}
function centroidLinePointFirst(lambda, phi) {
    lambda *= (0, _mathJs.radians), phi *= (0, _mathJs.radians);
    var cosPhi = (0, _mathJs.cos)(phi);
    x0 = cosPhi * (0, _mathJs.cos)(lambda);
    y0 = cosPhi * (0, _mathJs.sin)(lambda);
    z0 = (0, _mathJs.sin)(phi);
    centroidStream.point = centroidLinePoint;
    centroidPointCartesian(x0, y0, z0);
}
function centroidLinePoint(lambda, phi) {
    lambda *= (0, _mathJs.radians), phi *= (0, _mathJs.radians);
    var cosPhi = (0, _mathJs.cos)(phi), x = cosPhi * (0, _mathJs.cos)(lambda), y = cosPhi * (0, _mathJs.sin)(lambda), z = (0, _mathJs.sin)(phi), w = (0, _mathJs.atan2)((0, _mathJs.sqrt)((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
    W1 += w;
    X1 += w * (x0 + (x0 = x));
    Y1 += w * (y0 + (y0 = y));
    Z1 += w * (z0 + (z0 = z));
    centroidPointCartesian(x0, y0, z0);
}
function centroidLineEnd() {
    centroidStream.point = centroidPoint;
}
// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
// J. Applied Mechanics 42, 239 (1975).
function centroidRingStart() {
    centroidStream.point = centroidRingPointFirst;
}
function centroidRingEnd() {
    centroidRingPoint(lambda00, phi00);
    centroidStream.point = centroidPoint;
}
function centroidRingPointFirst(lambda, phi) {
    lambda00 = lambda, phi00 = phi;
    lambda *= (0, _mathJs.radians), phi *= (0, _mathJs.radians);
    centroidStream.point = centroidRingPoint;
    var cosPhi = (0, _mathJs.cos)(phi);
    x0 = cosPhi * (0, _mathJs.cos)(lambda);
    y0 = cosPhi * (0, _mathJs.sin)(lambda);
    z0 = (0, _mathJs.sin)(phi);
    centroidPointCartesian(x0, y0, z0);
}
function centroidRingPoint(lambda, phi) {
    lambda *= (0, _mathJs.radians), phi *= (0, _mathJs.radians);
    var cosPhi = (0, _mathJs.cos)(phi), x = cosPhi * (0, _mathJs.cos)(lambda), y = cosPhi * (0, _mathJs.sin)(lambda), z = (0, _mathJs.sin)(phi), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = (0, _mathJs.hypot)(cx, cy, cz), w = (0, _mathJs.asin)(m), v = m && -w / m; // area weight multiplier
    X2.add(v * cx);
    Y2.add(v * cy);
    Z2.add(v * cz);
    W1 += w;
    X1 += w * (x0 + (x0 = x));
    Y1 += w * (y0 + (y0 = y));
    Z1 += w * (z0 + (z0 = z));
    centroidPointCartesian(x0, y0, z0);
}

},{"d3-array":"1yX2W","./math.js":"8TMeU","./noop.js":"bROOt","./stream.js":"lpKxD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8TMeU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "epsilon", ()=>epsilon);
parcelHelpers.export(exports, "epsilon2", ()=>epsilon2);
parcelHelpers.export(exports, "pi", ()=>pi);
parcelHelpers.export(exports, "halfPi", ()=>halfPi);
parcelHelpers.export(exports, "quarterPi", ()=>quarterPi);
parcelHelpers.export(exports, "tau", ()=>tau);
parcelHelpers.export(exports, "degrees", ()=>degrees);
parcelHelpers.export(exports, "radians", ()=>radians);
parcelHelpers.export(exports, "abs", ()=>abs);
parcelHelpers.export(exports, "atan", ()=>atan);
parcelHelpers.export(exports, "atan2", ()=>atan2);
parcelHelpers.export(exports, "cos", ()=>cos);
parcelHelpers.export(exports, "ceil", ()=>ceil);
parcelHelpers.export(exports, "exp", ()=>exp);
parcelHelpers.export(exports, "floor", ()=>floor);
parcelHelpers.export(exports, "hypot", ()=>hypot);
parcelHelpers.export(exports, "log", ()=>log);
parcelHelpers.export(exports, "pow", ()=>pow);
parcelHelpers.export(exports, "sin", ()=>sin);
parcelHelpers.export(exports, "sign", ()=>sign);
parcelHelpers.export(exports, "sqrt", ()=>sqrt);
parcelHelpers.export(exports, "tan", ()=>tan);
parcelHelpers.export(exports, "acos", ()=>acos);
parcelHelpers.export(exports, "asin", ()=>asin);
parcelHelpers.export(exports, "haversin", ()=>haversin);
var epsilon = 1e-6;
var epsilon2 = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var quarterPi = pi / 4;
var tau = pi * 2;
var degrees = 180 / pi;
var radians = pi / 180;
var abs = Math.abs;
var atan = Math.atan;
var atan2 = Math.atan2;
var cos = Math.cos;
var ceil = Math.ceil;
var exp = Math.exp;
var floor = Math.floor;
var hypot = Math.hypot;
var log = Math.log;
var pow = Math.pow;
var sin = Math.sin;
var sign = Math.sign || function(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
};
var sqrt = Math.sqrt;
var tan = Math.tan;
function acos(x) {
    return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}
function asin(x) {
    return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
}
function haversin(x) {
    return (x = sin(x / 2)) * x;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bROOt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>noop);
function noop() {}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lpKxD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(object, stream) {
        if (object && streamObjectType.hasOwnProperty(object.type)) streamObjectType[object.type](object, stream);
        else streamGeometry(object, stream);
    });
function streamGeometry(geometry, stream) {
    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) streamGeometryType[geometry.type](geometry, stream);
}
var streamObjectType = {
    Feature: function(object, stream) {
        streamGeometry(object.geometry, stream);
    },
    FeatureCollection: function(object, stream) {
        var features = object.features, i = -1, n = features.length;
        while(++i < n)streamGeometry(features[i].geometry, stream);
    }
};
var streamGeometryType = {
    Sphere: function(object, stream) {
        stream.sphere();
    },
    Point: function(object, stream) {
        object = object.coordinates;
        stream.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while(++i < n)object = coordinates[i], stream.point(object[0], object[1], object[2]);
    },
    LineString: function(object, stream) {
        streamLine(object.coordinates, stream, 0);
    },
    MultiLineString: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while(++i < n)streamLine(coordinates[i], stream, 0);
    },
    Polygon: function(object, stream) {
        streamPolygon(object.coordinates, stream);
    },
    MultiPolygon: function(object, stream) {
        var coordinates = object.coordinates, i = -1, n = coordinates.length;
        while(++i < n)streamPolygon(coordinates[i], stream);
    },
    GeometryCollection: function(object, stream) {
        var geometries = object.geometries, i = -1, n = geometries.length;
        while(++i < n)streamGeometry(geometries[i], stream);
    }
};
function streamLine(coordinates, stream, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    stream.lineStart();
    while(++i < n)coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
    stream.lineEnd();
}
function streamPolygon(coordinates, stream) {
    var i = -1, n = coordinates.length;
    stream.polygonStart();
    while(++i < n)streamLine(coordinates[i], stream, 1);
    stream.polygonEnd();
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b6BNx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Generates a circle centered at [0°, 0°], with a given radius and precision.
parcelHelpers.export(exports, "circleStream", ()=>circleStream);
parcelHelpers.export(exports, "default", ()=>function() {
        var center = (0, _constantJsDefault.default)([
            0,
            0
        ]), radius = (0, _constantJsDefault.default)(90), precision = (0, _constantJsDefault.default)(2), ring, rotate, stream = {
            point: point
        };
        function point(x, y) {
            ring.push(x = rotate(x, y));
            x[0] *= (0, _mathJs.degrees), x[1] *= (0, _mathJs.degrees);
        }
        function circle() {
            var c = center.apply(this, arguments), r = radius.apply(this, arguments) * (0, _mathJs.radians), p = precision.apply(this, arguments) * (0, _mathJs.radians);
            ring = [];
            rotate = (0, _rotationJs.rotateRadians)(-c[0] * (0, _mathJs.radians), -c[1] * (0, _mathJs.radians), 0).invert;
            circleStream(stream, r, p, 1);
            c = {
                type: "Polygon",
                coordinates: [
                    ring
                ]
            };
            ring = rotate = null;
            return c;
        }
        circle.center = function(_) {
            return arguments.length ? (center = typeof _ === "function" ? _ : (0, _constantJsDefault.default)([
                +_[0],
                +_[1]
            ]), circle) : center;
        };
        circle.radius = function(_) {
            return arguments.length ? (radius = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), circle) : radius;
        };
        circle.precision = function(_) {
            return arguments.length ? (precision = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), circle) : precision;
        };
        return circle;
    });
var _cartesianJs = require("./cartesian.js");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _mathJs = require("./math.js");
var _rotationJs = require("./rotation.js");
function circleStream(stream, radius, delta, direction, t0, t1) {
    if (!delta) return;
    var cosRadius = (0, _mathJs.cos)(radius), sinRadius = (0, _mathJs.sin)(radius), step = direction * delta;
    if (t0 == null) {
        t0 = radius + direction * (0, _mathJs.tau);
        t1 = radius - step / 2;
    } else {
        t0 = circleRadius(cosRadius, t0);
        t1 = circleRadius(cosRadius, t1);
        if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * (0, _mathJs.tau);
    }
    for(var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step){
        point = (0, _cartesianJs.spherical)([
            cosRadius,
            -sinRadius * (0, _mathJs.cos)(t),
            -sinRadius * (0, _mathJs.sin)(t)
        ]);
        stream.point(point[0], point[1]);
    }
}
// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
function circleRadius(cosRadius, point) {
    point = (0, _cartesianJs.cartesian)(point), point[0] -= cosRadius;
    (0, _cartesianJs.cartesianNormalizeInPlace)(point);
    var radius = (0, _mathJs.acos)(-point[1]);
    return ((-point[2] < 0 ? -radius : radius) + (0, _mathJs.tau) - (0, _mathJs.epsilon)) % (0, _mathJs.tau);
}

},{"./cartesian.js":"4Lw8W","./constant.js":"1uZ9u","./math.js":"8TMeU","./rotation.js":"g2pLL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Lw8W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "spherical", ()=>spherical);
parcelHelpers.export(exports, "cartesian", ()=>cartesian);
parcelHelpers.export(exports, "cartesianDot", ()=>cartesianDot);
parcelHelpers.export(exports, "cartesianCross", ()=>cartesianCross);
// TODO return a
parcelHelpers.export(exports, "cartesianAddInPlace", ()=>cartesianAddInPlace);
parcelHelpers.export(exports, "cartesianScale", ()=>cartesianScale);
// TODO return d
parcelHelpers.export(exports, "cartesianNormalizeInPlace", ()=>cartesianNormalizeInPlace);
var _mathJs = require("./math.js");
function spherical(cartesian) {
    return [
        (0, _mathJs.atan2)(cartesian[1], cartesian[0]),
        (0, _mathJs.asin)(cartesian[2])
    ];
}
function cartesian(spherical) {
    var lambda = spherical[0], phi = spherical[1], cosPhi = (0, _mathJs.cos)(phi);
    return [
        cosPhi * (0, _mathJs.cos)(lambda),
        cosPhi * (0, _mathJs.sin)(lambda),
        (0, _mathJs.sin)(phi)
    ];
}
function cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
function cartesianCross(a, b) {
    return [
        a[1] * b[2] - a[2] * b[1],
        a[2] * b[0] - a[0] * b[2],
        a[0] * b[1] - a[1] * b[0]
    ];
}
function cartesianAddInPlace(a, b) {
    a[0] += b[0], a[1] += b[1], a[2] += b[2];
}
function cartesianScale(vector, k) {
    return [
        vector[0] * k,
        vector[1] * k,
        vector[2] * k
    ];
}
function cartesianNormalizeInPlace(d) {
    var l = (0, _mathJs.sqrt)(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l, d[1] /= l, d[2] /= l;
}

},{"./math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1uZ9u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(x) {
        return function() {
            return x;
        };
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g2pLL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "rotateRadians", ()=>rotateRadians);
parcelHelpers.export(exports, "default", ()=>function(rotate) {
        rotate = rotateRadians(rotate[0] * (0, _mathJs.radians), rotate[1] * (0, _mathJs.radians), rotate.length > 2 ? rotate[2] * (0, _mathJs.radians) : 0);
        function forward(coordinates) {
            coordinates = rotate(coordinates[0] * (0, _mathJs.radians), coordinates[1] * (0, _mathJs.radians));
            return coordinates[0] *= (0, _mathJs.degrees), coordinates[1] *= (0, _mathJs.degrees), coordinates;
        }
        forward.invert = function(coordinates) {
            coordinates = rotate.invert(coordinates[0] * (0, _mathJs.radians), coordinates[1] * (0, _mathJs.radians));
            return coordinates[0] *= (0, _mathJs.degrees), coordinates[1] *= (0, _mathJs.degrees), coordinates;
        };
        return forward;
    });
var _composeJs = require("./compose.js");
var _composeJsDefault = parcelHelpers.interopDefault(_composeJs);
var _mathJs = require("./math.js");
function rotationIdentity(lambda, phi) {
    if ((0, _mathJs.abs)(lambda) > (0, _mathJs.pi)) lambda -= Math.round(lambda / (0, _mathJs.tau)) * (0, _mathJs.tau);
    return [
        lambda,
        phi
    ];
}
rotationIdentity.invert = rotationIdentity;
function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
    return (deltaLambda %= (0, _mathJs.tau)) ? deltaPhi || deltaGamma ? (0, _composeJsDefault.default)(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}
function forwardRotationLambda(deltaLambda) {
    return function(lambda, phi) {
        lambda += deltaLambda;
        if ((0, _mathJs.abs)(lambda) > (0, _mathJs.pi)) lambda -= Math.round(lambda / (0, _mathJs.tau)) * (0, _mathJs.tau);
        return [
            lambda,
            phi
        ];
    };
}
function rotationLambda(deltaLambda) {
    var rotation = forwardRotationLambda(deltaLambda);
    rotation.invert = forwardRotationLambda(-deltaLambda);
    return rotation;
}
function rotationPhiGamma(deltaPhi, deltaGamma) {
    var cosDeltaPhi = (0, _mathJs.cos)(deltaPhi), sinDeltaPhi = (0, _mathJs.sin)(deltaPhi), cosDeltaGamma = (0, _mathJs.cos)(deltaGamma), sinDeltaGamma = (0, _mathJs.sin)(deltaGamma);
    function rotation(lambda, phi) {
        var cosPhi = (0, _mathJs.cos)(phi), x = (0, _mathJs.cos)(lambda) * cosPhi, y = (0, _mathJs.sin)(lambda) * cosPhi, z = (0, _mathJs.sin)(phi), k = z * cosDeltaPhi + x * sinDeltaPhi;
        return [
            (0, _mathJs.atan2)(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
            (0, _mathJs.asin)(k * cosDeltaGamma + y * sinDeltaGamma)
        ];
    }
    rotation.invert = function(lambda, phi) {
        var cosPhi = (0, _mathJs.cos)(phi), x = (0, _mathJs.cos)(lambda) * cosPhi, y = (0, _mathJs.sin)(lambda) * cosPhi, z = (0, _mathJs.sin)(phi), k = z * cosDeltaGamma - y * sinDeltaGamma;
        return [
            (0, _mathJs.atan2)(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
            (0, _mathJs.asin)(k * cosDeltaPhi - x * sinDeltaPhi)
        ];
    };
    return rotation;
}

},{"./compose.js":"lJD5n","./math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lJD5n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(a, b) {
        function compose(x, y) {
            return x = a(x, y), b(x[0], x[1]);
        }
        if (a.invert && b.invert) compose.invert = function(x, y) {
            return x = b.invert(x, y), x && a.invert(x[0], x[1]);
        };
        return compose;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Pn7h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _mathJs = require("../math.js");
exports.default = (0, _indexJsDefault.default)(function() {
    return true;
}, clipAntimeridianLine, clipAntimeridianInterpolate, [
    -(0, _mathJs.pi),
    -(0, _mathJs.halfPi)
]);
// Takes a line and cuts into visible segments. Return values: 0 - there were
// intersections or the line was empty; 1 - no intersections; 2 - there were
// intersections, and the first and last segments should be rejoined.
function clipAntimeridianLine(stream) {
    var lambda0 = NaN, phi0 = NaN, sign0 = NaN, clean; // no intersections
    return {
        lineStart: function() {
            stream.lineStart();
            clean = 1;
        },
        point: function(lambda1, phi1) {
            var sign1 = lambda1 > 0 ? (0, _mathJs.pi) : -(0, _mathJs.pi), delta = (0, _mathJs.abs)(lambda1 - lambda0);
            if ((0, _mathJs.abs)(delta - (0, _mathJs.pi)) < (0, _mathJs.epsilon)) {
                stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? (0, _mathJs.halfPi) : -(0, _mathJs.halfPi));
                stream.point(sign0, phi0);
                stream.lineEnd();
                stream.lineStart();
                stream.point(sign1, phi0);
                stream.point(lambda1, phi0);
                clean = 0;
            } else if (sign0 !== sign1 && delta >= (0, _mathJs.pi)) {
                if ((0, _mathJs.abs)(lambda0 - sign0) < (0, _mathJs.epsilon)) lambda0 -= sign0 * (0, _mathJs.epsilon); // handle degeneracies
                if ((0, _mathJs.abs)(lambda1 - sign1) < (0, _mathJs.epsilon)) lambda1 -= sign1 * (0, _mathJs.epsilon);
                phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
                stream.point(sign0, phi0);
                stream.lineEnd();
                stream.lineStart();
                stream.point(sign1, phi0);
                clean = 0;
            }
            stream.point(lambda0 = lambda1, phi0 = phi1);
            sign0 = sign1;
        },
        lineEnd: function() {
            stream.lineEnd();
            lambda0 = phi0 = NaN;
        },
        clean: function() {
            return 2 - clean; // if intersections, rejoin first and last segments
        }
    };
}
function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
    var cosPhi0, cosPhi1, sinLambda0Lambda1 = (0, _mathJs.sin)(lambda0 - lambda1);
    return (0, _mathJs.abs)(sinLambda0Lambda1) > (0, _mathJs.epsilon) ? (0, _mathJs.atan)(((0, _mathJs.sin)(phi0) * (cosPhi1 = (0, _mathJs.cos)(phi1)) * (0, _mathJs.sin)(lambda1) - (0, _mathJs.sin)(phi1) * (cosPhi0 = (0, _mathJs.cos)(phi0)) * (0, _mathJs.sin)(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
}
function clipAntimeridianInterpolate(from, to, direction, stream) {
    var phi;
    if (from == null) {
        phi = direction * (0, _mathJs.halfPi);
        stream.point(-(0, _mathJs.pi), phi);
        stream.point(0, phi);
        stream.point((0, _mathJs.pi), phi);
        stream.point((0, _mathJs.pi), 0);
        stream.point((0, _mathJs.pi), -phi);
        stream.point(0, -phi);
        stream.point(-(0, _mathJs.pi), -phi);
        stream.point(-(0, _mathJs.pi), 0);
        stream.point(-(0, _mathJs.pi), phi);
    } else if ((0, _mathJs.abs)(from[0] - to[0]) > (0, _mathJs.epsilon)) {
        var lambda = from[0] < to[0] ? (0, _mathJs.pi) : -(0, _mathJs.pi);
        phi = direction * lambda / 2;
        stream.point(-lambda, phi);
        stream.point(0, phi);
        stream.point(lambda, phi);
    } else stream.point(to[0], to[1]);
}

},{"./index.js":"bCtcN","../math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bCtcN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(pointVisible, clipLine, interpolate, start) {
        return function(sink) {
            var line = clipLine(sink), ringBuffer = (0, _bufferJsDefault.default)(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon, segments, ring;
            var clip = {
                point: point,
                lineStart: lineStart,
                lineEnd: lineEnd,
                polygonStart: function() {
                    clip.point = pointRing;
                    clip.lineStart = ringStart;
                    clip.lineEnd = ringEnd;
                    segments = [];
                    polygon = [];
                },
                polygonEnd: function() {
                    clip.point = point;
                    clip.lineStart = lineStart;
                    clip.lineEnd = lineEnd;
                    segments = (0, _d3Array.merge)(segments);
                    var startInside = (0, _polygonContainsJsDefault.default)(polygon, start);
                    if (segments.length) {
                        if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                        (0, _rejoinJsDefault.default)(segments, compareIntersection, startInside, interpolate, sink);
                    } else if (startInside) {
                        if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                        sink.lineStart();
                        interpolate(null, null, 1, sink);
                        sink.lineEnd();
                    }
                    if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
                    segments = polygon = null;
                },
                sphere: function() {
                    sink.polygonStart();
                    sink.lineStart();
                    interpolate(null, null, 1, sink);
                    sink.lineEnd();
                    sink.polygonEnd();
                }
            };
            function point(lambda, phi) {
                if (pointVisible(lambda, phi)) sink.point(lambda, phi);
            }
            function pointLine(lambda, phi) {
                line.point(lambda, phi);
            }
            function lineStart() {
                clip.point = pointLine;
                line.lineStart();
            }
            function lineEnd() {
                clip.point = point;
                line.lineEnd();
            }
            function pointRing(lambda, phi) {
                ring.push([
                    lambda,
                    phi
                ]);
                ringSink.point(lambda, phi);
            }
            function ringStart() {
                ringSink.lineStart();
                ring = [];
            }
            function ringEnd() {
                pointRing(ring[0][0], ring[0][1]);
                ringSink.lineEnd();
                var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i, n = ringSegments.length, m, segment, point;
                ring.pop();
                polygon.push(ring);
                ring = null;
                if (!n) return;
                // No intersections.
                if (clean & 1) {
                    segment = ringSegments[0];
                    if ((m = segment.length - 1) > 0) {
                        if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                        sink.lineStart();
                        for(i = 0; i < m; ++i)sink.point((point = segment[i])[0], point[1]);
                        sink.lineEnd();
                    }
                    return;
                }
                // Rejoin connected segments.
                // TODO reuse ringBuffer.rejoin()?
                if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
                segments.push(ringSegments.filter(validSegment));
            }
            return clip;
        };
    });
var _bufferJs = require("./buffer.js");
var _bufferJsDefault = parcelHelpers.interopDefault(_bufferJs);
var _rejoinJs = require("./rejoin.js");
var _rejoinJsDefault = parcelHelpers.interopDefault(_rejoinJs);
var _mathJs = require("../math.js");
var _polygonContainsJs = require("../polygonContains.js");
var _polygonContainsJsDefault = parcelHelpers.interopDefault(_polygonContainsJs);
var _d3Array = require("d3-array");
function validSegment(segment) {
    return segment.length > 1;
}
// Intersections are sorted along the clip edge. For both antimeridian cutting
// and circle clipping, the same comparison is used.
function compareIntersection(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - (0, _mathJs.halfPi) - (0, _mathJs.epsilon) : (0, _mathJs.halfPi) - a[1]) - ((b = b.x)[0] < 0 ? b[1] - (0, _mathJs.halfPi) - (0, _mathJs.epsilon) : (0, _mathJs.halfPi) - b[1]);
}

},{"./buffer.js":"6MwC2","./rejoin.js":"4Cpqb","../math.js":"8TMeU","../polygonContains.js":"k8u1G","d3-array":"1yX2W","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6MwC2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        var lines = [], line;
        return {
            point: function(x, y, m) {
                line.push([
                    x,
                    y,
                    m
                ]);
            },
            lineStart: function() {
                lines.push(line = []);
            },
            lineEnd: (0, _noopJsDefault.default),
            rejoin: function() {
                if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
            },
            result: function() {
                var result = lines;
                lines = [];
                line = null;
                return result;
            }
        };
    });
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);

},{"../noop.js":"bROOt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Cpqb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// A generalized polygon clipping algorithm: given a polygon that has been cut
// into its visible line segments, and rejoins the segments by interpolating
// along the clip edge.
parcelHelpers.export(exports, "default", ()=>function(segments, compareIntersection, startInside, interpolate, stream) {
        var subject = [], clip = [], i, n;
        segments.forEach(function(segment) {
            if ((n = segment.length - 1) <= 0) return;
            var n, p0 = segment[0], p1 = segment[n], x;
            if ((0, _pointEqualJsDefault.default)(p0, p1)) {
                if (!p0[2] && !p1[2]) {
                    stream.lineStart();
                    for(i = 0; i < n; ++i)stream.point((p0 = segment[i])[0], p0[1]);
                    stream.lineEnd();
                    return;
                }
                // handle degenerate cases by moving the point
                p1[0] += 2 * (0, _mathJs.epsilon);
            }
            subject.push(x = new Intersection(p0, segment, null, true));
            clip.push(x.o = new Intersection(p0, null, x, false));
            subject.push(x = new Intersection(p1, segment, null, false));
            clip.push(x.o = new Intersection(p1, null, x, true));
        });
        if (!subject.length) return;
        clip.sort(compareIntersection);
        link(subject);
        link(clip);
        for(i = 0, n = clip.length; i < n; ++i)clip[i].e = startInside = !startInside;
        var start = subject[0], points, point;
        while(true){
            // Find first unvisited intersection.
            var current = start, isSubject = true;
            while(current.v)if ((current = current.n) === start) return;
            points = current.z;
            stream.lineStart();
            do {
                current.v = current.o.v = true;
                if (current.e) {
                    if (isSubject) for(i = 0, n = points.length; i < n; ++i)stream.point((point = points[i])[0], point[1]);
                    else interpolate(current.x, current.n.x, 1, stream);
                    current = current.n;
                } else {
                    if (isSubject) {
                        points = current.p.z;
                        for(i = points.length - 1; i >= 0; --i)stream.point((point = points[i])[0], point[1]);
                    } else interpolate(current.x, current.p.x, -1, stream);
                    current = current.p;
                }
                current = current.o;
                points = current.z;
                isSubject = !isSubject;
            }while (!current.v);
            stream.lineEnd();
        }
    });
var _pointEqualJs = require("../pointEqual.js");
var _pointEqualJsDefault = parcelHelpers.interopDefault(_pointEqualJs);
var _mathJs = require("../math.js");
function Intersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other; // another intersection
    this.e = entry; // is an entry?
    this.v = false; // visited
    this.n = this.p = null; // next & previous
}
function link(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while(++i < n){
        a.n = b = array[i];
        b.p = a;
        a = b;
    }
    a.n = b = array[0];
    b.p = a;
}

},{"../pointEqual.js":"5FEbl","../math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5FEbl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(a, b) {
        return (0, _mathJs.abs)(a[0] - b[0]) < (0, _mathJs.epsilon) && (0, _mathJs.abs)(a[1] - b[1]) < (0, _mathJs.epsilon);
    });
var _mathJs = require("./math.js");

},{"./math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k8u1G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(polygon, point) {
        var lambda = longitude(point), phi = point[1], sinPhi = (0, _mathJs.sin)(phi), normal = [
            (0, _mathJs.sin)(lambda),
            -(0, _mathJs.cos)(lambda),
            0
        ], angle = 0, winding = 0;
        var sum = new (0, _d3Array.Adder)();
        if (sinPhi === 1) phi = (0, _mathJs.halfPi) + (0, _mathJs.epsilon);
        else if (sinPhi === -1) phi = -(0, _mathJs.halfPi) - (0, _mathJs.epsilon);
        for(var i = 0, n = polygon.length; i < n; ++i){
            if (!(m = (ring = polygon[i]).length)) continue;
            var ring, m, point0 = ring[m - 1], lambda0 = longitude(point0), phi0 = point0[1] / 2 + (0, _mathJs.quarterPi), sinPhi0 = (0, _mathJs.sin)(phi0), cosPhi0 = (0, _mathJs.cos)(phi0);
            for(var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1){
                var point1 = ring[j], lambda1 = longitude(point1), phi1 = point1[1] / 2 + (0, _mathJs.quarterPi), sinPhi1 = (0, _mathJs.sin)(phi1), cosPhi1 = (0, _mathJs.cos)(phi1), delta = lambda1 - lambda0, sign = delta >= 0 ? 1 : -1, absDelta = sign * delta, antimeridian = absDelta > (0, _mathJs.pi), k = sinPhi0 * sinPhi1;
                sum.add((0, _mathJs.atan2)(k * sign * (0, _mathJs.sin)(absDelta), cosPhi0 * cosPhi1 + k * (0, _mathJs.cos)(absDelta)));
                angle += antimeridian ? delta + sign * (0, _mathJs.tau) : delta;
                // Are the longitudes either side of the point’s meridian (lambda),
                // and are the latitudes smaller than the parallel (phi)?
                if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
                    var arc = (0, _cartesianJs.cartesianCross)((0, _cartesianJs.cartesian)(point0), (0, _cartesianJs.cartesian)(point1));
                    (0, _cartesianJs.cartesianNormalizeInPlace)(arc);
                    var intersection = (0, _cartesianJs.cartesianCross)(normal, arc);
                    (0, _cartesianJs.cartesianNormalizeInPlace)(intersection);
                    var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * (0, _mathJs.asin)(intersection[2]);
                    if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) winding += antimeridian ^ delta >= 0 ? 1 : -1;
                }
            }
        }
        // First, determine whether the South pole is inside or outside:
        //
        // It is inside if:
        // * the polygon winds around it in a clockwise direction.
        // * the polygon does not (cumulatively) wind around it, but has a negative
        //   (counter-clockwise) area.
        //
        // Second, count the (signed) number of times a segment crosses a lambda
        // from the point to the South pole.  If it is zero, then the point is the
        // same side as the South pole.
        return (angle < -(0, _mathJs.epsilon) || angle < (0, _mathJs.epsilon) && sum < -(0, _mathJs.epsilon2)) ^ winding & 1;
    });
var _d3Array = require("d3-array");
var _cartesianJs = require("./cartesian.js");
var _mathJs = require("./math.js");
function longitude(point) {
    return (0, _mathJs.abs)(point[0]) <= (0, _mathJs.pi) ? point[0] : (0, _mathJs.sign)(point[0]) * (((0, _mathJs.abs)(point[0]) + (0, _mathJs.pi)) % (0, _mathJs.tau) - (0, _mathJs.pi));
}

},{"d3-array":"1yX2W","./cartesian.js":"4Lw8W","./math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6JGCr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(radius) {
        var cr = (0, _mathJs.cos)(radius), delta = 2 * (0, _mathJs.radians), smallRadius = cr > 0, notHemisphere = (0, _mathJs.abs)(cr) > (0, _mathJs.epsilon); // TODO optimise for this common case
        function interpolate(from, to, direction, stream) {
            (0, _circleJs.circleStream)(stream, radius, delta, direction, from, to);
        }
        function visible(lambda, phi) {
            return (0, _mathJs.cos)(lambda) * (0, _mathJs.cos)(phi) > cr;
        }
        // Takes a line and cuts into visible segments. Return values used for polygon
        // clipping: 0 - there were intersections or the line was empty; 1 - no
        // intersections 2 - there were intersections, and the first and last segments
        // should be rejoined.
        function clipLine(stream) {
            var point0, c0, v0, v00, clean; // no intersections
            return {
                lineStart: function() {
                    v00 = v0 = false;
                    clean = 1;
                },
                point: function(lambda, phi) {
                    var point1 = [
                        lambda,
                        phi
                    ], point2, v = visible(lambda, phi), c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? (0, _mathJs.pi) : -(0, _mathJs.pi)), phi) : 0;
                    if (!point0 && (v00 = v0 = v)) stream.lineStart();
                    if (v !== v0) {
                        point2 = intersect(point0, point1);
                        if (!point2 || (0, _pointEqualJsDefault.default)(point0, point2) || (0, _pointEqualJsDefault.default)(point1, point2)) point1[2] = 1;
                    }
                    if (v !== v0) {
                        clean = 0;
                        if (v) {
                            // outside going in
                            stream.lineStart();
                            point2 = intersect(point1, point0);
                            stream.point(point2[0], point2[1]);
                        } else {
                            // inside going out
                            point2 = intersect(point0, point1);
                            stream.point(point2[0], point2[1], 2);
                            stream.lineEnd();
                        }
                        point0 = point2;
                    } else if (notHemisphere && point0 && smallRadius ^ v) {
                        var t;
                        // If the codes for two points are different, or are both zero,
                        // and there this segment intersects with the small circle.
                        if (!(c & c0) && (t = intersect(point1, point0, true))) {
                            clean = 0;
                            if (smallRadius) {
                                stream.lineStart();
                                stream.point(t[0][0], t[0][1]);
                                stream.point(t[1][0], t[1][1]);
                                stream.lineEnd();
                            } else {
                                stream.point(t[1][0], t[1][1]);
                                stream.lineEnd();
                                stream.lineStart();
                                stream.point(t[0][0], t[0][1], 3);
                            }
                        }
                    }
                    if (v && (!point0 || !(0, _pointEqualJsDefault.default)(point0, point1))) stream.point(point1[0], point1[1]);
                    point0 = point1, v0 = v, c0 = c;
                },
                lineEnd: function() {
                    if (v0) stream.lineEnd();
                    point0 = null;
                },
                // Rejoin first and last segments if there were intersections and the first
                // and last points were visible.
                clean: function() {
                    return clean | (v00 && v0) << 1;
                }
            };
        }
        // Intersects the great circle between a and b with the clip circle.
        function intersect(a, b, two) {
            var pa = (0, _cartesianJs.cartesian)(a), pb = (0, _cartesianJs.cartesian)(b);
            // We have two planes, n1.p = d1 and n2.p = d2.
            // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
            var n1 = [
                1,
                0,
                0
            ], n2 = (0, _cartesianJs.cartesianCross)(pa, pb), n2n2 = (0, _cartesianJs.cartesianDot)(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
            // Two polar points.
            if (!determinant) return !two && a;
            var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = (0, _cartesianJs.cartesianCross)(n1, n2), A = (0, _cartesianJs.cartesianScale)(n1, c1), B = (0, _cartesianJs.cartesianScale)(n2, c2);
            (0, _cartesianJs.cartesianAddInPlace)(A, B);
            // Solve |p(t)|^2 = 1.
            var u = n1xn2, w = (0, _cartesianJs.cartesianDot)(A, u), uu = (0, _cartesianJs.cartesianDot)(u, u), t2 = w * w - uu * ((0, _cartesianJs.cartesianDot)(A, A) - 1);
            if (t2 < 0) return;
            var t = (0, _mathJs.sqrt)(t2), q = (0, _cartesianJs.cartesianScale)(u, (-w - t) / uu);
            (0, _cartesianJs.cartesianAddInPlace)(q, A);
            q = (0, _cartesianJs.spherical)(q);
            if (!two) return q;
            // Two intersection points.
            var lambda0 = a[0], lambda1 = b[0], phi0 = a[1], phi1 = b[1], z;
            if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;
            var delta = lambda1 - lambda0, polar = (0, _mathJs.abs)(delta - (0, _mathJs.pi)) < (0, _mathJs.epsilon), meridian = polar || delta < (0, _mathJs.epsilon);
            if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;
            // Check that the first point is between a and b.
            if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < ((0, _mathJs.abs)(q[0] - lambda0) < (0, _mathJs.epsilon) ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > (0, _mathJs.pi) ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
                var q1 = (0, _cartesianJs.cartesianScale)(u, (-w + t) / uu);
                (0, _cartesianJs.cartesianAddInPlace)(q1, A);
                return [
                    q,
                    (0, _cartesianJs.spherical)(q1)
                ];
            }
        }
        // Generates a 4-bit vector representing the location of a point relative to
        // the small circle's bounding box.
        function code(lambda, phi) {
            var r = smallRadius ? radius : (0, _mathJs.pi) - radius, code = 0;
            if (lambda < -r) code |= 1; // left
            else if (lambda > r) code |= 2; // right
            if (phi < -r) code |= 4; // below
            else if (phi > r) code |= 8; // above
            return code;
        }
        return (0, _indexJsDefault.default)(visible, clipLine, interpolate, smallRadius ? [
            0,
            -radius
        ] : [
            -(0, _mathJs.pi),
            radius - (0, _mathJs.pi)
        ]);
    });
var _cartesianJs = require("../cartesian.js");
var _circleJs = require("../circle.js");
var _mathJs = require("../math.js");
var _pointEqualJs = require("../pointEqual.js");
var _pointEqualJsDefault = parcelHelpers.interopDefault(_pointEqualJs);
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);

},{"../cartesian.js":"4Lw8W","../circle.js":"b6BNx","../math.js":"8TMeU","../pointEqual.js":"5FEbl","./index.js":"bCtcN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5auAi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>clipRectangle);
var _mathJs = require("../math.js");
var _bufferJs = require("./buffer.js");
var _bufferJsDefault = parcelHelpers.interopDefault(_bufferJs);
var _lineJs = require("./line.js");
var _lineJsDefault = parcelHelpers.interopDefault(_lineJs);
var _rejoinJs = require("./rejoin.js");
var _rejoinJsDefault = parcelHelpers.interopDefault(_rejoinJs);
var _d3Array = require("d3-array");
var clipMax = 1e9, clipMin = -clipMax;
function clipRectangle(x0, y0, x1, y1) {
    function visible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
    }
    function interpolate(from, to, direction, stream) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
        while ((a = (a + direction + 4) % 4) !== a1);
        else stream.point(to[0], to[1]);
    }
    function corner(p, direction) {
        return (0, _mathJs.abs)(p[0] - x0) < (0, _mathJs.epsilon) ? direction > 0 ? 0 : 3 : (0, _mathJs.abs)(p[0] - x1) < (0, _mathJs.epsilon) ? direction > 0 ? 2 : 1 : (0, _mathJs.abs)(p[1] - y0) < (0, _mathJs.epsilon) ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
    }
    function compareIntersection(a, b) {
        return comparePoint(a.x, b.x);
    }
    function comparePoint(a, b) {
        var ca = corner(a, 1), cb = corner(b, 1);
        return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
    return function(stream) {
        var activeStream = stream, bufferStream = (0, _bufferJsDefault.default)(), segments, polygon, ring, x__, y__, v__, x_, y_, v_, first, clean;
        var clipStream = {
            point: point,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: polygonStart,
            polygonEnd: polygonEnd
        };
        function point(x, y) {
            if (visible(x, y)) activeStream.point(x, y);
        }
        function polygonInside() {
            var winding = 0;
            for(var i = 0, n = polygon.length; i < n; ++i)for(var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j){
                a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
                if (a1 <= y1) {
                    if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
                } else if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
            }
            return winding;
        }
        // Buffer geometry within a polygon and then clip it en masse.
        function polygonStart() {
            activeStream = bufferStream, segments = [], polygon = [], clean = true;
        }
        function polygonEnd() {
            var startInside = polygonInside(), cleanInside = clean && startInside, visible = (segments = (0, _d3Array.merge)(segments)).length;
            if (cleanInside || visible) {
                stream.polygonStart();
                if (cleanInside) {
                    stream.lineStart();
                    interpolate(null, null, 1, stream);
                    stream.lineEnd();
                }
                if (visible) (0, _rejoinJsDefault.default)(segments, compareIntersection, startInside, interpolate, stream);
                stream.polygonEnd();
            }
            activeStream = stream, segments = polygon = ring = null;
        }
        function lineStart() {
            clipStream.point = linePoint;
            if (polygon) polygon.push(ring = []);
            first = true;
            v_ = false;
            x_ = y_ = NaN;
        }
        // TODO rather than special-case polygons, simply handle them separately.
        // Ideally, coincident intersection points should be jittered to avoid
        // clipping issues.
        function lineEnd() {
            if (segments) {
                linePoint(x__, y__);
                if (v__ && v_) bufferStream.rejoin();
                segments.push(bufferStream.result());
            }
            clipStream.point = point;
            if (v_) activeStream.lineEnd();
        }
        function linePoint(x, y) {
            var v = visible(x, y);
            if (polygon) ring.push([
                x,
                y
            ]);
            if (first) {
                x__ = x, y__ = y, v__ = v;
                first = false;
                if (v) {
                    activeStream.lineStart();
                    activeStream.point(x, y);
                }
            } else if (v && v_) activeStream.point(x, y);
            else {
                var a = [
                    x_ = Math.max(clipMin, Math.min(clipMax, x_)),
                    y_ = Math.max(clipMin, Math.min(clipMax, y_))
                ], b = [
                    x = Math.max(clipMin, Math.min(clipMax, x)),
                    y = Math.max(clipMin, Math.min(clipMax, y))
                ];
                if ((0, _lineJsDefault.default)(a, b, x0, y0, x1, y1)) {
                    if (!v_) {
                        activeStream.lineStart();
                        activeStream.point(a[0], a[1]);
                    }
                    activeStream.point(b[0], b[1]);
                    if (!v) activeStream.lineEnd();
                    clean = false;
                } else if (v) {
                    activeStream.lineStart();
                    activeStream.point(x, y);
                    clean = false;
                }
            }
            x_ = x, y_ = y, v_ = v;
        }
        return clipStream;
    };
}

},{"../math.js":"8TMeU","./buffer.js":"6MwC2","./line.js":"kBMdG","./rejoin.js":"4Cpqb","d3-array":"1yX2W","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kBMdG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(a, b, x0, y0, x1, y1) {
        var ax = a[0], ay = a[1], bx = b[0], by = b[1], t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
        r = x0 - ax;
        if (!dx && r > 0) return;
        r /= dx;
        if (dx < 0) {
            if (r < t0) return;
            if (r < t1) t1 = r;
        } else if (dx > 0) {
            if (r > t1) return;
            if (r > t0) t0 = r;
        }
        r = x1 - ax;
        if (!dx && r < 0) return;
        r /= dx;
        if (dx < 0) {
            if (r > t1) return;
            if (r > t0) t0 = r;
        } else if (dx > 0) {
            if (r < t0) return;
            if (r < t1) t1 = r;
        }
        r = y0 - ay;
        if (!dy && r > 0) return;
        r /= dy;
        if (dy < 0) {
            if (r < t0) return;
            if (r < t1) t1 = r;
        } else if (dy > 0) {
            if (r > t1) return;
            if (r > t0) t0 = r;
        }
        r = y1 - ay;
        if (!dy && r < 0) return;
        r /= dy;
        if (dy < 0) {
            if (r > t1) return;
            if (r > t0) t0 = r;
        } else if (dy > 0) {
            if (r < t0) return;
            if (r < t1) t1 = r;
        }
        if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
        if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
        return true;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4rtBH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>graticule);
parcelHelpers.export(exports, "graticule10", ()=>graticule10);
var _d3Array = require("d3-array");
var _mathJs = require("./math.js");
function graticuleX(y0, y1, dy) {
    var y = (0, _d3Array.range)(y0, y1 - (0, _mathJs.epsilon), dy).concat(y1);
    return function(x) {
        return y.map(function(y) {
            return [
                x,
                y
            ];
        });
    };
}
function graticuleY(x0, x1, dx) {
    var x = (0, _d3Array.range)(x0, x1 - (0, _mathJs.epsilon), dx).concat(x1);
    return function(y) {
        return x.map(function(x) {
            return [
                x,
                y
            ];
        });
    };
}
function graticule() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
        return {
            type: "MultiLineString",
            coordinates: lines()
        };
    }
    function lines() {
        return (0, _d3Array.range)((0, _mathJs.ceil)(X0 / DX) * DX, X1, DX).map(X).concat((0, _d3Array.range)((0, _mathJs.ceil)(Y0 / DY) * DY, Y1, DY).map(Y)).concat((0, _d3Array.range)((0, _mathJs.ceil)(x0 / dx) * dx, x1, dx).filter(function(x) {
            return (0, _mathJs.abs)(x % DX) > (0, _mathJs.epsilon);
        }).map(x)).concat((0, _d3Array.range)((0, _mathJs.ceil)(y0 / dy) * dy, y1, dy).filter(function(y) {
            return (0, _mathJs.abs)(y % DY) > (0, _mathJs.epsilon);
        }).map(y));
    }
    graticule.lines = function() {
        return lines().map(function(coordinates) {
            return {
                type: "LineString",
                coordinates: coordinates
            };
        });
    };
    graticule.outline = function() {
        return {
            type: "Polygon",
            coordinates: [
                X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))
            ]
        };
    };
    graticule.extent = function(_) {
        if (!arguments.length) return graticule.extentMinor();
        return graticule.extentMajor(_).extentMinor(_);
    };
    graticule.extentMajor = function(_) {
        if (!arguments.length) return [
            [
                X0,
                Y0
            ],
            [
                X1,
                Y1
            ]
        ];
        X0 = +_[0][0], X1 = +_[1][0];
        Y0 = +_[0][1], Y1 = +_[1][1];
        if (X0 > X1) _ = X0, X0 = X1, X1 = _;
        if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
        return graticule.precision(precision);
    };
    graticule.extentMinor = function(_) {
        if (!arguments.length) return [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
        x0 = +_[0][0], x1 = +_[1][0];
        y0 = +_[0][1], y1 = +_[1][1];
        if (x0 > x1) _ = x0, x0 = x1, x1 = _;
        if (y0 > y1) _ = y0, y0 = y1, y1 = _;
        return graticule.precision(precision);
    };
    graticule.step = function(_) {
        if (!arguments.length) return graticule.stepMinor();
        return graticule.stepMajor(_).stepMinor(_);
    };
    graticule.stepMajor = function(_) {
        if (!arguments.length) return [
            DX,
            DY
        ];
        DX = +_[0], DY = +_[1];
        return graticule;
    };
    graticule.stepMinor = function(_) {
        if (!arguments.length) return [
            dx,
            dy
        ];
        dx = +_[0], dy = +_[1];
        return graticule;
    };
    graticule.precision = function(_) {
        if (!arguments.length) return precision;
        precision = +_;
        x = graticuleX(y0, y1, 90);
        y = graticuleY(x0, x1, precision);
        X = graticuleX(Y0, Y1, 90);
        Y = graticuleY(X0, X1, precision);
        return graticule;
    };
    return graticule.extentMajor([
        [
            -180,
            -90 + (0, _mathJs.epsilon)
        ],
        [
            180,
            90 - (0, _mathJs.epsilon)
        ]
    ]).extentMinor([
        [
            -180,
            -80 - (0, _mathJs.epsilon)
        ],
        [
            180,
            80 + (0, _mathJs.epsilon)
        ]
    ]);
}
function graticule10() {
    return graticule()();
}

},{"d3-array":"1yX2W","./math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lnhfi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(projection, context) {
        let digits = 3, pointRadius = 4.5, projectionStream, contextStream;
        function path(object) {
            if (object) {
                if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
                (0, _streamJsDefault.default)(object, projectionStream(contextStream));
            }
            return contextStream.result();
        }
        path.area = function(object) {
            (0, _streamJsDefault.default)(object, projectionStream((0, _areaJsDefault.default)));
            return (0, _areaJsDefault.default).result();
        };
        path.measure = function(object) {
            (0, _streamJsDefault.default)(object, projectionStream((0, _measureJsDefault.default)));
            return (0, _measureJsDefault.default).result();
        };
        path.bounds = function(object) {
            (0, _streamJsDefault.default)(object, projectionStream((0, _boundsJsDefault.default)));
            return (0, _boundsJsDefault.default).result();
        };
        path.centroid = function(object) {
            (0, _streamJsDefault.default)(object, projectionStream((0, _centroidJsDefault.default)));
            return (0, _centroidJsDefault.default).result();
        };
        path.projection = function(_) {
            if (!arguments.length) return projection;
            projectionStream = _ == null ? (projection = null, _identityJsDefault.default) : (projection = _).stream;
            return path;
        };
        path.context = function(_) {
            if (!arguments.length) return context;
            contextStream = _ == null ? (context = null, new (0, _stringJsDefault.default)(digits)) : new (0, _contextJsDefault.default)(context = _);
            if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
            return path;
        };
        path.pointRadius = function(_) {
            if (!arguments.length) return pointRadius;
            pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
            return path;
        };
        path.digits = function(_) {
            if (!arguments.length) return digits;
            if (_ == null) digits = null;
            else {
                const d = Math.floor(_);
                if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);
                digits = d;
            }
            if (context === null) contextStream = new (0, _stringJsDefault.default)(digits);
            return path;
        };
        return path.projection(projection).digits(digits).context(context);
    });
var _identityJs = require("../identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _streamJs = require("../stream.js");
var _streamJsDefault = parcelHelpers.interopDefault(_streamJs);
var _areaJs = require("./area.js");
var _areaJsDefault = parcelHelpers.interopDefault(_areaJs);
var _boundsJs = require("./bounds.js");
var _boundsJsDefault = parcelHelpers.interopDefault(_boundsJs);
var _centroidJs = require("./centroid.js");
var _centroidJsDefault = parcelHelpers.interopDefault(_centroidJs);
var _contextJs = require("./context.js");
var _contextJsDefault = parcelHelpers.interopDefault(_contextJs);
var _measureJs = require("./measure.js");
var _measureJsDefault = parcelHelpers.interopDefault(_measureJs);
var _stringJs = require("./string.js");
var _stringJsDefault = parcelHelpers.interopDefault(_stringJs);

},{"../identity.js":"buAWG","../stream.js":"lpKxD","./area.js":"esEys","./bounds.js":"6inQS","./centroid.js":"hWsH1","./context.js":"bBEPS","./measure.js":"kxo1f","./string.js":"7QFxp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"buAWG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (x)=>x;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"esEys":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _mathJs = require("../math.js");
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var areaSum = new (0, _d3Array.Adder)(), areaRingSum = new (0, _d3Array.Adder)(), x00, y00, x0, y0;
var areaStream = {
    point: (0, _noopJsDefault.default),
    lineStart: (0, _noopJsDefault.default),
    lineEnd: (0, _noopJsDefault.default),
    polygonStart: function() {
        areaStream.lineStart = areaRingStart;
        areaStream.lineEnd = areaRingEnd;
    },
    polygonEnd: function() {
        areaStream.lineStart = areaStream.lineEnd = areaStream.point = (0, _noopJsDefault.default);
        areaSum.add((0, _mathJs.abs)(areaRingSum));
        areaRingSum = new (0, _d3Array.Adder)();
    },
    result: function() {
        var area = areaSum / 2;
        areaSum = new (0, _d3Array.Adder)();
        return area;
    }
};
function areaRingStart() {
    areaStream.point = areaPointFirst;
}
function areaPointFirst(x, y) {
    areaStream.point = areaPoint;
    x00 = x0 = x, y00 = y0 = y;
}
function areaPoint(x, y) {
    areaRingSum.add(y0 * x - x0 * y);
    x0 = x, y0 = y;
}
function areaRingEnd() {
    areaPoint(x00, y00);
}
exports.default = areaStream;

},{"d3-array":"1yX2W","../math.js":"8TMeU","../noop.js":"bROOt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6inQS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var x0 = Infinity, y0 = x0, x1 = -x0, y1 = x1;
var boundsStream = {
    point: boundsPoint,
    lineStart: (0, _noopJsDefault.default),
    lineEnd: (0, _noopJsDefault.default),
    polygonStart: (0, _noopJsDefault.default),
    polygonEnd: (0, _noopJsDefault.default),
    result: function() {
        var bounds = [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
        x1 = y1 = -(y0 = x0 = Infinity);
        return bounds;
    }
};
function boundsPoint(x, y) {
    if (x < x0) x0 = x;
    if (x > x1) x1 = x;
    if (y < y0) y0 = y;
    if (y > y1) y1 = y;
}
exports.default = boundsStream;

},{"../noop.js":"bROOt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hWsH1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
// TODO Enforce positive area for exterior, negative area for interior?
var X0 = 0, Y0 = 0, Z0 = 0, X1 = 0, Y1 = 0, Z1 = 0, X2 = 0, Y2 = 0, Z2 = 0, x00, y00, x0, y0;
var centroidStream = {
    point: centroidPoint,
    lineStart: centroidLineStart,
    lineEnd: centroidLineEnd,
    polygonStart: function() {
        centroidStream.lineStart = centroidRingStart;
        centroidStream.lineEnd = centroidRingEnd;
    },
    polygonEnd: function() {
        centroidStream.point = centroidPoint;
        centroidStream.lineStart = centroidLineStart;
        centroidStream.lineEnd = centroidLineEnd;
    },
    result: function() {
        var centroid = Z2 ? [
            X2 / Z2,
            Y2 / Z2
        ] : Z1 ? [
            X1 / Z1,
            Y1 / Z1
        ] : Z0 ? [
            X0 / Z0,
            Y0 / Z0
        ] : [
            NaN,
            NaN
        ];
        X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
        return centroid;
    }
};
function centroidPoint(x, y) {
    X0 += x;
    Y0 += y;
    ++Z0;
}
function centroidLineStart() {
    centroidStream.point = centroidPointFirstLine;
}
function centroidPointFirstLine(x, y) {
    centroidStream.point = centroidPointLine;
    centroidPoint(x0 = x, y0 = y);
}
function centroidPointLine(x, y) {
    var dx = x - x0, dy = y - y0, z = (0, _mathJs.sqrt)(dx * dx + dy * dy);
    X1 += z * (x0 + x) / 2;
    Y1 += z * (y0 + y) / 2;
    Z1 += z;
    centroidPoint(x0 = x, y0 = y);
}
function centroidLineEnd() {
    centroidStream.point = centroidPoint;
}
function centroidRingStart() {
    centroidStream.point = centroidPointFirstRing;
}
function centroidRingEnd() {
    centroidPointRing(x00, y00);
}
function centroidPointFirstRing(x, y) {
    centroidStream.point = centroidPointRing;
    centroidPoint(x00 = x0 = x, y00 = y0 = y);
}
function centroidPointRing(x, y) {
    var dx = x - x0, dy = y - y0, z = (0, _mathJs.sqrt)(dx * dx + dy * dy);
    X1 += z * (x0 + x) / 2;
    Y1 += z * (y0 + y) / 2;
    Z1 += z;
    z = y0 * x - x0 * y;
    X2 += z * (x0 + x);
    Y2 += z * (y0 + y);
    Z2 += z * 3;
    centroidPoint(x0 = x, y0 = y);
}
exports.default = centroidStream;

},{"../math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bBEPS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>PathContext);
var _mathJs = require("../math.js");
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
function PathContext(context) {
    this._context = context;
}
PathContext.prototype = {
    _radius: 4.5,
    pointRadius: function(_) {
        return this._radius = _, this;
    },
    polygonStart: function() {
        this._line = 0;
    },
    polygonEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line === 0) this._context.closePath();
        this._point = NaN;
    },
    point: function(x, y) {
        switch(this._point){
            case 0:
                this._context.moveTo(x, y);
                this._point = 1;
                break;
            case 1:
                this._context.lineTo(x, y);
                break;
            default:
                this._context.moveTo(x + this._radius, y);
                this._context.arc(x, y, this._radius, 0, (0, _mathJs.tau));
                break;
        }
    },
    result: (0, _noopJsDefault.default)
};

},{"../math.js":"8TMeU","../noop.js":"bROOt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kxo1f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Array = require("d3-array");
var _mathJs = require("../math.js");
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var lengthSum = new (0, _d3Array.Adder)(), lengthRing, x00, y00, x0, y0;
var lengthStream = {
    point: (0, _noopJsDefault.default),
    lineStart: function() {
        lengthStream.point = lengthPointFirst;
    },
    lineEnd: function() {
        if (lengthRing) lengthPoint(x00, y00);
        lengthStream.point = (0, _noopJsDefault.default);
    },
    polygonStart: function() {
        lengthRing = true;
    },
    polygonEnd: function() {
        lengthRing = null;
    },
    result: function() {
        var length = +lengthSum;
        lengthSum = new (0, _d3Array.Adder)();
        return length;
    }
};
function lengthPointFirst(x, y) {
    lengthStream.point = lengthPoint;
    x00 = x0 = x, y00 = y0 = y;
}
function lengthPoint(x, y) {
    x0 -= x, y0 -= y;
    lengthSum.add((0, _mathJs.sqrt)(x0 * x0 + y0 * y0));
    x0 = x, y0 = y;
}
exports.default = lengthStream;

},{"d3-array":"1yX2W","../math.js":"8TMeU","../noop.js":"bROOt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7QFxp":[function(require,module,exports) {
// Simple caching for constant-radius points.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
let cacheDigits, cacheAppend, cacheRadius, cacheCircle;
class PathString {
    constructor(digits){
        this._append = digits == null ? append : appendRound(digits);
        this._radius = 4.5;
        this._ = "";
    }
    pointRadius(_) {
        this._radius = +_;
        return this;
    }
    polygonStart() {
        this._line = 0;
    }
    polygonEnd() {
        this._line = NaN;
    }
    lineStart() {
        this._point = 0;
    }
    lineEnd() {
        if (this._line === 0) this._ += "Z";
        this._point = NaN;
    }
    point(x, y) {
        switch(this._point){
            case 0:
                this._append`M${x},${y}`;
                this._point = 1;
                break;
            case 1:
                this._append`L${x},${y}`;
                break;
            default:
                this._append`M${x},${y}`;
                if (this._radius !== cacheRadius || this._append !== cacheAppend) {
                    const r = this._radius;
                    const s = this._;
                    this._ = ""; // stash the old string so we can cache the circle path fragment
                    this._append`m0,${r}a${r},${r} 0 1,1 0,${-2 * r}a${r},${r} 0 1,1 0,${2 * r}z`;
                    cacheRadius = r;
                    cacheAppend = this._append;
                    cacheCircle = this._;
                    this._ = s;
                }
                this._ += cacheCircle;
                break;
        }
    }
    result() {
        const result = this._;
        this._ = "";
        return result.length ? result : null;
    }
}
exports.default = PathString;
function append(strings) {
    let i = 1;
    this._ += strings[0];
    for(const j = strings.length; i < j; ++i)this._ += arguments[i] + strings[i];
}
function appendRound(digits) {
    const d = Math.floor(digits);
    if (!(d >= 0)) throw new RangeError(`invalid digits: ${digits}`);
    if (d > 15) return append;
    if (d !== cacheDigits) {
        const k = 10 ** d;
        cacheDigits = d;
        cacheAppend = function append(strings) {
            let i = 1;
            this._ += strings[0];
            for(const j = strings.length; i < j; ++i)this._ += Math.round(arguments[i] * k) / k + strings[i];
        };
    }
    return cacheAppend;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bvQZA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        return (0, _conicEqualAreaJsDefault.default)().parallels([
            29.5,
            45.5
        ]).scale(1070).translate([
            480,
            250
        ]).rotate([
            96,
            0
        ]).center([
            -0.6,
            38.7
        ]);
    });
var _conicEqualAreaJs = require("./conicEqualArea.js");
var _conicEqualAreaJsDefault = parcelHelpers.interopDefault(_conicEqualAreaJs);

},{"./conicEqualArea.js":"cfI84","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cfI84":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conicEqualAreaRaw", ()=>conicEqualAreaRaw);
parcelHelpers.export(exports, "default", ()=>function() {
        return (0, _conicJs.conicProjection)(conicEqualAreaRaw).scale(155.424).center([
            0,
            33.6442
        ]);
    });
var _mathJs = require("../math.js");
var _conicJs = require("./conic.js");
var _cylindricalEqualAreaJs = require("./cylindricalEqualArea.js");
function conicEqualAreaRaw(y0, y1) {
    var sy0 = (0, _mathJs.sin)(y0), n = (sy0 + (0, _mathJs.sin)(y1)) / 2;
    // Are the parallels symmetrical around the Equator?
    if ((0, _mathJs.abs)(n) < (0, _mathJs.epsilon)) return (0, _cylindricalEqualAreaJs.cylindricalEqualAreaRaw)(y0);
    var c = 1 + sy0 * (2 * n - sy0), r0 = (0, _mathJs.sqrt)(c) / n;
    function project(x, y) {
        var r = (0, _mathJs.sqrt)(c - 2 * n * (0, _mathJs.sin)(y)) / n;
        return [
            r * (0, _mathJs.sin)(x *= n),
            r0 - r * (0, _mathJs.cos)(x)
        ];
    }
    project.invert = function(x, y) {
        var r0y = r0 - y, l = (0, _mathJs.atan2)(x, (0, _mathJs.abs)(r0y)) * (0, _mathJs.sign)(r0y);
        if (r0y * n < 0) l -= (0, _mathJs.pi) * (0, _mathJs.sign)(x) * (0, _mathJs.sign)(r0y);
        return [
            l / n,
            (0, _mathJs.asin)((c - (x * x + r0y * r0y) * n * n) / (2 * n))
        ];
    };
    return project;
}

},{"../math.js":"8TMeU","./conic.js":"alzWk","./cylindricalEqualArea.js":"dlobY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"alzWk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conicProjection", ()=>conicProjection);
var _mathJs = require("../math.js");
var _indexJs = require("./index.js");
function conicProjection(projectAt) {
    var phi0 = 0, phi1 = (0, _mathJs.pi) / 3, m = (0, _indexJs.projectionMutator)(projectAt), p = m(phi0, phi1);
    p.parallels = function(_) {
        return arguments.length ? m(phi0 = _[0] * (0, _mathJs.radians), phi1 = _[1] * (0, _mathJs.radians)) : [
            phi0 * (0, _mathJs.degrees),
            phi1 * (0, _mathJs.degrees)
        ];
    };
    return p;
}

},{"../math.js":"8TMeU","./index.js":"gSlbx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gSlbx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>projection);
parcelHelpers.export(exports, "projectionMutator", ()=>projectionMutator);
var _antimeridianJs = require("../clip/antimeridian.js");
var _antimeridianJsDefault = parcelHelpers.interopDefault(_antimeridianJs);
var _circleJs = require("../clip/circle.js");
var _circleJsDefault = parcelHelpers.interopDefault(_circleJs);
var _rectangleJs = require("../clip/rectangle.js");
var _rectangleJsDefault = parcelHelpers.interopDefault(_rectangleJs);
var _composeJs = require("../compose.js");
var _composeJsDefault = parcelHelpers.interopDefault(_composeJs);
var _identityJs = require("../identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _mathJs = require("../math.js");
var _rotationJs = require("../rotation.js");
var _transformJs = require("../transform.js");
var _fitJs = require("./fit.js");
var _resampleJs = require("./resample.js");
var _resampleJsDefault = parcelHelpers.interopDefault(_resampleJs);
var transformRadians = (0, _transformJs.transformer)({
    point: function(x, y) {
        this.stream.point(x * (0, _mathJs.radians), y * (0, _mathJs.radians));
    }
});
function transformRotate(rotate) {
    return (0, _transformJs.transformer)({
        point: function(x, y) {
            var r = rotate(x, y);
            return this.stream.point(r[0], r[1]);
        }
    });
}
function scaleTranslate(k, dx, dy, sx, sy) {
    function transform(x, y) {
        x *= sx;
        y *= sy;
        return [
            dx + k * x,
            dy - k * y
        ];
    }
    transform.invert = function(x, y) {
        return [
            (x - dx) / k * sx,
            (dy - y) / k * sy
        ];
    };
    return transform;
}
function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
    if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);
    var cosAlpha = (0, _mathJs.cos)(alpha), sinAlpha = (0, _mathJs.sin)(alpha), a = cosAlpha * k, b = sinAlpha * k, ai = cosAlpha / k, bi = sinAlpha / k, ci = (sinAlpha * dy - cosAlpha * dx) / k, fi = (sinAlpha * dx + cosAlpha * dy) / k;
    function transform(x, y) {
        x *= sx;
        y *= sy;
        return [
            a * x - b * y + dx,
            dy - b * x - a * y
        ];
    }
    transform.invert = function(x, y) {
        return [
            sx * (ai * x - bi * y + ci),
            sy * (fi - bi * x - ai * y)
        ];
    };
    return transform;
}
function projection(project) {
    return projectionMutator(function() {
        return project;
    })();
}
function projectionMutator(projectAt) {
    var project, k = 150, x = 480, y = 250, lambda = 0, phi = 0, deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, alpha = 0, sx = 1, sy = 1, theta = null, preclip = (0, _antimeridianJsDefault.default), x0 = null, y0, x1, y1, postclip = (0, _identityJsDefault.default), delta2 = 0.5, projectResample, projectTransform, projectRotateTransform, cache, cacheStream;
    function projection(point) {
        return projectRotateTransform(point[0] * (0, _mathJs.radians), point[1] * (0, _mathJs.radians));
    }
    function invert(point) {
        point = projectRotateTransform.invert(point[0], point[1]);
        return point && [
            point[0] * (0, _mathJs.degrees),
            point[1] * (0, _mathJs.degrees)
        ];
    }
    projection.stream = function(stream) {
        return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
    };
    projection.preclip = function(_) {
        return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
    };
    projection.postclip = function(_) {
        return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
    };
    projection.clipAngle = function(_) {
        return arguments.length ? (preclip = +_ ? (0, _circleJsDefault.default)(theta = _ * (0, _mathJs.radians)) : (theta = null, _antimeridianJsDefault.default), reset()) : theta * (0, _mathJs.degrees);
    };
    projection.clipExtent = function(_) {
        return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, _identityJsDefault.default) : (0, _rectangleJsDefault.default)(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
    };
    projection.scale = function(_) {
        return arguments.length ? (k = +_, recenter()) : k;
    };
    projection.translate = function(_) {
        return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [
            x,
            y
        ];
    };
    projection.center = function(_) {
        return arguments.length ? (lambda = _[0] % 360 * (0, _mathJs.radians), phi = _[1] % 360 * (0, _mathJs.radians), recenter()) : [
            lambda * (0, _mathJs.degrees),
            phi * (0, _mathJs.degrees)
        ];
    };
    projection.rotate = function(_) {
        return arguments.length ? (deltaLambda = _[0] % 360 * (0, _mathJs.radians), deltaPhi = _[1] % 360 * (0, _mathJs.radians), deltaGamma = _.length > 2 ? _[2] % 360 * (0, _mathJs.radians) : 0, recenter()) : [
            deltaLambda * (0, _mathJs.degrees),
            deltaPhi * (0, _mathJs.degrees),
            deltaGamma * (0, _mathJs.degrees)
        ];
    };
    projection.angle = function(_) {
        return arguments.length ? (alpha = _ % 360 * (0, _mathJs.radians), recenter()) : alpha * (0, _mathJs.degrees);
    };
    projection.reflectX = function(_) {
        return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
    };
    projection.reflectY = function(_) {
        return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
    };
    projection.precision = function(_) {
        return arguments.length ? (projectResample = (0, _resampleJsDefault.default)(projectTransform, delta2 = _ * _), reset()) : (0, _mathJs.sqrt)(delta2);
    };
    projection.fitExtent = function(extent, object) {
        return (0, _fitJs.fitExtent)(projection, extent, object);
    };
    projection.fitSize = function(size, object) {
        return (0, _fitJs.fitSize)(projection, size, object);
    };
    projection.fitWidth = function(width, object) {
        return (0, _fitJs.fitWidth)(projection, width, object);
    };
    projection.fitHeight = function(height, object) {
        return (0, _fitJs.fitHeight)(projection, height, object);
    };
    function recenter() {
        var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)), transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);
        rotate = (0, _rotationJs.rotateRadians)(deltaLambda, deltaPhi, deltaGamma);
        projectTransform = (0, _composeJsDefault.default)(project, transform);
        projectRotateTransform = (0, _composeJsDefault.default)(rotate, projectTransform);
        projectResample = (0, _resampleJsDefault.default)(projectTransform, delta2);
        return reset();
    }
    function reset() {
        cache = cacheStream = null;
        return projection;
    }
    return function() {
        project = projectAt.apply(this, arguments);
        projection.invert = project.invert && invert;
        return recenter();
    };
}

},{"../clip/antimeridian.js":"5Pn7h","../clip/circle.js":"6JGCr","../clip/rectangle.js":"5auAi","../compose.js":"lJD5n","../identity.js":"buAWG","../math.js":"8TMeU","../rotation.js":"g2pLL","../transform.js":"AaiPA","./fit.js":"fNXsS","./resample.js":"l8WqU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"AaiPA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(methods) {
        return {
            stream: transformer(methods)
        };
    });
parcelHelpers.export(exports, "transformer", ()=>transformer);
function transformer(methods) {
    return function(stream) {
        var s = new TransformStream;
        for(var key in methods)s[key] = methods[key];
        s.stream = stream;
        return s;
    };
}
function TransformStream() {}
TransformStream.prototype = {
    constructor: TransformStream,
    point: function(x, y) {
        this.stream.point(x, y);
    },
    sphere: function() {
        this.stream.sphere();
    },
    lineStart: function() {
        this.stream.lineStart();
    },
    lineEnd: function() {
        this.stream.lineEnd();
    },
    polygonStart: function() {
        this.stream.polygonStart();
    },
    polygonEnd: function() {
        this.stream.polygonEnd();
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fNXsS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fitExtent", ()=>fitExtent);
parcelHelpers.export(exports, "fitSize", ()=>fitSize);
parcelHelpers.export(exports, "fitWidth", ()=>fitWidth);
parcelHelpers.export(exports, "fitHeight", ()=>fitHeight);
var _streamJs = require("../stream.js");
var _streamJsDefault = parcelHelpers.interopDefault(_streamJs);
var _boundsJs = require("../path/bounds.js");
var _boundsJsDefault = parcelHelpers.interopDefault(_boundsJs);
function fit(projection, fitBounds, object) {
    var clip = projection.clipExtent && projection.clipExtent();
    projection.scale(150).translate([
        0,
        0
    ]);
    if (clip != null) projection.clipExtent(null);
    (0, _streamJsDefault.default)(object, projection.stream((0, _boundsJsDefault.default)));
    fitBounds((0, _boundsJsDefault.default).result());
    if (clip != null) projection.clipExtent(clip);
    return projection;
}
function fitExtent(projection, extent, object) {
    return fit(projection, function(b) {
        var w = extent[1][0] - extent[0][0], h = extent[1][1] - extent[0][1], k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])), x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2, y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
        projection.scale(150 * k).translate([
            x,
            y
        ]);
    }, object);
}
function fitSize(projection, size, object) {
    return fitExtent(projection, [
        [
            0,
            0
        ],
        size
    ], object);
}
function fitWidth(projection, width, object) {
    return fit(projection, function(b) {
        var w = +width, k = w / (b[1][0] - b[0][0]), x = (w - k * (b[1][0] + b[0][0])) / 2, y = -k * b[0][1];
        projection.scale(150 * k).translate([
            x,
            y
        ]);
    }, object);
}
function fitHeight(projection, height, object) {
    return fit(projection, function(b) {
        var h = +height, k = h / (b[1][1] - b[0][1]), x = -k * b[0][0], y = (h - k * (b[1][1] + b[0][1])) / 2;
        projection.scale(150 * k).translate([
            x,
            y
        ]);
    }, object);
}

},{"../stream.js":"lpKxD","../path/bounds.js":"6inQS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l8WqU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(project, delta2) {
        return +delta2 ? resample(project, delta2) : resampleNone(project);
    });
var _cartesianJs = require("../cartesian.js");
var _mathJs = require("../math.js");
var _transformJs = require("../transform.js");
var maxDepth = 16, cosMinDistance = (0, _mathJs.cos)(30 * (0, _mathJs.radians)); // cos(minimum angular distance)
function resampleNone(project) {
    return (0, _transformJs.transformer)({
        point: function(x, y) {
            x = project(x, y);
            this.stream.point(x[0], x[1]);
        }
    });
}
function resample(project, delta2) {
    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
        var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
        if (d2 > 4 * delta2 && depth--) {
            var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = (0, _mathJs.sqrt)(a * a + b * b + c * c), phi2 = (0, _mathJs.asin)(c /= m), lambda2 = (0, _mathJs.abs)((0, _mathJs.abs)(c) - 1) < (0, _mathJs.epsilon) || (0, _mathJs.abs)(lambda0 - lambda1) < (0, _mathJs.epsilon) ? (lambda0 + lambda1) / 2 : (0, _mathJs.atan2)(b, a), p = project(lambda2, phi2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
            if (dz * dz / d2 > delta2 // perpendicular projected distance
             || (0, _mathJs.abs)((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
             || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
                resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
                stream.point(x2, y2);
                resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
            }
        }
    }
    return function(stream) {
        var lambda00, x00, y00, a00, b00, c00, lambda0, x0, y0, a0, b0, c0; // previous point
        var resampleStream = {
            point: point,
            lineStart: lineStart,
            lineEnd: lineEnd,
            polygonStart: function() {
                stream.polygonStart();
                resampleStream.lineStart = ringStart;
            },
            polygonEnd: function() {
                stream.polygonEnd();
                resampleStream.lineStart = lineStart;
            }
        };
        function point(x, y) {
            x = project(x, y);
            stream.point(x[0], x[1]);
        }
        function lineStart() {
            x0 = NaN;
            resampleStream.point = linePoint;
            stream.lineStart();
        }
        function linePoint(lambda, phi) {
            var c = (0, _cartesianJs.cartesian)([
                lambda,
                phi
            ]), p = project(lambda, phi);
            resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
            stream.point(x0, y0);
        }
        function lineEnd() {
            resampleStream.point = point;
            stream.lineEnd();
        }
        function ringStart() {
            lineStart();
            resampleStream.point = ringPoint;
            resampleStream.lineEnd = ringEnd;
        }
        function ringPoint(lambda, phi) {
            linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
            resampleStream.point = linePoint;
        }
        function ringEnd() {
            resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
            resampleStream.lineEnd = lineEnd;
            lineEnd();
        }
        return resampleStream;
    };
}

},{"../cartesian.js":"4Lw8W","../math.js":"8TMeU","../transform.js":"AaiPA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dlobY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cylindricalEqualAreaRaw", ()=>cylindricalEqualAreaRaw);
var _mathJs = require("../math.js");
function cylindricalEqualAreaRaw(phi0) {
    var cosPhi0 = (0, _mathJs.cos)(phi0);
    function forward(lambda, phi) {
        return [
            lambda * cosPhi0,
            (0, _mathJs.sin)(phi) / cosPhi0
        ];
    }
    forward.invert = function(x, y) {
        return [
            x / cosPhi0,
            (0, _mathJs.asin)(y * cosPhi0)
        ];
    };
    return forward;
}

},{"../math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5OqWl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// A composite projection for the United States, configured by default for
// 960×500. The projection also works quite well at 960×600 if you change the
// scale to 1285 and adjust the translate accordingly. The set of standard
// parallels for each region comes from USGS, which is published here:
// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
parcelHelpers.export(exports, "default", ()=>function() {
        var cache, cacheStream, lower48 = (0, _albersJsDefault.default)(), lower48Point, alaska = (0, _conicEqualAreaJsDefault.default)().rotate([
            154,
            0
        ]).center([
            -2,
            58.5
        ]).parallels([
            55,
            65
        ]), alaskaPoint, hawaii = (0, _conicEqualAreaJsDefault.default)().rotate([
            157,
            0
        ]).center([
            -3,
            19.9
        ]).parallels([
            8,
            18
        ]), hawaiiPoint, point, pointStream = {
            point: function(x, y) {
                point = [
                    x,
                    y
                ];
            }
        };
        function albersUsa(coordinates) {
            var x = coordinates[0], y = coordinates[1];
            return point = null, (lower48Point.point(x, y), point) || (alaskaPoint.point(x, y), point) || (hawaiiPoint.point(x, y), point);
        }
        albersUsa.invert = function(coordinates) {
            var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
            return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
        };
        albersUsa.stream = function(stream) {
            return cache && cacheStream === stream ? cache : cache = multiplex([
                lower48.stream(cacheStream = stream),
                alaska.stream(stream),
                hawaii.stream(stream)
            ]);
        };
        albersUsa.precision = function(_) {
            if (!arguments.length) return lower48.precision();
            lower48.precision(_), alaska.precision(_), hawaii.precision(_);
            return reset();
        };
        albersUsa.scale = function(_) {
            if (!arguments.length) return lower48.scale();
            lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
            return albersUsa.translate(lower48.translate());
        };
        albersUsa.translate = function(_) {
            if (!arguments.length) return lower48.translate();
            var k = lower48.scale(), x = +_[0], y = +_[1];
            lower48Point = lower48.translate(_).clipExtent([
                [
                    x - 0.455 * k,
                    y - 0.238 * k
                ],
                [
                    x + 0.455 * k,
                    y + 0.238 * k
                ]
            ]).stream(pointStream);
            alaskaPoint = alaska.translate([
                x - 0.307 * k,
                y + 0.201 * k
            ]).clipExtent([
                [
                    x - 0.425 * k + (0, _mathJs.epsilon),
                    y + 0.120 * k + (0, _mathJs.epsilon)
                ],
                [
                    x - 0.214 * k - (0, _mathJs.epsilon),
                    y + 0.234 * k - (0, _mathJs.epsilon)
                ]
            ]).stream(pointStream);
            hawaiiPoint = hawaii.translate([
                x - 0.205 * k,
                y + 0.212 * k
            ]).clipExtent([
                [
                    x - 0.214 * k + (0, _mathJs.epsilon),
                    y + 0.166 * k + (0, _mathJs.epsilon)
                ],
                [
                    x - 0.115 * k - (0, _mathJs.epsilon),
                    y + 0.234 * k - (0, _mathJs.epsilon)
                ]
            ]).stream(pointStream);
            return reset();
        };
        albersUsa.fitExtent = function(extent, object) {
            return (0, _fitJs.fitExtent)(albersUsa, extent, object);
        };
        albersUsa.fitSize = function(size, object) {
            return (0, _fitJs.fitSize)(albersUsa, size, object);
        };
        albersUsa.fitWidth = function(width, object) {
            return (0, _fitJs.fitWidth)(albersUsa, width, object);
        };
        albersUsa.fitHeight = function(height, object) {
            return (0, _fitJs.fitHeight)(albersUsa, height, object);
        };
        function reset() {
            cache = cacheStream = null;
            return albersUsa;
        }
        return albersUsa.scale(1070);
    });
var _mathJs = require("../math.js");
var _albersJs = require("./albers.js");
var _albersJsDefault = parcelHelpers.interopDefault(_albersJs);
var _conicEqualAreaJs = require("./conicEqualArea.js");
var _conicEqualAreaJsDefault = parcelHelpers.interopDefault(_conicEqualAreaJs);
var _fitJs = require("./fit.js");
// The projections must have mutually exclusive clip regions on the sphere,
// as this will avoid emitting interleaving lines and polygons.
function multiplex(streams) {
    var n = streams.length;
    return {
        point: function(x, y) {
            var i = -1;
            while(++i < n)streams[i].point(x, y);
        },
        sphere: function() {
            var i = -1;
            while(++i < n)streams[i].sphere();
        },
        lineStart: function() {
            var i = -1;
            while(++i < n)streams[i].lineStart();
        },
        lineEnd: function() {
            var i = -1;
            while(++i < n)streams[i].lineEnd();
        },
        polygonStart: function() {
            var i = -1;
            while(++i < n)streams[i].polygonStart();
        },
        polygonEnd: function() {
            var i = -1;
            while(++i < n)streams[i].polygonEnd();
        }
    };
}

},{"../math.js":"8TMeU","./albers.js":"bvQZA","./conicEqualArea.js":"cfI84","./fit.js":"fNXsS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7sbiV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "azimuthalEqualAreaRaw", ()=>azimuthalEqualAreaRaw);
parcelHelpers.export(exports, "default", ()=>function() {
        return (0, _indexJsDefault.default)(azimuthalEqualAreaRaw).scale(124.75).clipAngle(179.999);
    });
var _mathJs = require("../math.js");
var _azimuthalJs = require("./azimuthal.js");
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var azimuthalEqualAreaRaw = (0, _azimuthalJs.azimuthalRaw)(function(cxcy) {
    return (0, _mathJs.sqrt)(2 / (1 + cxcy));
});
azimuthalEqualAreaRaw.invert = (0, _azimuthalJs.azimuthalInvert)(function(z) {
    return 2 * (0, _mathJs.asin)(z / 2);
});

},{"../math.js":"8TMeU","./azimuthal.js":"fB58X","./index.js":"gSlbx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fB58X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "azimuthalRaw", ()=>azimuthalRaw);
parcelHelpers.export(exports, "azimuthalInvert", ()=>azimuthalInvert);
var _mathJs = require("../math.js");
function azimuthalRaw(scale) {
    return function(x, y) {
        var cx = (0, _mathJs.cos)(x), cy = (0, _mathJs.cos)(y), k = scale(cx * cy);
        if (k === Infinity) return [
            2,
            0
        ];
        return [
            k * cy * (0, _mathJs.sin)(x),
            k * (0, _mathJs.sin)(y)
        ];
    };
}
function azimuthalInvert(angle) {
    return function(x, y) {
        var z = (0, _mathJs.sqrt)(x * x + y * y), c = angle(z), sc = (0, _mathJs.sin)(c), cc = (0, _mathJs.cos)(c);
        return [
            (0, _mathJs.atan2)(x * sc, z * cc),
            (0, _mathJs.asin)(z && y * sc / z)
        ];
    };
}

},{"../math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Cc8n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "azimuthalEquidistantRaw", ()=>azimuthalEquidistantRaw);
parcelHelpers.export(exports, "default", ()=>function() {
        return (0, _indexJsDefault.default)(azimuthalEquidistantRaw).scale(79.4188).clipAngle(179.999);
    });
var _mathJs = require("../math.js");
var _azimuthalJs = require("./azimuthal.js");
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var azimuthalEquidistantRaw = (0, _azimuthalJs.azimuthalRaw)(function(c) {
    return (c = (0, _mathJs.acos)(c)) && c / (0, _mathJs.sin)(c);
});
azimuthalEquidistantRaw.invert = (0, _azimuthalJs.azimuthalInvert)(function(z) {
    return z;
});

},{"../math.js":"8TMeU","./azimuthal.js":"fB58X","./index.js":"gSlbx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"33sbR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conicConformalRaw", ()=>conicConformalRaw);
parcelHelpers.export(exports, "default", ()=>function() {
        return (0, _conicJs.conicProjection)(conicConformalRaw).scale(109.5).parallels([
            30,
            30
        ]);
    });
var _mathJs = require("../math.js");
var _conicJs = require("./conic.js");
var _mercatorJs = require("./mercator.js");
function tany(y) {
    return (0, _mathJs.tan)(((0, _mathJs.halfPi) + y) / 2);
}
function conicConformalRaw(y0, y1) {
    var cy0 = (0, _mathJs.cos)(y0), n = y0 === y1 ? (0, _mathJs.sin)(y0) : (0, _mathJs.log)(cy0 / (0, _mathJs.cos)(y1)) / (0, _mathJs.log)(tany(y1) / tany(y0)), f = cy0 * (0, _mathJs.pow)(tany(y0), n) / n;
    if (!n) return 0, _mercatorJs.mercatorRaw;
    function project(x, y) {
        if (f > 0) {
            if (y < -(0, _mathJs.halfPi) + (0, _mathJs.epsilon)) y = -(0, _mathJs.halfPi) + (0, _mathJs.epsilon);
        } else if (y > (0, _mathJs.halfPi) - (0, _mathJs.epsilon)) y = (0, _mathJs.halfPi) - (0, _mathJs.epsilon);
        var r = f / (0, _mathJs.pow)(tany(y), n);
        return [
            r * (0, _mathJs.sin)(n * x),
            f - r * (0, _mathJs.cos)(n * x)
        ];
    }
    project.invert = function(x, y) {
        var fy = f - y, r = (0, _mathJs.sign)(n) * (0, _mathJs.sqrt)(x * x + fy * fy), l = (0, _mathJs.atan2)(x, (0, _mathJs.abs)(fy)) * (0, _mathJs.sign)(fy);
        if (fy * n < 0) l -= (0, _mathJs.pi) * (0, _mathJs.sign)(x) * (0, _mathJs.sign)(fy);
        return [
            l / n,
            2 * (0, _mathJs.atan)((0, _mathJs.pow)(f / r, 1 / n)) - (0, _mathJs.halfPi)
        ];
    };
    return project;
}

},{"../math.js":"8TMeU","./conic.js":"alzWk","./mercator.js":"eCRDH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eCRDH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mercatorRaw", ()=>mercatorRaw);
parcelHelpers.export(exports, "default", ()=>function() {
        return mercatorProjection(mercatorRaw).scale(961 / (0, _mathJs.tau));
    });
parcelHelpers.export(exports, "mercatorProjection", ()=>mercatorProjection);
var _mathJs = require("../math.js");
var _rotationJs = require("../rotation.js");
var _rotationJsDefault = parcelHelpers.interopDefault(_rotationJs);
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
function mercatorRaw(lambda, phi) {
    return [
        lambda,
        (0, _mathJs.log)((0, _mathJs.tan)(((0, _mathJs.halfPi) + phi) / 2))
    ];
}
mercatorRaw.invert = function(x, y) {
    return [
        x,
        2 * (0, _mathJs.atan)((0, _mathJs.exp)(y)) - (0, _mathJs.halfPi)
    ];
};
function mercatorProjection(project) {
    var m = (0, _indexJsDefault.default)(project), center = m.center, scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, x0 = null, y0, x1, y1; // clip extent
    m.scale = function(_) {
        return arguments.length ? (scale(_), reclip()) : scale();
    };
    m.translate = function(_) {
        return arguments.length ? (translate(_), reclip()) : translate();
    };
    m.center = function(_) {
        return arguments.length ? (center(_), reclip()) : center();
    };
    m.clipExtent = function(_) {
        return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [
            [
                x0,
                y0
            ],
            [
                x1,
                y1
            ]
        ];
    };
    function reclip() {
        var k = (0, _mathJs.pi) * scale(), t = m((0, _rotationJsDefault.default)(m.rotate()).invert([
            0,
            0
        ]));
        return clipExtent(x0 == null ? [
            [
                t[0] - k,
                t[1] - k
            ],
            [
                t[0] + k,
                t[1] + k
            ]
        ] : project === mercatorRaw ? [
            [
                Math.max(t[0] - k, x0),
                y0
            ],
            [
                Math.min(t[0] + k, x1),
                y1
            ]
        ] : [
            [
                x0,
                Math.max(t[1] - k, y0)
            ],
            [
                x1,
                Math.min(t[1] + k, y1)
            ]
        ]);
    }
    return reclip();
}

},{"../math.js":"8TMeU","../rotation.js":"g2pLL","./index.js":"gSlbx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fOM7Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "conicEquidistantRaw", ()=>conicEquidistantRaw);
parcelHelpers.export(exports, "default", ()=>function() {
        return (0, _conicJs.conicProjection)(conicEquidistantRaw).scale(131.154).center([
            0,
            13.9389
        ]);
    });
var _mathJs = require("../math.js");
var _conicJs = require("./conic.js");
var _equirectangularJs = require("./equirectangular.js");
function conicEquidistantRaw(y0, y1) {
    var cy0 = (0, _mathJs.cos)(y0), n = y0 === y1 ? (0, _mathJs.sin)(y0) : (cy0 - (0, _mathJs.cos)(y1)) / (y1 - y0), g = cy0 / n + y0;
    if ((0, _mathJs.abs)(n) < (0, _mathJs.epsilon)) return 0, _equirectangularJs.equirectangularRaw;
    function project(x, y) {
        var gy = g - y, nx = n * x;
        return [
            gy * (0, _mathJs.sin)(nx),
            g - gy * (0, _mathJs.cos)(nx)
        ];
    }
    project.invert = function(x, y) {
        var gy = g - y, l = (0, _mathJs.atan2)(x, (0, _mathJs.abs)(gy)) * (0, _mathJs.sign)(gy);
        if (gy * n < 0) l -= (0, _mathJs.pi) * (0, _mathJs.sign)(x) * (0, _mathJs.sign)(gy);
        return [
            l / n,
            g - (0, _mathJs.sign)(n) * (0, _mathJs.sqrt)(x * x + gy * gy)
        ];
    };
    return project;
}

},{"../math.js":"8TMeU","./conic.js":"alzWk","./equirectangular.js":"5qip6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5qip6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "equirectangularRaw", ()=>equirectangularRaw);
parcelHelpers.export(exports, "default", ()=>function() {
        return (0, _indexJsDefault.default)(equirectangularRaw).scale(152.63);
    });
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
function equirectangularRaw(lambda, phi) {
    return [
        lambda,
        phi
    ];
}
equirectangularRaw.invert = equirectangularRaw;

},{"./index.js":"gSlbx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"67lWy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "equalEarthRaw", ()=>equalEarthRaw);
parcelHelpers.export(exports, "default", ()=>function() {
        return (0, _indexJsDefault.default)(equalEarthRaw).scale(177.158);
    });
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _mathJs = require("../math.js");
var A1 = 1.340264, A2 = -0.081106, A3 = 0.000893, A4 = 0.003796, M = (0, _mathJs.sqrt)(3) / 2, iterations = 12;
function equalEarthRaw(lambda, phi) {
    var l = (0, _mathJs.asin)(M * (0, _mathJs.sin)(phi)), l2 = l * l, l6 = l2 * l2 * l2;
    return [
        lambda * (0, _mathJs.cos)(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),
        l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))
    ];
}
equalEarthRaw.invert = function(x, y) {
    var l = y, l2 = l * l, l6 = l2 * l2 * l2;
    for(var i = 0, delta, fy, fpy; i < iterations; ++i){
        fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
        fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
        l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
        if ((0, _mathJs.abs)(delta) < (0, _mathJs.epsilon2)) break;
    }
    return [
        M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / (0, _mathJs.cos)(l),
        (0, _mathJs.asin)((0, _mathJs.sin)(l) / M)
    ];
};

},{"./index.js":"gSlbx","../math.js":"8TMeU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"auBfP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "gnomonicRaw", ()=>gnomonicRaw);
parcelHelpers.export(exports, "default", ()=>function() {
        return (0, _indexJsDefault.default)(gnomonicRaw).scale(144.049).clipAngle(60);
    });
var _mathJs = require("../math.js");
var _azimuthalJs = require("./azimuthal.js");
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
function gnomonicRaw(x, y) {
    var cy = (0, _mathJs.cos)(y), k = (0, _mathJs.cos)(x) * cy;
    return [
        cy * (0, _mathJs.sin)(x) / k,
        (0, _mathJs.sin)(y) / k
    ];
}
gnomonicRaw.invert = (0, _azimuthalJs.azimuthalInvert)((0, _mathJs.atan));

},{"../math.js":"8TMeU","./azimuthal.js":"fB58X","./index.js":"gSlbx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1rxyV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "orthographicRaw", ()=>orthographicRaw);
parcelHelpers.export(exports, "default", ()=>function() {
        return (0, _indexJsDefault.default)(orthographicRaw).scale(249.5).clipAngle(90 + (0, _mathJs.epsilon));
    });
var _mathJs = require("../math.js");
var _azimuthalJs = require("./azimuthal.js");
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
function orthographicRaw(x, y) {
    return [
        (0, _mathJs.cos)(y) * (0, _mathJs.sin)(x),
        (0, _mathJs.sin)(y)
    ];
}
orthographicRaw.invert = (0, _azimuthalJs.azimuthalInvert)((0, _mathJs.asin));

},{"../math.js":"8TMeU","./azimuthal.js":"fB58X","./index.js":"gSlbx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lsi6D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stereographicRaw", ()=>stereographicRaw);
parcelHelpers.export(exports, "default", ()=>function() {
        return (0, _indexJsDefault.default)(stereographicRaw).scale(250).clipAngle(142);
    });
var _mathJs = require("../math.js");
var _azimuthalJs = require("./azimuthal.js");
var _indexJs = require("./index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
function stereographicRaw(x, y) {
    var cy = (0, _mathJs.cos)(y), k = 1 + (0, _mathJs.cos)(x) * cy;
    return [
        cy * (0, _mathJs.sin)(x) / k,
        (0, _mathJs.sin)(y) / k
    ];
}
stereographicRaw.invert = (0, _azimuthalJs.azimuthalInvert)(function(z) {
    return 2 * (0, _mathJs.atan)(z);
});

},{"../math.js":"8TMeU","./azimuthal.js":"fB58X","./index.js":"gSlbx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6KvxX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "transverseMercatorRaw", ()=>transverseMercatorRaw);
parcelHelpers.export(exports, "default", ()=>function() {
        var m = (0, _mercatorJs.mercatorProjection)(transverseMercatorRaw), center = m.center, rotate = m.rotate;
        m.center = function(_) {
            return arguments.length ? center([
                -_[1],
                _[0]
            ]) : (_ = center(), [
                _[1],
                -_[0]
            ]);
        };
        m.rotate = function(_) {
            return arguments.length ? rotate([
                _[0],
                _[1],
                _.length > 2 ? _[2] + 90 : 90
            ]) : (_ = rotate(), [
                _[0],
                _[1],
                _[2] - 90
            ]);
        };
        return rotate([
            0,
            0,
            90
        ]).scale(159.155);
    });
var _mathJs = require("../math.js");
var _mercatorJs = require("./mercator.js");
function transverseMercatorRaw(lambda, phi) {
    return [
        (0, _mathJs.log)((0, _mathJs.tan)(((0, _mathJs.halfPi) + phi) / 2)),
        -lambda
    ];
}
transverseMercatorRaw.invert = function(x, y) {
    return [
        -y,
        2 * (0, _mathJs.atan)((0, _mathJs.exp)(x)) - (0, _mathJs.halfPi)
    ];
};

},{"../math.js":"8TMeU","./mercator.js":"eCRDH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ffs4h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cluster", ()=>(0, _clusterJsDefault.default));
parcelHelpers.export(exports, "hierarchy", ()=>(0, _indexJsDefault.default));
parcelHelpers.export(exports, "Node", ()=>(0, _indexJs.Node));
parcelHelpers.export(exports, "pack", ()=>(0, _indexJsDefault1.default));
parcelHelpers.export(exports, "packSiblings", ()=>(0, _siblingsJsDefault.default));
parcelHelpers.export(exports, "packEnclose", ()=>(0, _encloseJsDefault.default));
parcelHelpers.export(exports, "partition", ()=>(0, _partitionJsDefault.default));
parcelHelpers.export(exports, "stratify", ()=>(0, _stratifyJsDefault.default));
parcelHelpers.export(exports, "tree", ()=>(0, _treeJsDefault.default));
parcelHelpers.export(exports, "treemap", ()=>(0, _indexJsDefault2.default));
parcelHelpers.export(exports, "treemapBinary", ()=>(0, _binaryJsDefault.default));
parcelHelpers.export(exports, "treemapDice", ()=>(0, _diceJsDefault.default));
parcelHelpers.export(exports, "treemapSlice", ()=>(0, _sliceJsDefault.default));
parcelHelpers.export(exports, "treemapSliceDice", ()=>(0, _sliceDiceJsDefault.default));
parcelHelpers.export(exports, "treemapSquarify", ()=>(0, _squarifyJsDefault.default));
parcelHelpers.export(exports, "treemapResquarify", ()=>(0, _resquarifyJsDefault.default));
var _clusterJs = require("./cluster.js");
var _clusterJsDefault = parcelHelpers.interopDefault(_clusterJs);
var _indexJs = require("./hierarchy/index.js");
var _indexJsDefault = parcelHelpers.interopDefault(_indexJs);
var _indexJs1 = require("./pack/index.js");
var _indexJsDefault1 = parcelHelpers.interopDefault(_indexJs1);
var _siblingsJs = require("./pack/siblings.js");
var _siblingsJsDefault = parcelHelpers.interopDefault(_siblingsJs);
var _encloseJs = require("./pack/enclose.js");
var _encloseJsDefault = parcelHelpers.interopDefault(_encloseJs);
var _partitionJs = require("./partition.js");
var _partitionJsDefault = parcelHelpers.interopDefault(_partitionJs);
var _stratifyJs = require("./stratify.js");
var _stratifyJsDefault = parcelHelpers.interopDefault(_stratifyJs);
var _treeJs = require("./tree.js");
var _treeJsDefault = parcelHelpers.interopDefault(_treeJs);
var _indexJs2 = require("./treemap/index.js");
var _indexJsDefault2 = parcelHelpers.interopDefault(_indexJs2);
var _binaryJs = require("./treemap/binary.js");
var _binaryJsDefault = parcelHelpers.interopDefault(_binaryJs);
var _diceJs = require("./treemap/dice.js");
var _diceJsDefault = parcelHelpers.interopDefault(_diceJs);
var _sliceJs = require("./treemap/slice.js");
var _sliceJsDefault = parcelHelpers.interopDefault(_sliceJs);
var _sliceDiceJs = require("./treemap/sliceDice.js");
var _sliceDiceJsDefault = parcelHelpers.interopDefault(_sliceDiceJs);
var _squarifyJs = require("./treemap/squarify.js");
var _squarifyJsDefault = parcelHelpers.interopDefault(_squarifyJs);
var _resquarifyJs = require("./treemap/resquarify.js");
var _resquarifyJsDefault = parcelHelpers.interopDefault(_resquarifyJs);

},{"./cluster.js":"fCBIC","./hierarchy/index.js":false,"./pack/index.js":false,"./pack/siblings.js":false,"./pack/enclose.js":false,"./partition.js":false,"./stratify.js":"hMDLq","./tree.js":false,"./treemap/index.js":false,"./treemap/binary.js":false,"./treemap/dice.js":false,"./treemap/slice.js":false,"./treemap/sliceDice.js":false,"./treemap/squarify.js":false,"./treemap/resquarify.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fCBIC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        var separation = defaultSeparation, dx = 1, dy = 1, nodeSize = false;
        function cluster(root) {
            var previousNode, x = 0;
            // First walk, computing the initial x & y values.
            root.eachAfter(function(node) {
                var children = node.children;
                if (children) {
                    node.x = meanX(children);
                    node.y = maxY(children);
                } else {
                    node.x = previousNode ? x += separation(node, previousNode) : 0;
                    node.y = 0;
                    previousNode = node;
                }
            });
            var left = leafLeft(root), right = leafRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
            // Second walk, normalizing x & y to the desired size.
            return root.eachAfter(nodeSize ? function(node) {
                node.x = (node.x - root.x) * dx;
                node.y = (root.y - node.y) * dy;
            } : function(node) {
                node.x = (node.x - x0) / (x1 - x0) * dx;
                node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
            });
        }
        cluster.separation = function(x) {
            return arguments.length ? (separation = x, cluster) : separation;
        };
        cluster.size = function(x) {
            return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : nodeSize ? null : [
                dx,
                dy
            ];
        };
        cluster.nodeSize = function(x) {
            return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : nodeSize ? [
                dx,
                dy
            ] : null;
        };
        return cluster;
    });
function defaultSeparation(a, b) {
    return a.parent === b.parent ? 1 : 2;
}
function meanX(children) {
    return children.reduce(meanXReduce, 0) / children.length;
}
function meanXReduce(x, c) {
    return x + c.x;
}
function maxY(children) {
    return 1 + children.reduce(maxYReduce, 0);
}
function maxYReduce(y, c) {
    return Math.max(y, c.y);
}
function leafLeft(node) {
    var children;
    while(children = node.children)node = children[0];
    return node;
}
function leafRight(node) {
    var children;
    while(children = node.children)node = children[children.length - 1];
    return node;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dhu0L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>hierarchy);
parcelHelpers.export(exports, "computeHeight", ()=>computeHeight);
parcelHelpers.export(exports, "Node", ()=>Node);
var _countJs = require("./count.js");
var _countJsDefault = parcelHelpers.interopDefault(_countJs);
var _eachJs = require("./each.js");
var _eachJsDefault = parcelHelpers.interopDefault(_eachJs);
var _eachBeforeJs = require("./eachBefore.js");
var _eachBeforeJsDefault = parcelHelpers.interopDefault(_eachBeforeJs);
var _eachAfterJs = require("./eachAfter.js");
var _eachAfterJsDefault = parcelHelpers.interopDefault(_eachAfterJs);
var _findJs = require("./find.js");
var _findJsDefault = parcelHelpers.interopDefault(_findJs);
var _sumJs = require("./sum.js");
var _sumJsDefault = parcelHelpers.interopDefault(_sumJs);
var _sortJs = require("./sort.js");
var _sortJsDefault = parcelHelpers.interopDefault(_sortJs);
var _pathJs = require("./path.js");
var _pathJsDefault = parcelHelpers.interopDefault(_pathJs);
var _ancestorsJs = require("./ancestors.js");
var _ancestorsJsDefault = parcelHelpers.interopDefault(_ancestorsJs);
var _descendantsJs = require("./descendants.js");
var _descendantsJsDefault = parcelHelpers.interopDefault(_descendantsJs);
var _leavesJs = require("./leaves.js");
var _leavesJsDefault = parcelHelpers.interopDefault(_leavesJs);
var _linksJs = require("./links.js");
var _linksJsDefault = parcelHelpers.interopDefault(_linksJs);
var _iteratorJs = require("./iterator.js");
var _iteratorJsDefault = parcelHelpers.interopDefault(_iteratorJs);
function hierarchy(data, children) {
    if (data instanceof Map) {
        data = [
            undefined,
            data
        ];
        if (children === undefined) children = mapChildren;
    } else if (children === undefined) children = objectChildren;
    var root = new Node(data), node, nodes = [
        root
    ], child, childs, i, n;
    while(node = nodes.pop())if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {
        node.children = childs;
        for(i = n - 1; i >= 0; --i){
            nodes.push(child = childs[i] = new Node(childs[i]));
            child.parent = node;
            child.depth = node.depth + 1;
        }
    }
    return root.eachBefore(computeHeight);
}
function node_copy() {
    return hierarchy(this).eachBefore(copyData);
}
function objectChildren(d) {
    return d.children;
}
function mapChildren(d) {
    return Array.isArray(d) ? d[1] : null;
}
function copyData(node) {
    if (node.data.value !== undefined) node.value = node.data.value;
    node.data = node.data.data;
}
function computeHeight(node) {
    var height = 0;
    do node.height = height;
    while ((node = node.parent) && node.height < ++height);
}
function Node(data) {
    this.data = data;
    this.depth = this.height = 0;
    this.parent = null;
}
Node.prototype = hierarchy.prototype = {
    constructor: Node,
    count: (0, _countJsDefault.default),
    each: (0, _eachJsDefault.default),
    eachAfter: (0, _eachAfterJsDefault.default),
    eachBefore: (0, _eachBeforeJsDefault.default),
    find: (0, _findJsDefault.default),
    sum: (0, _sumJsDefault.default),
    sort: (0, _sortJsDefault.default),
    path: (0, _pathJsDefault.default),
    ancestors: (0, _ancestorsJsDefault.default),
    descendants: (0, _descendantsJsDefault.default),
    leaves: (0, _leavesJsDefault.default),
    links: (0, _linksJsDefault.default),
    copy: node_copy,
    [Symbol.iterator]: (0, _iteratorJsDefault.default)
};

},{"./count.js":"d2mnh","./each.js":"6syzK","./eachBefore.js":"gyWQ5","./eachAfter.js":"9cRTr","./find.js":"jqiE6","./sum.js":"1vi3r","./sort.js":"f2orR","./path.js":"5UvUd","./ancestors.js":"61qy3","./descendants.js":"gUlPE","./leaves.js":"czIpN","./links.js":"65v1r","./iterator.js":"cBZOh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d2mnh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        return this.eachAfter(count);
    });
function count(node) {
    var sum = 0, children = node.children, i = children && children.length;
    if (!i) sum = 1;
    else while(--i >= 0)sum += children[i].value;
    node.value = sum;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6syzK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(callback, that) {
        let index = -1;
        for (const node of this)callback.call(that, node, ++index, this);
        return this;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gyWQ5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(callback, that) {
        var node = this, nodes = [
            node
        ], children, i, index = -1;
        while(node = nodes.pop()){
            callback.call(that, node, ++index, this);
            if (children = node.children) for(i = children.length - 1; i >= 0; --i)nodes.push(children[i]);
        }
        return this;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9cRTr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(callback, that) {
        var node = this, nodes = [
            node
        ], next = [], children, i, n, index = -1;
        while(node = nodes.pop()){
            next.push(node);
            if (children = node.children) for(i = 0, n = children.length; i < n; ++i)nodes.push(children[i]);
        }
        while(node = next.pop())callback.call(that, node, ++index, this);
        return this;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jqiE6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(callback, that) {
        let index = -1;
        for (const node of this){
            if (callback.call(that, node, ++index, this)) return node;
        }
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1vi3r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(value) {
        return this.eachAfter(function(node) {
            var sum = +value(node.data) || 0, children = node.children, i = children && children.length;
            while(--i >= 0)sum += children[i].value;
            node.value = sum;
        });
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f2orR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(compare) {
        return this.eachBefore(function(node) {
            if (node.children) node.children.sort(compare);
        });
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5UvUd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(end) {
        var start = this, ancestor = leastCommonAncestor(start, end), nodes = [
            start
        ];
        while(start !== ancestor){
            start = start.parent;
            nodes.push(start);
        }
        var k = nodes.length;
        while(end !== ancestor){
            nodes.splice(k, 0, end);
            end = end.parent;
        }
        return nodes;
    });
function leastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = a.ancestors(), bNodes = b.ancestors(), c = null;
    a = aNodes.pop();
    b = bNodes.pop();
    while(a === b){
        c = a;
        a = aNodes.pop();
        b = bNodes.pop();
    }
    return c;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"61qy3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        var node = this, nodes = [
            node
        ];
        while(node = node.parent)nodes.push(node);
        return nodes;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gUlPE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        return Array.from(this);
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"czIpN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        var leaves = [];
        this.eachBefore(function(node) {
            if (!node.children) leaves.push(node);
        });
        return leaves;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"65v1r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        var root = this, links = [];
        root.each(function(node) {
            if (node !== root) links.push({
                source: node.parent,
                target: node
            });
        });
        return links;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cBZOh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function*() {
        var node = this, current, next = [
            node
        ], children, i, n;
        do {
            current = next.reverse(), next = [];
            while(node = current.pop()){
                yield node;
                if (children = node.children) for(i = 0, n = children.length; i < n; ++i)next.push(children[i]);
            }
        }while (next.length);
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hMDLq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        var id = defaultId, parentId = defaultParentId, path;
        function stratify(data) {
            var nodes = Array.from(data), currentId = id, currentParentId = parentId, n, d, i, root, parent, node, nodeId, nodeKey, nodeByKey = new Map;
            if (path != null) {
                const I = nodes.map((d, i)=>normalize(path(d, i, data)));
                const P = I.map(parentof);
                const S = new Set(I).add("");
                for (const i of P)if (!S.has(i)) {
                    S.add(i);
                    I.push(i);
                    P.push(parentof(i));
                    nodes.push(imputed);
                }
                currentId = (_, i)=>I[i];
                currentParentId = (_, i)=>P[i];
            }
            for(i = 0, n = nodes.length; i < n; ++i){
                d = nodes[i], node = nodes[i] = new (0, _indexJs.Node)(d);
                if ((nodeId = currentId(d, i, data)) != null && (nodeId += "")) {
                    nodeKey = node.id = nodeId;
                    nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node);
                }
                if ((nodeId = currentParentId(d, i, data)) != null && (nodeId += "")) node.parent = nodeId;
            }
            for(i = 0; i < n; ++i){
                node = nodes[i];
                if (nodeId = node.parent) {
                    parent = nodeByKey.get(nodeId);
                    if (!parent) throw new Error("missing: " + nodeId);
                    if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
                    if (parent.children) parent.children.push(node);
                    else parent.children = [
                        node
                    ];
                    node.parent = parent;
                } else {
                    if (root) throw new Error("multiple roots");
                    root = node;
                }
            }
            if (!root) throw new Error("no root");
            // When imputing internal nodes, only introduce roots if needed.
            // Then replace the imputed marker data with null.
            if (path != null) {
                while(root.data === imputed && root.children.length === 1)root = root.children[0], --n;
                for(let i = nodes.length - 1; i >= 0; --i){
                    node = nodes[i];
                    if (node.data !== imputed) break;
                    node.data = null;
                }
            }
            root.parent = preroot;
            root.eachBefore(function(node) {
                node.depth = node.parent.depth + 1;
                --n;
            }).eachBefore((0, _indexJs.computeHeight));
            root.parent = null;
            if (n > 0) throw new Error("cycle");
            return root;
        }
        stratify.id = function(x) {
            return arguments.length ? (id = (0, _accessorsJs.optional)(x), stratify) : id;
        };
        stratify.parentId = function(x) {
            return arguments.length ? (parentId = (0, _accessorsJs.optional)(x), stratify) : parentId;
        };
        stratify.path = function(x) {
            return arguments.length ? (path = (0, _accessorsJs.optional)(x), stratify) : path;
        };
        return stratify;
    });
var _accessorsJs = require("./accessors.js");
var _indexJs = require("./hierarchy/index.js");
var preroot = {
    depth: -1
}, ambiguous = {}, imputed = {};
function defaultId(d) {
    return d.id;
}
function defaultParentId(d) {
    return d.parentId;
}
// To normalize a path, we coerce to a string, strip the trailing slash if any
// (as long as the trailing slash is not immediately preceded by another slash),
// and add leading slash if missing.
function normalize(path) {
    path = `${path}`;
    let i = path.length;
    if (slash(path, i - 1) && !slash(path, i - 2)) path = path.slice(0, -1);
    return path[0] === "/" ? path : `/${path}`;
}
// Walk backwards to find the first slash that is not the leading slash, e.g.:
// "/foo/bar" ⇥ "/foo", "/foo" ⇥ "/", "/" ↦ "". (The root is special-cased
// because the id of the root must be a truthy value.)
function parentof(path) {
    let i = path.length;
    if (i < 2) return "";
    while(--i > 1)if (slash(path, i)) break;
    return path.slice(0, i);
}
// Slashes can be escaped; to determine whether a slash is a path delimiter, we
// count the number of preceding backslashes escaping the forward slash: an odd
// number indicates an escaped forward slash.
function slash(path, i) {
    if (path[i] === "/") {
        let k = 0;
        while(i > 0 && path[--i] === "\\")++k;
        if ((k & 1) === 0) return true;
    }
    return false;
}

},{"./accessors.js":"6pg0v","./hierarchy/index.js":"dhu0L","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6pg0v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "optional", ()=>optional);
parcelHelpers.export(exports, "required", ()=>required);
function optional(f) {
    return f == null ? null : required(f);
}
function required(f) {
    if (typeof f !== "function") throw new Error;
    return f;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eY3pl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Path", ()=>(0, _pathJs.Path));
parcelHelpers.export(exports, "path", ()=>(0, _pathJs.path));
parcelHelpers.export(exports, "pathRound", ()=>(0, _pathJs.pathRound));
var _pathJs = require("./path.js");

},{"./path.js":"jFeAg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jFeAg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Path", ()=>Path);
parcelHelpers.export(exports, "path", ()=>path);
parcelHelpers.export(exports, "pathRound", ()=>pathRound);
const pi = Math.PI, tau = 2 * pi, epsilon = 1e-6, tauEpsilon = tau - epsilon;
function append(strings) {
    this._ += strings[0];
    for(let i = 1, n = strings.length; i < n; ++i)this._ += arguments[i] + strings[i];
}
function appendRound(digits) {
    let d = Math.floor(digits);
    if (!(d >= 0)) throw new Error(`invalid digits: ${digits}`);
    if (d > 15) return append;
    const k = 10 ** d;
    return function(strings) {
        this._ += strings[0];
        for(let i = 1, n = strings.length; i < n; ++i)this._ += Math.round(arguments[i] * k) / k + strings[i];
    };
}
class Path {
    constructor(digits){
        this._x0 = this._y0 = this._x1 = this._y1 = null; // end of current subpath
        this._ = "";
        this._append = digits == null ? append : appendRound(digits);
    }
    moveTo(x, y) {
        this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;
    }
    closePath() {
        if (this._x1 !== null) {
            this._x1 = this._x0, this._y1 = this._y0;
            this._append`Z`;
        }
    }
    lineTo(x, y) {
        this._append`L${this._x1 = +x},${this._y1 = +y}`;
    }
    quadraticCurveTo(x1, y1, x, y) {
        this._append`Q${+x1},${+y1},${this._x1 = +x},${this._y1 = +y}`;
    }
    bezierCurveTo(x1, y1, x2, y2, x, y) {
        this._append`C${+x1},${+y1},${+x2},${+y2},${this._x1 = +x},${this._y1 = +y}`;
    }
    arcTo(x1, y1, x2, y2, r) {
        x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
        // Is the radius negative? Error.
        if (r < 0) throw new Error(`negative radius: ${r}`);
        let x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
        // Is this path empty? Move to (x1,y1).
        if (this._x1 === null) this._append`M${this._x1 = x1},${this._y1 = y1}`;
        else if (!(l01_2 > epsilon)) ;
        else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) this._append`L${this._x1 = x1},${this._y1 = y1}`;
        else {
            let x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
            // If the start tangent is not coincident with (x0,y0), line to.
            if (Math.abs(t01 - 1) > epsilon) this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;
            this._append`A${r},${r},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;
        }
    }
    arc(x, y, r, a0, a1, ccw) {
        x = +x, y = +y, r = +r, ccw = !!ccw;
        // Is the radius negative? Error.
        if (r < 0) throw new Error(`negative radius: ${r}`);
        let dx = r * Math.cos(a0), dy = r * Math.sin(a0), x0 = x + dx, y0 = y + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
        // Is this path empty? Move to (x0,y0).
        if (this._x1 === null) this._append`M${x0},${y0}`;
        else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._append`L${x0},${y0}`;
        // Is this arc empty? We’re done.
        if (!r) return;
        // Does the angle go the wrong way? Flip the direction.
        if (da < 0) da = da % tau + tau;
        // Is this a complete circle? Draw two arcs to complete the circle.
        if (da > tauEpsilon) this._append`A${r},${r},0,1,${cw},${x - dx},${y - dy}A${r},${r},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;
        else if (da > epsilon) this._append`A${r},${r},0,${+(da >= pi)},${cw},${this._x1 = x + r * Math.cos(a1)},${this._y1 = y + r * Math.sin(a1)}`;
    }
    rect(x, y, w, h) {
        this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${w = +w}v${+h}h${-w}Z`;
    }
    toString() {
        return this._;
    }
}
function path() {
    return new Path;
}
// Allow instanceof d3.path
path.prototype = Path.prototype;
function pathRound(digits = 3) {
    return new Path(+digits);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"60d0K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "randomUniform", ()=>(0, _uniformJsDefault.default));
parcelHelpers.export(exports, "randomInt", ()=>(0, _intJsDefault.default));
parcelHelpers.export(exports, "randomNormal", ()=>(0, _normalJsDefault.default));
parcelHelpers.export(exports, "randomLogNormal", ()=>(0, _logNormalJsDefault.default));
parcelHelpers.export(exports, "randomBates", ()=>(0, _batesJsDefault.default));
parcelHelpers.export(exports, "randomIrwinHall", ()=>(0, _irwinHallJsDefault.default));
parcelHelpers.export(exports, "randomExponential", ()=>(0, _exponentialJsDefault.default));
parcelHelpers.export(exports, "randomPareto", ()=>(0, _paretoJsDefault.default));
parcelHelpers.export(exports, "randomBernoulli", ()=>(0, _bernoulliJsDefault.default));
parcelHelpers.export(exports, "randomGeometric", ()=>(0, _geometricJsDefault.default));
parcelHelpers.export(exports, "randomBinomial", ()=>(0, _binomialJsDefault.default));
parcelHelpers.export(exports, "randomGamma", ()=>(0, _gammaJsDefault.default));
parcelHelpers.export(exports, "randomBeta", ()=>(0, _betaJsDefault.default));
parcelHelpers.export(exports, "randomWeibull", ()=>(0, _weibullJsDefault.default));
parcelHelpers.export(exports, "randomCauchy", ()=>(0, _cauchyJsDefault.default));
parcelHelpers.export(exports, "randomLogistic", ()=>(0, _logisticJsDefault.default));
parcelHelpers.export(exports, "randomPoisson", ()=>(0, _poissonJsDefault.default));
parcelHelpers.export(exports, "randomLcg", ()=>(0, _lcgJsDefault.default));
var _uniformJs = require("./uniform.js");
var _uniformJsDefault = parcelHelpers.interopDefault(_uniformJs);
var _intJs = require("./int.js");
var _intJsDefault = parcelHelpers.interopDefault(_intJs);
var _normalJs = require("./normal.js");
var _normalJsDefault = parcelHelpers.interopDefault(_normalJs);
var _logNormalJs = require("./logNormal.js");
var _logNormalJsDefault = parcelHelpers.interopDefault(_logNormalJs);
var _batesJs = require("./bates.js");
var _batesJsDefault = parcelHelpers.interopDefault(_batesJs);
var _irwinHallJs = require("./irwinHall.js");
var _irwinHallJsDefault = parcelHelpers.interopDefault(_irwinHallJs);
var _exponentialJs = require("./exponential.js");
var _exponentialJsDefault = parcelHelpers.interopDefault(_exponentialJs);
var _paretoJs = require("./pareto.js");
var _paretoJsDefault = parcelHelpers.interopDefault(_paretoJs);
var _bernoulliJs = require("./bernoulli.js");
var _bernoulliJsDefault = parcelHelpers.interopDefault(_bernoulliJs);
var _geometricJs = require("./geometric.js");
var _geometricJsDefault = parcelHelpers.interopDefault(_geometricJs);
var _binomialJs = require("./binomial.js");
var _binomialJsDefault = parcelHelpers.interopDefault(_binomialJs);
var _gammaJs = require("./gamma.js");
var _gammaJsDefault = parcelHelpers.interopDefault(_gammaJs);
var _betaJs = require("./beta.js");
var _betaJsDefault = parcelHelpers.interopDefault(_betaJs);
var _weibullJs = require("./weibull.js");
var _weibullJsDefault = parcelHelpers.interopDefault(_weibullJs);
var _cauchyJs = require("./cauchy.js");
var _cauchyJsDefault = parcelHelpers.interopDefault(_cauchyJs);
var _logisticJs = require("./logistic.js");
var _logisticJsDefault = parcelHelpers.interopDefault(_logisticJs);
var _poissonJs = require("./poisson.js");
var _poissonJsDefault = parcelHelpers.interopDefault(_poissonJs);
var _lcgJs = require("./lcg.js");
var _lcgJsDefault = parcelHelpers.interopDefault(_lcgJs);

},{"./uniform.js":false,"./int.js":false,"./normal.js":false,"./logNormal.js":false,"./bates.js":false,"./irwinHall.js":false,"./exponential.js":false,"./pareto.js":false,"./bernoulli.js":false,"./geometric.js":false,"./binomial.js":false,"./gamma.js":false,"./beta.js":false,"./weibull.js":false,"./cauchy.js":false,"./logistic.js":false,"./poisson.js":false,"./lcg.js":"3WQiP","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3WQiP":[function(require,module,exports) {
// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>lcg);
const mul = 0x19660D;
const inc = 0x3C6EF35F;
const eps = 1 / 0x100000000;
function lcg(seed = Math.random()) {
    let state = (0 <= seed && seed < 1 ? seed / eps : Math.abs(seed)) | 0;
    return ()=>(state = mul * state + inc | 0, eps * (state >>> 0));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"UQ8g3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scaleBand", ()=>(0, _bandJsDefault.default));
parcelHelpers.export(exports, "scalePoint", ()=>(0, _bandJs.point));
parcelHelpers.export(exports, "scaleIdentity", ()=>(0, _identityJsDefault.default));
parcelHelpers.export(exports, "scaleLinear", ()=>(0, _linearJsDefault.default));
parcelHelpers.export(exports, "scaleLog", ()=>(0, _logJsDefault.default));
parcelHelpers.export(exports, "scaleSymlog", ()=>(0, _symlogJsDefault.default));
parcelHelpers.export(exports, "scaleOrdinal", ()=>(0, _ordinalJsDefault.default));
parcelHelpers.export(exports, "scaleImplicit", ()=>(0, _ordinalJs.implicit));
parcelHelpers.export(exports, "scalePow", ()=>(0, _powJsDefault.default));
parcelHelpers.export(exports, "scaleSqrt", ()=>(0, _powJs.sqrt));
parcelHelpers.export(exports, "scaleRadial", ()=>(0, _radialJsDefault.default));
parcelHelpers.export(exports, "scaleQuantile", ()=>(0, _quantileJsDefault.default));
parcelHelpers.export(exports, "scaleQuantize", ()=>(0, _quantizeJsDefault.default));
parcelHelpers.export(exports, "scaleThreshold", ()=>(0, _thresholdJsDefault.default));
parcelHelpers.export(exports, "scaleTime", ()=>(0, _timeJsDefault.default));
parcelHelpers.export(exports, "scaleUtc", ()=>(0, _utcTimeJsDefault.default));
parcelHelpers.export(exports, "scaleSequential", ()=>(0, _sequentialJsDefault.default));
parcelHelpers.export(exports, "scaleSequentialLog", ()=>(0, _sequentialJs.sequentialLog));
parcelHelpers.export(exports, "scaleSequentialPow", ()=>(0, _sequentialJs.sequentialPow));
parcelHelpers.export(exports, "scaleSequentialSqrt", ()=>(0, _sequentialJs.sequentialSqrt));
parcelHelpers.export(exports, "scaleSequentialSymlog", ()=>(0, _sequentialJs.sequentialSymlog));
parcelHelpers.export(exports, "scaleSequentialQuantile", ()=>(0, _sequentialQuantileJsDefault.default));
parcelHelpers.export(exports, "scaleDiverging", ()=>(0, _divergingJsDefault.default));
parcelHelpers.export(exports, "scaleDivergingLog", ()=>(0, _divergingJs.divergingLog));
parcelHelpers.export(exports, "scaleDivergingPow", ()=>(0, _divergingJs.divergingPow));
parcelHelpers.export(exports, "scaleDivergingSqrt", ()=>(0, _divergingJs.divergingSqrt));
parcelHelpers.export(exports, "scaleDivergingSymlog", ()=>(0, _divergingJs.divergingSymlog));
parcelHelpers.export(exports, "tickFormat", ()=>(0, _tickFormatJsDefault.default));
var _bandJs = require("./band.js");
var _bandJsDefault = parcelHelpers.interopDefault(_bandJs);
var _identityJs = require("./identity.js");
var _identityJsDefault = parcelHelpers.interopDefault(_identityJs);
var _linearJs = require("./linear.js");
var _linearJsDefault = parcelHelpers.interopDefault(_linearJs);
var _logJs = require("./log.js");
var _logJsDefault = parcelHelpers.interopDefault(_logJs);
var _symlogJs = require("./symlog.js");
var _symlogJsDefault = parcelHelpers.interopDefault(_symlogJs);
var _ordinalJs = require("./ordinal.js");
var _ordinalJsDefault = parcelHelpers.interopDefault(_ordinalJs);
var _powJs = require("./pow.js");
var _powJsDefault = parcelHelpers.interopDefault(_powJs);
var _radialJs = require("./radial.js");
var _radialJsDefault = parcelHelpers.interopDefault(_radialJs);
var _quantileJs = require("./quantile.js");
var _quantileJsDefault = parcelHelpers.interopDefault(_quantileJs);
var _quantizeJs = require("./quantize.js");
var _quantizeJsDefault = parcelHelpers.interopDefault(_quantizeJs);
var _thresholdJs = require("./threshold.js");
var _thresholdJsDefault = parcelHelpers.interopDefault(_thresholdJs);
var _timeJs = require("./time.js");
var _timeJsDefault = parcelHelpers.interopDefault(_timeJs);
var _utcTimeJs = require("./utcTime.js");
var _utcTimeJsDefault = parcelHelpers.interopDefault(_utcTimeJs);
var _sequentialJs = require("./sequential.js");
var _sequentialJsDefault = parcelHelpers.interopDefault(_sequentialJs);
var _sequentialQuantileJs = require("./sequentialQuantile.js");
var _sequentialQuantileJsDefault = parcelHelpers.interopDefault(_sequentialQuantileJs);
var _divergingJs = require("./diverging.js");
var _divergingJsDefault = parcelHelpers.interopDefault(_divergingJs);
var _tickFormatJs = require("./tickFormat.js");
var _tickFormatJsDefault = parcelHelpers.interopDefault(_tickFormatJs);

},{"./band.js":"4oI5T","./identity.js":"4MvzB","./linear.js":"lob4K","./log.js":"z4t8s","./symlog.js":"4KiG8","./ordinal.js":"hNjKg","./pow.js":"jVG8A","./radial.js":false,"./quantile.js":"cZUY5","./quantize.js":false,"./threshold.js":"f8NNx","./time.js":"7UVid","./utcTime.js":"6ufv7","./sequential.js":false,"./sequentialQuantile.js":false,"./diverging.js":"3BN2V","./tickFormat.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4oI5T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>band);
parcelHelpers.export(exports, "point", ()=>point);
var _d3Array = require("d3-array");
var _initJs = require("./init.js");
var _ordinalJs = require("./ordinal.js");
var _ordinalJsDefault = parcelHelpers.interopDefault(_ordinalJs);
function band() {
    var scale = (0, _ordinalJsDefault.default)().unknown(undefined), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
    delete scale.unknown;
    function rescale() {
        var n = domain().length, reverse = r1 < r0, start = reverse ? r1 : r0, stop = reverse ? r0 : r1;
        step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
        if (round) step = Math.floor(step);
        start += (stop - start - step * (n - paddingInner)) * align;
        bandwidth = step * (1 - paddingInner);
        if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
        var values = (0, _d3Array.range)(n).map(function(i) {
            return start + step * i;
        });
        return ordinalRange(reverse ? values.reverse() : values);
    }
    scale.domain = function(_) {
        return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.range = function(_) {
        return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [
            r0,
            r1
        ];
    };
    scale.rangeRound = function(_) {
        return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
    };
    scale.bandwidth = function() {
        return bandwidth;
    };
    scale.step = function() {
        return step;
    };
    scale.round = function(_) {
        return arguments.length ? (round = !!_, rescale()) : round;
    };
    scale.padding = function(_) {
        return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
    };
    scale.paddingInner = function(_) {
        return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
    };
    scale.paddingOuter = function(_) {
        return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
    };
    scale.align = function(_) {
        return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
    };
    scale.copy = function() {
        return band(domain(), [
            r0,
            r1
        ]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
    };
    return (0, _initJs.initRange).apply(rescale(), arguments);
}
function pointish(scale) {
    var copy = scale.copy;
    scale.padding = scale.paddingOuter;
    delete scale.paddingInner;
    delete scale.paddingOuter;
    scale.copy = function() {
        return pointish(copy());
    };
    return scale;
}
function point() {
    return pointish(band.apply(null, arguments).paddingInner(1));
}

},{"d3-array":"1yX2W","./init.js":"kp8lc","./ordinal.js":"hNjKg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kp8lc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "initRange", ()=>initRange);
parcelHelpers.export(exports, "initInterpolator", ()=>initInterpolator);
function initRange(domain, range) {
    switch(arguments.length){
        case 0:
            break;
        case 1:
            this.range(domain);
            break;
        default:
            this.range(range).domain(domain);
            break;
    }
    return this;
}
function initInterpolator(domain, interpolator) {
    switch(arguments.length){
        case 0:
            break;
        case 1:
            if (typeof domain === "function") this.interpolator(domain);
            else this.range(domain);
            break;
        default:
            this.domain(domain);
            if (typeof interpolator === "function") this.interpolator(interpolator);
            else this.range(interpolator);
            break;
    }
    return this;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hNjKg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "implicit", ()=>implicit);
parcelHelpers.export(exports, "default", ()=>ordinal);
var _d3Array = require("d3-array");
var _initJs = require("./init.js");
const implicit = Symbol("implicit");
function ordinal() {
    var index = new (0, _d3Array.InternMap)(), domain = [], range = [], unknown = implicit;
    function scale(d) {
        let i = index.get(d);
        if (i === undefined) {
            if (unknown !== implicit) return unknown;
            index.set(d, i = domain.push(d) - 1);
        }
        return range[i % range.length];
    }
    scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [], index = new (0, _d3Array.InternMap)();
        for (const value of _){
            if (index.has(value)) continue;
            index.set(value, domain.push(value) - 1);
        }
        return scale;
    };
    scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), scale) : range.slice();
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
        return ordinal(domain, range).unknown(unknown);
    };
    (0, _initJs.initRange).apply(scale, arguments);
    return scale;
}

},{"d3-array":"1yX2W","./init.js":"kp8lc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4MvzB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>identity);
var _linearJs = require("./linear.js");
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
function identity(domain) {
    var unknown;
    function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : x;
    }
    scale.invert = scale;
    scale.domain = scale.range = function(_) {
        return arguments.length ? (domain = Array.from(_, (0, _numberJsDefault.default)), scale) : domain.slice();
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
        return identity(domain).unknown(unknown);
    };
    domain = arguments.length ? Array.from(domain, (0, _numberJsDefault.default)) : [
        0,
        1
    ];
    return (0, _linearJs.linearish)(scale);
}

},{"./linear.js":"lob4K","./number.js":"k9Lyx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lob4K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "linearish", ()=>linearish);
parcelHelpers.export(exports, "default", ()=>linear);
var _d3Array = require("d3-array");
var _continuousJs = require("./continuous.js");
var _continuousJsDefault = parcelHelpers.interopDefault(_continuousJs);
var _initJs = require("./init.js");
var _tickFormatJs = require("./tickFormat.js");
var _tickFormatJsDefault = parcelHelpers.interopDefault(_tickFormatJs);
function linearish(scale) {
    var domain = scale.domain;
    scale.ticks = function(count) {
        var d = domain();
        return (0, _d3Array.ticks)(d[0], d[d.length - 1], count == null ? 10 : count);
    };
    scale.tickFormat = function(count, specifier) {
        var d = domain();
        return (0, _tickFormatJsDefault.default)(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
    };
    scale.nice = function(count) {
        if (count == null) count = 10;
        var d = domain();
        var i0 = 0;
        var i1 = d.length - 1;
        var start = d[i0];
        var stop = d[i1];
        var prestep;
        var step;
        var maxIter = 10;
        if (stop < start) {
            step = start, start = stop, stop = step;
            step = i0, i0 = i1, i1 = step;
        }
        while(maxIter-- > 0){
            step = (0, _d3Array.tickIncrement)(start, stop, count);
            if (step === prestep) {
                d[i0] = start;
                d[i1] = stop;
                return domain(d);
            } else if (step > 0) {
                start = Math.floor(start / step) * step;
                stop = Math.ceil(stop / step) * step;
            } else if (step < 0) {
                start = Math.ceil(start * step) / step;
                stop = Math.floor(stop * step) / step;
            } else break;
            prestep = step;
        }
        return scale;
    };
    return scale;
}
function linear() {
    var scale = (0, _continuousJsDefault.default)();
    scale.copy = function() {
        return (0, _continuousJs.copy)(scale, linear());
    };
    (0, _initJs.initRange).apply(scale, arguments);
    return linearish(scale);
}

},{"d3-array":"1yX2W","./continuous.js":"1LsCM","./init.js":"kp8lc","./tickFormat.js":"ahQef","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1LsCM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "identity", ()=>identity);
parcelHelpers.export(exports, "copy", ()=>copy);
parcelHelpers.export(exports, "transformer", ()=>transformer);
parcelHelpers.export(exports, "default", ()=>continuous);
var _d3Array = require("d3-array");
var _d3Interpolate = require("d3-interpolate");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _numberJs = require("./number.js");
var _numberJsDefault = parcelHelpers.interopDefault(_numberJs);
var unit = [
    0,
    1
];
function identity(x) {
    return x;
}
function normalize(a, b) {
    return (b -= a = +a) ? function(x) {
        return (x - a) / b;
    } : (0, _constantJsDefault.default)(isNaN(b) ? NaN : 0.5);
}
function clamper(a, b) {
    var t;
    if (a > b) t = a, a = b, b = t;
    return function(x) {
        return Math.max(a, Math.min(b, x));
    };
}
// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
function bimap(domain, range, interpolate) {
    var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
    if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);
    else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
    return function(x) {
        return r0(d0(x));
    };
}
function polymap(domain, range, interpolate) {
    var j = Math.min(domain.length, range.length) - 1, d = new Array(j), r = new Array(j), i = -1;
    // Reverse descending domains.
    if (domain[j] < domain[0]) {
        domain = domain.slice().reverse();
        range = range.slice().reverse();
    }
    while(++i < j){
        d[i] = normalize(domain[i], domain[i + 1]);
        r[i] = interpolate(range[i], range[i + 1]);
    }
    return function(x) {
        var i = (0, _d3Array.bisect)(domain, x, 1, j) - 1;
        return r[i](d[i](x));
    };
}
function copy(source, target) {
    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
    var domain = unit, range = unit, interpolate = (0, _d3Interpolate.interpolate), transform, untransform, unknown, clamp = identity, piecewise, output, input;
    function rescale() {
        var n = Math.min(domain.length, range.length);
        if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);
        piecewise = n > 2 ? polymap : bimap;
        output = input = null;
        return scale;
    }
    function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
    }
    scale.invert = function(y) {
        return clamp(untransform((input || (input = piecewise(range, domain.map(transform), (0, _d3Interpolate.interpolateNumber))))(y)));
    };
    scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_, (0, _numberJsDefault.default)), rescale()) : domain.slice();
    };
    scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
    };
    scale.rangeRound = function(_) {
        return range = Array.from(_), interpolate = (0, _d3Interpolate.interpolateRound), rescale();
    };
    scale.clamp = function(_) {
        return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;
    };
    scale.interpolate = function(_) {
        return arguments.length ? (interpolate = _, rescale()) : interpolate;
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t, u) {
        transform = t, untransform = u;
        return rescale();
    };
}
function continuous() {
    return transformer()(identity, identity);
}

},{"d3-array":"1yX2W","d3-interpolate":"6jJyi","./constant.js":"kIv0D","./number.js":"k9Lyx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kIv0D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>constants);
function constants(x) {
    return function() {
        return x;
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k9Lyx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>number);
function number(x) {
    return +x;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ahQef":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>tickFormat);
var _d3Array = require("d3-array");
var _d3Format = require("d3-format");
function tickFormat(start, stop, count, specifier) {
    var step = (0, _d3Array.tickStep)(start, stop, count), precision;
    specifier = (0, _d3Format.formatSpecifier)(specifier == null ? ",f" : specifier);
    switch(specifier.type){
        case "s":
            var value = Math.max(Math.abs(start), Math.abs(stop));
            if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionPrefix)(step, value))) specifier.precision = precision;
            return (0, _d3Format.formatPrefix)(specifier, value);
        case "":
        case "e":
        case "g":
        case "p":
        case "r":
            if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionRound)(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
            break;
        case "f":
        case "%":
            if (specifier.precision == null && !isNaN(precision = (0, _d3Format.precisionFixed)(step))) specifier.precision = precision - (specifier.type === "%") * 2;
            break;
    }
    return (0, _d3Format.format)(specifier);
}

},{"d3-array":"1yX2W","d3-format":"4XOv2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"z4t8s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "loggish", ()=>loggish);
parcelHelpers.export(exports, "default", ()=>log);
var _d3Array = require("d3-array");
var _d3Format = require("d3-format");
var _niceJs = require("./nice.js");
var _niceJsDefault = parcelHelpers.interopDefault(_niceJs);
var _continuousJs = require("./continuous.js");
var _initJs = require("./init.js");
function transformLog(x) {
    return Math.log(x);
}
function transformExp(x) {
    return Math.exp(x);
}
function transformLogn(x) {
    return -Math.log(-x);
}
function transformExpn(x) {
    return -Math.exp(-x);
}
function pow10(x) {
    return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}
function powp(base) {
    return base === 10 ? pow10 : base === Math.E ? Math.exp : (x)=>Math.pow(base, x);
}
function logp(base) {
    return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x)=>Math.log(x) / base);
}
function reflect(f) {
    return (x, k)=>-f(-x, k);
}
function loggish(transform) {
    const scale = transform(transformLog, transformExp);
    const domain = scale.domain;
    let base = 10;
    let logs;
    let pows;
    function rescale() {
        logs = logp(base), pows = powp(base);
        if (domain()[0] < 0) {
            logs = reflect(logs), pows = reflect(pows);
            transform(transformLogn, transformExpn);
        } else transform(transformLog, transformExp);
        return scale;
    }
    scale.base = function(_) {
        return arguments.length ? (base = +_, rescale()) : base;
    };
    scale.domain = function(_) {
        return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.ticks = (count)=>{
        const d = domain();
        let u = d[0];
        let v = d[d.length - 1];
        const r = v < u;
        if (r) [u, v] = [
            v,
            u
        ];
        let i = logs(u);
        let j = logs(v);
        let k;
        let t;
        const n = count == null ? 10 : +count;
        let z = [];
        if (!(base % 1) && j - i < n) {
            i = Math.floor(i), j = Math.ceil(j);
            if (u > 0) for(; i <= j; ++i)for(k = 1; k < base; ++k){
                t = i < 0 ? k / pows(-i) : k * pows(i);
                if (t < u) continue;
                if (t > v) break;
                z.push(t);
            }
            else for(; i <= j; ++i)for(k = base - 1; k >= 1; --k){
                t = i > 0 ? k / pows(-i) : k * pows(i);
                if (t < u) continue;
                if (t > v) break;
                z.push(t);
            }
            if (z.length * 2 < n) z = (0, _d3Array.ticks)(u, v, n);
        } else z = (0, _d3Array.ticks)(i, j, Math.min(j - i, n)).map(pows);
        return r ? z.reverse() : z;
    };
    scale.tickFormat = (count, specifier)=>{
        if (count == null) count = 10;
        if (specifier == null) specifier = base === 10 ? "s" : ",";
        if (typeof specifier !== "function") {
            if (!(base % 1) && (specifier = (0, _d3Format.formatSpecifier)(specifier)).precision == null) specifier.trim = true;
            specifier = (0, _d3Format.format)(specifier);
        }
        if (count === Infinity) return specifier;
        const k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
        return (d)=>{
            let i = d / pows(Math.round(logs(d)));
            if (i * base < base - 0.5) i *= base;
            return i <= k ? specifier(d) : "";
        };
    };
    scale.nice = ()=>{
        return domain((0, _niceJsDefault.default)(domain(), {
            floor: (x)=>pows(Math.floor(logs(x))),
            ceil: (x)=>pows(Math.ceil(logs(x)))
        }));
    };
    return scale;
}
function log() {
    const scale = loggish((0, _continuousJs.transformer)()).domain([
        1,
        10
    ]);
    scale.copy = ()=>(0, _continuousJs.copy)(scale, log()).base(scale.base());
    (0, _initJs.initRange).apply(scale, arguments);
    return scale;
}

},{"d3-array":"1yX2W","d3-format":"4XOv2","./nice.js":"kAVeE","./continuous.js":"1LsCM","./init.js":"kp8lc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kAVeE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>nice);
function nice(domain, interval) {
    domain = domain.slice();
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
    if (x1 < x0) {
        t = i0, i0 = i1, i1 = t;
        t = x0, x0 = x1, x1 = t;
    }
    domain[i0] = interval.floor(x0);
    domain[i1] = interval.ceil(x1);
    return domain;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4KiG8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "symlogish", ()=>symlogish);
parcelHelpers.export(exports, "default", ()=>symlog);
var _linearJs = require("./linear.js");
var _continuousJs = require("./continuous.js");
var _initJs = require("./init.js");
function transformSymlog(c) {
    return function(x) {
        return Math.sign(x) * Math.log1p(Math.abs(x / c));
    };
}
function transformSymexp(c) {
    return function(x) {
        return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
    };
}
function symlogish(transform) {
    var c = 1, scale = transform(transformSymlog(c), transformSymexp(c));
    scale.constant = function(_) {
        return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
    };
    return (0, _linearJs.linearish)(scale);
}
function symlog() {
    var scale = symlogish((0, _continuousJs.transformer)());
    scale.copy = function() {
        return (0, _continuousJs.copy)(scale, symlog()).constant(scale.constant());
    };
    return (0, _initJs.initRange).apply(scale, arguments);
}

},{"./linear.js":"lob4K","./continuous.js":"1LsCM","./init.js":"kp8lc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jVG8A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "powish", ()=>powish);
parcelHelpers.export(exports, "default", ()=>pow);
parcelHelpers.export(exports, "sqrt", ()=>sqrt);
var _linearJs = require("./linear.js");
var _continuousJs = require("./continuous.js");
var _initJs = require("./init.js");
function transformPow(exponent) {
    return function(x) {
        return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
    };
}
function transformSqrt(x) {
    return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}
function transformSquare(x) {
    return x < 0 ? -x * x : x * x;
}
function powish(transform) {
    var scale = transform((0, _continuousJs.identity), (0, _continuousJs.identity)), exponent = 1;
    function rescale() {
        return exponent === 1 ? transform((0, _continuousJs.identity), (0, _continuousJs.identity)) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
    }
    scale.exponent = function(_) {
        return arguments.length ? (exponent = +_, rescale()) : exponent;
    };
    return (0, _linearJs.linearish)(scale);
}
function pow() {
    var scale = powish((0, _continuousJs.transformer)());
    scale.copy = function() {
        return (0, _continuousJs.copy)(scale, pow()).exponent(scale.exponent());
    };
    (0, _initJs.initRange).apply(scale, arguments);
    return scale;
}
function sqrt() {
    return pow.apply(null, arguments).exponent(0.5);
}

},{"./linear.js":"lob4K","./continuous.js":"1LsCM","./init.js":"kp8lc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cZUY5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>quantile);
var _d3Array = require("d3-array");
var _initJs = require("./init.js");
function quantile() {
    var domain = [], range = [], thresholds = [], unknown;
    function rescale() {
        var i = 0, n = Math.max(1, range.length);
        thresholds = new Array(n - 1);
        while(++i < n)thresholds[i - 1] = (0, _d3Array.quantileSorted)(domain, i / n);
        return scale;
    }
    function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : range[(0, _d3Array.bisect)(thresholds, x)];
    }
    scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return i < 0 ? [
            NaN,
            NaN
        ] : [
            i > 0 ? thresholds[i - 1] : domain[0],
            i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
        ];
    };
    scale.domain = function(_) {
        if (!arguments.length) return domain.slice();
        domain = [];
        for (let d of _)if (d != null && !isNaN(d = +d)) domain.push(d);
        domain.sort((0, _d3Array.ascending));
        return rescale();
    };
    scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.quantiles = function() {
        return thresholds.slice();
    };
    scale.copy = function() {
        return quantile().domain(domain).range(range).unknown(unknown);
    };
    return (0, _initJs.initRange).apply(scale, arguments);
}

},{"d3-array":"1yX2W","./init.js":"kp8lc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f8NNx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>threshold);
var _d3Array = require("d3-array");
var _initJs = require("./init.js");
function threshold() {
    var domain = [
        0.5
    ], range = [
        0,
        1
    ], unknown, n = 1;
    function scale(x) {
        return x != null && x <= x ? range[(0, _d3Array.bisect)(domain, x, 0, n)] : unknown;
    }
    scale.domain = function(_) {
        return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
    };
    scale.range = function(_) {
        return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
    };
    scale.invertExtent = function(y) {
        var i = range.indexOf(y);
        return [
            domain[i - 1],
            domain[i]
        ];
    };
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
        return threshold().domain(domain).range(range).unknown(unknown);
    };
    return (0, _initJs.initRange).apply(scale, arguments);
}

},{"d3-array":"1yX2W","./init.js":"kp8lc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7UVid":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calendar", ()=>calendar);
parcelHelpers.export(exports, "default", ()=>time);
var _d3Time = require("d3-time");
var _d3TimeFormat = require("d3-time-format");
var _continuousJs = require("./continuous.js");
var _continuousJsDefault = parcelHelpers.interopDefault(_continuousJs);
var _initJs = require("./init.js");
var _niceJs = require("./nice.js");
var _niceJsDefault = parcelHelpers.interopDefault(_niceJs);
function date(t) {
    return new Date(t);
}
function number(t) {
    return t instanceof Date ? +t : +new Date(+t);
}
function calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format) {
    var scale = (0, _continuousJsDefault.default)(), invert = scale.invert, domain = scale.domain;
    var formatMillisecond = format(".%L"), formatSecond = format(":%S"), formatMinute = format("%I:%M"), formatHour = format("%I %p"), formatDay = format("%a %d"), formatWeek = format("%b %d"), formatMonth = format("%B"), formatYear = format("%Y");
    function tickFormat(date) {
        return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);
    }
    scale.invert = function(y) {
        return new Date(invert(y));
    };
    scale.domain = function(_) {
        return arguments.length ? domain(Array.from(_, number)) : domain().map(date);
    };
    scale.ticks = function(interval) {
        var d = domain();
        return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);
    };
    scale.tickFormat = function(count, specifier) {
        return specifier == null ? tickFormat : format(specifier);
    };
    scale.nice = function(interval) {
        var d = domain();
        if (!interval || typeof interval.range !== "function") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);
        return interval ? domain((0, _niceJsDefault.default)(d, interval)) : scale;
    };
    scale.copy = function() {
        return (0, _continuousJs.copy)(scale, calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format));
    };
    return scale;
}
function time() {
    return (0, _initJs.initRange).apply(calendar((0, _d3Time.timeTicks), (0, _d3Time.timeTickInterval), (0, _d3Time.timeYear), (0, _d3Time.timeMonth), (0, _d3Time.timeWeek), (0, _d3Time.timeDay), (0, _d3Time.timeHour), (0, _d3Time.timeMinute), (0, _d3Time.timeSecond), (0, _d3TimeFormat.timeFormat)).domain([
        new Date(2000, 0, 1),
        new Date(2000, 0, 2)
    ]), arguments);
}

},{"d3-time":"1UOEe","d3-time-format":"4FtNS","./continuous.js":"1LsCM","./init.js":"kp8lc","./nice.js":"kAVeE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1UOEe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeInterval", ()=>(0, _intervalJs.timeInterval));
parcelHelpers.export(exports, "utcMillisecond", ()=>(0, _millisecondJs.millisecond));
parcelHelpers.export(exports, "utcMilliseconds", ()=>(0, _millisecondJs.milliseconds));
parcelHelpers.export(exports, "timeMillisecond", ()=>(0, _millisecondJs.millisecond));
parcelHelpers.export(exports, "timeMilliseconds", ()=>(0, _millisecondJs.milliseconds));
parcelHelpers.export(exports, "utcSecond", ()=>(0, _secondJs.second));
parcelHelpers.export(exports, "utcSeconds", ()=>(0, _secondJs.seconds));
parcelHelpers.export(exports, "timeSecond", ()=>(0, _secondJs.second));
parcelHelpers.export(exports, "timeSeconds", ()=>(0, _secondJs.seconds));
parcelHelpers.export(exports, "timeMinute", ()=>(0, _minuteJs.timeMinute));
parcelHelpers.export(exports, "timeMinutes", ()=>(0, _minuteJs.timeMinutes));
parcelHelpers.export(exports, "utcMinute", ()=>(0, _minuteJs.utcMinute));
parcelHelpers.export(exports, "utcMinutes", ()=>(0, _minuteJs.utcMinutes));
parcelHelpers.export(exports, "timeHour", ()=>(0, _hourJs.timeHour));
parcelHelpers.export(exports, "timeHours", ()=>(0, _hourJs.timeHours));
parcelHelpers.export(exports, "utcHour", ()=>(0, _hourJs.utcHour));
parcelHelpers.export(exports, "utcHours", ()=>(0, _hourJs.utcHours));
parcelHelpers.export(exports, "timeDay", ()=>(0, _dayJs.timeDay));
parcelHelpers.export(exports, "timeDays", ()=>(0, _dayJs.timeDays));
parcelHelpers.export(exports, "utcDay", ()=>(0, _dayJs.utcDay));
parcelHelpers.export(exports, "utcDays", ()=>(0, _dayJs.utcDays));
parcelHelpers.export(exports, "unixDay", ()=>(0, _dayJs.unixDay));
parcelHelpers.export(exports, "unixDays", ()=>(0, _dayJs.unixDays));
parcelHelpers.export(exports, "timeWeek", ()=>(0, _weekJs.timeSunday));
parcelHelpers.export(exports, "timeWeeks", ()=>(0, _weekJs.timeSundays));
parcelHelpers.export(exports, "timeSunday", ()=>(0, _weekJs.timeSunday));
parcelHelpers.export(exports, "timeSundays", ()=>(0, _weekJs.timeSundays));
parcelHelpers.export(exports, "timeMonday", ()=>(0, _weekJs.timeMonday));
parcelHelpers.export(exports, "timeMondays", ()=>(0, _weekJs.timeMondays));
parcelHelpers.export(exports, "timeTuesday", ()=>(0, _weekJs.timeTuesday));
parcelHelpers.export(exports, "timeTuesdays", ()=>(0, _weekJs.timeTuesdays));
parcelHelpers.export(exports, "timeWednesday", ()=>(0, _weekJs.timeWednesday));
parcelHelpers.export(exports, "timeWednesdays", ()=>(0, _weekJs.timeWednesdays));
parcelHelpers.export(exports, "timeThursday", ()=>(0, _weekJs.timeThursday));
parcelHelpers.export(exports, "timeThursdays", ()=>(0, _weekJs.timeThursdays));
parcelHelpers.export(exports, "timeFriday", ()=>(0, _weekJs.timeFriday));
parcelHelpers.export(exports, "timeFridays", ()=>(0, _weekJs.timeFridays));
parcelHelpers.export(exports, "timeSaturday", ()=>(0, _weekJs.timeSaturday));
parcelHelpers.export(exports, "timeSaturdays", ()=>(0, _weekJs.timeSaturdays));
parcelHelpers.export(exports, "utcWeek", ()=>(0, _weekJs.utcSunday));
parcelHelpers.export(exports, "utcWeeks", ()=>(0, _weekJs.utcSundays));
parcelHelpers.export(exports, "utcSunday", ()=>(0, _weekJs.utcSunday));
parcelHelpers.export(exports, "utcSundays", ()=>(0, _weekJs.utcSundays));
parcelHelpers.export(exports, "utcMonday", ()=>(0, _weekJs.utcMonday));
parcelHelpers.export(exports, "utcMondays", ()=>(0, _weekJs.utcMondays));
parcelHelpers.export(exports, "utcTuesday", ()=>(0, _weekJs.utcTuesday));
parcelHelpers.export(exports, "utcTuesdays", ()=>(0, _weekJs.utcTuesdays));
parcelHelpers.export(exports, "utcWednesday", ()=>(0, _weekJs.utcWednesday));
parcelHelpers.export(exports, "utcWednesdays", ()=>(0, _weekJs.utcWednesdays));
parcelHelpers.export(exports, "utcThursday", ()=>(0, _weekJs.utcThursday));
parcelHelpers.export(exports, "utcThursdays", ()=>(0, _weekJs.utcThursdays));
parcelHelpers.export(exports, "utcFriday", ()=>(0, _weekJs.utcFriday));
parcelHelpers.export(exports, "utcFridays", ()=>(0, _weekJs.utcFridays));
parcelHelpers.export(exports, "utcSaturday", ()=>(0, _weekJs.utcSaturday));
parcelHelpers.export(exports, "utcSaturdays", ()=>(0, _weekJs.utcSaturdays));
parcelHelpers.export(exports, "timeMonth", ()=>(0, _monthJs.timeMonth));
parcelHelpers.export(exports, "timeMonths", ()=>(0, _monthJs.timeMonths));
parcelHelpers.export(exports, "utcMonth", ()=>(0, _monthJs.utcMonth));
parcelHelpers.export(exports, "utcMonths", ()=>(0, _monthJs.utcMonths));
parcelHelpers.export(exports, "timeYear", ()=>(0, _yearJs.timeYear));
parcelHelpers.export(exports, "timeYears", ()=>(0, _yearJs.timeYears));
parcelHelpers.export(exports, "utcYear", ()=>(0, _yearJs.utcYear));
parcelHelpers.export(exports, "utcYears", ()=>(0, _yearJs.utcYears));
parcelHelpers.export(exports, "utcTicks", ()=>(0, _ticksJs.utcTicks));
parcelHelpers.export(exports, "utcTickInterval", ()=>(0, _ticksJs.utcTickInterval));
parcelHelpers.export(exports, "timeTicks", ()=>(0, _ticksJs.timeTicks));
parcelHelpers.export(exports, "timeTickInterval", ()=>(0, _ticksJs.timeTickInterval));
var _intervalJs = require("./interval.js");
var _millisecondJs = require("./millisecond.js");
var _secondJs = require("./second.js");
var _minuteJs = require("./minute.js");
var _hourJs = require("./hour.js");
var _dayJs = require("./day.js");
var _weekJs = require("./week.js");
var _monthJs = require("./month.js");
var _yearJs = require("./year.js");
var _ticksJs = require("./ticks.js");

},{"./interval.js":false,"./millisecond.js":false,"./second.js":"iJtQu","./minute.js":"2Elkb","./hour.js":"jJqLM","./day.js":"1U9Pq","./week.js":"lmrQt","./month.js":"fSASr","./year.js":"d9SS9","./ticks.js":"bl0Km","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jfgl3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeInterval", ()=>timeInterval);
const t0 = new Date, t1 = new Date;
function timeInterval(floori, offseti, count, field) {
    function interval(date) {
        return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;
    }
    interval.floor = (date)=>{
        return floori(date = new Date(+date)), date;
    };
    interval.ceil = (date)=>{
        return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
    };
    interval.round = (date)=>{
        const d0 = interval(date), d1 = interval.ceil(date);
        return date - d0 < d1 - date ? d0 : d1;
    };
    interval.offset = (date, step)=>{
        return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
    };
    interval.range = (start, stop, step)=>{
        const range = [];
        start = interval.ceil(start);
        step = step == null ? 1 : Math.floor(step);
        if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
        let previous;
        do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
        while (previous < start && start < stop);
        return range;
    };
    interval.filter = (test)=>{
        return timeInterval((date)=>{
            if (date >= date) while(floori(date), !test(date))date.setTime(date - 1);
        }, (date, step)=>{
            if (date >= date) {
                if (step < 0) while(++step <= 0){
                    while(offseti(date, -1), !test(date)); // eslint-disable-line no-empty
                }
                else while(--step >= 0){
                    while(offseti(date, 1), !test(date)); // eslint-disable-line no-empty
                }
            }
        });
    };
    if (count) {
        interval.count = (start, end)=>{
            t0.setTime(+start), t1.setTime(+end);
            floori(t0), floori(t1);
            return Math.floor(count(t0, t1));
        };
        interval.every = (step)=>{
            step = Math.floor(step);
            return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? (d)=>field(d) % step === 0 : (d)=>interval.count(0, d) % step === 0);
        };
    }
    return interval;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aa2qY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "millisecond", ()=>millisecond);
parcelHelpers.export(exports, "milliseconds", ()=>milliseconds);
var _intervalJs = require("./interval.js");
const millisecond = (0, _intervalJs.timeInterval)(()=>{
// noop
}, (date, step)=>{
    date.setTime(+date + step);
}, (start, end)=>{
    return end - start;
});
// An optimized implementation for this simple case.
millisecond.every = (k)=>{
    k = Math.floor(k);
    if (!isFinite(k) || !(k > 0)) return null;
    if (!(k > 1)) return millisecond;
    return (0, _intervalJs.timeInterval)((date)=>{
        date.setTime(Math.floor(date / k) * k);
    }, (date, step)=>{
        date.setTime(+date + step * k);
    }, (start, end)=>{
        return (end - start) / k;
    });
};
const milliseconds = millisecond.range;

},{"./interval.js":"jfgl3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iJtQu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "second", ()=>second);
parcelHelpers.export(exports, "seconds", ()=>seconds);
var _intervalJs = require("./interval.js");
var _durationJs = require("./duration.js");
const second = (0, _intervalJs.timeInterval)((date)=>{
    date.setTime(date - date.getMilliseconds());
}, (date, step)=>{
    date.setTime(+date + step * (0, _durationJs.durationSecond));
}, (start, end)=>{
    return (end - start) / (0, _durationJs.durationSecond);
}, (date)=>{
    return date.getUTCSeconds();
});
const seconds = second.range;

},{"./interval.js":"jfgl3","./duration.js":"iEiGQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iEiGQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "durationSecond", ()=>durationSecond);
parcelHelpers.export(exports, "durationMinute", ()=>durationMinute);
parcelHelpers.export(exports, "durationHour", ()=>durationHour);
parcelHelpers.export(exports, "durationDay", ()=>durationDay);
parcelHelpers.export(exports, "durationWeek", ()=>durationWeek);
parcelHelpers.export(exports, "durationMonth", ()=>durationMonth);
parcelHelpers.export(exports, "durationYear", ()=>durationYear);
const durationSecond = 1000;
const durationMinute = durationSecond * 60;
const durationHour = durationMinute * 60;
const durationDay = durationHour * 24;
const durationWeek = durationDay * 7;
const durationMonth = durationDay * 30;
const durationYear = durationDay * 365;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Elkb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeMinute", ()=>timeMinute);
parcelHelpers.export(exports, "timeMinutes", ()=>timeMinutes);
parcelHelpers.export(exports, "utcMinute", ()=>utcMinute);
parcelHelpers.export(exports, "utcMinutes", ()=>utcMinutes);
var _intervalJs = require("./interval.js");
var _durationJs = require("./duration.js");
const timeMinute = (0, _intervalJs.timeInterval)((date)=>{
    date.setTime(date - date.getMilliseconds() - date.getSeconds() * (0, _durationJs.durationSecond));
}, (date, step)=>{
    date.setTime(+date + step * (0, _durationJs.durationMinute));
}, (start, end)=>{
    return (end - start) / (0, _durationJs.durationMinute);
}, (date)=>{
    return date.getMinutes();
});
const timeMinutes = timeMinute.range;
const utcMinute = (0, _intervalJs.timeInterval)((date)=>{
    date.setUTCSeconds(0, 0);
}, (date, step)=>{
    date.setTime(+date + step * (0, _durationJs.durationMinute));
}, (start, end)=>{
    return (end - start) / (0, _durationJs.durationMinute);
}, (date)=>{
    return date.getUTCMinutes();
});
const utcMinutes = utcMinute.range;

},{"./interval.js":"jfgl3","./duration.js":"iEiGQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jJqLM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeHour", ()=>timeHour);
parcelHelpers.export(exports, "timeHours", ()=>timeHours);
parcelHelpers.export(exports, "utcHour", ()=>utcHour);
parcelHelpers.export(exports, "utcHours", ()=>utcHours);
var _intervalJs = require("./interval.js");
var _durationJs = require("./duration.js");
const timeHour = (0, _intervalJs.timeInterval)((date)=>{
    date.setTime(date - date.getMilliseconds() - date.getSeconds() * (0, _durationJs.durationSecond) - date.getMinutes() * (0, _durationJs.durationMinute));
}, (date, step)=>{
    date.setTime(+date + step * (0, _durationJs.durationHour));
}, (start, end)=>{
    return (end - start) / (0, _durationJs.durationHour);
}, (date)=>{
    return date.getHours();
});
const timeHours = timeHour.range;
const utcHour = (0, _intervalJs.timeInterval)((date)=>{
    date.setUTCMinutes(0, 0, 0);
}, (date, step)=>{
    date.setTime(+date + step * (0, _durationJs.durationHour));
}, (start, end)=>{
    return (end - start) / (0, _durationJs.durationHour);
}, (date)=>{
    return date.getUTCHours();
});
const utcHours = utcHour.range;

},{"./interval.js":"jfgl3","./duration.js":"iEiGQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1U9Pq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeDay", ()=>timeDay);
parcelHelpers.export(exports, "timeDays", ()=>timeDays);
parcelHelpers.export(exports, "utcDay", ()=>utcDay);
parcelHelpers.export(exports, "utcDays", ()=>utcDays);
parcelHelpers.export(exports, "unixDay", ()=>unixDay);
parcelHelpers.export(exports, "unixDays", ()=>unixDays);
var _intervalJs = require("./interval.js");
var _durationJs = require("./duration.js");
const timeDay = (0, _intervalJs.timeInterval)((date)=>date.setHours(0, 0, 0, 0), (date, step)=>date.setDate(date.getDate() + step), (start, end)=>(end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * (0, _durationJs.durationMinute)) / (0, _durationJs.durationDay), (date)=>date.getDate() - 1);
const timeDays = timeDay.range;
const utcDay = (0, _intervalJs.timeInterval)((date)=>{
    date.setUTCHours(0, 0, 0, 0);
}, (date, step)=>{
    date.setUTCDate(date.getUTCDate() + step);
}, (start, end)=>{
    return (end - start) / (0, _durationJs.durationDay);
}, (date)=>{
    return date.getUTCDate() - 1;
});
const utcDays = utcDay.range;
const unixDay = (0, _intervalJs.timeInterval)((date)=>{
    date.setUTCHours(0, 0, 0, 0);
}, (date, step)=>{
    date.setUTCDate(date.getUTCDate() + step);
}, (start, end)=>{
    return (end - start) / (0, _durationJs.durationDay);
}, (date)=>{
    return Math.floor(date / (0, _durationJs.durationDay));
});
const unixDays = unixDay.range;

},{"./interval.js":"jfgl3","./duration.js":"iEiGQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lmrQt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeSunday", ()=>timeSunday);
parcelHelpers.export(exports, "timeMonday", ()=>timeMonday);
parcelHelpers.export(exports, "timeTuesday", ()=>timeTuesday);
parcelHelpers.export(exports, "timeWednesday", ()=>timeWednesday);
parcelHelpers.export(exports, "timeThursday", ()=>timeThursday);
parcelHelpers.export(exports, "timeFriday", ()=>timeFriday);
parcelHelpers.export(exports, "timeSaturday", ()=>timeSaturday);
parcelHelpers.export(exports, "timeSundays", ()=>timeSundays);
parcelHelpers.export(exports, "timeMondays", ()=>timeMondays);
parcelHelpers.export(exports, "timeTuesdays", ()=>timeTuesdays);
parcelHelpers.export(exports, "timeWednesdays", ()=>timeWednesdays);
parcelHelpers.export(exports, "timeThursdays", ()=>timeThursdays);
parcelHelpers.export(exports, "timeFridays", ()=>timeFridays);
parcelHelpers.export(exports, "timeSaturdays", ()=>timeSaturdays);
parcelHelpers.export(exports, "utcSunday", ()=>utcSunday);
parcelHelpers.export(exports, "utcMonday", ()=>utcMonday);
parcelHelpers.export(exports, "utcTuesday", ()=>utcTuesday);
parcelHelpers.export(exports, "utcWednesday", ()=>utcWednesday);
parcelHelpers.export(exports, "utcThursday", ()=>utcThursday);
parcelHelpers.export(exports, "utcFriday", ()=>utcFriday);
parcelHelpers.export(exports, "utcSaturday", ()=>utcSaturday);
parcelHelpers.export(exports, "utcSundays", ()=>utcSundays);
parcelHelpers.export(exports, "utcMondays", ()=>utcMondays);
parcelHelpers.export(exports, "utcTuesdays", ()=>utcTuesdays);
parcelHelpers.export(exports, "utcWednesdays", ()=>utcWednesdays);
parcelHelpers.export(exports, "utcThursdays", ()=>utcThursdays);
parcelHelpers.export(exports, "utcFridays", ()=>utcFridays);
parcelHelpers.export(exports, "utcSaturdays", ()=>utcSaturdays);
var _intervalJs = require("./interval.js");
var _durationJs = require("./duration.js");
function timeWeekday(i) {
    return (0, _intervalJs.timeInterval)((date)=>{
        date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
        date.setHours(0, 0, 0, 0);
    }, (date, step)=>{
        date.setDate(date.getDate() + step * 7);
    }, (start, end)=>{
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * (0, _durationJs.durationMinute)) / (0, _durationJs.durationWeek);
    });
}
const timeSunday = timeWeekday(0);
const timeMonday = timeWeekday(1);
const timeTuesday = timeWeekday(2);
const timeWednesday = timeWeekday(3);
const timeThursday = timeWeekday(4);
const timeFriday = timeWeekday(5);
const timeSaturday = timeWeekday(6);
const timeSundays = timeSunday.range;
const timeMondays = timeMonday.range;
const timeTuesdays = timeTuesday.range;
const timeWednesdays = timeWednesday.range;
const timeThursdays = timeThursday.range;
const timeFridays = timeFriday.range;
const timeSaturdays = timeSaturday.range;
function utcWeekday(i) {
    return (0, _intervalJs.timeInterval)((date)=>{
        date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
        date.setUTCHours(0, 0, 0, 0);
    }, (date, step)=>{
        date.setUTCDate(date.getUTCDate() + step * 7);
    }, (start, end)=>{
        return (end - start) / (0, _durationJs.durationWeek);
    });
}
const utcSunday = utcWeekday(0);
const utcMonday = utcWeekday(1);
const utcTuesday = utcWeekday(2);
const utcWednesday = utcWeekday(3);
const utcThursday = utcWeekday(4);
const utcFriday = utcWeekday(5);
const utcSaturday = utcWeekday(6);
const utcSundays = utcSunday.range;
const utcMondays = utcMonday.range;
const utcTuesdays = utcTuesday.range;
const utcWednesdays = utcWednesday.range;
const utcThursdays = utcThursday.range;
const utcFridays = utcFriday.range;
const utcSaturdays = utcSaturday.range;

},{"./interval.js":"jfgl3","./duration.js":"iEiGQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fSASr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeMonth", ()=>timeMonth);
parcelHelpers.export(exports, "timeMonths", ()=>timeMonths);
parcelHelpers.export(exports, "utcMonth", ()=>utcMonth);
parcelHelpers.export(exports, "utcMonths", ()=>utcMonths);
var _intervalJs = require("./interval.js");
const timeMonth = (0, _intervalJs.timeInterval)((date)=>{
    date.setDate(1);
    date.setHours(0, 0, 0, 0);
}, (date, step)=>{
    date.setMonth(date.getMonth() + step);
}, (start, end)=>{
    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, (date)=>{
    return date.getMonth();
});
const timeMonths = timeMonth.range;
const utcMonth = (0, _intervalJs.timeInterval)((date)=>{
    date.setUTCDate(1);
    date.setUTCHours(0, 0, 0, 0);
}, (date, step)=>{
    date.setUTCMonth(date.getUTCMonth() + step);
}, (start, end)=>{
    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, (date)=>{
    return date.getUTCMonth();
});
const utcMonths = utcMonth.range;

},{"./interval.js":"jfgl3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d9SS9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeYear", ()=>timeYear);
parcelHelpers.export(exports, "timeYears", ()=>timeYears);
parcelHelpers.export(exports, "utcYear", ()=>utcYear);
parcelHelpers.export(exports, "utcYears", ()=>utcYears);
var _intervalJs = require("./interval.js");
const timeYear = (0, _intervalJs.timeInterval)((date)=>{
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
}, (date, step)=>{
    date.setFullYear(date.getFullYear() + step);
}, (start, end)=>{
    return end.getFullYear() - start.getFullYear();
}, (date)=>{
    return date.getFullYear();
});
// An optimized implementation for this simple case.
timeYear.every = (k)=>{
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, _intervalJs.timeInterval)((date)=>{
        date.setFullYear(Math.floor(date.getFullYear() / k) * k);
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0);
    }, (date, step)=>{
        date.setFullYear(date.getFullYear() + step * k);
    });
};
const timeYears = timeYear.range;
const utcYear = (0, _intervalJs.timeInterval)((date)=>{
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
}, (date, step)=>{
    date.setUTCFullYear(date.getUTCFullYear() + step);
}, (start, end)=>{
    return end.getUTCFullYear() - start.getUTCFullYear();
}, (date)=>{
    return date.getUTCFullYear();
});
// An optimized implementation for this simple case.
utcYear.every = (k)=>{
    return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, _intervalJs.timeInterval)((date)=>{
        date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
    }, (date, step)=>{
        date.setUTCFullYear(date.getUTCFullYear() + step * k);
    });
};
const utcYears = utcYear.range;

},{"./interval.js":"jfgl3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bl0Km":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "utcTicks", ()=>utcTicks);
parcelHelpers.export(exports, "utcTickInterval", ()=>utcTickInterval);
parcelHelpers.export(exports, "timeTicks", ()=>timeTicks);
parcelHelpers.export(exports, "timeTickInterval", ()=>timeTickInterval);
var _d3Array = require("d3-array");
var _durationJs = require("./duration.js");
var _millisecondJs = require("./millisecond.js");
var _secondJs = require("./second.js");
var _minuteJs = require("./minute.js");
var _hourJs = require("./hour.js");
var _dayJs = require("./day.js");
var _weekJs = require("./week.js");
var _monthJs = require("./month.js");
var _yearJs = require("./year.js");
function ticker(year, month, week, day, hour, minute) {
    const tickIntervals = [
        [
            (0, _secondJs.second),
            1,
            (0, _durationJs.durationSecond)
        ],
        [
            (0, _secondJs.second),
            5,
            5 * (0, _durationJs.durationSecond)
        ],
        [
            (0, _secondJs.second),
            15,
            15 * (0, _durationJs.durationSecond)
        ],
        [
            (0, _secondJs.second),
            30,
            30 * (0, _durationJs.durationSecond)
        ],
        [
            minute,
            1,
            (0, _durationJs.durationMinute)
        ],
        [
            minute,
            5,
            5 * (0, _durationJs.durationMinute)
        ],
        [
            minute,
            15,
            15 * (0, _durationJs.durationMinute)
        ],
        [
            minute,
            30,
            30 * (0, _durationJs.durationMinute)
        ],
        [
            hour,
            1,
            (0, _durationJs.durationHour)
        ],
        [
            hour,
            3,
            3 * (0, _durationJs.durationHour)
        ],
        [
            hour,
            6,
            6 * (0, _durationJs.durationHour)
        ],
        [
            hour,
            12,
            12 * (0, _durationJs.durationHour)
        ],
        [
            day,
            1,
            (0, _durationJs.durationDay)
        ],
        [
            day,
            2,
            2 * (0, _durationJs.durationDay)
        ],
        [
            week,
            1,
            (0, _durationJs.durationWeek)
        ],
        [
            month,
            1,
            (0, _durationJs.durationMonth)
        ],
        [
            month,
            3,
            3 * (0, _durationJs.durationMonth)
        ],
        [
            year,
            1,
            (0, _durationJs.durationYear)
        ]
    ];
    function ticks(start, stop, count) {
        const reverse = stop < start;
        if (reverse) [start, stop] = [
            stop,
            start
        ];
        const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
        const ticks = interval ? interval.range(start, +stop + 1) : []; // inclusive stop
        return reverse ? ticks.reverse() : ticks;
    }
    function tickInterval(start, stop, count) {
        const target = Math.abs(stop - start) / count;
        const i = (0, _d3Array.bisector)(([, , step])=>step).right(tickIntervals, target);
        if (i === tickIntervals.length) return year.every((0, _d3Array.tickStep)(start / (0, _durationJs.durationYear), stop / (0, _durationJs.durationYear), count));
        if (i === 0) return (0, _millisecondJs.millisecond).every(Math.max((0, _d3Array.tickStep)(start, stop, count), 1));
        const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
        return t.every(step);
    }
    return [
        ticks,
        tickInterval
    ];
}
const [utcTicks, utcTickInterval] = ticker((0, _yearJs.utcYear), (0, _monthJs.utcMonth), (0, _weekJs.utcSunday), (0, _dayJs.unixDay), (0, _hourJs.utcHour), (0, _minuteJs.utcMinute));
const [timeTicks, timeTickInterval] = ticker((0, _yearJs.timeYear), (0, _monthJs.timeMonth), (0, _weekJs.timeSunday), (0, _dayJs.timeDay), (0, _hourJs.timeHour), (0, _minuteJs.timeMinute));

},{"d3-array":"1yX2W","./duration.js":"iEiGQ","./millisecond.js":"aa2qY","./second.js":"iJtQu","./minute.js":"2Elkb","./hour.js":"jJqLM","./day.js":"1U9Pq","./week.js":"lmrQt","./month.js":"fSASr","./year.js":"d9SS9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4FtNS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeFormatDefaultLocale", ()=>(0, _defaultLocaleJsDefault.default));
parcelHelpers.export(exports, "timeFormat", ()=>(0, _defaultLocaleJs.timeFormat));
parcelHelpers.export(exports, "timeParse", ()=>(0, _defaultLocaleJs.timeParse));
parcelHelpers.export(exports, "utcFormat", ()=>(0, _defaultLocaleJs.utcFormat));
parcelHelpers.export(exports, "utcParse", ()=>(0, _defaultLocaleJs.utcParse));
parcelHelpers.export(exports, "timeFormatLocale", ()=>(0, _localeJsDefault.default));
parcelHelpers.export(exports, "isoFormat", ()=>(0, _isoFormatJsDefault.default));
parcelHelpers.export(exports, "isoParse", ()=>(0, _isoParseJsDefault.default));
var _defaultLocaleJs = require("./defaultLocale.js");
var _defaultLocaleJsDefault = parcelHelpers.interopDefault(_defaultLocaleJs);
var _localeJs = require("./locale.js");
var _localeJsDefault = parcelHelpers.interopDefault(_localeJs);
var _isoFormatJs = require("./isoFormat.js");
var _isoFormatJsDefault = parcelHelpers.interopDefault(_isoFormatJs);
var _isoParseJs = require("./isoParse.js");
var _isoParseJsDefault = parcelHelpers.interopDefault(_isoParseJs);

},{"./defaultLocale.js":"6OjO5","./locale.js":false,"./isoFormat.js":false,"./isoParse.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6OjO5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "timeFormat", ()=>timeFormat);
parcelHelpers.export(exports, "timeParse", ()=>timeParse);
parcelHelpers.export(exports, "utcFormat", ()=>utcFormat);
parcelHelpers.export(exports, "utcParse", ()=>utcParse);
parcelHelpers.export(exports, "default", ()=>defaultLocale);
var _localeJs = require("./locale.js");
var _localeJsDefault = parcelHelpers.interopDefault(_localeJs);
var locale;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale({
    dateTime: "%x, %X",
    date: "%-m/%-d/%Y",
    time: "%-I:%M:%S %p",
    periods: [
        "AM",
        "PM"
    ],
    days: [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
    ],
    shortDays: [
        "Sun",
        "Mon",
        "Tue",
        "Wed",
        "Thu",
        "Fri",
        "Sat"
    ],
    months: [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
    ],
    shortMonths: [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
    ]
});
function defaultLocale(definition) {
    locale = (0, _localeJsDefault.default)(definition);
    timeFormat = locale.format;
    timeParse = locale.parse;
    utcFormat = locale.utcFormat;
    utcParse = locale.utcParse;
    return locale;
}

},{"./locale.js":"4m5qt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4m5qt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>formatLocale);
var _d3Time = require("d3-time");
function localDate(d) {
    if (0 <= d.y && d.y < 100) {
        var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
        date.setFullYear(d.y);
        return date;
    }
    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}
function utcDate(d) {
    if (0 <= d.y && d.y < 100) {
        var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
        date.setUTCFullYear(d.y);
        return date;
    }
    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}
function newDate(y, m, d) {
    return {
        y: y,
        m: m,
        d: d,
        H: 0,
        M: 0,
        S: 0,
        L: 0
    };
}
function formatLocale(locale) {
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_weekdays = locale.days, locale_shortWeekdays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
    var formats = {
        "a": formatShortWeekday,
        "A": formatWeekday,
        "b": formatShortMonth,
        "B": formatMonth,
        "c": null,
        "d": formatDayOfMonth,
        "e": formatDayOfMonth,
        "f": formatMicroseconds,
        "g": formatYearISO,
        "G": formatFullYearISO,
        "H": formatHour24,
        "I": formatHour12,
        "j": formatDayOfYear,
        "L": formatMilliseconds,
        "m": formatMonthNumber,
        "M": formatMinutes,
        "p": formatPeriod,
        "q": formatQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatSeconds,
        "u": formatWeekdayNumberMonday,
        "U": formatWeekNumberSunday,
        "V": formatWeekNumberISO,
        "w": formatWeekdayNumberSunday,
        "W": formatWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatYear,
        "Y": formatFullYear,
        "Z": formatZone,
        "%": formatLiteralPercent
    };
    var utcFormats = {
        "a": formatUTCShortWeekday,
        "A": formatUTCWeekday,
        "b": formatUTCShortMonth,
        "B": formatUTCMonth,
        "c": null,
        "d": formatUTCDayOfMonth,
        "e": formatUTCDayOfMonth,
        "f": formatUTCMicroseconds,
        "g": formatUTCYearISO,
        "G": formatUTCFullYearISO,
        "H": formatUTCHour24,
        "I": formatUTCHour12,
        "j": formatUTCDayOfYear,
        "L": formatUTCMilliseconds,
        "m": formatUTCMonthNumber,
        "M": formatUTCMinutes,
        "p": formatUTCPeriod,
        "q": formatUTCQuarter,
        "Q": formatUnixTimestamp,
        "s": formatUnixTimestampSeconds,
        "S": formatUTCSeconds,
        "u": formatUTCWeekdayNumberMonday,
        "U": formatUTCWeekNumberSunday,
        "V": formatUTCWeekNumberISO,
        "w": formatUTCWeekdayNumberSunday,
        "W": formatUTCWeekNumberMonday,
        "x": null,
        "X": null,
        "y": formatUTCYear,
        "Y": formatUTCFullYear,
        "Z": formatUTCZone,
        "%": formatLiteralPercent
    };
    var parses = {
        "a": parseShortWeekday,
        "A": parseWeekday,
        "b": parseShortMonth,
        "B": parseMonth,
        "c": parseLocaleDateTime,
        "d": parseDayOfMonth,
        "e": parseDayOfMonth,
        "f": parseMicroseconds,
        "g": parseYear,
        "G": parseFullYear,
        "H": parseHour24,
        "I": parseHour24,
        "j": parseDayOfYear,
        "L": parseMilliseconds,
        "m": parseMonthNumber,
        "M": parseMinutes,
        "p": parsePeriod,
        "q": parseQuarter,
        "Q": parseUnixTimestamp,
        "s": parseUnixTimestampSeconds,
        "S": parseSeconds,
        "u": parseWeekdayNumberMonday,
        "U": parseWeekNumberSunday,
        "V": parseWeekNumberISO,
        "w": parseWeekdayNumberSunday,
        "W": parseWeekNumberMonday,
        "x": parseLocaleDate,
        "X": parseLocaleTime,
        "y": parseYear,
        "Y": parseFullYear,
        "Z": parseZone,
        "%": parseLiteralPercent
    };
    // These recursive directive definitions must be deferred.
    formats.x = newFormat(locale_date, formats);
    formats.X = newFormat(locale_time, formats);
    formats.c = newFormat(locale_dateTime, formats);
    utcFormats.x = newFormat(locale_date, utcFormats);
    utcFormats.X = newFormat(locale_time, utcFormats);
    utcFormats.c = newFormat(locale_dateTime, utcFormats);
    function newFormat(specifier, formats) {
        return function(date) {
            var string = [], i = -1, j = 0, n = specifier.length, c, pad, format;
            if (!(date instanceof Date)) date = new Date(+date);
            while(++i < n)if (specifier.charCodeAt(i) === 37) {
                string.push(specifier.slice(j, i));
                if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
                else pad = c === "e" ? " " : "0";
                if (format = formats[c]) c = format(date, pad);
                string.push(c);
                j = i + 1;
            }
            string.push(specifier.slice(j, i));
            return string.join("");
        };
    }
    function newParse(specifier, Z) {
        return function(string) {
            var d = newDate(1900, undefined, 1), i = parseSpecifier(d, specifier, string += "", 0), week, day;
            if (i != string.length) return null;
            // If a UNIX timestamp is specified, return it.
            if ("Q" in d) return new Date(d.Q);
            if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0));
            // If this is utcParse, never use the local timezone.
            if (Z && !("Z" in d)) d.Z = 0;
            // The am-pm flag is 0 for AM, and 1 for PM.
            if ("p" in d) d.H = d.H % 12 + d.p * 12;
            // If the month was not specified, inherit from the quarter.
            if (d.m === undefined) d.m = "q" in d ? d.q : 0;
            // Convert day-of-week and week-of-year to day-of-year.
            if ("V" in d) {
                if (d.V < 1 || d.V > 53) return null;
                if (!("w" in d)) d.w = 1;
                if ("Z" in d) {
                    week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
                    week = day > 4 || day === 0 ? (0, _d3Time.utcMonday).ceil(week) : (0, _d3Time.utcMonday)(week);
                    week = (0, _d3Time.utcDay).offset(week, (d.V - 1) * 7);
                    d.y = week.getUTCFullYear();
                    d.m = week.getUTCMonth();
                    d.d = week.getUTCDate() + (d.w + 6) % 7;
                } else {
                    week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
                    week = day > 4 || day === 0 ? (0, _d3Time.timeMonday).ceil(week) : (0, _d3Time.timeMonday)(week);
                    week = (0, _d3Time.timeDay).offset(week, (d.V - 1) * 7);
                    d.y = week.getFullYear();
                    d.m = week.getMonth();
                    d.d = week.getDate() + (d.w + 6) % 7;
                }
            } else if ("W" in d || "U" in d) {
                if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
                day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
                d.m = 0;
                d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
            }
            // If a time zone is specified, all fields are interpreted as UTC and then
            // offset according to the specified time zone.
            if ("Z" in d) {
                d.H += d.Z / 100 | 0;
                d.M += d.Z % 100;
                return utcDate(d);
            }
            // Otherwise, all fields are in local time.
            return localDate(d);
        };
    }
    function parseSpecifier(d, specifier, string, j) {
        var i = 0, n = specifier.length, m = string.length, c, parse;
        while(i < n){
            if (j >= m) return -1;
            c = specifier.charCodeAt(i++);
            if (c === 37) {
                c = specifier.charAt(i++);
                parse = parses[c in pads ? specifier.charAt(i++) : c];
                if (!parse || (j = parse(d, string, j)) < 0) return -1;
            } else if (c != string.charCodeAt(j++)) return -1;
        }
        return j;
    }
    function parsePeriod(d, string, i) {
        var n = periodRe.exec(string.slice(i));
        return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseShortWeekday(d, string, i) {
        var n = shortWeekdayRe.exec(string.slice(i));
        return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseWeekday(d, string, i) {
        var n = weekdayRe.exec(string.slice(i));
        return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseShortMonth(d, string, i) {
        var n = shortMonthRe.exec(string.slice(i));
        return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseMonth(d, string, i) {
        var n = monthRe.exec(string.slice(i));
        return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseLocaleDateTime(d, string, i) {
        return parseSpecifier(d, locale_dateTime, string, i);
    }
    function parseLocaleDate(d, string, i) {
        return parseSpecifier(d, locale_date, string, i);
    }
    function parseLocaleTime(d, string, i) {
        return parseSpecifier(d, locale_time, string, i);
    }
    function formatShortWeekday(d) {
        return locale_shortWeekdays[d.getDay()];
    }
    function formatWeekday(d) {
        return locale_weekdays[d.getDay()];
    }
    function formatShortMonth(d) {
        return locale_shortMonths[d.getMonth()];
    }
    function formatMonth(d) {
        return locale_months[d.getMonth()];
    }
    function formatPeriod(d) {
        return locale_periods[+(d.getHours() >= 12)];
    }
    function formatQuarter(d) {
        return 1 + ~~(d.getMonth() / 3);
    }
    function formatUTCShortWeekday(d) {
        return locale_shortWeekdays[d.getUTCDay()];
    }
    function formatUTCWeekday(d) {
        return locale_weekdays[d.getUTCDay()];
    }
    function formatUTCShortMonth(d) {
        return locale_shortMonths[d.getUTCMonth()];
    }
    function formatUTCMonth(d) {
        return locale_months[d.getUTCMonth()];
    }
    function formatUTCPeriod(d) {
        return locale_periods[+(d.getUTCHours() >= 12)];
    }
    function formatUTCQuarter(d) {
        return 1 + ~~(d.getUTCMonth() / 3);
    }
    return {
        format: function(specifier) {
            var f = newFormat(specifier += "", formats);
            f.toString = function() {
                return specifier;
            };
            return f;
        },
        parse: function(specifier) {
            var p = newParse(specifier += "", false);
            p.toString = function() {
                return specifier;
            };
            return p;
        },
        utcFormat: function(specifier) {
            var f = newFormat(specifier += "", utcFormats);
            f.toString = function() {
                return specifier;
            };
            return f;
        },
        utcParse: function(specifier) {
            var p = newParse(specifier += "", true);
            p.toString = function() {
                return specifier;
            };
            return p;
        }
    };
}
var pads = {
    "-": "",
    "_": " ",
    "0": "0"
}, numberRe = /^\s*\d+/, percentRe = /^%/, requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote(s) {
    return s.replace(requoteRe, "\\$&");
}
function formatRe(names) {
    return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
    return new Map(names.map((name, i)=>[
            name.toLowerCase(),
            i
        ]));
}
function parseWeekdayNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.w = +n[0], i + n[0].length) : -1;
}
function parseWeekdayNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.u = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.U = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberISO(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.V = +n[0], i + n[0].length) : -1;
}
function parseWeekNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.W = +n[0], i + n[0].length) : -1;
}
function parseFullYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 4));
    return n ? (d.y = +n[0], i + n[0].length) : -1;
}
function parseYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}
function parseZone(d, string, i) {
    var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}
function parseQuarter(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}
function parseMonthNumber(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}
function parseDayOfMonth(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.d = +n[0], i + n[0].length) : -1;
}
function parseDayOfYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}
function parseHour24(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.H = +n[0], i + n[0].length) : -1;
}
function parseMinutes(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.M = +n[0], i + n[0].length) : -1;
}
function parseSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.S = +n[0], i + n[0].length) : -1;
}
function parseMilliseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.L = +n[0], i + n[0].length) : -1;
}
function parseMicroseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 6));
    return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}
function parseLiteralPercent(d, string, i) {
    var n = percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
}
function parseUnixTimestamp(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.Q = +n[0], i + n[0].length) : -1;
}
function parseUnixTimestampSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.s = +n[0], i + n[0].length) : -1;
}
function formatDayOfMonth(d, p) {
    return pad(d.getDate(), p, 2);
}
function formatHour24(d, p) {
    return pad(d.getHours(), p, 2);
}
function formatHour12(d, p) {
    return pad(d.getHours() % 12 || 12, p, 2);
}
function formatDayOfYear(d, p) {
    return pad(1 + (0, _d3Time.timeDay).count((0, _d3Time.timeYear)(d), d), p, 3);
}
function formatMilliseconds(d, p) {
    return pad(d.getMilliseconds(), p, 3);
}
function formatMicroseconds(d, p) {
    return formatMilliseconds(d, p) + "000";
}
function formatMonthNumber(d, p) {
    return pad(d.getMonth() + 1, p, 2);
}
function formatMinutes(d, p) {
    return pad(d.getMinutes(), p, 2);
}
function formatSeconds(d, p) {
    return pad(d.getSeconds(), p, 2);
}
function formatWeekdayNumberMonday(d) {
    var day = d.getDay();
    return day === 0 ? 7 : day;
}
function formatWeekNumberSunday(d, p) {
    return pad((0, _d3Time.timeSunday).count((0, _d3Time.timeYear)(d) - 1, d), p, 2);
}
function dISO(d) {
    var day = d.getDay();
    return day >= 4 || day === 0 ? (0, _d3Time.timeThursday)(d) : (0, _d3Time.timeThursday).ceil(d);
}
function formatWeekNumberISO(d, p) {
    d = dISO(d);
    return pad((0, _d3Time.timeThursday).count((0, _d3Time.timeYear)(d), d) + ((0, _d3Time.timeYear)(d).getDay() === 4), p, 2);
}
function formatWeekdayNumberSunday(d) {
    return d.getDay();
}
function formatWeekNumberMonday(d, p) {
    return pad((0, _d3Time.timeMonday).count((0, _d3Time.timeYear)(d) - 1, d), p, 2);
}
function formatYear(d, p) {
    return pad(d.getFullYear() % 100, p, 2);
}
function formatYearISO(d, p) {
    d = dISO(d);
    return pad(d.getFullYear() % 100, p, 2);
}
function formatFullYear(d, p) {
    return pad(d.getFullYear() % 10000, p, 4);
}
function formatFullYearISO(d, p) {
    var day = d.getDay();
    d = day >= 4 || day === 0 ? (0, _d3Time.timeThursday)(d) : (0, _d3Time.timeThursday).ceil(d);
    return pad(d.getFullYear() % 10000, p, 4);
}
function formatZone(d) {
    var z = d.getTimezoneOffset();
    return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}
function formatUTCDayOfMonth(d, p) {
    return pad(d.getUTCDate(), p, 2);
}
function formatUTCHour24(d, p) {
    return pad(d.getUTCHours(), p, 2);
}
function formatUTCHour12(d, p) {
    return pad(d.getUTCHours() % 12 || 12, p, 2);
}
function formatUTCDayOfYear(d, p) {
    return pad(1 + (0, _d3Time.utcDay).count((0, _d3Time.utcYear)(d), d), p, 3);
}
function formatUTCMilliseconds(d, p) {
    return pad(d.getUTCMilliseconds(), p, 3);
}
function formatUTCMicroseconds(d, p) {
    return formatUTCMilliseconds(d, p) + "000";
}
function formatUTCMonthNumber(d, p) {
    return pad(d.getUTCMonth() + 1, p, 2);
}
function formatUTCMinutes(d, p) {
    return pad(d.getUTCMinutes(), p, 2);
}
function formatUTCSeconds(d, p) {
    return pad(d.getUTCSeconds(), p, 2);
}
function formatUTCWeekdayNumberMonday(d) {
    var dow = d.getUTCDay();
    return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d, p) {
    return pad((0, _d3Time.utcSunday).count((0, _d3Time.utcYear)(d) - 1, d), p, 2);
}
function UTCdISO(d) {
    var day = d.getUTCDay();
    return day >= 4 || day === 0 ? (0, _d3Time.utcThursday)(d) : (0, _d3Time.utcThursday).ceil(d);
}
function formatUTCWeekNumberISO(d, p) {
    d = UTCdISO(d);
    return pad((0, _d3Time.utcThursday).count((0, _d3Time.utcYear)(d), d) + ((0, _d3Time.utcYear)(d).getUTCDay() === 4), p, 2);
}
function formatUTCWeekdayNumberSunday(d) {
    return d.getUTCDay();
}
function formatUTCWeekNumberMonday(d, p) {
    return pad((0, _d3Time.utcMonday).count((0, _d3Time.utcYear)(d) - 1, d), p, 2);
}
function formatUTCYear(d, p) {
    return pad(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCYearISO(d, p) {
    d = UTCdISO(d);
    return pad(d.getUTCFullYear() % 100, p, 2);
}
function formatUTCFullYear(d, p) {
    return pad(d.getUTCFullYear() % 10000, p, 4);
}
function formatUTCFullYearISO(d, p) {
    var day = d.getUTCDay();
    d = day >= 4 || day === 0 ? (0, _d3Time.utcThursday)(d) : (0, _d3Time.utcThursday).ceil(d);
    return pad(d.getUTCFullYear() % 10000, p, 4);
}
function formatUTCZone() {
    return "+0000";
}
function formatLiteralPercent() {
    return "%";
}
function formatUnixTimestamp(d) {
    return +d;
}
function formatUnixTimestampSeconds(d) {
    return Math.floor(+d / 1000);
}

},{"d3-time":"1UOEe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6ufv7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>utcTime);
var _d3Time = require("d3-time");
var _d3TimeFormat = require("d3-time-format");
var _timeJs = require("./time.js");
var _initJs = require("./init.js");
function utcTime() {
    return (0, _initJs.initRange).apply((0, _timeJs.calendar)((0, _d3Time.utcTicks), (0, _d3Time.utcTickInterval), (0, _d3Time.utcYear), (0, _d3Time.utcMonth), (0, _d3Time.utcWeek), (0, _d3Time.utcDay), (0, _d3Time.utcHour), (0, _d3Time.utcMinute), (0, _d3Time.utcSecond), (0, _d3TimeFormat.utcFormat)).domain([
        Date.UTC(2000, 0, 1),
        Date.UTC(2000, 0, 2)
    ]), arguments);
}

},{"d3-time":"1UOEe","d3-time-format":"4FtNS","./time.js":"7UVid","./init.js":"kp8lc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aMNy9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "copy", ()=>copy);
parcelHelpers.export(exports, "default", ()=>sequential);
parcelHelpers.export(exports, "sequentialLog", ()=>sequentialLog);
parcelHelpers.export(exports, "sequentialSymlog", ()=>sequentialSymlog);
parcelHelpers.export(exports, "sequentialPow", ()=>sequentialPow);
parcelHelpers.export(exports, "sequentialSqrt", ()=>sequentialSqrt);
var _d3Interpolate = require("d3-interpolate");
var _continuousJs = require("./continuous.js");
var _initJs = require("./init.js");
var _linearJs = require("./linear.js");
var _logJs = require("./log.js");
var _symlogJs = require("./symlog.js");
var _powJs = require("./pow.js");
function transformer() {
    var x0 = 0, x1 = 1, t0, t1, k10, transform, interpolator = (0, _continuousJs.identity), clamp = false, unknown;
    function scale(x) {
        return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
    }
    scale.domain = function(_) {
        return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [
            x0,
            x1
        ];
    };
    scale.clamp = function(_) {
        return arguments.length ? (clamp = !!_, scale) : clamp;
    };
    scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    function range(interpolate) {
        return function(_) {
            var r0, r1;
            return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [
                interpolator(0),
                interpolator(1)
            ];
        };
    }
    scale.range = range((0, _d3Interpolate.interpolate));
    scale.rangeRound = range((0, _d3Interpolate.interpolateRound));
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t) {
        transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
        return scale;
    };
}
function copy(source, target) {
    return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
}
function sequential() {
    var scale = (0, _linearJs.linearish)(transformer()((0, _continuousJs.identity)));
    scale.copy = function() {
        return copy(scale, sequential());
    };
    return (0, _initJs.initInterpolator).apply(scale, arguments);
}
function sequentialLog() {
    var scale = (0, _logJs.loggish)(transformer()).domain([
        1,
        10
    ]);
    scale.copy = function() {
        return copy(scale, sequentialLog()).base(scale.base());
    };
    return (0, _initJs.initInterpolator).apply(scale, arguments);
}
function sequentialSymlog() {
    var scale = (0, _symlogJs.symlogish)(transformer());
    scale.copy = function() {
        return copy(scale, sequentialSymlog()).constant(scale.constant());
    };
    return (0, _initJs.initInterpolator).apply(scale, arguments);
}
function sequentialPow() {
    var scale = (0, _powJs.powish)(transformer());
    scale.copy = function() {
        return copy(scale, sequentialPow()).exponent(scale.exponent());
    };
    return (0, _initJs.initInterpolator).apply(scale, arguments);
}
function sequentialSqrt() {
    return sequentialPow.apply(null, arguments).exponent(0.5);
}

},{"d3-interpolate":"6jJyi","./continuous.js":"1LsCM","./init.js":"kp8lc","./linear.js":"lob4K","./log.js":"z4t8s","./symlog.js":"4KiG8","./pow.js":"jVG8A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3BN2V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>diverging);
parcelHelpers.export(exports, "divergingLog", ()=>divergingLog);
parcelHelpers.export(exports, "divergingSymlog", ()=>divergingSymlog);
parcelHelpers.export(exports, "divergingPow", ()=>divergingPow);
parcelHelpers.export(exports, "divergingSqrt", ()=>divergingSqrt);
var _d3Interpolate = require("d3-interpolate");
var _continuousJs = require("./continuous.js");
var _initJs = require("./init.js");
var _linearJs = require("./linear.js");
var _logJs = require("./log.js");
var _sequentialJs = require("./sequential.js");
var _symlogJs = require("./symlog.js");
var _powJs = require("./pow.js");
function transformer() {
    var x0 = 0, x1 = 0.5, x2 = 1, s = 1, t0, t1, t2, k10, k21, interpolator = (0, _continuousJs.identity), transform, clamp = false, unknown;
    function scale(x) {
        return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
    }
    scale.domain = function(_) {
        return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [
            x0,
            x1,
            x2
        ];
    };
    scale.clamp = function(_) {
        return arguments.length ? (clamp = !!_, scale) : clamp;
    };
    scale.interpolator = function(_) {
        return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    function range(interpolate) {
        return function(_) {
            var r0, r1, r2;
            return arguments.length ? ([r0, r1, r2] = _, interpolator = (0, _d3Interpolate.piecewise)(interpolate, [
                r0,
                r1,
                r2
            ]), scale) : [
                interpolator(0),
                interpolator(0.5),
                interpolator(1)
            ];
        };
    }
    scale.range = range((0, _d3Interpolate.interpolate));
    scale.rangeRound = range((0, _d3Interpolate.interpolateRound));
    scale.unknown = function(_) {
        return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t) {
        transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;
        return scale;
    };
}
function diverging() {
    var scale = (0, _linearJs.linearish)(transformer()((0, _continuousJs.identity)));
    scale.copy = function() {
        return (0, _sequentialJs.copy)(scale, diverging());
    };
    return (0, _initJs.initInterpolator).apply(scale, arguments);
}
function divergingLog() {
    var scale = (0, _logJs.loggish)(transformer()).domain([
        0.1,
        1,
        10
    ]);
    scale.copy = function() {
        return (0, _sequentialJs.copy)(scale, divergingLog()).base(scale.base());
    };
    return (0, _initJs.initInterpolator).apply(scale, arguments);
}
function divergingSymlog() {
    var scale = (0, _symlogJs.symlogish)(transformer());
    scale.copy = function() {
        return (0, _sequentialJs.copy)(scale, divergingSymlog()).constant(scale.constant());
    };
    return (0, _initJs.initInterpolator).apply(scale, arguments);
}
function divergingPow() {
    var scale = (0, _powJs.powish)(transformer());
    scale.copy = function() {
        return (0, _sequentialJs.copy)(scale, divergingPow()).exponent(scale.exponent());
    };
    return (0, _initJs.initInterpolator).apply(scale, arguments);
}
function divergingSqrt() {
    return divergingPow.apply(null, arguments).exponent(0.5);
}

},{"d3-interpolate":"6jJyi","./continuous.js":"1LsCM","./init.js":"kp8lc","./linear.js":"lob4K","./log.js":"z4t8s","./sequential.js":"aMNy9","./symlog.js":"4KiG8","./pow.js":"jVG8A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dfCpU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "schemeCategory10", ()=>(0, _category10JsDefault.default));
parcelHelpers.export(exports, "schemeAccent", ()=>(0, _accentJsDefault.default));
parcelHelpers.export(exports, "schemeDark2", ()=>(0, _dark2JsDefault.default));
parcelHelpers.export(exports, "schemeObservable10", ()=>(0, _observable10JsDefault.default));
parcelHelpers.export(exports, "schemePaired", ()=>(0, _pairedJsDefault.default));
parcelHelpers.export(exports, "schemePastel1", ()=>(0, _pastel1JsDefault.default));
parcelHelpers.export(exports, "schemePastel2", ()=>(0, _pastel2JsDefault.default));
parcelHelpers.export(exports, "schemeSet1", ()=>(0, _set1JsDefault.default));
parcelHelpers.export(exports, "schemeSet2", ()=>(0, _set2JsDefault.default));
parcelHelpers.export(exports, "schemeSet3", ()=>(0, _set3JsDefault.default));
parcelHelpers.export(exports, "schemeTableau10", ()=>(0, _tableau10JsDefault.default));
parcelHelpers.export(exports, "interpolateBrBG", ()=>(0, _brBGJsDefault.default));
parcelHelpers.export(exports, "schemeBrBG", ()=>(0, _brBGJs.scheme));
parcelHelpers.export(exports, "interpolatePRGn", ()=>(0, _prgnJsDefault.default));
parcelHelpers.export(exports, "schemePRGn", ()=>(0, _prgnJs.scheme));
parcelHelpers.export(exports, "interpolatePiYG", ()=>(0, _piYGJsDefault.default));
parcelHelpers.export(exports, "schemePiYG", ()=>(0, _piYGJs.scheme));
parcelHelpers.export(exports, "interpolatePuOr", ()=>(0, _puOrJsDefault.default));
parcelHelpers.export(exports, "schemePuOr", ()=>(0, _puOrJs.scheme));
parcelHelpers.export(exports, "interpolateRdBu", ()=>(0, _rdBuJsDefault.default));
parcelHelpers.export(exports, "schemeRdBu", ()=>(0, _rdBuJs.scheme));
parcelHelpers.export(exports, "interpolateRdGy", ()=>(0, _rdGyJsDefault.default));
parcelHelpers.export(exports, "schemeRdGy", ()=>(0, _rdGyJs.scheme));
parcelHelpers.export(exports, "interpolateRdYlBu", ()=>(0, _rdYlBuJsDefault.default));
parcelHelpers.export(exports, "schemeRdYlBu", ()=>(0, _rdYlBuJs.scheme));
parcelHelpers.export(exports, "interpolateRdYlGn", ()=>(0, _rdYlGnJsDefault.default));
parcelHelpers.export(exports, "schemeRdYlGn", ()=>(0, _rdYlGnJs.scheme));
parcelHelpers.export(exports, "interpolateSpectral", ()=>(0, _spectralJsDefault.default));
parcelHelpers.export(exports, "schemeSpectral", ()=>(0, _spectralJs.scheme));
parcelHelpers.export(exports, "interpolateBuGn", ()=>(0, _buGnJsDefault.default));
parcelHelpers.export(exports, "schemeBuGn", ()=>(0, _buGnJs.scheme));
parcelHelpers.export(exports, "interpolateBuPu", ()=>(0, _buPuJsDefault.default));
parcelHelpers.export(exports, "schemeBuPu", ()=>(0, _buPuJs.scheme));
parcelHelpers.export(exports, "interpolateGnBu", ()=>(0, _gnBuJsDefault.default));
parcelHelpers.export(exports, "schemeGnBu", ()=>(0, _gnBuJs.scheme));
parcelHelpers.export(exports, "interpolateOrRd", ()=>(0, _orRdJsDefault.default));
parcelHelpers.export(exports, "schemeOrRd", ()=>(0, _orRdJs.scheme));
parcelHelpers.export(exports, "interpolatePuBuGn", ()=>(0, _puBuGnJsDefault.default));
parcelHelpers.export(exports, "schemePuBuGn", ()=>(0, _puBuGnJs.scheme));
parcelHelpers.export(exports, "interpolatePuBu", ()=>(0, _puBuJsDefault.default));
parcelHelpers.export(exports, "schemePuBu", ()=>(0, _puBuJs.scheme));
parcelHelpers.export(exports, "interpolatePuRd", ()=>(0, _puRdJsDefault.default));
parcelHelpers.export(exports, "schemePuRd", ()=>(0, _puRdJs.scheme));
parcelHelpers.export(exports, "interpolateRdPu", ()=>(0, _rdPuJsDefault.default));
parcelHelpers.export(exports, "schemeRdPu", ()=>(0, _rdPuJs.scheme));
parcelHelpers.export(exports, "interpolateYlGnBu", ()=>(0, _ylGnBuJsDefault.default));
parcelHelpers.export(exports, "schemeYlGnBu", ()=>(0, _ylGnBuJs.scheme));
parcelHelpers.export(exports, "interpolateYlGn", ()=>(0, _ylGnJsDefault.default));
parcelHelpers.export(exports, "schemeYlGn", ()=>(0, _ylGnJs.scheme));
parcelHelpers.export(exports, "interpolateYlOrBr", ()=>(0, _ylOrBrJsDefault.default));
parcelHelpers.export(exports, "schemeYlOrBr", ()=>(0, _ylOrBrJs.scheme));
parcelHelpers.export(exports, "interpolateYlOrRd", ()=>(0, _ylOrRdJsDefault.default));
parcelHelpers.export(exports, "schemeYlOrRd", ()=>(0, _ylOrRdJs.scheme));
parcelHelpers.export(exports, "interpolateBlues", ()=>(0, _bluesJsDefault.default));
parcelHelpers.export(exports, "schemeBlues", ()=>(0, _bluesJs.scheme));
parcelHelpers.export(exports, "interpolateGreens", ()=>(0, _greensJsDefault.default));
parcelHelpers.export(exports, "schemeGreens", ()=>(0, _greensJs.scheme));
parcelHelpers.export(exports, "interpolateGreys", ()=>(0, _greysJsDefault.default));
parcelHelpers.export(exports, "schemeGreys", ()=>(0, _greysJs.scheme));
parcelHelpers.export(exports, "interpolatePurples", ()=>(0, _purplesJsDefault.default));
parcelHelpers.export(exports, "schemePurples", ()=>(0, _purplesJs.scheme));
parcelHelpers.export(exports, "interpolateReds", ()=>(0, _redsJsDefault.default));
parcelHelpers.export(exports, "schemeReds", ()=>(0, _redsJs.scheme));
parcelHelpers.export(exports, "interpolateOranges", ()=>(0, _orangesJsDefault.default));
parcelHelpers.export(exports, "schemeOranges", ()=>(0, _orangesJs.scheme));
parcelHelpers.export(exports, "interpolateCividis", ()=>(0, _cividisJsDefault.default));
parcelHelpers.export(exports, "interpolateCubehelixDefault", ()=>(0, _cubehelixJsDefault.default));
parcelHelpers.export(exports, "interpolateRainbow", ()=>(0, _rainbowJsDefault.default));
parcelHelpers.export(exports, "interpolateWarm", ()=>(0, _rainbowJs.warm));
parcelHelpers.export(exports, "interpolateCool", ()=>(0, _rainbowJs.cool));
parcelHelpers.export(exports, "interpolateSinebow", ()=>(0, _sinebowJsDefault.default));
parcelHelpers.export(exports, "interpolateTurbo", ()=>(0, _turboJsDefault.default));
parcelHelpers.export(exports, "interpolateViridis", ()=>(0, _viridisJsDefault.default));
parcelHelpers.export(exports, "interpolateMagma", ()=>(0, _viridisJs.magma));
parcelHelpers.export(exports, "interpolateInferno", ()=>(0, _viridisJs.inferno));
parcelHelpers.export(exports, "interpolatePlasma", ()=>(0, _viridisJs.plasma));
var _category10Js = require("./categorical/category10.js");
var _category10JsDefault = parcelHelpers.interopDefault(_category10Js);
var _accentJs = require("./categorical/Accent.js");
var _accentJsDefault = parcelHelpers.interopDefault(_accentJs);
var _dark2Js = require("./categorical/Dark2.js");
var _dark2JsDefault = parcelHelpers.interopDefault(_dark2Js);
var _observable10Js = require("./categorical/observable10.js");
var _observable10JsDefault = parcelHelpers.interopDefault(_observable10Js);
var _pairedJs = require("./categorical/Paired.js");
var _pairedJsDefault = parcelHelpers.interopDefault(_pairedJs);
var _pastel1Js = require("./categorical/Pastel1.js");
var _pastel1JsDefault = parcelHelpers.interopDefault(_pastel1Js);
var _pastel2Js = require("./categorical/Pastel2.js");
var _pastel2JsDefault = parcelHelpers.interopDefault(_pastel2Js);
var _set1Js = require("./categorical/Set1.js");
var _set1JsDefault = parcelHelpers.interopDefault(_set1Js);
var _set2Js = require("./categorical/Set2.js");
var _set2JsDefault = parcelHelpers.interopDefault(_set2Js);
var _set3Js = require("./categorical/Set3.js");
var _set3JsDefault = parcelHelpers.interopDefault(_set3Js);
var _tableau10Js = require("./categorical/Tableau10.js");
var _tableau10JsDefault = parcelHelpers.interopDefault(_tableau10Js);
var _brBGJs = require("./diverging/BrBG.js");
var _brBGJsDefault = parcelHelpers.interopDefault(_brBGJs);
var _prgnJs = require("./diverging/PRGn.js");
var _prgnJsDefault = parcelHelpers.interopDefault(_prgnJs);
var _piYGJs = require("./diverging/PiYG.js");
var _piYGJsDefault = parcelHelpers.interopDefault(_piYGJs);
var _puOrJs = require("./diverging/PuOr.js");
var _puOrJsDefault = parcelHelpers.interopDefault(_puOrJs);
var _rdBuJs = require("./diverging/RdBu.js");
var _rdBuJsDefault = parcelHelpers.interopDefault(_rdBuJs);
var _rdGyJs = require("./diverging/RdGy.js");
var _rdGyJsDefault = parcelHelpers.interopDefault(_rdGyJs);
var _rdYlBuJs = require("./diverging/RdYlBu.js");
var _rdYlBuJsDefault = parcelHelpers.interopDefault(_rdYlBuJs);
var _rdYlGnJs = require("./diverging/RdYlGn.js");
var _rdYlGnJsDefault = parcelHelpers.interopDefault(_rdYlGnJs);
var _spectralJs = require("./diverging/Spectral.js");
var _spectralJsDefault = parcelHelpers.interopDefault(_spectralJs);
var _buGnJs = require("./sequential-multi/BuGn.js");
var _buGnJsDefault = parcelHelpers.interopDefault(_buGnJs);
var _buPuJs = require("./sequential-multi/BuPu.js");
var _buPuJsDefault = parcelHelpers.interopDefault(_buPuJs);
var _gnBuJs = require("./sequential-multi/GnBu.js");
var _gnBuJsDefault = parcelHelpers.interopDefault(_gnBuJs);
var _orRdJs = require("./sequential-multi/OrRd.js");
var _orRdJsDefault = parcelHelpers.interopDefault(_orRdJs);
var _puBuGnJs = require("./sequential-multi/PuBuGn.js");
var _puBuGnJsDefault = parcelHelpers.interopDefault(_puBuGnJs);
var _puBuJs = require("./sequential-multi/PuBu.js");
var _puBuJsDefault = parcelHelpers.interopDefault(_puBuJs);
var _puRdJs = require("./sequential-multi/PuRd.js");
var _puRdJsDefault = parcelHelpers.interopDefault(_puRdJs);
var _rdPuJs = require("./sequential-multi/RdPu.js");
var _rdPuJsDefault = parcelHelpers.interopDefault(_rdPuJs);
var _ylGnBuJs = require("./sequential-multi/YlGnBu.js");
var _ylGnBuJsDefault = parcelHelpers.interopDefault(_ylGnBuJs);
var _ylGnJs = require("./sequential-multi/YlGn.js");
var _ylGnJsDefault = parcelHelpers.interopDefault(_ylGnJs);
var _ylOrBrJs = require("./sequential-multi/YlOrBr.js");
var _ylOrBrJsDefault = parcelHelpers.interopDefault(_ylOrBrJs);
var _ylOrRdJs = require("./sequential-multi/YlOrRd.js");
var _ylOrRdJsDefault = parcelHelpers.interopDefault(_ylOrRdJs);
var _bluesJs = require("./sequential-single/Blues.js");
var _bluesJsDefault = parcelHelpers.interopDefault(_bluesJs);
var _greensJs = require("./sequential-single/Greens.js");
var _greensJsDefault = parcelHelpers.interopDefault(_greensJs);
var _greysJs = require("./sequential-single/Greys.js");
var _greysJsDefault = parcelHelpers.interopDefault(_greysJs);
var _purplesJs = require("./sequential-single/Purples.js");
var _purplesJsDefault = parcelHelpers.interopDefault(_purplesJs);
var _redsJs = require("./sequential-single/Reds.js");
var _redsJsDefault = parcelHelpers.interopDefault(_redsJs);
var _orangesJs = require("./sequential-single/Oranges.js");
var _orangesJsDefault = parcelHelpers.interopDefault(_orangesJs);
var _cividisJs = require("./sequential-multi/cividis.js");
var _cividisJsDefault = parcelHelpers.interopDefault(_cividisJs);
var _cubehelixJs = require("./sequential-multi/cubehelix.js");
var _cubehelixJsDefault = parcelHelpers.interopDefault(_cubehelixJs);
var _rainbowJs = require("./sequential-multi/rainbow.js");
var _rainbowJsDefault = parcelHelpers.interopDefault(_rainbowJs);
var _sinebowJs = require("./sequential-multi/sinebow.js");
var _sinebowJsDefault = parcelHelpers.interopDefault(_sinebowJs);
var _turboJs = require("./sequential-multi/turbo.js");
var _turboJsDefault = parcelHelpers.interopDefault(_turboJs);
var _viridisJs = require("./sequential-multi/viridis.js");
var _viridisJsDefault = parcelHelpers.interopDefault(_viridisJs);

},{"./categorical/category10.js":"j4Teo","./categorical/Accent.js":"lNYV9","./categorical/Dark2.js":"fK6db","./categorical/observable10.js":"4yg3D","./categorical/Paired.js":"7TRFs","./categorical/Pastel1.js":"8GWIR","./categorical/Pastel2.js":"5hLqW","./categorical/Set1.js":"6lXdW","./categorical/Set2.js":"ev0BU","./categorical/Set3.js":"ltDSo","./categorical/Tableau10.js":"gg57L","./diverging/BrBG.js":"aDyxU","./diverging/PRGn.js":"lJrID","./diverging/PiYG.js":"2UPPB","./diverging/PuOr.js":"hn6CX","./diverging/RdBu.js":"aBOAV","./diverging/RdGy.js":"6osTP","./diverging/RdYlBu.js":"hKUs9","./diverging/RdYlGn.js":"eKp3o","./diverging/Spectral.js":"9aNDP","./sequential-multi/BuGn.js":"22lwr","./sequential-multi/BuPu.js":"4irWf","./sequential-multi/GnBu.js":"964kK","./sequential-multi/OrRd.js":"3hdxq","./sequential-multi/PuBuGn.js":"9kVx1","./sequential-multi/PuBu.js":"43RCM","./sequential-multi/PuRd.js":"dhE1L","./sequential-multi/RdPu.js":"4Pqw0","./sequential-multi/YlGnBu.js":"3VnM6","./sequential-multi/YlGn.js":"f9Ai9","./sequential-multi/YlOrBr.js":"eI2jw","./sequential-multi/YlOrRd.js":"ao5E9","./sequential-single/Blues.js":"1pzBn","./sequential-single/Greens.js":"bVmeS","./sequential-single/Greys.js":"jsCuc","./sequential-single/Purples.js":"6Waty","./sequential-single/Reds.js":"2N3E3","./sequential-single/Oranges.js":"gWy5h","./sequential-multi/cividis.js":"2gM4s","./sequential-multi/cubehelix.js":"bK5z7","./sequential-multi/rainbow.js":"bjHKO","./sequential-multi/sinebow.js":"hqiUB","./sequential-multi/turbo.js":"6GvRp","./sequential-multi/viridis.js":"htSS8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j4Teo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = (0, _colorsJsDefault.default)("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eiYm8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(specifier) {
        var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;
        while(i < n)colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
        return colors;
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lNYV9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = (0, _colorsJsDefault.default)("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fK6db":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = (0, _colorsJsDefault.default)("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4yg3D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = (0, _colorsJsDefault.default)("4269d0efb118ff725c6cc5b03ca951ff8ab7a463f297bbf59c6b4e9498a0");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7TRFs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = (0, _colorsJsDefault.default)("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8GWIR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = (0, _colorsJsDefault.default)("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5hLqW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = (0, _colorsJsDefault.default)("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6lXdW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = (0, _colorsJsDefault.default)("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ev0BU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = (0, _colorsJsDefault.default)("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ltDSo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = (0, _colorsJsDefault.default)("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gg57L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
exports.default = (0, _colorsJsDefault.default)("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aDyxU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("d8b365f5f5f55ab4ac", "a6611adfc27d80cdc1018571", "a6611adfc27df5f5f580cdc1018571", "8c510ad8b365f6e8c3c7eae55ab4ac01665e", "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e", "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e", "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e", "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30", "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"289bX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Interpolate = require("d3-interpolate");
exports.default = (scheme)=>(0, _d3Interpolate.interpolateRgbBasis)(scheme[scheme.length - 1]);

},{"d3-interpolate":"6jJyi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lJrID":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("af8dc3f7f7f77fbf7b", "7b3294c2a5cfa6dba0008837", "7b3294c2a5cff7f7f7a6dba0008837", "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837", "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837", "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837", "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837", "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b", "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2UPPB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("e9a3c9f7f7f7a1d76a", "d01c8bf1b6dab8e1864dac26", "d01c8bf1b6daf7f7f7b8e1864dac26", "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221", "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221", "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221", "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221", "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419", "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hn6CX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("998ec3f7f7f7f1a340", "5e3c99b2abd2fdb863e66101", "5e3c99b2abd2f7f7f7fdb863e66101", "542788998ec3d8daebfee0b6f1a340b35806", "542788998ec3d8daebf7f7f7fee0b6f1a340b35806", "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806", "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806", "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08", "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aBOAV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("ef8a62f7f7f767a9cf", "ca0020f4a58292c5de0571b0", "ca0020f4a582f7f7f792c5de0571b0", "b2182bef8a62fddbc7d1e5f067a9cf2166ac", "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac", "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac", "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac", "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061", "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6osTP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("ef8a62ffffff999999", "ca0020f4a582bababa404040", "ca0020f4a582ffffffbababa404040", "b2182bef8a62fddbc7e0e0e09999994d4d4d", "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d", "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d", "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d", "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a", "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hKUs9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("fc8d59ffffbf91bfdb", "d7191cfdae61abd9e92c7bb6", "d7191cfdae61ffffbfabd9e92c7bb6", "d73027fc8d59fee090e0f3f891bfdb4575b4", "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4", "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4", "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4", "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695", "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eKp3o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("fc8d59ffffbf91cf60", "d7191cfdae61a6d96a1a9641", "d7191cfdae61ffffbfa6d96a1a9641", "d73027fc8d59fee08bd9ef8b91cf601a9850", "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850", "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850", "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850", "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837", "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9aNDP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("fc8d59ffffbf99d594", "d7191cfdae61abdda42b83ba", "d7191cfdae61ffffbfabdda42b83ba", "d53e4ffc8d59fee08be6f59899d5943288bd", "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd", "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd", "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd", "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2", "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"22lwr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("e5f5f999d8c92ca25f", "edf8fbb2e2e266c2a4238b45", "edf8fbb2e2e266c2a42ca25f006d2c", "edf8fbccece699d8c966c2a42ca25f006d2c", "edf8fbccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4irWf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("e0ecf49ebcda8856a7", "edf8fbb3cde38c96c688419d", "edf8fbb3cde38c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"964kK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("e0f3dba8ddb543a2ca", "f0f9e8bae4bc7bccc42b8cbe", "f0f9e8bae4bc7bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3hdxq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("fee8c8fdbb84e34a33", "fef0d9fdcc8afc8d59d7301f", "fef0d9fdcc8afc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9kVx1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("ece2f0a6bddb1c9099", "f6eff7bdc9e167a9cf02818a", "f6eff7bdc9e167a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"43RCM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("ece7f2a6bddb2b8cbe", "f1eef6bdc9e174a9cf0570b0", "f1eef6bdc9e174a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dhE1L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("e7e1efc994c7dd1c77", "f1eef6d7b5d8df65b0ce1256", "f1eef6d7b5d8df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Pqw0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("fde0ddfa9fb5c51b8a", "feebe2fbb4b9f768a1ae017e", "feebe2fbb4b9f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3VnM6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("edf8b17fcdbb2c7fb8", "ffffcca1dab441b6c4225ea8", "ffffcca1dab441b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f9Ai9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("f7fcb9addd8e31a354", "ffffccc2e69978c679238443", "ffffccc2e69978c67931a354006837", "ffffccd9f0a3addd8e78c67931a354006837", "ffffccd9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eI2jw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("fff7bcfec44fd95f0e", "ffffd4fed98efe9929cc4c02", "ffffd4fed98efe9929d95f0e993404", "ffffd4fee391fec44ffe9929d95f0e993404", "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ao5E9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("ffeda0feb24cf03b20", "ffffb2fecc5cfd8d3ce31a1c", "ffffb2fecc5cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1pzBn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("deebf79ecae13182bd", "eff3ffbdd7e76baed62171b5", "eff3ffbdd7e76baed63182bd08519c", "eff3ffc6dbef9ecae16baed63182bd08519c", "eff3ffc6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bVmeS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("e5f5e0a1d99b31a354", "edf8e9bae4b374c476238b45", "edf8e9bae4b374c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jsCuc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("f0f0f0bdbdbd636363", "f7f7f7cccccc969696525252", "f7f7f7cccccc969696636363252525", "f7f7f7d9d9d9bdbdbd969696636363252525", "f7f7f7d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Waty":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("efedf5bcbddc756bb1", "f2f0f7cbc9e29e9ac86a51a3", "f2f0f7cbc9e29e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2N3E3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("fee0d2fc9272de2d26", "fee5d9fcae91fb6a4acb181d", "fee5d9fcae91fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gWy5h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "scheme", ()=>scheme);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
var _rampJs = require("../ramp.js");
var _rampJsDefault = parcelHelpers.interopDefault(_rampJs);
var scheme = new Array(3).concat("fee6cefdae6be6550d", "feeddefdbe85fd8d3cd94701", "feeddefdbe85fd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map((0, _colorsJsDefault.default));
exports.default = (0, _rampJsDefault.default)(scheme);

},{"../colors.js":"eiYm8","../ramp.js":"289bX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2gM4s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(t) {
        t = Math.max(0, Math.min(1, t));
        return "rgb(" + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + ", " + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + ", " + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67))))))) + ")";
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bK5z7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _d3Color = require("d3-color");
var _d3Interpolate = require("d3-interpolate");
exports.default = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(300, 0.5, 0.0), (0, _d3Color.cubehelix)(-240, 0.5, 1.0));

},{"d3-color":"grhaa","d3-interpolate":"6jJyi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bjHKO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "warm", ()=>warm);
parcelHelpers.export(exports, "cool", ()=>cool);
parcelHelpers.export(exports, "default", ()=>function(t) {
        if (t < 0 || t > 1) t -= Math.floor(t);
        var ts = Math.abs(t - 0.5);
        c.h = 360 * t - 100;
        c.s = 1.5 - 1.5 * ts;
        c.l = 0.8 - 0.9 * ts;
        return c + "";
    });
var _d3Color = require("d3-color");
var _d3Interpolate = require("d3-interpolate");
var warm = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(-100, 0.75, 0.35), (0, _d3Color.cubehelix)(80, 1.50, 0.8));
var cool = (0, _d3Interpolate.interpolateCubehelixLong)((0, _d3Color.cubehelix)(260, 0.75, 0.35), (0, _d3Color.cubehelix)(80, 1.50, 0.8));
var c = (0, _d3Color.cubehelix)();

},{"d3-color":"grhaa","d3-interpolate":"6jJyi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hqiUB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(t) {
        var x;
        t = (0.5 - t) * Math.PI;
        c.r = 255 * (x = Math.sin(t)) * x;
        c.g = 255 * (x = Math.sin(t + pi_1_3)) * x;
        c.b = 255 * (x = Math.sin(t + pi_2_3)) * x;
        return c + "";
    });
var _d3Color = require("d3-color");
var c = (0, _d3Color.rgb)(), pi_1_3 = Math.PI / 3, pi_2_3 = Math.PI * 2 / 3;

},{"d3-color":"grhaa","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6GvRp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(t) {
        t = Math.max(0, Math.min(1, t));
        return "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66))))))) + ")";
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"htSS8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "magma", ()=>magma);
parcelHelpers.export(exports, "inferno", ()=>inferno);
parcelHelpers.export(exports, "plasma", ()=>plasma);
var _colorsJs = require("../colors.js");
var _colorsJsDefault = parcelHelpers.interopDefault(_colorsJs);
function ramp(range) {
    var n = range.length;
    return function(t) {
        return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
    };
}
exports.default = ramp((0, _colorsJsDefault.default)("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
var magma = ramp((0, _colorsJsDefault.default)("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
var inferno = ramp((0, _colorsJsDefault.default)("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
var plasma = ramp((0, _colorsJsDefault.default)("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

},{"../colors.js":"eiYm8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"SqrXv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "arc", ()=>(0, _arcJsDefault.default));
parcelHelpers.export(exports, "area", ()=>(0, _areaJsDefault.default));
parcelHelpers.export(exports, "line", ()=>(0, _lineJsDefault.default));
parcelHelpers.export(exports, "pie", ()=>(0, _pieJsDefault.default));
parcelHelpers.export(exports, "areaRadial", ()=>(0, _areaRadialJsDefault.default)) // Note: radialArea is deprecated!
;
parcelHelpers.export(exports, "radialArea", ()=>(0, _areaRadialJsDefault.default));
parcelHelpers.export(exports, "lineRadial", ()=>(0, _lineRadialJsDefault.default)) // Note: radialLine is deprecated!
;
parcelHelpers.export(exports, "radialLine", ()=>(0, _lineRadialJsDefault.default));
parcelHelpers.export(exports, "pointRadial", ()=>(0, _pointRadialJsDefault.default));
parcelHelpers.export(exports, "link", ()=>(0, _linkJs.link));
parcelHelpers.export(exports, "linkHorizontal", ()=>(0, _linkJs.linkHorizontal));
parcelHelpers.export(exports, "linkVertical", ()=>(0, _linkJs.linkVertical));
parcelHelpers.export(exports, "linkRadial", ()=>(0, _linkJs.linkRadial));
parcelHelpers.export(exports, "symbol", ()=>(0, _symbolJsDefault.default));
parcelHelpers.export(exports, "symbolsStroke", ()=>(0, _symbolJs.symbolsStroke));
parcelHelpers.export(exports, "symbolsFill", ()=>(0, _symbolJs.symbolsFill));
parcelHelpers.export(exports, "symbols", ()=>(0, _symbolJs.symbolsFill));
parcelHelpers.export(exports, "symbolAsterisk", ()=>(0, _asteriskJsDefault.default));
parcelHelpers.export(exports, "symbolCircle", ()=>(0, _circleJsDefault.default));
parcelHelpers.export(exports, "symbolCross", ()=>(0, _crossJsDefault.default));
parcelHelpers.export(exports, "symbolDiamond", ()=>(0, _diamondJsDefault.default));
parcelHelpers.export(exports, "symbolDiamond2", ()=>(0, _diamond2JsDefault.default));
parcelHelpers.export(exports, "symbolPlus", ()=>(0, _plusJsDefault.default));
parcelHelpers.export(exports, "symbolSquare", ()=>(0, _squareJsDefault.default));
parcelHelpers.export(exports, "symbolSquare2", ()=>(0, _square2JsDefault.default));
parcelHelpers.export(exports, "symbolStar", ()=>(0, _starJsDefault.default));
parcelHelpers.export(exports, "symbolTriangle", ()=>(0, _triangleJsDefault.default));
parcelHelpers.export(exports, "symbolTriangle2", ()=>(0, _triangle2JsDefault.default));
parcelHelpers.export(exports, "symbolWye", ()=>(0, _wyeJsDefault.default));
parcelHelpers.export(exports, "symbolTimes", ()=>(0, _timesJsDefault.default));
parcelHelpers.export(exports, "symbolX", ()=>(0, _timesJsDefault.default));
parcelHelpers.export(exports, "curveBasisClosed", ()=>(0, _basisClosedJsDefault.default));
parcelHelpers.export(exports, "curveBasisOpen", ()=>(0, _basisOpenJsDefault.default));
parcelHelpers.export(exports, "curveBasis", ()=>(0, _basisJsDefault.default));
parcelHelpers.export(exports, "curveBumpX", ()=>(0, _bumpJs.bumpX));
parcelHelpers.export(exports, "curveBumpY", ()=>(0, _bumpJs.bumpY));
parcelHelpers.export(exports, "curveBundle", ()=>(0, _bundleJsDefault.default));
parcelHelpers.export(exports, "curveCardinalClosed", ()=>(0, _cardinalClosedJsDefault.default));
parcelHelpers.export(exports, "curveCardinalOpen", ()=>(0, _cardinalOpenJsDefault.default));
parcelHelpers.export(exports, "curveCardinal", ()=>(0, _cardinalJsDefault.default));
parcelHelpers.export(exports, "curveCatmullRomClosed", ()=>(0, _catmullRomClosedJsDefault.default));
parcelHelpers.export(exports, "curveCatmullRomOpen", ()=>(0, _catmullRomOpenJsDefault.default));
parcelHelpers.export(exports, "curveCatmullRom", ()=>(0, _catmullRomJsDefault.default));
parcelHelpers.export(exports, "curveLinearClosed", ()=>(0, _linearClosedJsDefault.default));
parcelHelpers.export(exports, "curveLinear", ()=>(0, _linearJsDefault.default));
parcelHelpers.export(exports, "curveMonotoneX", ()=>(0, _monotoneJs.monotoneX));
parcelHelpers.export(exports, "curveMonotoneY", ()=>(0, _monotoneJs.monotoneY));
parcelHelpers.export(exports, "curveNatural", ()=>(0, _naturalJsDefault.default));
parcelHelpers.export(exports, "curveStep", ()=>(0, _stepJsDefault.default));
parcelHelpers.export(exports, "curveStepAfter", ()=>(0, _stepJs.stepAfter));
parcelHelpers.export(exports, "curveStepBefore", ()=>(0, _stepJs.stepBefore));
parcelHelpers.export(exports, "stack", ()=>(0, _stackJsDefault.default));
parcelHelpers.export(exports, "stackOffsetExpand", ()=>(0, _expandJsDefault.default));
parcelHelpers.export(exports, "stackOffsetDiverging", ()=>(0, _divergingJsDefault.default));
parcelHelpers.export(exports, "stackOffsetNone", ()=>(0, _noneJsDefault.default));
parcelHelpers.export(exports, "stackOffsetSilhouette", ()=>(0, _silhouetteJsDefault.default));
parcelHelpers.export(exports, "stackOffsetWiggle", ()=>(0, _wiggleJsDefault.default));
parcelHelpers.export(exports, "stackOrderAppearance", ()=>(0, _appearanceJsDefault.default));
parcelHelpers.export(exports, "stackOrderAscending", ()=>(0, _ascendingJsDefault.default));
parcelHelpers.export(exports, "stackOrderDescending", ()=>(0, _descendingJsDefault.default));
parcelHelpers.export(exports, "stackOrderInsideOut", ()=>(0, _insideOutJsDefault.default));
parcelHelpers.export(exports, "stackOrderNone", ()=>(0, _noneJsDefault1.default));
parcelHelpers.export(exports, "stackOrderReverse", ()=>(0, _reverseJsDefault.default));
var _arcJs = require("./arc.js");
var _arcJsDefault = parcelHelpers.interopDefault(_arcJs);
var _areaJs = require("./area.js");
var _areaJsDefault = parcelHelpers.interopDefault(_areaJs);
var _lineJs = require("./line.js");
var _lineJsDefault = parcelHelpers.interopDefault(_lineJs);
var _pieJs = require("./pie.js");
var _pieJsDefault = parcelHelpers.interopDefault(_pieJs);
var _areaRadialJs = require("./areaRadial.js");
var _areaRadialJsDefault = parcelHelpers.interopDefault(_areaRadialJs);
var _lineRadialJs = require("./lineRadial.js");
var _lineRadialJsDefault = parcelHelpers.interopDefault(_lineRadialJs);
var _pointRadialJs = require("./pointRadial.js");
var _pointRadialJsDefault = parcelHelpers.interopDefault(_pointRadialJs);
var _linkJs = require("./link.js");
var _symbolJs = require("./symbol.js");
var _symbolJsDefault = parcelHelpers.interopDefault(_symbolJs);
var _asteriskJs = require("./symbol/asterisk.js");
var _asteriskJsDefault = parcelHelpers.interopDefault(_asteriskJs);
var _circleJs = require("./symbol/circle.js");
var _circleJsDefault = parcelHelpers.interopDefault(_circleJs);
var _crossJs = require("./symbol/cross.js");
var _crossJsDefault = parcelHelpers.interopDefault(_crossJs);
var _diamondJs = require("./symbol/diamond.js");
var _diamondJsDefault = parcelHelpers.interopDefault(_diamondJs);
var _diamond2Js = require("./symbol/diamond2.js");
var _diamond2JsDefault = parcelHelpers.interopDefault(_diamond2Js);
var _plusJs = require("./symbol/plus.js");
var _plusJsDefault = parcelHelpers.interopDefault(_plusJs);
var _squareJs = require("./symbol/square.js");
var _squareJsDefault = parcelHelpers.interopDefault(_squareJs);
var _square2Js = require("./symbol/square2.js");
var _square2JsDefault = parcelHelpers.interopDefault(_square2Js);
var _starJs = require("./symbol/star.js");
var _starJsDefault = parcelHelpers.interopDefault(_starJs);
var _triangleJs = require("./symbol/triangle.js");
var _triangleJsDefault = parcelHelpers.interopDefault(_triangleJs);
var _triangle2Js = require("./symbol/triangle2.js");
var _triangle2JsDefault = parcelHelpers.interopDefault(_triangle2Js);
var _wyeJs = require("./symbol/wye.js");
var _wyeJsDefault = parcelHelpers.interopDefault(_wyeJs);
var _timesJs = require("./symbol/times.js");
var _timesJsDefault = parcelHelpers.interopDefault(_timesJs);
var _basisClosedJs = require("./curve/basisClosed.js");
var _basisClosedJsDefault = parcelHelpers.interopDefault(_basisClosedJs);
var _basisOpenJs = require("./curve/basisOpen.js");
var _basisOpenJsDefault = parcelHelpers.interopDefault(_basisOpenJs);
var _basisJs = require("./curve/basis.js");
var _basisJsDefault = parcelHelpers.interopDefault(_basisJs);
var _bumpJs = require("./curve/bump.js");
var _bundleJs = require("./curve/bundle.js");
var _bundleJsDefault = parcelHelpers.interopDefault(_bundleJs);
var _cardinalClosedJs = require("./curve/cardinalClosed.js");
var _cardinalClosedJsDefault = parcelHelpers.interopDefault(_cardinalClosedJs);
var _cardinalOpenJs = require("./curve/cardinalOpen.js");
var _cardinalOpenJsDefault = parcelHelpers.interopDefault(_cardinalOpenJs);
var _cardinalJs = require("./curve/cardinal.js");
var _cardinalJsDefault = parcelHelpers.interopDefault(_cardinalJs);
var _catmullRomClosedJs = require("./curve/catmullRomClosed.js");
var _catmullRomClosedJsDefault = parcelHelpers.interopDefault(_catmullRomClosedJs);
var _catmullRomOpenJs = require("./curve/catmullRomOpen.js");
var _catmullRomOpenJsDefault = parcelHelpers.interopDefault(_catmullRomOpenJs);
var _catmullRomJs = require("./curve/catmullRom.js");
var _catmullRomJsDefault = parcelHelpers.interopDefault(_catmullRomJs);
var _linearClosedJs = require("./curve/linearClosed.js");
var _linearClosedJsDefault = parcelHelpers.interopDefault(_linearClosedJs);
var _linearJs = require("./curve/linear.js");
var _linearJsDefault = parcelHelpers.interopDefault(_linearJs);
var _monotoneJs = require("./curve/monotone.js");
var _naturalJs = require("./curve/natural.js");
var _naturalJsDefault = parcelHelpers.interopDefault(_naturalJs);
var _stepJs = require("./curve/step.js");
var _stepJsDefault = parcelHelpers.interopDefault(_stepJs);
var _stackJs = require("./stack.js");
var _stackJsDefault = parcelHelpers.interopDefault(_stackJs);
var _expandJs = require("./offset/expand.js");
var _expandJsDefault = parcelHelpers.interopDefault(_expandJs);
var _divergingJs = require("./offset/diverging.js");
var _divergingJsDefault = parcelHelpers.interopDefault(_divergingJs);
var _noneJs = require("./offset/none.js");
var _noneJsDefault = parcelHelpers.interopDefault(_noneJs);
var _silhouetteJs = require("./offset/silhouette.js");
var _silhouetteJsDefault = parcelHelpers.interopDefault(_silhouetteJs);
var _wiggleJs = require("./offset/wiggle.js");
var _wiggleJsDefault = parcelHelpers.interopDefault(_wiggleJs);
var _appearanceJs = require("./order/appearance.js");
var _appearanceJsDefault = parcelHelpers.interopDefault(_appearanceJs);
var _ascendingJs = require("./order/ascending.js");
var _ascendingJsDefault = parcelHelpers.interopDefault(_ascendingJs);
var _descendingJs = require("./order/descending.js");
var _descendingJsDefault = parcelHelpers.interopDefault(_descendingJs);
var _insideOutJs = require("./order/insideOut.js");
var _insideOutJsDefault = parcelHelpers.interopDefault(_insideOutJs);
var _noneJs1 = require("./order/none.js");
var _noneJsDefault1 = parcelHelpers.interopDefault(_noneJs1);
var _reverseJs = require("./order/reverse.js");
var _reverseJsDefault = parcelHelpers.interopDefault(_reverseJs);

},{"./arc.js":false,"./area.js":"87W2h","./line.js":"hTFAN","./pie.js":false,"./areaRadial.js":false,"./lineRadial.js":false,"./pointRadial.js":false,"./link.js":false,"./symbol.js":"12bBv","./symbol/asterisk.js":"7qUSV","./symbol/circle.js":"jQjPb","./symbol/cross.js":"2CCQJ","./symbol/diamond.js":"afDKe","./symbol/diamond2.js":"3WPQ9","./symbol/plus.js":"ehHk2","./symbol/square.js":"3Rovu","./symbol/square2.js":"7rWsq","./symbol/star.js":"fqvh2","./symbol/triangle.js":"l2B6P","./symbol/triangle2.js":"k3OsU","./symbol/wye.js":"6dhtz","./symbol/times.js":"bnXdB","./curve/basisClosed.js":"jK8tZ","./curve/basisOpen.js":"9nzjm","./curve/basis.js":"lmIyE","./curve/bump.js":"etTRy","./curve/bundle.js":"9NCmN","./curve/cardinalClosed.js":"8btb4","./curve/cardinalOpen.js":"avKmC","./curve/cardinal.js":"brZ6e","./curve/catmullRomClosed.js":"3mnrZ","./curve/catmullRomOpen.js":"4v2qz","./curve/catmullRom.js":"j2hDs","./curve/linearClosed.js":"bZkPo","./curve/linear.js":"ajwdK","./curve/monotone.js":"akQ7S","./curve/natural.js":"ejsSN","./curve/step.js":"cenwN","./stack.js":false,"./offset/expand.js":false,"./offset/diverging.js":false,"./offset/none.js":false,"./offset/silhouette.js":false,"./offset/wiggle.js":false,"./order/appearance.js":false,"./order/ascending.js":false,"./order/descending.js":false,"./order/insideOut.js":false,"./order/none.js":false,"./order/reverse.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"87W2h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(x0, y0, y1) {
        var x1 = null, defined = (0, _constantJsDefault.default)(true), context = null, curve = (0, _linearJsDefault.default), output = null, path = (0, _pathJs.withPath)(area);
        x0 = typeof x0 === "function" ? x0 : x0 === undefined ? (0, _pointJs.x) : (0, _constantJsDefault.default)(+x0);
        y0 = typeof y0 === "function" ? y0 : y0 === undefined ? (0, _constantJsDefault.default)(0) : (0, _constantJsDefault.default)(+y0);
        y1 = typeof y1 === "function" ? y1 : y1 === undefined ? (0, _pointJs.y) : (0, _constantJsDefault.default)(+y1);
        function area(data) {
            var i, j, k, n = (data = (0, _arrayJsDefault.default)(data)).length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
            if (context == null) output = curve(buffer = path());
            for(i = 0; i <= n; ++i){
                if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                    if (defined0 = !defined0) {
                        j = i;
                        output.areaStart();
                        output.lineStart();
                    } else {
                        output.lineEnd();
                        output.lineStart();
                        for(k = i - 1; k >= j; --k)output.point(x0z[k], y0z[k]);
                        output.lineEnd();
                        output.areaEnd();
                    }
                }
                if (defined0) {
                    x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
                    output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
                }
            }
            if (buffer) return output = null, buffer + "" || null;
        }
        function arealine() {
            return (0, _lineJsDefault.default)().defined(defined).curve(curve).context(context);
        }
        area.x = function(_) {
            return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), x1 = null, area) : x0;
        };
        area.x0 = function(_) {
            return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), area) : x0;
        };
        area.x1 = function(_) {
            return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), area) : x1;
        };
        area.y = function(_) {
            return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), y1 = null, area) : y0;
        };
        area.y0 = function(_) {
            return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), area) : y0;
        };
        area.y1 = function(_) {
            return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), area) : y1;
        };
        area.lineX0 = area.lineY0 = function() {
            return arealine().x(x0).y(y0);
        };
        area.lineY1 = function() {
            return arealine().x(x0).y(y1);
        };
        area.lineX1 = function() {
            return arealine().x(x1).y(y0);
        };
        area.defined = function(_) {
            return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(!!_), area) : defined;
        };
        area.curve = function(_) {
            return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
        };
        area.context = function(_) {
            return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
        };
        return area;
    });
var _arrayJs = require("./array.js");
var _arrayJsDefault = parcelHelpers.interopDefault(_arrayJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _linearJs = require("./curve/linear.js");
var _linearJsDefault = parcelHelpers.interopDefault(_linearJs);
var _lineJs = require("./line.js");
var _lineJsDefault = parcelHelpers.interopDefault(_lineJs);
var _pathJs = require("./path.js");
var _pointJs = require("./point.js");

},{"./array.js":"6SJ8v","./constant.js":"dFe8v","./curve/linear.js":"ajwdK","./line.js":"hTFAN","./path.js":"gT5Z6","./point.js":"5bQ0r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6SJ8v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "slice", ()=>slice);
parcelHelpers.export(exports, "default", ()=>function(x) {
        return typeof x === "object" && "length" in x ? x // Array, TypedArray, NodeList, array-like
         : Array.from(x); // Map, Set, iterable, string, or anything else
    });
var slice = Array.prototype.slice;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dFe8v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(x) {
        return function constant() {
            return x;
        };
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ajwdK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(context) {
        return new Linear(context);
    });
function Linear(context) {
    this._context = context;
}
Linear.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2; // falls through
            default:
                this._context.lineTo(x, y);
                break;
        }
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hTFAN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(x, y) {
        var defined = (0, _constantJsDefault.default)(true), context = null, curve = (0, _linearJsDefault.default), output = null, path = (0, _pathJs.withPath)(line);
        x = typeof x === "function" ? x : x === undefined ? (0, _pointJs.x) : (0, _constantJsDefault.default)(x);
        y = typeof y === "function" ? y : y === undefined ? (0, _pointJs.y) : (0, _constantJsDefault.default)(y);
        function line(data) {
            var i, n = (data = (0, _arrayJsDefault.default)(data)).length, d, defined0 = false, buffer;
            if (context == null) output = curve(buffer = path());
            for(i = 0; i <= n; ++i){
                if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                    if (defined0 = !defined0) output.lineStart();
                    else output.lineEnd();
                }
                if (defined0) output.point(+x(d, i, data), +y(d, i, data));
            }
            if (buffer) return output = null, buffer + "" || null;
        }
        line.x = function(_) {
            return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), line) : x;
        };
        line.y = function(_) {
            return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), line) : y;
        };
        line.defined = function(_) {
            return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(!!_), line) : defined;
        };
        line.curve = function(_) {
            return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
        };
        line.context = function(_) {
            return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
        };
        return line;
    });
var _arrayJs = require("./array.js");
var _arrayJsDefault = parcelHelpers.interopDefault(_arrayJs);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _linearJs = require("./curve/linear.js");
var _linearJsDefault = parcelHelpers.interopDefault(_linearJs);
var _pathJs = require("./path.js");
var _pointJs = require("./point.js");

},{"./array.js":"6SJ8v","./constant.js":"dFe8v","./curve/linear.js":"ajwdK","./path.js":"gT5Z6","./point.js":"5bQ0r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gT5Z6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "withPath", ()=>withPath);
var _d3Path = require("d3-path");
function withPath(shape) {
    let digits = 3;
    shape.digits = function(_) {
        if (!arguments.length) return digits;
        if (_ == null) digits = null;
        else {
            const d = Math.floor(_);
            if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);
            digits = d;
        }
        return shape;
    };
    return ()=>new (0, _d3Path.Path)(digits);
}

},{"d3-path":"eY3pl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5bQ0r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "x", ()=>x);
parcelHelpers.export(exports, "y", ()=>y);
function x(p) {
    return p[0];
}
function y(p) {
    return p[1];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gH3Nl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(x, y) {
        return [
            (y = +y) * Math.cos(x -= Math.PI / 2),
            y * Math.sin(x)
        ];
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"12bBv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "symbolsFill", ()=>symbolsFill);
parcelHelpers.export(exports, "symbolsStroke", ()=>symbolsStroke);
parcelHelpers.export(exports, "default", ()=>Symbol);
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _pathJs = require("./path.js");
var _asteriskJs = require("./symbol/asterisk.js");
var _asteriskJsDefault = parcelHelpers.interopDefault(_asteriskJs);
var _circleJs = require("./symbol/circle.js");
var _circleJsDefault = parcelHelpers.interopDefault(_circleJs);
var _crossJs = require("./symbol/cross.js");
var _crossJsDefault = parcelHelpers.interopDefault(_crossJs);
var _diamondJs = require("./symbol/diamond.js");
var _diamondJsDefault = parcelHelpers.interopDefault(_diamondJs);
var _diamond2Js = require("./symbol/diamond2.js");
var _diamond2JsDefault = parcelHelpers.interopDefault(_diamond2Js);
var _plusJs = require("./symbol/plus.js");
var _plusJsDefault = parcelHelpers.interopDefault(_plusJs);
var _squareJs = require("./symbol/square.js");
var _squareJsDefault = parcelHelpers.interopDefault(_squareJs);
var _square2Js = require("./symbol/square2.js");
var _square2JsDefault = parcelHelpers.interopDefault(_square2Js);
var _starJs = require("./symbol/star.js");
var _starJsDefault = parcelHelpers.interopDefault(_starJs);
var _triangleJs = require("./symbol/triangle.js");
var _triangleJsDefault = parcelHelpers.interopDefault(_triangleJs);
var _triangle2Js = require("./symbol/triangle2.js");
var _triangle2JsDefault = parcelHelpers.interopDefault(_triangle2Js);
var _wyeJs = require("./symbol/wye.js");
var _wyeJsDefault = parcelHelpers.interopDefault(_wyeJs);
var _timesJs = require("./symbol/times.js");
var _timesJsDefault = parcelHelpers.interopDefault(_timesJs);
const symbolsFill = [
    (0, _circleJsDefault.default),
    (0, _crossJsDefault.default),
    (0, _diamondJsDefault.default),
    (0, _squareJsDefault.default),
    (0, _starJsDefault.default),
    (0, _triangleJsDefault.default),
    (0, _wyeJsDefault.default)
];
const symbolsStroke = [
    (0, _circleJsDefault.default),
    (0, _plusJsDefault.default),
    (0, _timesJsDefault.default),
    (0, _triangle2JsDefault.default),
    (0, _asteriskJsDefault.default),
    (0, _square2JsDefault.default),
    (0, _diamond2JsDefault.default)
];
function Symbol(type, size) {
    let context = null, path = (0, _pathJs.withPath)(symbol);
    type = typeof type === "function" ? type : (0, _constantJsDefault.default)(type || (0, _circleJsDefault.default));
    size = typeof size === "function" ? size : (0, _constantJsDefault.default)(size === undefined ? 64 : +size);
    function symbol() {
        let buffer;
        if (!context) context = buffer = path();
        type.apply(this, arguments).draw(context, +size.apply(this, arguments));
        if (buffer) return context = null, buffer + "" || null;
    }
    symbol.type = function(_) {
        return arguments.length ? (type = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(_), symbol) : type;
    };
    symbol.size = function(_) {
        return arguments.length ? (size = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), symbol) : size;
    };
    symbol.context = function(_) {
        return arguments.length ? (context = _ == null ? null : _, symbol) : context;
    };
    return symbol;
}

},{"./constant.js":"dFe8v","./path.js":"gT5Z6","./symbol/asterisk.js":"7qUSV","./symbol/circle.js":"jQjPb","./symbol/cross.js":"2CCQJ","./symbol/diamond.js":"afDKe","./symbol/diamond2.js":"3WPQ9","./symbol/plus.js":"ehHk2","./symbol/square.js":"3Rovu","./symbol/square2.js":"7rWsq","./symbol/star.js":"fqvh2","./symbol/triangle.js":"l2B6P","./symbol/triangle2.js":"k3OsU","./symbol/wye.js":"6dhtz","./symbol/times.js":"bnXdB","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7qUSV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
const sqrt3 = (0, _mathJs.sqrt)(3);
exports.default = {
    draw (context, size) {
        const r = (0, _mathJs.sqrt)(size + (0, _mathJs.min)(size / 28, 0.75)) * 0.59436;
        const t = r / 2;
        const u = t * sqrt3;
        context.moveTo(0, r);
        context.lineTo(0, -r);
        context.moveTo(-u, -t);
        context.lineTo(u, t);
        context.moveTo(-u, t);
        context.lineTo(u, -t);
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4VX7v":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "abs", ()=>abs);
parcelHelpers.export(exports, "atan2", ()=>atan2);
parcelHelpers.export(exports, "cos", ()=>cos);
parcelHelpers.export(exports, "max", ()=>max);
parcelHelpers.export(exports, "min", ()=>min);
parcelHelpers.export(exports, "sin", ()=>sin);
parcelHelpers.export(exports, "sqrt", ()=>sqrt);
parcelHelpers.export(exports, "epsilon", ()=>epsilon);
parcelHelpers.export(exports, "pi", ()=>pi);
parcelHelpers.export(exports, "halfPi", ()=>halfPi);
parcelHelpers.export(exports, "tau", ()=>tau);
parcelHelpers.export(exports, "acos", ()=>acos);
parcelHelpers.export(exports, "asin", ()=>asin);
const abs = Math.abs;
const atan2 = Math.atan2;
const cos = Math.cos;
const max = Math.max;
const min = Math.min;
const sin = Math.sin;
const sqrt = Math.sqrt;
const epsilon = 1e-12;
const pi = Math.PI;
const halfPi = pi / 2;
const tau = 2 * pi;
function acos(x) {
    return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}
function asin(x) {
    return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jQjPb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
exports.default = {
    draw (context, size) {
        const r = (0, _mathJs.sqrt)(size / (0, _mathJs.pi));
        context.moveTo(r, 0);
        context.arc(0, 0, r, 0, (0, _mathJs.tau));
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2CCQJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
exports.default = {
    draw (context, size) {
        const r = (0, _mathJs.sqrt)(size / 5) / 2;
        context.moveTo(-3 * r, -r);
        context.lineTo(-r, -r);
        context.lineTo(-r, -3 * r);
        context.lineTo(r, -3 * r);
        context.lineTo(r, -r);
        context.lineTo(3 * r, -r);
        context.lineTo(3 * r, r);
        context.lineTo(r, r);
        context.lineTo(r, 3 * r);
        context.lineTo(-r, 3 * r);
        context.lineTo(-r, r);
        context.lineTo(-3 * r, r);
        context.closePath();
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"afDKe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
const tan30 = (0, _mathJs.sqrt)(1 / 3);
const tan30_2 = tan30 * 2;
exports.default = {
    draw (context, size) {
        const y = (0, _mathJs.sqrt)(size / tan30_2);
        const x = y * tan30;
        context.moveTo(0, -y);
        context.lineTo(x, 0);
        context.lineTo(0, y);
        context.lineTo(-x, 0);
        context.closePath();
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3WPQ9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
exports.default = {
    draw (context, size) {
        const r = (0, _mathJs.sqrt)(size) * 0.62625;
        context.moveTo(0, -r);
        context.lineTo(r, 0);
        context.lineTo(0, r);
        context.lineTo(-r, 0);
        context.closePath();
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ehHk2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
exports.default = {
    draw (context, size) {
        const r = (0, _mathJs.sqrt)(size - (0, _mathJs.min)(size / 7, 2)) * 0.87559;
        context.moveTo(-r, 0);
        context.lineTo(r, 0);
        context.moveTo(0, r);
        context.lineTo(0, -r);
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Rovu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
exports.default = {
    draw (context, size) {
        const w = (0, _mathJs.sqrt)(size);
        const x = -w / 2;
        context.rect(x, x, w, w);
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7rWsq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
exports.default = {
    draw (context, size) {
        const r = (0, _mathJs.sqrt)(size) * 0.4431;
        context.moveTo(r, r);
        context.lineTo(r, -r);
        context.lineTo(-r, -r);
        context.lineTo(-r, r);
        context.closePath();
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fqvh2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
const ka = 0.89081309152928522810;
const kr = (0, _mathJs.sin)((0, _mathJs.pi) / 10) / (0, _mathJs.sin)(7 * (0, _mathJs.pi) / 10);
const kx = (0, _mathJs.sin)((0, _mathJs.tau) / 10) * kr;
const ky = -(0, _mathJs.cos)((0, _mathJs.tau) / 10) * kr;
exports.default = {
    draw (context, size) {
        const r = (0, _mathJs.sqrt)(size * ka);
        const x = kx * r;
        const y = ky * r;
        context.moveTo(0, -r);
        context.lineTo(x, y);
        for(let i = 1; i < 5; ++i){
            const a = (0, _mathJs.tau) * i / 5;
            const c = (0, _mathJs.cos)(a);
            const s = (0, _mathJs.sin)(a);
            context.lineTo(s * r, -c * r);
            context.lineTo(c * x - s * y, s * x + c * y);
        }
        context.closePath();
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l2B6P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
const sqrt3 = (0, _mathJs.sqrt)(3);
exports.default = {
    draw (context, size) {
        const y = -(0, _mathJs.sqrt)(size / (sqrt3 * 3));
        context.moveTo(0, y * 2);
        context.lineTo(-sqrt3 * y, -y);
        context.lineTo(sqrt3 * y, -y);
        context.closePath();
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k3OsU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
const sqrt3 = (0, _mathJs.sqrt)(3);
exports.default = {
    draw (context, size) {
        const s = (0, _mathJs.sqrt)(size) * 0.6824;
        const t = s / 2;
        const u = s * sqrt3 / 2; // cos(Math.PI / 6)
        context.moveTo(0, -s);
        context.lineTo(u, t);
        context.lineTo(-u, t);
        context.closePath();
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6dhtz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
const c = -0.5;
const s = (0, _mathJs.sqrt)(3) / 2;
const k = 1 / (0, _mathJs.sqrt)(12);
const a = (k / 2 + 1) * 3;
exports.default = {
    draw (context, size) {
        const r = (0, _mathJs.sqrt)(size / a);
        const x0 = r / 2, y0 = r * k;
        const x1 = x0, y1 = r * k + r;
        const x2 = -x1, y2 = y1;
        context.moveTo(x0, y0);
        context.lineTo(x1, y1);
        context.lineTo(x2, y2);
        context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
        context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
        context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
        context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
        context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
        context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
        context.closePath();
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bnXdB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _mathJs = require("../math.js");
exports.default = {
    draw (context, size) {
        const r = (0, _mathJs.sqrt)(size - (0, _mathJs.min)(size / 6, 1.7)) * 0.6189;
        context.moveTo(-r, -r);
        context.lineTo(r, r);
        context.moveTo(-r, r);
        context.lineTo(r, -r);
    }
};

},{"../math.js":"4VX7v","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jK8tZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(context) {
        return new BasisClosed(context);
    });
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _basisJs = require("./basis.js");
function BasisClosed(context) {
    this._context = context;
}
BasisClosed.prototype = {
    areaStart: (0, _noopJsDefault.default),
    areaEnd: (0, _noopJsDefault.default),
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 1:
                this._context.moveTo(this._x2, this._y2);
                this._context.closePath();
                break;
            case 2:
                this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
                this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
                this._context.closePath();
                break;
            case 3:
                this.point(this._x2, this._y2);
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                break;
        }
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._x2 = x, this._y2 = y;
                break;
            case 1:
                this._point = 2;
                this._x3 = x, this._y3 = y;
                break;
            case 2:
                this._point = 3;
                this._x4 = x, this._y4 = y;
                this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);
                break;
            default:
                (0, _basisJs.point)(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
    }
};

},{"../noop.js":"f1azw","./basis.js":"lmIyE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f1azw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {});

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lmIyE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "point", ()=>point);
parcelHelpers.export(exports, "Basis", ()=>Basis);
parcelHelpers.export(exports, "default", ()=>function(context) {
        return new Basis(context);
    });
function point(that, x, y) {
    that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
}
function Basis(context) {
    this._context = context;
}
Basis.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 3:
                point(this, this._x1, this._y1); // falls through
            case 2:
                this._context.lineTo(this._x1, this._y1);
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // falls through
            default:
                point(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9nzjm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(context) {
        return new BasisOpen(context);
    });
var _basisJs = require("./basis.js");
function BasisOpen(context) {
    this._context = context;
}
BasisOpen.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6;
                this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
                break;
            case 3:
                this._point = 4; // falls through
            default:
                (0, _basisJs.point)(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
    }
};

},{"./basis.js":"lmIyE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"etTRy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bumpX", ()=>bumpX);
parcelHelpers.export(exports, "bumpY", ()=>bumpY);
parcelHelpers.export(exports, "bumpRadial", ()=>bumpRadial);
var _pointRadialJs = require("../pointRadial.js");
var _pointRadialJsDefault = parcelHelpers.interopDefault(_pointRadialJs);
class Bump {
    constructor(context, x){
        this._context = context;
        this._x = x;
    }
    areaStart() {
        this._line = 0;
    }
    areaEnd() {
        this._line = NaN;
    }
    lineStart() {
        this._point = 0;
    }
    lineEnd() {
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    }
    point(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                if (this._line) this._context.lineTo(x, y);
                else this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2; // falls through
            default:
                if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x) / 2, this._y0, this._x0, y, x, y);
                else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y) / 2, x, this._y0, x, y);
                break;
        }
        this._x0 = x, this._y0 = y;
    }
}
class BumpRadial {
    constructor(context){
        this._context = context;
    }
    lineStart() {
        this._point = 0;
    }
    lineEnd() {}
    point(x, y) {
        x = +x, y = +y;
        if (this._point === 0) this._point = 1;
        else {
            const p0 = (0, _pointRadialJsDefault.default)(this._x0, this._y0);
            const p1 = (0, _pointRadialJsDefault.default)(this._x0, this._y0 = (this._y0 + y) / 2);
            const p2 = (0, _pointRadialJsDefault.default)(x, this._y0);
            const p3 = (0, _pointRadialJsDefault.default)(x, y);
            this._context.moveTo(...p0);
            this._context.bezierCurveTo(...p1, ...p2, ...p3);
        }
        this._x0 = x, this._y0 = y;
    }
}
function bumpX(context) {
    return new Bump(context, true);
}
function bumpY(context) {
    return new Bump(context, false);
}
function bumpRadial(context) {
    return new BumpRadial(context);
}

},{"../pointRadial.js":"gH3Nl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9NCmN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _basisJs = require("./basis.js");
function Bundle(context, beta) {
    this._basis = new (0, _basisJs.Basis)(context);
    this._beta = beta;
}
Bundle.prototype = {
    lineStart: function() {
        this._x = [];
        this._y = [];
        this._basis.lineStart();
    },
    lineEnd: function() {
        var x = this._x, y = this._y, j = x.length - 1;
        if (j > 0) {
            var x0 = x[0], y0 = y[0], dx = x[j] - x0, dy = y[j] - y0, i = -1, t;
            while(++i <= j){
                t = i / j;
                this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
            }
        }
        this._x = this._y = null;
        this._basis.lineEnd();
    },
    point: function(x, y) {
        this._x.push(+x);
        this._y.push(+y);
    }
};
exports.default = function custom(beta) {
    function bundle(context) {
        return beta === 1 ? new (0, _basisJs.Basis)(context) : new Bundle(context, beta);
    }
    bundle.beta = function(beta) {
        return custom(+beta);
    };
    return bundle;
}(0.85);

},{"./basis.js":"lmIyE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8btb4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CardinalClosed", ()=>CardinalClosed);
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _cardinalJs = require("./cardinal.js");
function CardinalClosed(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
}
CardinalClosed.prototype = {
    areaStart: (0, _noopJsDefault.default),
    areaEnd: (0, _noopJsDefault.default),
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 1:
                this._context.moveTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 2:
                this._context.lineTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 3:
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                this.point(this._x5, this._y5);
                break;
        }
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._x3 = x, this._y3 = y;
                break;
            case 1:
                this._point = 2;
                this._context.moveTo(this._x4 = x, this._y4 = y);
                break;
            case 2:
                this._point = 3;
                this._x5 = x, this._y5 = y;
                break;
            default:
                (0, _cardinalJs.point)(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
exports.default = function custom(tension) {
    function cardinal(context) {
        return new CardinalClosed(context, tension);
    }
    cardinal.tension = function(tension) {
        return custom(+tension);
    };
    return cardinal;
}(0);

},{"../noop.js":"f1azw","./cardinal.js":"brZ6e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"brZ6e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "point", ()=>point);
parcelHelpers.export(exports, "Cardinal", ()=>Cardinal);
function point(that, x, y) {
    that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
}
function Cardinal(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
}
Cardinal.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 2:
                this._context.lineTo(this._x2, this._y2);
                break;
            case 3:
                point(this, this._x1, this._y1);
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                this._x1 = x, this._y1 = y;
                break;
            case 2:
                this._point = 3; // falls through
            default:
                point(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
exports.default = function custom(tension) {
    function cardinal(context) {
        return new Cardinal(context, tension);
    }
    cardinal.tension = function(tension) {
        return custom(+tension);
    };
    return cardinal;
}(0);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"avKmC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CardinalOpen", ()=>CardinalOpen);
var _cardinalJs = require("./cardinal.js");
function CardinalOpen(context, tension) {
    this._context = context;
    this._k = (1 - tension) / 6;
}
CardinalOpen.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
                break;
            case 3:
                this._point = 4; // falls through
            default:
                (0, _cardinalJs.point)(this, x, y);
                break;
        }
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
exports.default = function custom(tension) {
    function cardinal(context) {
        return new CardinalOpen(context, tension);
    }
    cardinal.tension = function(tension) {
        return custom(+tension);
    };
    return cardinal;
}(0);

},{"./cardinal.js":"brZ6e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3mnrZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cardinalClosedJs = require("./cardinalClosed.js");
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
var _catmullRomJs = require("./catmullRom.js");
function CatmullRomClosed(context, alpha) {
    this._context = context;
    this._alpha = alpha;
}
CatmullRomClosed.prototype = {
    areaStart: (0, _noopJsDefault.default),
    areaEnd: (0, _noopJsDefault.default),
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 1:
                this._context.moveTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 2:
                this._context.lineTo(this._x3, this._y3);
                this._context.closePath();
                break;
            case 3:
                this.point(this._x3, this._y3);
                this.point(this._x4, this._y4);
                this.point(this._x5, this._y5);
                break;
        }
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch(this._point){
            case 0:
                this._point = 1;
                this._x3 = x, this._y3 = y;
                break;
            case 1:
                this._point = 2;
                this._context.moveTo(this._x4 = x, this._y4 = y);
                break;
            case 2:
                this._point = 3;
                this._x5 = x, this._y5 = y;
                break;
            default:
                (0, _catmullRomJs.point)(this, x, y);
                break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
exports.default = function custom(alpha) {
    function catmullRom(context) {
        return alpha ? new CatmullRomClosed(context, alpha) : new (0, _cardinalClosedJs.CardinalClosed)(context, 0);
    }
    catmullRom.alpha = function(alpha) {
        return custom(+alpha);
    };
    return catmullRom;
}(0.5);

},{"./cardinalClosed.js":"8btb4","../noop.js":"f1azw","./catmullRom.js":"j2hDs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j2hDs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "point", ()=>point);
var _mathJs = require("../math.js");
var _cardinalJs = require("./cardinal.js");
function point(that, x, y) {
    var x1 = that._x1, y1 = that._y1, x2 = that._x2, y2 = that._y2;
    if (that._l01_a > (0, _mathJs.epsilon)) {
        var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n = 3 * that._l01_a * (that._l01_a + that._l12_a);
        x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
        y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
    }
    if (that._l23_a > (0, _mathJs.epsilon)) {
        var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m = 3 * that._l23_a * (that._l23_a + that._l12_a);
        x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
        y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
    }
    that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
    this._context = context;
    this._alpha = alpha;
}
CatmullRom.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 2:
                this._context.lineTo(this._x2, this._y2);
                break;
            case 3:
                this.point(this._x2, this._y2);
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3; // falls through
            default:
                point(this, x, y);
                break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
exports.default = function custom(alpha) {
    function catmullRom(context) {
        return alpha ? new CatmullRom(context, alpha) : new (0, _cardinalJs.Cardinal)(context, 0);
    }
    catmullRom.alpha = function(alpha) {
        return custom(+alpha);
    };
    return catmullRom;
}(0.5);

},{"../math.js":"4VX7v","./cardinal.js":"brZ6e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4v2qz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cardinalOpenJs = require("./cardinalOpen.js");
var _catmullRomJs = require("./catmullRom.js");
function CatmullRomOpen(context, alpha) {
    this._context = context;
    this._alpha = alpha;
}
CatmullRomOpen.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
        this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
    },
    lineEnd: function() {
        if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) {
            var x23 = this._x2 - x, y23 = this._y2 - y;
            this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
        }
        switch(this._point){
            case 0:
                this._point = 1;
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
                break;
            case 3:
                this._point = 4; // falls through
            default:
                (0, _catmullRomJs.point)(this, x, y);
                break;
        }
        this._l01_a = this._l12_a, this._l12_a = this._l23_a;
        this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
        this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
        this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
    }
};
exports.default = function custom(alpha) {
    function catmullRom(context) {
        return alpha ? new CatmullRomOpen(context, alpha) : new (0, _cardinalOpenJs.CardinalOpen)(context, 0);
    }
    catmullRom.alpha = function(alpha) {
        return custom(+alpha);
    };
    return catmullRom;
}(0.5);

},{"./cardinalOpen.js":"avKmC","./catmullRom.js":"j2hDs","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bZkPo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(context) {
        return new LinearClosed(context);
    });
var _noopJs = require("../noop.js");
var _noopJsDefault = parcelHelpers.interopDefault(_noopJs);
function LinearClosed(context) {
    this._context = context;
}
LinearClosed.prototype = {
    areaStart: (0, _noopJsDefault.default),
    areaEnd: (0, _noopJsDefault.default),
    lineStart: function() {
        this._point = 0;
    },
    lineEnd: function() {
        if (this._point) this._context.closePath();
    },
    point: function(x, y) {
        x = +x, y = +y;
        if (this._point) this._context.lineTo(x, y);
        else this._point = 1, this._context.moveTo(x, y);
    }
};

},{"../noop.js":"f1azw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"akQ7S":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "monotoneX", ()=>monotoneX);
parcelHelpers.export(exports, "monotoneY", ()=>monotoneY);
function sign(x) {
    return x < 0 ? -1 : 1;
}
// Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.
function slope3(that, x2, y2) {
    var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}
// Calculate a one-sided slope.
function slope2(that, t) {
    var h = that._x1 - that._x0;
    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}
// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
function point(that, t0, t1) {
    var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}
function MonotoneX(context) {
    this._context = context;
}
MonotoneX.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        switch(this._point){
            case 2:
                this._context.lineTo(this._x1, this._y1);
                break;
            case 3:
                point(this, this._t0, slope2(this, this._t0));
                break;
        }
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        this._line = 1 - this._line;
    },
    point: function(x, y) {
        var t1 = NaN;
        x = +x, y = +y;
        if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2;
                break;
            case 2:
                this._point = 3;
                point(this, slope2(this, t1 = slope3(this, x, y)), t1);
                break;
            default:
                point(this, this._t0, t1 = slope3(this, x, y));
                break;
        }
        this._x0 = this._x1, this._x1 = x;
        this._y0 = this._y1, this._y1 = y;
        this._t0 = t1;
    }
};
function MonotoneY(context) {
    this._context = new ReflectContext(context);
}
(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
    MonotoneX.prototype.point.call(this, y, x);
};
function ReflectContext(context) {
    this._context = context;
}
ReflectContext.prototype = {
    moveTo: function(x, y) {
        this._context.moveTo(y, x);
    },
    closePath: function() {
        this._context.closePath();
    },
    lineTo: function(x, y) {
        this._context.lineTo(y, x);
    },
    bezierCurveTo: function(x1, y1, x2, y2, x, y) {
        this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
    }
};
function monotoneX(context) {
    return new MonotoneX(context);
}
function monotoneY(context) {
    return new MonotoneY(context);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ejsSN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(context) {
        return new Natural(context);
    });
function Natural(context) {
    this._context = context;
}
Natural.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x = [];
        this._y = [];
    },
    lineEnd: function() {
        var x = this._x, y = this._y, n = x.length;
        if (n) {
            this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
            if (n === 2) this._context.lineTo(x[1], y[1]);
            else {
                var px = controlPoints(x), py = controlPoints(y);
                for(var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1)this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
            }
        }
        if (this._line || this._line !== 0 && n === 1) this._context.closePath();
        this._line = 1 - this._line;
        this._x = this._y = null;
    },
    point: function(x, y) {
        this._x.push(+x);
        this._y.push(+y);
    }
};
// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
function controlPoints(x) {
    var i, n = x.length - 1, m, a = new Array(n), b = new Array(n), r = new Array(n);
    a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
    for(i = 1; i < n - 1; ++i)a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
    a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
    for(i = 1; i < n; ++i)m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
    a[n - 1] = r[n - 1] / b[n - 1];
    for(i = n - 2; i >= 0; --i)a[i] = (r[i] - a[i + 1]) / b[i];
    b[n - 1] = (x[n] + a[n - 1]) / 2;
    for(i = 0; i < n - 1; ++i)b[i] = 2 * x[i + 1] - a[i + 1];
    return [
        a,
        b
    ];
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cenwN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(context) {
        return new Step(context, 0.5);
    });
parcelHelpers.export(exports, "stepBefore", ()=>stepBefore);
parcelHelpers.export(exports, "stepAfter", ()=>stepAfter);
function Step(context, t) {
    this._context = context;
    this._t = t;
}
Step.prototype = {
    areaStart: function() {
        this._line = 0;
    },
    areaEnd: function() {
        this._line = NaN;
    },
    lineStart: function() {
        this._x = this._y = NaN;
        this._point = 0;
    },
    lineEnd: function() {
        if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
        if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
        if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
    },
    point: function(x, y) {
        x = +x, y = +y;
        switch(this._point){
            case 0:
                this._point = 1;
                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                break;
            case 1:
                this._point = 2; // falls through
            default:
                if (this._t <= 0) {
                    this._context.lineTo(this._x, y);
                    this._context.lineTo(x, y);
                } else {
                    var x1 = this._x * (1 - this._t) + x * this._t;
                    this._context.lineTo(x1, this._y);
                    this._context.lineTo(x1, y);
                }
                break;
        }
        this._x = x, this._y = y;
    }
};
function stepBefore(context) {
    return new Step(context, 0);
}
function stepAfter(context) {
    return new Step(context, 1);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hQoq0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "zoom", ()=>(0, _zoomJsDefault.default));
parcelHelpers.export(exports, "zoomTransform", ()=>(0, _transformJsDefault.default));
parcelHelpers.export(exports, "zoomIdentity", ()=>(0, _transformJs.identity));
parcelHelpers.export(exports, "ZoomTransform", ()=>(0, _transformJs.Transform));
var _zoomJs = require("./zoom.js");
var _zoomJsDefault = parcelHelpers.interopDefault(_zoomJs);
var _transformJs = require("./transform.js");
var _transformJsDefault = parcelHelpers.interopDefault(_transformJs);

},{"./zoom.js":"2QYtg","./transform.js":"2Dxqg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2QYtg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function() {
        var filter = defaultFilter, extent = defaultExtent, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable, scaleExtent = [
            0,
            Infinity
        ], translateExtent = [
            [
                -Infinity,
                -Infinity
            ],
            [
                Infinity,
                Infinity
            ]
        ], duration = 250, interpolate = (0, _d3Interpolate.interpolateZoom), listeners = (0, _d3Dispatch.dispatch)("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
        function zoom(selection) {
            selection.property("__zoom", defaultTransform).on("wheel.zoom", wheeled, {
                passive: false
            }).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
        }
        zoom.transform = function(collection, transform, point, event) {
            var selection = collection.selection ? collection.selection() : collection;
            selection.property("__zoom", defaultTransform);
            if (collection !== selection) schedule(collection, transform, point, event);
            else selection.interrupt().each(function() {
                gesture(this, arguments).event(event).start().zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform).end();
            });
        };
        zoom.scaleBy = function(selection, k, p, event) {
            zoom.scaleTo(selection, function() {
                var k0 = this.__zoom.k, k1 = typeof k === "function" ? k.apply(this, arguments) : k;
                return k0 * k1;
            }, p, event);
        };
        zoom.scaleTo = function(selection, k, p, event) {
            zoom.transform(selection, function() {
                var e = extent.apply(this, arguments), t0 = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p, p1 = t0.invert(p0), k1 = typeof k === "function" ? k.apply(this, arguments) : k;
                return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
            }, p, event);
        };
        zoom.translateBy = function(selection, x, y, event) {
            zoom.transform(selection, function() {
                return constrain(this.__zoom.translate(typeof x === "function" ? x.apply(this, arguments) : x, typeof y === "function" ? y.apply(this, arguments) : y), extent.apply(this, arguments), translateExtent);
            }, null, event);
        };
        zoom.translateTo = function(selection, x, y, p, event) {
            zoom.transform(selection, function() {
                var e = extent.apply(this, arguments), t = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
                return constrain((0, _transformJs.identity).translate(p0[0], p0[1]).scale(t.k).translate(typeof x === "function" ? -x.apply(this, arguments) : -x, typeof y === "function" ? -y.apply(this, arguments) : -y), e, translateExtent);
            }, p, event);
        };
        function scale(transform, k) {
            k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
            return k === transform.k ? transform : new (0, _transformJs.Transform)(k, transform.x, transform.y);
        }
        function translate(transform, p0, p1) {
            var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
            return x === transform.x && y === transform.y ? transform : new (0, _transformJs.Transform)(transform.k, x, y);
        }
        function centroid(extent) {
            return [
                (+extent[0][0] + +extent[1][0]) / 2,
                (+extent[0][1] + +extent[1][1]) / 2
            ];
        }
        function schedule(transition, transform, point, event) {
            transition.on("start.zoom", function() {
                gesture(this, arguments).event(event).start();
            }).on("interrupt.zoom end.zoom", function() {
                gesture(this, arguments).event(event).end();
            }).tween("zoom", function() {
                var that = this, args = arguments, g = gesture(that, args).event(event), e = extent.apply(that, args), p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point, w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a = that.__zoom, b = typeof transform === "function" ? transform.apply(that, args) : transform, i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
                return function(t) {
                    if (t === 1) t = b; // Avoid rounding error on end.
                    else {
                        var l = i(t), k = w / l[2];
                        t = new (0, _transformJs.Transform)(k, p[0] - l[0] * k, p[1] - l[1] * k);
                    }
                    g.zoom(null, t);
                };
            });
        }
        function gesture(that, args, clean) {
            return !clean && that.__zooming || new Gesture(that, args);
        }
        function Gesture(that, args) {
            this.that = that;
            this.args = args;
            this.active = 0;
            this.sourceEvent = null;
            this.extent = extent.apply(that, args);
            this.taps = 0;
        }
        Gesture.prototype = {
            event: function(event) {
                if (event) this.sourceEvent = event;
                return this;
            },
            start: function() {
                if (++this.active === 1) {
                    this.that.__zooming = this;
                    this.emit("start");
                }
                return this;
            },
            zoom: function(key, transform) {
                if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
                if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
                if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
                this.that.__zoom = transform;
                this.emit("zoom");
                return this;
            },
            end: function() {
                if (--this.active === 0) {
                    delete this.that.__zooming;
                    this.emit("end");
                }
                return this;
            },
            emit: function(type) {
                var d = (0, _d3Selection.select)(this.that).datum();
                listeners.call(type, this.that, new (0, _eventJsDefault.default)(type, {
                    sourceEvent: this.sourceEvent,
                    target: zoom,
                    type,
                    transform: this.that.__zoom,
                    dispatch: listeners
                }), d);
            }
        };
        function wheeled(event, ...args) {
            if (!filter.apply(this, arguments)) return;
            var g = gesture(this, args).event(event), t = this.__zoom, k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p = (0, _d3Selection.pointer)(event);
            // If the mouse is in the same location as before, reuse it.
            // If there were recent wheel events, reset the wheel idle timeout.
            if (g.wheel) {
                if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) g.mouse[1] = t.invert(g.mouse[0] = p);
                clearTimeout(g.wheel);
            } else if (t.k === k) return;
            else {
                g.mouse = [
                    p,
                    t.invert(p)
                ];
                (0, _d3Transition.interrupt)(this);
                g.start();
            }
            (0, _noeventJsDefault.default)(event);
            g.wheel = setTimeout(wheelidled, wheelDelay);
            g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));
            function wheelidled() {
                g.wheel = null;
                g.end();
            }
        }
        function mousedowned(event, ...args) {
            if (touchending || !filter.apply(this, arguments)) return;
            var currentTarget = event.currentTarget, g = gesture(this, args, true).event(event), v = (0, _d3Selection.select)(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p = (0, _d3Selection.pointer)(event, currentTarget), x0 = event.clientX, y0 = event.clientY;
            (0, _d3Drag.dragDisable)(event.view);
            (0, _noeventJs.nopropagation)(event);
            g.mouse = [
                p,
                this.__zoom.invert(p)
            ];
            (0, _d3Transition.interrupt)(this);
            g.start();
            function mousemoved(event) {
                (0, _noeventJsDefault.default)(event);
                if (!g.moved) {
                    var dx = event.clientX - x0, dy = event.clientY - y0;
                    g.moved = dx * dx + dy * dy > clickDistance2;
                }
                g.event(event).zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = (0, _d3Selection.pointer)(event, currentTarget), g.mouse[1]), g.extent, translateExtent));
            }
            function mouseupped(event) {
                v.on("mousemove.zoom mouseup.zoom", null);
                (0, _d3Drag.dragEnable)(event.view, g.moved);
                (0, _noeventJsDefault.default)(event);
                g.event(event).end();
            }
        }
        function dblclicked(event, ...args) {
            if (!filter.apply(this, arguments)) return;
            var t0 = this.__zoom, p0 = (0, _d3Selection.pointer)(event.changedTouches ? event.changedTouches[0] : event, this), p1 = t0.invert(p0), k1 = t0.k * (event.shiftKey ? 0.5 : 2), t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent);
            (0, _noeventJsDefault.default)(event);
            if (duration > 0) (0, _d3Selection.select)(this).transition().duration(duration).call(schedule, t1, p0, event);
            else (0, _d3Selection.select)(this).call(zoom.transform, t1, p0, event);
        }
        function touchstarted(event, ...args) {
            if (!filter.apply(this, arguments)) return;
            var touches = event.touches, n = touches.length, g = gesture(this, args, event.changedTouches.length === n).event(event), started, i, t, p;
            (0, _noeventJs.nopropagation)(event);
            for(i = 0; i < n; ++i){
                t = touches[i], p = (0, _d3Selection.pointer)(t, this);
                p = [
                    p,
                    this.__zoom.invert(p),
                    t.identifier
                ];
                if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
                else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;
            }
            if (touchstarting) touchstarting = clearTimeout(touchstarting);
            if (started) {
                if (g.taps < 2) touchfirst = p[0], touchstarting = setTimeout(function() {
                    touchstarting = null;
                }, touchDelay);
                (0, _d3Transition.interrupt)(this);
                g.start();
            }
        }
        function touchmoved(event, ...args) {
            if (!this.__zooming) return;
            var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t, p, l;
            (0, _noeventJsDefault.default)(event);
            for(i = 0; i < n; ++i){
                t = touches[i], p = (0, _d3Selection.pointer)(t, this);
                if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
                else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
            }
            t = g.that.__zoom;
            if (g.touch1) {
                var p0 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
                t = scale(t, Math.sqrt(dp / dl));
                p = [
                    (p0[0] + p1[0]) / 2,
                    (p0[1] + p1[1]) / 2
                ];
                l = [
                    (l0[0] + l1[0]) / 2,
                    (l0[1] + l1[1]) / 2
                ];
            } else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
            else return;
            g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
        }
        function touchended(event, ...args) {
            if (!this.__zooming) return;
            var g = gesture(this, args).event(event), touches = event.changedTouches, n = touches.length, i, t;
            (0, _noeventJs.nopropagation)(event);
            if (touchending) clearTimeout(touchending);
            touchending = setTimeout(function() {
                touchending = null;
            }, touchDelay);
            for(i = 0; i < n; ++i){
                t = touches[i];
                if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
                else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
            }
            if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
            if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);
            else {
                g.end();
                // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.
                if (g.taps === 2) {
                    t = (0, _d3Selection.pointer)(t, this);
                    if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
                        var p = (0, _d3Selection.select)(this).on("dblclick.zoom");
                        if (p) p.apply(this, arguments);
                    }
                }
            }
        }
        zoom.wheelDelta = function(_) {
            return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(+_), zoom) : wheelDelta;
        };
        zoom.filter = function(_) {
            return arguments.length ? (filter = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(!!_), zoom) : filter;
        };
        zoom.touchable = function(_) {
            return arguments.length ? (touchable = typeof _ === "function" ? _ : (0, _constantJsDefault.default)(!!_), zoom) : touchable;
        };
        zoom.extent = function(_) {
            return arguments.length ? (extent = typeof _ === "function" ? _ : (0, _constantJsDefault.default)([
                [
                    +_[0][0],
                    +_[0][1]
                ],
                [
                    +_[1][0],
                    +_[1][1]
                ]
            ]), zoom) : extent;
        };
        zoom.scaleExtent = function(_) {
            return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [
                scaleExtent[0],
                scaleExtent[1]
            ];
        };
        zoom.translateExtent = function(_) {
            return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [
                [
                    translateExtent[0][0],
                    translateExtent[0][1]
                ],
                [
                    translateExtent[1][0],
                    translateExtent[1][1]
                ]
            ];
        };
        zoom.constrain = function(_) {
            return arguments.length ? (constrain = _, zoom) : constrain;
        };
        zoom.duration = function(_) {
            return arguments.length ? (duration = +_, zoom) : duration;
        };
        zoom.interpolate = function(_) {
            return arguments.length ? (interpolate = _, zoom) : interpolate;
        };
        zoom.on = function() {
            var value = listeners.on.apply(listeners, arguments);
            return value === listeners ? zoom : value;
        };
        zoom.clickDistance = function(_) {
            return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
        };
        zoom.tapDistance = function(_) {
            return arguments.length ? (tapDistance = +_, zoom) : tapDistance;
        };
        return zoom;
    });
var _d3Dispatch = require("d3-dispatch");
var _d3Drag = require("d3-drag");
var _d3Interpolate = require("d3-interpolate");
var _d3Selection = require("d3-selection");
var _d3Transition = require("d3-transition");
var _constantJs = require("./constant.js");
var _constantJsDefault = parcelHelpers.interopDefault(_constantJs);
var _eventJs = require("./event.js");
var _eventJsDefault = parcelHelpers.interopDefault(_eventJs);
var _transformJs = require("./transform.js");
var _noeventJs = require("./noevent.js");
var _noeventJsDefault = parcelHelpers.interopDefault(_noeventJs);
// Ignore right-click, since that should open the context menu.
// except for pinch-to-zoom, which is sent as a wheel+ctrlKey event
function defaultFilter(event) {
    return (!event.ctrlKey || event.type === "wheel") && !event.button;
}
function defaultExtent() {
    var e = this;
    if (e instanceof SVGElement) {
        e = e.ownerSVGElement || e;
        if (e.hasAttribute("viewBox")) {
            e = e.viewBox.baseVal;
            return [
                [
                    e.x,
                    e.y
                ],
                [
                    e.x + e.width,
                    e.y + e.height
                ]
            ];
        }
        return [
            [
                0,
                0
            ],
            [
                e.width.baseVal.value,
                e.height.baseVal.value
            ]
        ];
    }
    return [
        [
            0,
            0
        ],
        [
            e.clientWidth,
            e.clientHeight
        ]
    ];
}
function defaultTransform() {
    return this.__zoom || (0, _transformJs.identity);
}
function defaultWheelDelta(event) {
    return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * (event.ctrlKey ? 10 : 1);
}
function defaultTouchable() {
    return navigator.maxTouchPoints || "ontouchstart" in this;
}
function defaultConstrain(transform, extent, translateExtent) {
    var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0], dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0], dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1], dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
    return transform.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1));
}

},{"d3-dispatch":"5WtHO","d3-drag":"hGy7N","d3-interpolate":"6jJyi","d3-selection":"gn9gd","d3-transition":"4lorl","./constant.js":"84Lz7","./event.js":"8AEix","./transform.js":"2Dxqg","./noevent.js":"jokv0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"84Lz7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = (x)=>()=>x;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8AEix":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>ZoomEvent);
function ZoomEvent(type, { sourceEvent, target, transform, dispatch }) {
    Object.defineProperties(this, {
        type: {
            value: type,
            enumerable: true,
            configurable: true
        },
        sourceEvent: {
            value: sourceEvent,
            enumerable: true,
            configurable: true
        },
        target: {
            value: target,
            enumerable: true,
            configurable: true
        },
        transform: {
            value: transform,
            enumerable: true,
            configurable: true
        },
        _: {
            value: dispatch
        }
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Dxqg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Transform", ()=>Transform);
parcelHelpers.export(exports, "identity", ()=>identity);
parcelHelpers.export(exports, "default", ()=>transform);
function Transform(k, x, y) {
    this.k = k;
    this.x = x;
    this.y = y;
}
Transform.prototype = {
    constructor: Transform,
    scale: function(k) {
        return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
    },
    translate: function(x, y) {
        return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
    },
    apply: function(point) {
        return [
            point[0] * this.k + this.x,
            point[1] * this.k + this.y
        ];
    },
    applyX: function(x) {
        return x * this.k + this.x;
    },
    applyY: function(y) {
        return y * this.k + this.y;
    },
    invert: function(location) {
        return [
            (location[0] - this.x) / this.k,
            (location[1] - this.y) / this.k
        ];
    },
    invertX: function(x) {
        return (x - this.x) / this.k;
    },
    invertY: function(y) {
        return (y - this.y) / this.k;
    },
    rescaleX: function(x) {
        return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
    },
    rescaleY: function(y) {
        return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
    },
    toString: function() {
        return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
    }
};
var identity = new Transform(1, 0, 0);
transform.prototype = Transform.prototype;
function transform(node) {
    while(!node.__zoom)if (!(node = node.parentNode)) return identity;
    return node.__zoom;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jokv0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "nopropagation", ()=>nopropagation);
parcelHelpers.export(exports, "default", ()=>function(event) {
        event.preventDefault();
        event.stopImmediatePropagation();
    });
function nopropagation(event) {
    event.stopImmediatePropagation();
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3n4Hk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defined", ()=>defined);
parcelHelpers.export(exports, "ascendingDefined", ()=>ascendingDefined);
parcelHelpers.export(exports, "descendingDefined", ()=>descendingDefined);
parcelHelpers.export(exports, "nonempty", ()=>nonempty);
parcelHelpers.export(exports, "finite", ()=>finite);
parcelHelpers.export(exports, "positive", ()=>positive);
parcelHelpers.export(exports, "negative", ()=>negative);
var _d3 = require("d3");
function defined(x) {
    return x != null && !Number.isNaN(x);
}
function ascendingDefined(a, b) {
    return +defined(b) - +defined(a) || (0, _d3.ascending)(a, b);
}
function descendingDefined(a, b) {
    return +defined(b) - +defined(a) || (0, _d3.descending)(a, b);
}
function nonempty(x) {
    return x != null && `${x}` !== "";
}
function finite(x) {
    return isFinite(x) ? x : NaN;
}
function positive(x) {
    return x > 0 && isFinite(x) ? x : NaN;
}
function negative(x) {
    return x < 0 && isFinite(x) ? x : NaN;
}

},{"d3":"17XFv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eJmsy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TypedArray", ()=>TypedArray);
parcelHelpers.export(exports, "isArray", ()=>isArray);
parcelHelpers.export(exports, "reindex", ()=>reindex);
parcelHelpers.export(exports, "valueof", ()=>valueof);
parcelHelpers.export(exports, "singleton", ()=>singleton);
parcelHelpers.export(exports, "field", ()=>field);
parcelHelpers.export(exports, "indexOf", ()=>indexOf);
parcelHelpers.export(exports, "identity", ()=>identity);
parcelHelpers.export(exports, "zero", ()=>zero);
parcelHelpers.export(exports, "one", ()=>one);
parcelHelpers.export(exports, "yes", ()=>yes);
parcelHelpers.export(exports, "string", ()=>string);
parcelHelpers.export(exports, "number", ()=>number);
parcelHelpers.export(exports, "boolean", ()=>boolean);
parcelHelpers.export(exports, "first", ()=>first);
parcelHelpers.export(exports, "second", ()=>second);
parcelHelpers.export(exports, "third", ()=>third);
parcelHelpers.export(exports, "constant", ()=>constant);
// Converts a string like “p25” into a function that takes an index I and an
// accessor function f, returning the corresponding percentile value.
parcelHelpers.export(exports, "percentile", ()=>percentile);
// If the values are specified as a typed array, no coercion is required.
parcelHelpers.export(exports, "coerceNumbers", ()=>coerceNumbers);
parcelHelpers.export(exports, "coerceDates", ()=>coerceDates);
// When coercing strings to dates, we only want to allow the ISO 8601 format
// since the built-in string parsing of the Date constructor varies across
// browsers. (In the future, this could be made more liberal if desired, though
// it is still generally preferable to do date parsing yourself explicitly,
// rather than rely on Plot.) Any non-string values are coerced to number first
// and treated as milliseconds since UNIX epoch.
parcelHelpers.export(exports, "coerceDate", ()=>coerceDate);
// Some channels may allow a string constant to be specified; to differentiate
// string constants (e.g., "red") from named fields (e.g., "date"), this
// function tests whether the given value is a CSS color string and returns a
// tuple [channel, constant] where one of the two is undefined, and the other is
// the given value. If you wish to reference a named field that is also a valid
// CSS color, use an accessor (d => d.red) instead.
parcelHelpers.export(exports, "maybeColorChannel", ()=>maybeColorChannel);
// Similar to maybeColorChannel, this tests whether the given value is a number
// indicating a constant, and otherwise assumes that it’s a channel value.
parcelHelpers.export(exports, "maybeNumberChannel", ()=>maybeNumberChannel);
// Validates the specified optional string against the allowed list of keywords.
parcelHelpers.export(exports, "maybeKeyword", ()=>maybeKeyword);
// Validates the specified required string against the allowed list of keywords.
parcelHelpers.export(exports, "keyword", ()=>keyword);
// Like arrayify, but also allows data to be an Apache Arrow Table.
parcelHelpers.export(exports, "dataify", ()=>dataify);
// Promotes the specified data to an array as needed.
parcelHelpers.export(exports, "arrayify", ()=>arrayify);
// An optimization of type.from(values, f): if the given values are already an
// instanceof the desired array type, the faster values.map method is used.
parcelHelpers.export(exports, "map", ()=>map);
// An optimization of type.from(values): if the given values are already an
// instanceof the desired array type, the faster values.slice method is used.
parcelHelpers.export(exports, "slice", ()=>slice);
// Returns true if any of x, x1, or x2 is not (strictly) undefined.
parcelHelpers.export(exports, "hasX", ()=>hasX);
// Returns true if any of y, y1, or y2 is not (strictly) undefined.
parcelHelpers.export(exports, "hasY", ()=>hasY);
// Returns true if has x or y, or if interval is not (strictly) undefined.
parcelHelpers.export(exports, "hasXY", ()=>hasXY);
// Disambiguates an options object (e.g., {y: "x2"}) from a primitive value.
parcelHelpers.export(exports, "isObject", ()=>isObject);
// Disambiguates a scale options object (e.g., {color: {type: "linear"}}) from
// some other option (e.g., {color: "red"}). When creating standalone legends,
// this is used to test whether a scale is defined; this should be consistent
// with inferScaleType when there are no channels associated with the scale, and
// if this returns true, then normalizeScale must return non-null.
parcelHelpers.export(exports, "isScaleOptions", ()=>isScaleOptions);
// Disambiguates an options object (e.g., {y: "x2"}) from a channel value
// definition expressed as a channel transform (e.g., {transform: …}).
// TODO Check typeof option[Symbol.iterator] !== "function"?
parcelHelpers.export(exports, "isOptions", ()=>isOptions);
// Disambiguates a sort transform (e.g., {sort: "date"}) from a channel domain
// sort definition (e.g., {sort: {y: "x"}}).
parcelHelpers.export(exports, "isDomainSort", ()=>isDomainSort);
// For marks specified either as [0, x] or [x1, x2], such as areas and bars.
parcelHelpers.export(exports, "maybeZero", ()=>maybeZero);
// For marks that have x and y channels (e.g., cell, dot, line, text).
parcelHelpers.export(exports, "maybeTuple", ()=>maybeTuple);
// A helper for extracting the z channel, if it is variable. Used by transforms
// that require series, such as moving average and normalize.
parcelHelpers.export(exports, "maybeZ", ()=>maybeZ);
parcelHelpers.export(exports, "lengthof", ()=>lengthof);
// Returns a Uint32Array with elements [0, 1, 2, … data.length - 1].
parcelHelpers.export(exports, "range", ()=>range);
// Returns an array [values[index[0]], values[index[1]], …].
parcelHelpers.export(exports, "take", ()=>take);
// If f does not take exactly one argument, wraps it in a function that uses take.
parcelHelpers.export(exports, "taker", ()=>taker);
// Uses subarray if available, and otherwise slice.
parcelHelpers.export(exports, "subarray", ()=>subarray);
// Based on InternMap (d3.group).
parcelHelpers.export(exports, "keyof", ()=>keyof);
parcelHelpers.export(exports, "maybeInput", ()=>maybeInput);
parcelHelpers.export(exports, "column", ()=>column);
// Like column, but allows the source to be null.
parcelHelpers.export(exports, "maybeColumn", ()=>maybeColumn);
parcelHelpers.export(exports, "labelof", ()=>labelof);
// Assuming that both x1 and x2 and lazy columns (per above), this derives a new
// a column that’s the average of the two, and which inherits the column label
// (if any). Both input columns are assumed to be quantitative. If either column
// is temporal, the returned column is also temporal.
parcelHelpers.export(exports, "mid", ()=>mid);
// If the scale options declare an interval, applies it to the values V.
parcelHelpers.export(exports, "maybeApplyInterval", ()=>maybeApplyInterval);
// Returns the equivalent scale transform for the specified interval option.
parcelHelpers.export(exports, "maybeIntervalTransform", ()=>maybeIntervalTransform);
// If interval is not nullish, converts interval shorthand such as a number (for
// multiples) or a time interval name (such as “day”) to a {floor, offset,
// range} object similar to a D3 time interval.
parcelHelpers.export(exports, "maybeInterval", ()=>maybeInterval);
parcelHelpers.export(exports, "numberInterval", ()=>numberInterval);
// Like maybeInterval, but requires a range method too.
parcelHelpers.export(exports, "maybeRangeInterval", ()=>maybeRangeInterval);
// Like maybeRangeInterval, but requires a ceil method too.
parcelHelpers.export(exports, "maybeNiceInterval", ()=>maybeNiceInterval);
parcelHelpers.export(exports, "isTimeInterval", ()=>isTimeInterval);
parcelHelpers.export(exports, "isInterval", ()=>isInterval);
// This distinguishes between per-dimension options and a standalone value.
parcelHelpers.export(exports, "maybeValue", ()=>maybeValue);
// Coerces the given channel values (if any) to numbers. This is useful when
// values will be interpolated into other code, such as an SVG transform, and
// where we don’t wish to allow unexpected behavior for weird input.
parcelHelpers.export(exports, "numberChannel", ()=>numberChannel);
parcelHelpers.export(exports, "isTuples", ()=>isTuples);
parcelHelpers.export(exports, "isIterable", ()=>isIterable);
parcelHelpers.export(exports, "isTextual", ()=>isTextual);
parcelHelpers.export(exports, "isOrdinal", ()=>isOrdinal);
parcelHelpers.export(exports, "isTemporal", ()=>isTemporal);
// Are these strings that might represent dates? This is stricter than ISO 8601
// because we want to ignore false positives on numbers; for example, the string
// "1192" is more likely to represent a number than a date even though it is
// valid ISO 8601 representing 1192-01-01.
parcelHelpers.export(exports, "isTemporalString", ()=>isTemporalString);
// Are these strings that might represent numbers? This is stricter than
// coercion because we want to ignore false positives on e.g. empty strings.
parcelHelpers.export(exports, "isNumericString", ()=>isNumericString);
parcelHelpers.export(exports, "isNumeric", ()=>isNumeric);
// Returns true if every non-null value in the specified iterable of values
// passes the specified predicate, and there is at least one non-null value;
// returns false if at least one non-null value does not pass the specified
// predicate; otherwise returns undefined (as if all values are null).
parcelHelpers.export(exports, "isEvery", ()=>isEvery);
// Returns true if value is a valid CSS color string. This is intentionally lax
// because the CSS color spec keeps growing, and we don’t need to parse these
// colors—we just need to disambiguate them from column names.
// https://www.w3.org/TR/SVG11/painting.html#SpecifyingPaint
// https://www.w3.org/TR/css-color-5/
parcelHelpers.export(exports, "isColor", ()=>isColor);
parcelHelpers.export(exports, "isOpacity", ()=>isOpacity);
parcelHelpers.export(exports, "isNoneish", ()=>isNoneish);
parcelHelpers.export(exports, "isNone", ()=>isNone);
parcelHelpers.export(exports, "isRound", ()=>isRound);
parcelHelpers.export(exports, "maybeAnchor", ()=>maybeAnchor);
parcelHelpers.export(exports, "maybeFrameAnchor", ()=>maybeFrameAnchor);
// Unlike {...defaults, ...options}, this ensures that any undefined (but
// present) properties in options inherit the given default value.
parcelHelpers.export(exports, "inherit", ()=>inherit);
// Given an iterable of named things (objects with a name property), returns a
// corresponding object with properties associated with the given name.
parcelHelpers.export(exports, "named", ()=>named);
parcelHelpers.export(exports, "maybeNamed", ()=>maybeNamed);
// TODO Accept other types of clips (paths, urls, x, y, other marks…)?
// https://github.com/observablehq/plot/issues/181
parcelHelpers.export(exports, "maybeClip", ()=>maybeClip);
var _d3 = require("d3");
var _isoformat = require("isoformat");
var _definedJs = require("./defined.js");
var _timeJs = require("./time.js");
const TypedArray = Object.getPrototypeOf(Uint8Array);
const objectToString = Object.prototype.toString;
function isArray(value) {
    return value instanceof Array || value instanceof TypedArray;
}
function isNumberArray(value) {
    return value instanceof TypedArray && !isBigIntArray(value);
}
function isNumberType(type) {
    return type?.prototype instanceof TypedArray && !isBigIntType(type);
}
function isBigIntArray(value) {
    return value instanceof BigInt64Array || value instanceof BigUint64Array;
}
function isBigIntType(type) {
    return type === BigInt64Array || type === BigUint64Array;
}
const reindex = Symbol("reindex");
function valueof(data, value, type) {
    const valueType = typeof value;
    return valueType === "string" ? isArrowTable(data) ? maybeTypedArrowify(data.getChild(value), type) : maybeTypedMap(data, field(value), type) : valueType === "function" ? maybeTypedMap(data, value, type) : valueType === "number" || value instanceof Date || valueType === "boolean" ? map(data, constant(value), type) : typeof value?.transform === "function" ? maybeTypedArrayify(value.transform(data), type) : maybeTake(maybeTypedArrayify(value, type), data?.[reindex]);
}
function maybeTake(values, index) {
    return values != null && index ? take(values, index) : values;
}
function maybeTypedMap(data, f, type) {
    return map(data, isNumberType(type) ? (d, i)=>coerceNumber(f(d, i)) : f, type); // allow conversion from BigInt
}
function maybeTypedArrayify(data, type) {
    return type === undefined ? arrayify(data) // preserve undefined type
     : isArrowVector(data) ? maybeTypedArrowify(data, type) : data instanceof type ? data : type.from(data, isNumberType(type) && !isNumberArray(data) ? coerceNumber : undefined);
}
function maybeTypedArrowify(vector, type) {
    return vector == null ? vector : (type === undefined || type === Array) && isArrowDateType(vector.type) ? coerceDates(vector.toArray()) : maybeTypedArrayify(vector.toArray(), type);
}
const singleton = [
    null
]; // for data-less decoration marks, e.g. frame
const field = (name)=>(d)=>{
        const v = d[name];
        return v === undefined && d.type === "Feature" ? d.properties?.[name] : v;
    }; // prettier-ignore
const indexOf = {
    transform: range
};
const identity = {
    transform: (d)=>d
};
const zero = ()=>0;
const one = ()=>1;
const yes = ()=>true;
const string = (x)=>x == null ? x : `${x}`;
const number = (x)=>x == null ? x : +x;
const boolean = (x)=>x == null ? x : !!x;
const first = (x)=>x ? x[0] : undefined;
const second = (x)=>x ? x[1] : undefined;
const third = (x)=>x ? x[2] : undefined;
const constant = (x)=>()=>x;
function percentile(reduce) {
    const p = +`${reduce}`.slice(1) / 100;
    return (I, f)=>(0, _d3.quantile)(I, p, f);
}
function coerceNumbers(values) {
    return isNumberArray(values) ? values : map(values, coerceNumber, Float64Array);
}
// Unlike Mark’s number, here we want to convert null and undefined to NaN since
// the result will be stored in a Float64Array and we don’t want null to be
// coerced to zero. We use Number instead of unary + to allow BigInt coercion.
function coerceNumber(x) {
    return x == null ? NaN : Number(x);
}
function coerceDates(values) {
    return map(values, coerceDate);
}
function coerceDate(x) {
    return x instanceof Date && !isNaN(x) ? x : typeof x === "string" ? (0, _isoformat.parse)(x) : x == null || isNaN(x = Number(x)) // allow conversion from BigInt
     ? undefined : new Date(x);
}
function maybeColorChannel(value, defaultValue) {
    if (value === undefined) value = defaultValue;
    return value === null ? [
        undefined,
        "none"
    ] : isColor(value) ? [
        undefined,
        value
    ] : [
        value,
        undefined
    ];
}
function maybeNumberChannel(value, defaultValue) {
    if (value === undefined) value = defaultValue;
    return value === null || typeof value === "number" ? [
        undefined,
        value
    ] : [
        value,
        undefined
    ];
}
function maybeKeyword(input, name, allowed) {
    if (input != null) return keyword(input, name, allowed);
}
function keyword(input, name, allowed) {
    const i = `${input}`.toLowerCase();
    if (!allowed.includes(i)) throw new Error(`invalid ${name}: ${input}`);
    return i;
}
function dataify(data) {
    return isArrowTable(data) ? data : arrayify(data);
}
function arrayify(values) {
    if (values == null || isArray(values)) return values;
    if (isArrowVector(values)) return maybeTypedArrowify(values);
    switch(values.type){
        case "FeatureCollection":
            return values.features;
        case "GeometryCollection":
            return values.geometries;
        case "Feature":
        case "LineString":
        case "MultiLineString":
        case "MultiPoint":
        case "MultiPolygon":
        case "Point":
        case "Polygon":
        case "Sphere":
            return [
                values
            ];
    }
    return Array.from(values);
}
function map(values, f, type = Array) {
    return values == null ? values : values instanceof type ? values.map(f) : type.from(values, f);
}
function slice(values, type = Array) {
    return values instanceof type ? values.slice() : type.from(values);
}
function hasX({ x, x1, x2 }) {
    return x !== undefined || x1 !== undefined || x2 !== undefined;
}
function hasY({ y, y1, y2 }) {
    return y !== undefined || y1 !== undefined || y2 !== undefined;
}
function hasXY(options) {
    return hasX(options) || hasY(options) || options.interval !== undefined;
}
function isObject(option) {
    return option?.toString === objectToString;
}
function isScaleOptions(option) {
    return isObject(option) && (option.type !== undefined || option.domain !== undefined);
}
function isOptions(option) {
    return isObject(option) && typeof option.transform !== "function";
}
function isDomainSort(sort) {
    return isOptions(sort) && sort.value === undefined && sort.channel === undefined;
}
function maybeZero(x, x1, x2, x3 = identity) {
    if (x1 === undefined && x2 === undefined) // {x} or {}
    x1 = 0, x2 = x === undefined ? x3 : x;
    else if (x1 === undefined) // {x, x2} or {x2}
    x1 = x === undefined ? 0 : x;
    else if (x2 === undefined) // {x, x1} or {x1}
    x2 = x === undefined ? 0 : x;
    return [
        x1,
        x2
    ];
}
function maybeTuple(x, y) {
    return x === undefined && y === undefined ? [
        first,
        second
    ] : [
        x,
        y
    ];
}
function maybeZ({ z, fill, stroke } = {}) {
    if (z === undefined) [z] = maybeColorChannel(fill);
    if (z === undefined) [z] = maybeColorChannel(stroke);
    return z;
}
function lengthof(data) {
    return isArray(data) ? data.length : data?.numRows;
}
function range(data) {
    const n = lengthof(data);
    const r = new Uint32Array(n);
    for(let i = 0; i < n; ++i)r[i] = i;
    return r;
}
function take(values, index) {
    return isArray(values) ? map(index, (i)=>values[i], values.constructor) : map(index, (i)=>values.at(i));
}
function taker(f) {
    return f.length === 1 ? (index, values)=>f(take(values, index)) : f;
}
function subarray(I, i, j) {
    return I.subarray ? I.subarray(i, j) : I.slice(i, j);
}
function keyof(value) {
    return value !== null && typeof value === "object" ? value.valueOf() : value;
}
function maybeInput(key, options) {
    if (options[key] !== undefined) return options[key];
    switch(key){
        case "x1":
        case "x2":
            key = "x";
            break;
        case "y1":
        case "y2":
            key = "y";
            break;
    }
    return options[key];
}
function column(source) {
    // Defines a column whose values are lazily populated by calling the returned
    // setter. If the given source is labeled, the label is propagated to the
    // returned column definition.
    let value;
    return [
        {
            transform: ()=>value,
            label: labelof(source)
        },
        (v)=>value = v
    ];
}
function maybeColumn(source) {
    return source == null ? [
        source
    ] : column(source);
}
function labelof(value, defaultValue) {
    return typeof value === "string" ? value : value && value.label !== undefined ? value.label : defaultValue;
}
function mid(x1, x2) {
    return {
        transform (data) {
            const X1 = x1.transform(data);
            const X2 = x2.transform(data);
            return isTemporal(X1) || isTemporal(X2) ? map(X1, (_, i)=>new Date((+X1[i] + +X2[i]) / 2)) : map(X1, (_, i)=>(+X1[i] + +X2[i]) / 2, Float64Array);
        },
        label: x1.label
    };
}
function maybeApplyInterval(V, scale) {
    const t = maybeIntervalTransform(scale?.interval, scale?.type);
    return t ? map(V, t) : V;
}
function maybeIntervalTransform(interval, type) {
    const i = maybeInterval(interval, type);
    return i && ((v)=>(0, _definedJs.defined)(v) ? i.floor(v) : v);
}
function maybeInterval(interval, type) {
    if (interval == null) return;
    if (typeof interval === "number") return numberInterval(interval);
    if (typeof interval === "string") return (type === "time" ? (0, _timeJs.timeInterval) : (0, _timeJs.utcInterval))(interval);
    if (typeof interval.floor !== "function") throw new Error("invalid interval; missing floor method");
    if (typeof interval.offset !== "function") throw new Error("invalid interval; missing offset method");
    return interval;
}
function numberInterval(interval) {
    interval = +interval;
    if (0 < interval && interval < 1 && Number.isInteger(1 / interval)) interval = -1 / interval;
    const n = Math.abs(interval);
    return interval < 0 ? {
        floor: (d)=>Math.floor(d * n) / n,
        offset: (d, s = 1)=>(d * n + Math.floor(s)) / n,
        range: (lo, hi)=>(0, _d3.range)(Math.ceil(lo * n), hi * n).map((x)=>x / n)
    } : {
        floor: (d)=>Math.floor(d / n) * n,
        offset: (d, s = 1)=>d + n * Math.floor(s),
        range: (lo, hi)=>(0, _d3.range)(Math.ceil(lo / n), hi / n).map((x)=>x * n)
    };
}
function maybeRangeInterval(interval, type) {
    interval = maybeInterval(interval, type);
    if (interval && typeof interval.range !== "function") throw new Error("invalid interval: missing range method");
    return interval;
}
function maybeNiceInterval(interval, type) {
    interval = maybeRangeInterval(interval, type);
    if (interval && typeof interval.ceil !== "function") throw new Error("invalid interval: missing ceil method");
    return interval;
}
function isTimeInterval(t) {
    return isInterval(t) && typeof t?.floor === "function" && t.floor() instanceof Date;
}
function isInterval(t) {
    return typeof t?.range === "function";
}
function maybeValue(value) {
    return value === undefined || isOptions(value) ? value : {
        value
    };
}
function numberChannel(source) {
    return source == null ? null : {
        transform: (data)=>valueof(data, source, Float64Array),
        label: labelof(source)
    };
}
function isTuples(data) {
    if (!isIterable(data)) return false;
    for (const d of data){
        if (d == null) continue;
        return typeof d === "object" && "0" in d && "1" in d;
    }
}
function isIterable(value) {
    return value && typeof value[Symbol.iterator] === "function";
}
function isTextual(values) {
    for (const value of values){
        if (value == null) continue;
        return typeof value !== "object" || value instanceof Date;
    }
}
function isOrdinal(values) {
    for (const value of values){
        if (value == null) continue;
        const type = typeof value;
        return type === "string" || type === "boolean";
    }
}
function isTemporal(values) {
    for (const value of values){
        if (value == null) continue;
        return value instanceof Date;
    }
}
function isTemporalString(values) {
    for (const value of values){
        if (value == null) continue;
        return typeof value === "string" && isNaN(value) && (0, _isoformat.parse)(value);
    }
}
function isNumericString(values) {
    for (const value of values){
        if (value == null) continue;
        if (typeof value !== "string") return false;
        if (!value.trim()) continue;
        return !isNaN(value);
    }
}
function isNumeric(values) {
    for (const value of values){
        if (value == null) continue;
        return typeof value === "number";
    }
}
function isEvery(values, is) {
    let every;
    for (const value of values){
        if (value == null) continue;
        if (!is(value)) return false;
        every = true;
    }
    return every;
}
const namedColors = new Set("none,currentcolor,transparent,aliceblue,antiquewhite,aqua,aquamarine,azure,beige,bisque,black,blanchedalmond,blue,blueviolet,brown,burlywood,cadetblue,chartreuse,chocolate,coral,cornflowerblue,cornsilk,crimson,cyan,darkblue,darkcyan,darkgoldenrod,darkgray,darkgreen,darkgrey,darkkhaki,darkmagenta,darkolivegreen,darkorange,darkorchid,darkred,darksalmon,darkseagreen,darkslateblue,darkslategray,darkslategrey,darkturquoise,darkviolet,deeppink,deepskyblue,dimgray,dimgrey,dodgerblue,firebrick,floralwhite,forestgreen,fuchsia,gainsboro,ghostwhite,gold,goldenrod,gray,green,greenyellow,grey,honeydew,hotpink,indianred,indigo,ivory,khaki,lavender,lavenderblush,lawngreen,lemonchiffon,lightblue,lightcoral,lightcyan,lightgoldenrodyellow,lightgray,lightgreen,lightgrey,lightpink,lightsalmon,lightseagreen,lightskyblue,lightslategray,lightslategrey,lightsteelblue,lightyellow,lime,limegreen,linen,magenta,maroon,mediumaquamarine,mediumblue,mediumorchid,mediumpurple,mediumseagreen,mediumslateblue,mediumspringgreen,mediumturquoise,mediumvioletred,midnightblue,mintcream,mistyrose,moccasin,navajowhite,navy,oldlace,olive,olivedrab,orange,orangered,orchid,palegoldenrod,palegreen,paleturquoise,palevioletred,papayawhip,peachpuff,peru,pink,plum,powderblue,purple,rebeccapurple,red,rosybrown,royalblue,saddlebrown,salmon,sandybrown,seagreen,seashell,sienna,silver,skyblue,slateblue,slategray,slategrey,snow,springgreen,steelblue,tan,teal,thistle,tomato,turquoise,violet,wheat,white,whitesmoke,yellow".split(",")); // prettier-ignore
function isColor(value) {
    if (typeof value !== "string") return false;
    value = value.toLowerCase().trim();
    return /^#[0-9a-f]{3,8}$/.test(value) || // hex rgb, rgba, rrggbb, rrggbbaa
    /^(?:url|var|rgb|rgba|hsl|hsla|hwb|lab|lch|oklab|oklch|color|color-mix)\(.*\)$/.test(value) || // <funciri>, CSS variable, color, etc.
    namedColors.has(value) // currentColor, red, etc.
    ;
}
function isOpacity(value) {
    return typeof value === "number" && (0 <= value && value <= 1 || isNaN(value));
}
function isNoneish(value) {
    return value == null || isNone(value);
}
function isNone(value) {
    return /^\s*none\s*$/i.test(value);
}
function isRound(value) {
    return /^\s*round\s*$/i.test(value);
}
function maybeAnchor(value, name) {
    return maybeKeyword(value, name, [
        "middle",
        "top-left",
        "top",
        "top-right",
        "right",
        "bottom-right",
        "bottom",
        "bottom-left",
        "left"
    ]);
}
function maybeFrameAnchor(value = "middle") {
    return maybeAnchor(value, "frameAnchor");
}
function inherit(options = {}, ...rest) {
    let o = options;
    for (const defaults of rest){
        for(const key in defaults)if (o[key] === undefined) {
            const value = defaults[key];
            if (o === options) o = {
                ...o,
                [key]: value
            };
            else o[key] = value;
        }
    }
    return o;
}
function named(things) {
    console.warn("named iterables are deprecated; please use an object instead");
    const names = new Set();
    return Object.fromEntries(Array.from(things, (thing)=>{
        const { name } = thing;
        if (name == null) throw new Error("missing name");
        const key = `${name}`;
        if (key === "__proto__") throw new Error(`illegal name: ${key}`);
        if (names.has(key)) throw new Error(`duplicate name: ${key}`);
        names.add(key);
        return [
            name,
            thing
        ];
    }));
}
function maybeNamed(things) {
    return isIterable(things) ? named(things) : things;
}
function maybeClip(clip) {
    if (clip === true) clip = "frame";
    else if (clip === false) clip = null;
    else if (clip != null) clip = keyword(clip, "clip", [
        "frame",
        "sphere"
    ]);
    return clip;
}
// https://github.com/observablehq/stdlib/blob/746ca2e69135df6178e4f3a17244def35d8d6b20/src/arrow.js#L4C1-L17C1
function isArrowTable(value) {
    return value && typeof value.getChild === "function" && typeof value.toArray === "function" && value.schema && Array.isArray(value.schema.fields);
}
function isArrowVector(value) {
    return value && typeof value.toArray === "function" && value.type;
}
// Apache Arrow now represents dates as numbers. We currently only support
// implicit coercion to JavaScript Date objects when the numbers represent
// milliseconds since Unix epoch.
function isArrowDateType(type) {
    return type && (type.typeId === 8 || // date
    type.typeId === 10) && // timestamp
    type.unit === 1 // millisecond
    ;
}

},{"d3":"17XFv","isoformat":"EsiF8","./defined.js":"3n4Hk","./time.js":"3rFQb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"EsiF8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "format", ()=>(0, _formatJsDefault.default));
parcelHelpers.export(exports, "parse", ()=>(0, _parseJsDefault.default));
var _formatJs = require("./format.js");
var _formatJsDefault = parcelHelpers.interopDefault(_formatJs);
var _parseJs = require("./parse.js");
var _parseJsDefault = parcelHelpers.interopDefault(_parseJs);

},{"./format.js":"ds6jW","./parse.js":"8VHBd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ds6jW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>format);
function format(date, fallback) {
    if (!(date instanceof Date)) date = new Date(+date);
    if (isNaN(date)) return typeof fallback === "function" ? fallback(date) : fallback;
    const hours = date.getUTCHours();
    const minutes = date.getUTCMinutes();
    const seconds = date.getUTCSeconds();
    const milliseconds = date.getUTCMilliseconds();
    return `${formatYear(date.getUTCFullYear(), 4)}-${pad(date.getUTCMonth() + 1, 2)}-${pad(date.getUTCDate(), 2)}${hours || minutes || seconds || milliseconds ? `T${pad(hours, 2)}:${pad(minutes, 2)}${seconds || milliseconds ? `:${pad(seconds, 2)}${milliseconds ? `.${pad(milliseconds, 3)}` : ``}` : ``}Z` : ``}`;
}
function formatYear(year) {
    return year < 0 ? `-${pad(-year, 6)}` : year > 9999 ? `+${pad(year, 6)}` : pad(year, 4);
}
function pad(value, width) {
    return `${value}`.padStart(width, "0");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8VHBd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>parse);
const re = /^(?:[-+]\d{2})?\d{4}(?:-\d{2}(?:-\d{2})?)?(?:T\d{2}:\d{2}(?::\d{2}(?:\.\d{3})?)?(?:Z|[-+]\d{2}:?\d{2})?)?$/;
function parse(string, fallback) {
    if (!re.test(string += "")) return typeof fallback === "function" ? fallback(string) : fallback;
    return new Date(string);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3rFQb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "intervalDuration", ()=>intervalDuration);
parcelHelpers.export(exports, "intervalType", ()=>intervalType);
parcelHelpers.export(exports, "parseTimeInterval", ()=>parseTimeInterval);
parcelHelpers.export(exports, "timeInterval", ()=>timeInterval);
parcelHelpers.export(exports, "utcInterval", ()=>utcInterval);
// If the given interval is a standard time interval, we may be able to promote
// it a larger aligned time interval, rather than showing every nth tick.
parcelHelpers.export(exports, "generalizeTimeInterval", ()=>generalizeTimeInterval);
// Given an array of dates, returns the largest compatible standard time
// interval. If no standard interval is compatible (other than milliseconds,
// which is universally compatible), returns undefined.
parcelHelpers.export(exports, "inferTimeFormat", ()=>inferTimeFormat);
var _d3 = require("d3");
var _orderJs = require("./order.js");
const durationSecond = 1000;
const durationMinute = durationSecond * 60;
const durationHour = durationMinute * 60;
const durationDay = durationHour * 24;
const durationWeek = durationDay * 7;
const durationMonth = durationDay * 30;
const durationYear = durationDay * 365;
// See https://github.com/d3/d3-time/blob/9e8dc940f38f78d7588aad68a54a25b1f0c2d97b/src/ticks.js#L14-L33
const tickIntervals = [
    [
        "millisecond",
        1
    ],
    [
        "2 milliseconds",
        2
    ],
    [
        "5 milliseconds",
        5
    ],
    [
        "10 milliseconds",
        10
    ],
    [
        "20 milliseconds",
        20
    ],
    [
        "50 milliseconds",
        50
    ],
    [
        "100 milliseconds",
        100
    ],
    [
        "200 milliseconds",
        200
    ],
    [
        "500 milliseconds",
        500
    ],
    [
        "second",
        durationSecond
    ],
    [
        "5 seconds",
        5 * durationSecond
    ],
    [
        "15 seconds",
        15 * durationSecond
    ],
    [
        "30 seconds",
        30 * durationSecond
    ],
    [
        "minute",
        durationMinute
    ],
    [
        "5 minutes",
        5 * durationMinute
    ],
    [
        "15 minutes",
        15 * durationMinute
    ],
    [
        "30 minutes",
        30 * durationMinute
    ],
    [
        "hour",
        durationHour
    ],
    [
        "3 hours",
        3 * durationHour
    ],
    [
        "6 hours",
        6 * durationHour
    ],
    [
        "12 hours",
        12 * durationHour
    ],
    [
        "day",
        durationDay
    ],
    [
        "2 days",
        2 * durationDay
    ],
    [
        "week",
        durationWeek
    ],
    [
        "2 weeks",
        2 * durationWeek
    ],
    [
        "month",
        durationMonth
    ],
    [
        "3 months",
        3 * durationMonth
    ],
    [
        "6 months",
        6 * durationMonth
    ],
    [
        "year",
        durationYear
    ],
    [
        "2 years",
        2 * durationYear
    ],
    [
        "5 years",
        5 * durationYear
    ],
    [
        "10 years",
        10 * durationYear
    ],
    [
        "20 years",
        20 * durationYear
    ],
    [
        "50 years",
        50 * durationYear
    ],
    [
        "100 years",
        100 * durationYear
    ] // TODO generalize to longer time scales
];
const durations = new Map([
    [
        "second",
        durationSecond
    ],
    [
        "minute",
        durationMinute
    ],
    [
        "hour",
        durationHour
    ],
    [
        "day",
        durationDay
    ],
    [
        "monday",
        durationWeek
    ],
    [
        "tuesday",
        durationWeek
    ],
    [
        "wednesday",
        durationWeek
    ],
    [
        "thursday",
        durationWeek
    ],
    [
        "friday",
        durationWeek
    ],
    [
        "saturday",
        durationWeek
    ],
    [
        "sunday",
        durationWeek
    ],
    [
        "week",
        durationWeek
    ],
    [
        "month",
        durationMonth
    ],
    [
        "year",
        durationYear
    ]
]);
const timeIntervals = new Map([
    [
        "second",
        (0, _d3.timeSecond)
    ],
    [
        "minute",
        (0, _d3.timeMinute)
    ],
    [
        "hour",
        (0, _d3.timeHour)
    ],
    [
        "day",
        (0, _d3.timeDay)
    ],
    [
        "monday",
        (0, _d3.timeMonday)
    ],
    [
        "tuesday",
        (0, _d3.timeTuesday)
    ],
    [
        "wednesday",
        (0, _d3.timeWednesday)
    ],
    [
        "thursday",
        (0, _d3.timeThursday)
    ],
    [
        "friday",
        (0, _d3.timeFriday)
    ],
    [
        "saturday",
        (0, _d3.timeSaturday)
    ],
    [
        "sunday",
        (0, _d3.timeSunday)
    ],
    [
        "week",
        (0, _d3.timeWeek)
    ],
    [
        "month",
        (0, _d3.timeMonth)
    ],
    [
        "year",
        (0, _d3.timeYear)
    ]
]);
const utcIntervals = new Map([
    [
        "second",
        (0, _d3.utcSecond)
    ],
    [
        "minute",
        (0, _d3.utcMinute)
    ],
    [
        "hour",
        (0, _d3.utcHour)
    ],
    [
        "day",
        (0, _d3.unixDay)
    ],
    [
        "monday",
        (0, _d3.utcMonday)
    ],
    [
        "tuesday",
        (0, _d3.utcTuesday)
    ],
    [
        "wednesday",
        (0, _d3.utcWednesday)
    ],
    [
        "thursday",
        (0, _d3.utcThursday)
    ],
    [
        "friday",
        (0, _d3.utcFriday)
    ],
    [
        "saturday",
        (0, _d3.utcSaturday)
    ],
    [
        "sunday",
        (0, _d3.utcSunday)
    ],
    [
        "week",
        (0, _d3.utcWeek)
    ],
    [
        "month",
        (0, _d3.utcMonth)
    ],
    [
        "year",
        (0, _d3.utcYear)
    ]
]);
const intervalDuration = Symbol("intervalDuration");
const intervalType = Symbol("intervalType");
// We greedily mutate D3’s standard intervals on load so that the hidden fields
// are available even if specified as e.g. d3.utcMonth instead of "month".
for (const [name, interval] of timeIntervals){
    interval[intervalDuration] = durations.get(name);
    interval[intervalType] = "time";
}
for (const [name, interval] of utcIntervals){
    interval[intervalDuration] = durations.get(name);
    interval[intervalType] = "utc";
}
const utcFormatIntervals = [
    [
        "year",
        (0, _d3.utcYear),
        "utc"
    ],
    [
        "month",
        (0, _d3.utcMonth),
        "utc"
    ],
    [
        "day",
        (0, _d3.unixDay),
        "utc",
        6 * durationMonth
    ],
    [
        "hour",
        (0, _d3.utcHour),
        "utc",
        3 * durationDay
    ],
    [
        "minute",
        (0, _d3.utcMinute),
        "utc",
        6 * durationHour
    ],
    [
        "second",
        (0, _d3.utcSecond),
        "utc",
        30 * durationMinute
    ]
];
const timeFormatIntervals = [
    [
        "year",
        (0, _d3.timeYear),
        "time"
    ],
    [
        "month",
        (0, _d3.timeMonth),
        "time"
    ],
    [
        "day",
        (0, _d3.timeDay),
        "time",
        6 * durationMonth
    ],
    [
        "hour",
        (0, _d3.timeHour),
        "time",
        3 * durationDay
    ],
    [
        "minute",
        (0, _d3.timeMinute),
        "time",
        6 * durationHour
    ],
    [
        "second",
        (0, _d3.timeSecond),
        "time",
        30 * durationMinute
    ]
];
// An interleaved array of UTC and local time intervals, in descending order
// from largest to smallest, used to determine the most specific standard time
// format for a given array of dates. This is a subset of the tick intervals
// listed above; we only need the breakpoints where the format changes.
const formatIntervals = [
    utcFormatIntervals[0],
    timeFormatIntervals[0],
    utcFormatIntervals[1],
    timeFormatIntervals[1],
    utcFormatIntervals[2],
    timeFormatIntervals[2],
    // Below day, local time typically has an hourly offset from UTC and hence the
    // two are aligned and indistinguishable; therefore, we only consider UTC, and
    // we don’t consider these if the domain only has a single value.
    ...utcFormatIntervals.slice(3)
];
function parseTimeInterval(input) {
    let name = `${input}`.toLowerCase();
    if (name.endsWith("s")) name = name.slice(0, -1); // drop plural
    let period = 1;
    const match = /^(?:(\d+)\s+)/.exec(name);
    if (match) {
        name = name.slice(match[0].length);
        period = +match[1];
    }
    switch(name){
        case "quarter":
            name = "month";
            period *= 3;
            break;
        case "half":
            name = "month";
            period *= 6;
            break;
    }
    let interval = utcIntervals.get(name);
    if (!interval) throw new Error(`unknown interval: ${input}`);
    if (period > 1 && !interval.every) throw new Error(`non-periodic interval: ${name}`);
    return [
        name,
        period
    ];
}
function timeInterval(input) {
    return asInterval(parseTimeInterval(input), "time");
}
function utcInterval(input) {
    return asInterval(parseTimeInterval(input), "utc");
}
function asInterval([name, period], type) {
    let interval = (type === "time" ? timeIntervals : utcIntervals).get(name);
    if (period > 1) {
        interval = interval.every(period);
        interval[intervalDuration] = durations.get(name) * period;
        interval[intervalType] = type;
    }
    return interval;
}
function generalizeTimeInterval(interval, n) {
    if (!(n > 1)) return; // no need to generalize
    const duration = interval[intervalDuration];
    if (!tickIntervals.some(([, d])=>d === duration)) return; // nonstandard or unknown interval
    if (duration % durationDay === 0 && durationDay < duration && duration < durationMonth) return; // not generalizable
    const [i] = tickIntervals[(0, _d3.bisector)(([, step])=>Math.log(step)).center(tickIntervals, Math.log(duration * n))];
    return (interval[intervalType] === "time" ? timeInterval : utcInterval)(i);
}
function formatTimeInterval(name, type, anchor) {
    const format = type === "time" ? (0, _d3.timeFormat) : (0, _d3.utcFormat);
    // For tips and legends, use a format that doesn’t require context.
    if (anchor == null) return format(name === "year" ? "%Y" : name === "month" ? "%Y-%m" : name === "day" ? "%Y-%m-%d" : name === "hour" || name === "minute" ? "%Y-%m-%dT%H:%M" : name === "second" ? "%Y-%m-%dT%H:%M:%S" : "%Y-%m-%dT%H:%M:%S.%L");
    // Otherwise, assume that this is for axis ticks.
    const template = getTimeTemplate(anchor);
    switch(name){
        case "millisecond":
            return formatConditional(format(".%L"), format(":%M:%S"), template);
        case "second":
            return formatConditional(format(":%S"), format("%-I:%M"), template);
        case "minute":
            return formatConditional(format("%-I:%M"), format("%p"), template);
        case "hour":
            return formatConditional(format("%-I %p"), format("%b %-d"), template);
        case "day":
            return formatConditional(format("%-d"), format("%b"), template);
        case "month":
            return formatConditional(format("%b"), format("%Y"), template);
        case "year":
            return format("%Y");
    }
    throw new Error("unable to format time ticks");
}
function getTimeTemplate(anchor) {
    return anchor === "left" || anchor === "right" ? (f1, f2)=>`\n${f1}\n${f2}` // extra newline to keep f1 centered
     : anchor === "top" ? (f1, f2)=>`${f2}\n${f1}` : (f1, f2)=>`${f1}\n${f2}`;
}
function getFormatIntervals(type) {
    return type === "time" ? timeFormatIntervals : type === "utc" ? utcFormatIntervals : formatIntervals;
}
function inferTimeFormat(type, dates, anchor) {
    const step = (0, _d3.max)((0, _d3.pairs)(dates, (a, b)=>Math.abs(b - a))); // maybe undefined!
    if (step < 1000) return formatTimeInterval("millisecond", "utc", anchor);
    for (const [name, interval, intervalType, maxStep] of getFormatIntervals(type)){
        if (step > maxStep) break; // e.g., 52 weeks
        if (name === "hour" && !step) break; // e.g., domain with a single date
        if (dates.every((d)=>interval.floor(d) >= d)) return formatTimeInterval(name, intervalType, anchor);
    }
}
function formatConditional(format1, format2, template) {
    return (x, i, X)=>{
        const f1 = format1(x, i); // always shown
        const f2 = format2(x, i); // only shown if different
        const j = i - (0, _orderJs.orderof)(X); // detect reversed domains
        return i !== j && X[j] !== undefined && f2 === format2(X[j], j) ? f1 : template(f1, f2);
    };
}

},{"d3":"17XFv","./order.js":"ieWhH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ieWhH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Like a sort comparator, returns a positive value if the given array of values
// is in ascending order, a negative value if the values are in descending
// order. Assumes monotonicity; only tests the first and last values.
parcelHelpers.export(exports, "orderof", ()=>orderof);
var _d3 = require("d3");
function orderof(values) {
    if (values == null) return;
    const first = values[0];
    const last = values[values.length - 1];
    return (0, _d3.descending)(first, last);
}

},{"d3":"17XFv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kiF55":[function(require,module,exports) {
// Positional scales have associated axes, and for ordinal data, a point or band
// scale is used instead of an ordinal scale.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "position", ()=>position);
parcelHelpers.export(exports, "color", ()=>color);
parcelHelpers.export(exports, "radius", ()=>radius);
parcelHelpers.export(exports, "length", ()=>length);
parcelHelpers.export(exports, "opacity", ()=>opacity);
parcelHelpers.export(exports, "symbol", ()=>symbol);
parcelHelpers.export(exports, "projection", ()=>projection);
parcelHelpers.export(exports, "registry", ()=>registry);
parcelHelpers.export(exports, "isPosition", ()=>isPosition);
parcelHelpers.export(exports, "hasNumericRange", ()=>hasNumericRange);
const position = Symbol("position");
const color = Symbol("color");
const radius = Symbol("radius");
const length = Symbol("length");
const opacity = Symbol("opacity");
const symbol = Symbol("symbol");
const projection = Symbol("projection");
const registry = new Map([
    [
        "x",
        position
    ],
    [
        "y",
        position
    ],
    [
        "fx",
        position
    ],
    [
        "fy",
        position
    ],
    [
        "r",
        radius
    ],
    [
        "color",
        color
    ],
    [
        "opacity",
        opacity
    ],
    [
        "symbol",
        symbol
    ],
    [
        "length",
        length
    ],
    [
        "projection",
        projection
    ]
]);
function isPosition(kind) {
    return kind === position || kind === projection;
}
function hasNumericRange(kind) {
    return kind === position || kind === radius || kind === length || kind === opacity;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ePwOU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sqrt3", ()=>sqrt3);
parcelHelpers.export(exports, "sqrt4_3", ()=>sqrt4_3);
parcelHelpers.export(exports, "isSymbol", ()=>isSymbol);
parcelHelpers.export(exports, "maybeSymbol", ()=>maybeSymbol);
parcelHelpers.export(exports, "maybeSymbolChannel", ()=>maybeSymbolChannel);
var _d3 = require("d3");
const sqrt3 = Math.sqrt(3);
const sqrt4_3 = 2 / sqrt3;
const symbolHexagon = {
    draw (context, size) {
        const rx = Math.sqrt(size / Math.PI), ry = rx * sqrt4_3, hy = ry / 2;
        context.moveTo(0, ry);
        context.lineTo(rx, hy);
        context.lineTo(rx, -hy);
        context.lineTo(0, -ry);
        context.lineTo(-rx, -hy);
        context.lineTo(-rx, hy);
        context.closePath();
    }
};
const symbols = new Map([
    [
        "asterisk",
        (0, _d3.symbolAsterisk)
    ],
    [
        "circle",
        (0, _d3.symbolCircle)
    ],
    [
        "cross",
        (0, _d3.symbolCross)
    ],
    [
        "diamond",
        (0, _d3.symbolDiamond)
    ],
    [
        "diamond2",
        (0, _d3.symbolDiamond2)
    ],
    [
        "hexagon",
        symbolHexagon
    ],
    [
        "plus",
        (0, _d3.symbolPlus)
    ],
    [
        "square",
        (0, _d3.symbolSquare)
    ],
    [
        "square2",
        (0, _d3.symbolSquare2)
    ],
    [
        "star",
        (0, _d3.symbolStar)
    ],
    [
        "times",
        (0, _d3.symbolTimes)
    ],
    [
        "triangle",
        (0, _d3.symbolTriangle)
    ],
    [
        "triangle2",
        (0, _d3.symbolTriangle2)
    ],
    [
        "wye",
        (0, _d3.symbolWye)
    ]
]);
function isSymbolObject(value) {
    return value && typeof value.draw === "function";
}
function isSymbol(value) {
    if (isSymbolObject(value)) return true;
    if (typeof value !== "string") return false;
    return symbols.has(value.toLowerCase());
}
function maybeSymbol(symbol) {
    if (symbol == null || isSymbolObject(symbol)) return symbol;
    const value = symbols.get(`${symbol}`.toLowerCase());
    if (value) return value;
    throw new Error(`invalid symbol: ${symbol}`);
}
function maybeSymbolChannel(symbol) {
    if (symbol == null || isSymbolObject(symbol)) return [
        undefined,
        symbol
    ];
    if (typeof symbol === "string") {
        const value = symbols.get(`${symbol}`.toLowerCase());
        if (value) return [
            undefined,
            value
        ];
    }
    return [
        symbol,
        undefined
    ];
}

},{"d3":"17XFv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1qc0A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Group on {z, fill, stroke}.
parcelHelpers.export(exports, "groupZ", ()=>groupZ);
// Group on {z, fill, stroke}, then on x.
parcelHelpers.export(exports, "groupX", ()=>groupX);
// Group on {z, fill, stroke}, then on y.
parcelHelpers.export(exports, "groupY", ()=>groupY);
// Group on {z, fill, stroke}, then on x and y.
parcelHelpers.export(exports, "group", ()=>group);
parcelHelpers.export(exports, "hasOutput", ()=>hasOutput);
parcelHelpers.export(exports, "maybeOutputs", ()=>maybeOutputs);
parcelHelpers.export(exports, "maybeOutput", ()=>maybeOutput);
parcelHelpers.export(exports, "maybeEvaluator", ()=>maybeEvaluator);
parcelHelpers.export(exports, "maybeGroup", ()=>maybeGroup);
parcelHelpers.export(exports, "maybeReduce", ()=>maybeReduce);
parcelHelpers.export(exports, "maybeGroupOutputs", ()=>maybeGroupOutputs);
parcelHelpers.export(exports, "maybeSubgroup", ()=>maybeSubgroup);
parcelHelpers.export(exports, "maybeSort", ()=>maybeSort);
parcelHelpers.export(exports, "reduceIdentity", ()=>reduceIdentity);
parcelHelpers.export(exports, "reduceFirst", ()=>reduceFirst);
parcelHelpers.export(exports, "reduceCount", ()=>reduceCount);
parcelHelpers.export(exports, "reduceZ", ()=>reduceZ);
parcelHelpers.export(exports, "find", ()=>find);
var _d3 = require("d3");
var _definedJs = require("../defined.js");
var _optionsJs = require("../options.js");
var _basicJs = require("./basic.js");
function groupZ(outputs, options) {
    return groupn(null, null, outputs, options);
}
function groupX(outputs = {
    y: "count"
}, options = {}) {
    const { x = (0, _optionsJs.identity) } = options;
    if (x == null) throw new Error("missing channel: x");
    return groupn(x, null, outputs, options);
}
function groupY(outputs = {
    x: "count"
}, options = {}) {
    const { y = (0, _optionsJs.identity) } = options;
    if (y == null) throw new Error("missing channel: y");
    return groupn(null, y, outputs, options);
}
function group(outputs = {
    fill: "count"
}, options = {}) {
    let { x, y } = options;
    [x, y] = (0, _optionsJs.maybeTuple)(x, y);
    if (x == null) throw new Error("missing channel: x");
    if (y == null) throw new Error("missing channel: y");
    return groupn(x, y, outputs, options);
}
function groupn(x, y, { data: reduceData = reduceIdentity, filter, sort, reverse, ...outputs // output channel definitions
 } = {}, inputs = {} // input channels and options
) {
    // Compute the outputs.
    outputs = maybeGroupOutputs(outputs, inputs);
    reduceData = maybeGroupReduce(reduceData, (0, _optionsJs.identity));
    sort = sort == null ? undefined : maybeGroupOutput("sort", sort, inputs);
    filter = filter == null ? undefined : maybeGroupEvaluator("filter", filter, inputs);
    // Produce x and y output channels as appropriate.
    const [GX, setGX] = (0, _optionsJs.maybeColumn)(x);
    const [GY, setGY] = (0, _optionsJs.maybeColumn)(y);
    // Greedily materialize the z, fill, and stroke channels (if channels and not
    // constants) so that we can reference them for subdividing groups without
    // computing them more than once.
    const { z, fill, stroke, x1, x2, y1, y2, ...options } = inputs;
    const [GZ, setGZ] = (0, _optionsJs.maybeColumn)(z);
    const [vfill] = (0, _optionsJs.maybeColorChannel)(fill);
    const [vstroke] = (0, _optionsJs.maybeColorChannel)(stroke);
    const [GF, setGF] = (0, _optionsJs.maybeColumn)(vfill);
    const [GS, setGS] = (0, _optionsJs.maybeColumn)(vstroke);
    return {
        ..."z" in inputs && {
            z: GZ || z
        },
        ..."fill" in inputs && {
            fill: GF || fill
        },
        ..."stroke" in inputs && {
            stroke: GS || stroke
        },
        ...(0, _basicJs.basic)(options, (data, facets, plotOptions)=>{
            const X = (0, _optionsJs.maybeApplyInterval)((0, _optionsJs.valueof)(data, x), plotOptions?.x);
            const Y = (0, _optionsJs.maybeApplyInterval)((0, _optionsJs.valueof)(data, y), plotOptions?.y);
            const Z = (0, _optionsJs.valueof)(data, z);
            const F = (0, _optionsJs.valueof)(data, vfill);
            const S = (0, _optionsJs.valueof)(data, vstroke);
            const G = maybeSubgroup(outputs, {
                z: Z,
                fill: F,
                stroke: S
            });
            const groupFacets = [];
            const groupData = [];
            const GX = X && setGX([]);
            const GY = Y && setGY([]);
            const GZ = Z && setGZ([]);
            const GF = F && setGF([]);
            const GS = S && setGS([]);
            let i = 0;
            for (const o of outputs)o.initialize(data);
            if (sort) sort.initialize(data);
            if (filter) filter.initialize(data);
            for (const facet of facets){
                const groupFacet = [];
                for (const o of outputs)o.scope("facet", facet);
                if (sort) sort.scope("facet", facet);
                if (filter) filter.scope("facet", facet);
                for (const [f, I] of maybeGroup(facet, G)){
                    for (const [y, gg] of maybeGroup(I, Y))for (const [x, g] of maybeGroup(gg, X)){
                        const extent = {
                            data
                        };
                        if (X) extent.x = x;
                        if (Y) extent.y = y;
                        if (G) extent.z = f;
                        if (filter && !filter.reduce(g, extent)) continue;
                        groupFacet.push(i++);
                        groupData.push(reduceData.reduceIndex(g, data, extent));
                        if (X) GX.push(x);
                        if (Y) GY.push(y);
                        if (Z) GZ.push(G === Z ? f : Z[g[0]]);
                        if (F) GF.push(G === F ? f : F[g[0]]);
                        if (S) GS.push(G === S ? f : S[g[0]]);
                        for (const o of outputs)o.reduce(g, extent);
                        if (sort) sort.reduce(g, extent);
                    }
                }
                groupFacets.push(groupFacet);
            }
            maybeSort(groupFacets, sort, reverse);
            return {
                data: groupData,
                facets: groupFacets
            };
        }),
        ...!hasOutput(outputs, "x") && (GX ? {
            x: GX
        } : {
            x1,
            x2
        }),
        ...!hasOutput(outputs, "y") && (GY ? {
            y: GY
        } : {
            y1,
            y2
        }),
        ...Object.fromEntries(outputs.map(({ name, output })=>[
                name,
                output
            ]))
    };
}
function hasOutput(outputs, ...names) {
    for (const { name } of outputs){
        if (names.includes(name)) return true;
    }
    return false;
}
function maybeOutputs(outputs, inputs, asOutput = maybeOutput) {
    const entries = Object.entries(outputs);
    // Propagate standard mark channels by default.
    if (inputs.title != null && outputs.title === undefined) entries.push([
        "title",
        reduceTitle
    ]);
    if (inputs.href != null && outputs.href === undefined) entries.push([
        "href",
        reduceFirst
    ]);
    return entries.filter(([, reduce])=>reduce !== undefined).map(([name, reduce])=>reduce === null ? nullOutput(name) : asOutput(name, reduce, inputs));
}
function maybeOutput(name, reduce, inputs, asEvaluator = maybeEvaluator) {
    let scale; // optional per-channel scale override
    if ((0, _optionsJs.isObject)(reduce) && "reduce" in reduce) scale = reduce.scale, reduce = reduce.reduce; // N.B. array.reduce
    const evaluator = asEvaluator(name, reduce, inputs);
    const [output, setOutput] = (0, _optionsJs.column)(evaluator.label);
    let O;
    return {
        name,
        output: scale === undefined ? output : {
            value: output,
            scale
        },
        initialize (data) {
            evaluator.initialize(data);
            O = setOutput([]);
        },
        scope (scope, I) {
            evaluator.scope(scope, I);
        },
        reduce (I, extent) {
            O.push(evaluator.reduce(I, extent));
        }
    };
}
function nullOutput(name) {
    return {
        name,
        initialize () {},
        scope () {},
        reduce () {}
    };
}
function maybeEvaluator(name, reduce, inputs, asReduce = maybeReduce) {
    const input = (0, _optionsJs.maybeInput)(name, inputs);
    const reducer = asReduce(reduce, input);
    let V, context;
    return {
        label: (0, _optionsJs.labelof)(reducer === reduceCount ? null : input, reducer.label),
        initialize (data) {
            V = input === undefined ? data : (0, _optionsJs.valueof)(data, input);
            if (reducer.scope === "data") context = reducer.reduceIndex((0, _optionsJs.range)(data), V);
        },
        scope (scope, I) {
            if (reducer.scope === scope) context = reducer.reduceIndex(I, V);
        },
        reduce (I, extent) {
            return reducer.scope == null ? reducer.reduceIndex(I, V, extent) : reducer.reduceIndex(I, V, context, extent);
        }
    };
}
function maybeGroup(I, X) {
    return X ? (0, _d3.group)(I, (i)=>X[i]) : [
        [
            ,
            I
        ]
    ];
}
function maybeReduce(reduce, value, fallback = invalidReduce) {
    if (reduce == null) return fallback(reduce);
    if (typeof reduce.reduceIndex === "function") return reduce;
    if (typeof reduce.reduce === "function" && (0, _optionsJs.isObject)(reduce)) return reduceReduce(reduce); // N.B. array.reduce
    if (typeof reduce === "function") return reduceFunction(reduce);
    if (/^p\d{2}$/i.test(reduce)) return reduceAccessor((0, _optionsJs.percentile)(reduce));
    switch(`${reduce}`.toLowerCase()){
        case "first":
            return reduceFirst;
        case "last":
            return reduceLast;
        case "identity":
            return reduceIdentity;
        case "count":
            return reduceCount;
        case "distinct":
            return reduceDistinct;
        case "sum":
            return value == null ? reduceCount : reduceSum;
        case "proportion":
            return reduceProportion(value, "data");
        case "proportion-facet":
            return reduceProportion(value, "facet");
        case "deviation":
            return reduceAccessor((0, _d3.deviation));
        case "min":
            return reduceAccessor((0, _d3.min));
        case "min-index":
            return reduceAccessor((0, _d3.minIndex));
        case "max":
            return reduceAccessor((0, _d3.max));
        case "max-index":
            return reduceAccessor((0, _d3.maxIndex));
        case "mean":
            return reduceMaybeTemporalAccessor((0, _d3.mean));
        case "median":
            return reduceMaybeTemporalAccessor((0, _d3.median));
        case "variance":
            return reduceAccessor((0, _d3.variance));
        case "mode":
            return reduceAccessor((0, _d3.mode));
    }
    return fallback(reduce);
}
function invalidReduce(reduce) {
    throw new Error(`invalid reduce: ${reduce}`);
}
function maybeGroupOutputs(outputs, inputs) {
    return maybeOutputs(outputs, inputs, maybeGroupOutput);
}
function maybeGroupOutput(name, reduce, inputs) {
    return maybeOutput(name, reduce, inputs, maybeGroupEvaluator);
}
function maybeGroupEvaluator(name, reduce, inputs) {
    return maybeEvaluator(name, reduce, inputs, maybeGroupReduce);
}
function maybeGroupReduce(reduce, value) {
    return maybeReduce(reduce, value, maybeGroupReduceFallback);
}
function maybeGroupReduceFallback(reduce) {
    switch(`${reduce}`.toLowerCase()){
        case "x":
            return reduceX;
        case "y":
            return reduceY;
        case "z":
            return reduceZ;
    }
    throw new Error(`invalid group reduce: ${reduce}`);
}
function maybeSubgroup(outputs, inputs) {
    for(const name in inputs){
        const value = inputs[name];
        if (value !== undefined && !outputs.some((o)=>o.name === name)) return value;
    }
}
function maybeSort(facets, sort, reverse) {
    if (sort) {
        const S = sort.output.transform();
        const compare = (i, j)=>(0, _definedJs.ascendingDefined)(S[i], S[j]);
        facets.forEach((f)=>f.sort(compare));
    }
    if (reverse) facets.forEach((f)=>f.reverse());
}
function reduceReduce(reduce) {
    console.warn("deprecated reduce interface; implement reduceIndex instead.");
    return {
        ...reduce,
        reduceIndex: reduce.reduce.bind(reduce)
    };
}
function reduceFunction(f) {
    return {
        reduceIndex (I, X, extent) {
            return f((0, _optionsJs.take)(X, I), extent);
        }
    };
}
function reduceAccessor(f) {
    return {
        reduceIndex (I, X) {
            return f(I, (i)=>X[i]);
        }
    };
}
function reduceMaybeTemporalAccessor(f) {
    return {
        reduceIndex (I, X) {
            const x = f(I, (i)=>X[i]);
            return (0, _optionsJs.isTemporal)(X) ? new Date(x) : x;
        }
    };
}
const reduceIdentity = {
    reduceIndex (I, X) {
        return (0, _optionsJs.take)(X, I);
    }
};
const reduceFirst = {
    reduceIndex (I, X) {
        return X[I[0]];
    }
};
const reduceTitle = {
    reduceIndex (I, X) {
        const n = 5;
        const groups = (0, _d3.sort)((0, _d3.rollup)(I, (V)=>V.length, (i)=>X[i]), (0, _optionsJs.second));
        const top = groups.slice(-n).reverse();
        if (top.length < groups.length) {
            const bottom = groups.slice(0, 1 - n);
            top[n - 1] = [
                `\u{2026} ${bottom.length.toLocaleString("en-US")} more`,
                (0, _d3.sum)(bottom, (0, _optionsJs.second))
            ];
        }
        return top.map(([key, value])=>`${key} (${value.toLocaleString("en-US")})`).join("\n");
    }
};
const reduceLast = {
    reduceIndex (I, X) {
        return X[I[I.length - 1]];
    }
};
const reduceCount = {
    label: "Frequency",
    reduceIndex (I) {
        return I.length;
    }
};
const reduceDistinct = {
    label: "Distinct",
    reduceIndex (I, X) {
        const s = new (0, _d3.InternSet)();
        for (const i of I)s.add(X[i]);
        return s.size;
    }
};
const reduceSum = reduceAccessor((0, _d3.sum));
function reduceProportion(value, scope) {
    return value == null ? {
        scope,
        label: "Frequency",
        reduceIndex: (I, V, basis = 1)=>I.length / basis
    } : {
        scope,
        reduceIndex: (I, V, basis = 1)=>(0, _d3.sum)(I, (i)=>V[i]) / basis
    };
}
const reduceX = {
    reduceIndex (I, X, { x }) {
        return x;
    }
};
const reduceY = {
    reduceIndex (I, X, { y }) {
        return y;
    }
};
const reduceZ = {
    reduceIndex (I, X, { z }) {
        return z;
    }
};
function find(test) {
    if (typeof test !== "function") throw new Error(`invalid test function: ${test}`);
    return {
        reduceIndex (I, V, { data }) {
            return V[I.find((0, _optionsJs.isArray)(data) ? (i)=>test(data[i], i, data) : (i)=>test(data.get(i), i, data))];
        }
    };
}

},{"d3":"17XFv","../defined.js":"3n4Hk","../options.js":"eJmsy","./basic.js":"hU2qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hU2qc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "basic", ()=>basic);
parcelHelpers.export(exports, "initializer", ()=>initializer);
parcelHelpers.export(exports, "filter", ()=>filter);
parcelHelpers.export(exports, "reverse", ()=>reverse);
parcelHelpers.export(exports, "shuffle", ()=>shuffle);
parcelHelpers.export(exports, "sort", ()=>sort);
var _d3 = require("d3");
var _definedJs = require("../defined.js");
var _optionsJs = require("../options.js");
function basic({ filter: f1, sort: s1, reverse: r1, transform: t1, initializer: i1, ...options } = {}, transform) {
    // If both t1 and t2 are defined, returns a composite transform that first
    // applies t1 and then applies t2.
    if (t1 === undefined) {
        // explicit transform overrides filter, sort, and reverse
        if (f1 != null) t1 = filterTransform(f1);
        if (s1 != null && !(0, _optionsJs.isDomainSort)(s1)) t1 = composeTransform(t1, sortTransform(s1));
        if (r1) t1 = composeTransform(t1, reverseTransform);
    }
    if (transform != null && i1 != null) throw new Error("transforms cannot be applied after initializers");
    return {
        ...options,
        ...(s1 === null || (0, _optionsJs.isDomainSort)(s1)) && {
            sort: s1
        },
        transform: composeTransform(t1, transform)
    };
}
function initializer({ filter: f1, sort: s1, reverse: r1, initializer: i1, ...options } = {}, initializer) {
    // If both i1 and i2 are defined, returns a composite initializer that first
    // applies i1 and then applies i2.
    if (i1 === undefined) {
        // explicit initializer overrides filter, sort, and reverse
        if (f1 != null) i1 = filterTransform(f1);
        if (s1 != null && !(0, _optionsJs.isDomainSort)(s1)) i1 = composeInitializer(i1, sortTransform(s1));
        if (r1) i1 = composeInitializer(i1, reverseTransform);
    }
    return {
        ...options,
        ...(s1 === null || (0, _optionsJs.isDomainSort)(s1)) && {
            sort: s1
        },
        initializer: composeInitializer(i1, initializer)
    };
}
function composeTransform(t1, t2) {
    if (t1 == null) return t2 === null ? undefined : t2;
    if (t2 == null) return t1 === null ? undefined : t1;
    return function(data, facets, plotOptions) {
        ({ data, facets } = t1.call(this, data, facets, plotOptions));
        return t2.call(this, (0, _optionsJs.dataify)(data), facets, plotOptions);
    };
}
function composeInitializer(i1, i2) {
    if (i1 == null) return i2 === null ? undefined : i2;
    if (i2 == null) return i1 === null ? undefined : i1;
    return function(data, facets, channels, ...args) {
        let c1, d1, f1, c2, d2, f2;
        ({ data: d1 = data, facets: f1 = facets, channels: c1 } = i1.call(this, data, facets, channels, ...args));
        ({ data: d2 = d1, facets: f2 = f1, channels: c2 } = i2.call(this, d1, f1, {
            ...channels,
            ...c1
        }, ...args));
        return {
            data: d2,
            facets: f2,
            channels: {
                ...c1,
                ...c2
            }
        };
    };
}
function apply(options, t) {
    return (options.initializer != null ? initializer : basic)(options, t);
}
function filter(test, options) {
    return apply(options, filterTransform(test));
}
function filterTransform(value) {
    return (data, facets)=>{
        const V = (0, _optionsJs.valueof)(data, value);
        return {
            data,
            facets: facets.map((I)=>I.filter((i)=>V[i]))
        };
    };
}
function reverse({ sort, ...options } = {}) {
    return {
        ...apply(options, reverseTransform),
        sort: (0, _optionsJs.isDomainSort)(sort) ? sort : null
    };
}
function reverseTransform(data, facets) {
    return {
        data,
        facets: facets.map((I)=>I.slice().reverse())
    };
}
function shuffle({ seed, sort, ...options } = {}) {
    return {
        ...apply(options, sortValue(seed == null ? Math.random : (0, _d3.randomLcg)(seed))),
        sort: (0, _optionsJs.isDomainSort)(sort) ? sort : null
    };
}
function sort(order, { sort, ...options } = {}) {
    return {
        ...((0, _optionsJs.isOptions)(order) && order.channel !== undefined ? initializer : apply)(options, sortTransform(order)),
        sort: (0, _optionsJs.isDomainSort)(sort) ? sort : null
    };
}
function sortTransform(value) {
    return (typeof value === "function" && value.length !== 1 ? sortData : sortValue)(value);
}
function sortData(compare) {
    return (data, facets)=>{
        const compareData = (0, _optionsJs.isArray)(data) ? (i, j)=>compare(data[i], data[j]) : (i, j)=>compare(data.get(i), data.get(j));
        return {
            data,
            facets: facets.map((I)=>I.slice().sort(compareData))
        };
    };
}
function sortValue(value) {
    let channel, order;
    ({ channel, value, order } = {
        ...(0, _optionsJs.maybeValue)(value)
    });
    const negate = channel?.startsWith("-");
    if (negate) channel = channel.slice(1);
    if (order === undefined) order = negate ? (0, _definedJs.descendingDefined) : (0, _definedJs.ascendingDefined);
    if (typeof order !== "function") switch(`${order}`.toLowerCase()){
        case "ascending":
            order = (0, _definedJs.ascendingDefined);
            break;
        case "descending":
            order = (0, _definedJs.descendingDefined);
            break;
        default:
            throw new Error(`invalid order: ${order}`);
    }
    return (data, facets, channels)=>{
        let V;
        if (channel === undefined) V = (0, _optionsJs.valueof)(data, value);
        else {
            if (channels === undefined) throw new Error("channel sort requires an initializer");
            V = channels[channel];
            if (!V) return {}; // ignore missing channel
            V = V.value;
        }
        const compareValue = (i, j)=>order(V[i], V[j]);
        return {
            data,
            facets: facets.map((I)=>I.slice().sort(compareValue))
        };
    };
}

},{"d3":"17XFv","../defined.js":"3n4Hk","../options.js":"eJmsy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4CBrW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Returns an array of {x?, y?, i} objects representing the facet domain.
parcelHelpers.export(exports, "createFacets", ()=>createFacets);
parcelHelpers.export(exports, "recreateFacets", ()=>recreateFacets);
// Returns a (possibly nested) Map of [[key1, index1], [key2, index2], …]
// representing the data indexes associated with each facet.
parcelHelpers.export(exports, "facetGroups", ()=>facetGroups);
parcelHelpers.export(exports, "facetTranslator", ()=>facetTranslator);
// Returns an index that for each facet lists all the elements present in other
// facets in the original index. TODO Memoize to avoid repeated work?
parcelHelpers.export(exports, "facetExclude", ()=>facetExclude);
parcelHelpers.export(exports, "maybeFacetAnchor", ()=>maybeFacetAnchor);
// Facet filter, by mark; for now only the "eq" filter is provided.
parcelHelpers.export(exports, "facetFilter", ()=>facetFilter);
var _d3 = require("d3");
var _optionsJs = require("./options.js");
var _scalesJs = require("./scales.js");
function createFacets(channelsByScale, options) {
    const { fx, fy } = (0, _scalesJs.createScales)(channelsByScale, options);
    const fxDomain = fx?.scale.domain();
    const fyDomain = fy?.scale.domain();
    return fxDomain && fyDomain ? (0, _d3.cross)(fxDomain, fyDomain).map(([x, y], i)=>({
            x,
            y,
            i
        })) : fxDomain ? fxDomain.map((x, i)=>({
            x,
            i
        })) : fyDomain ? fyDomain.map((y, i)=>({
            y,
            i
        })) : undefined;
}
function recreateFacets(facets, { x: X, y: Y }) {
    X &&= facetIndex(X);
    Y &&= facetIndex(Y);
    return facets.filter(X && Y // remove any facets no longer present in the domain
     ? (f)=>X.has(f.x) && Y.has(f.y) : X ? (f)=>X.has(f.x) : (f)=>Y.has(f.y)).sort(X && Y // reorder facets to match the new scale domains
     ? (a, b)=>X.get(a.x) - X.get(b.x) || Y.get(a.y) - Y.get(b.y) : X ? (a, b)=>X.get(a.x) - X.get(b.x) : (a, b)=>Y.get(a.y) - Y.get(b.y));
}
function facetGroups(data, { fx, fy }) {
    const I = (0, _optionsJs.range)(data);
    const FX = fx?.value;
    const FY = fy?.value;
    return fx && fy ? (0, _d3.rollup)(I, (G)=>(G.fx = FX[G[0]], G.fy = FY[G[0]], G), (i)=>FX[i], (i)=>FY[i]) : fx ? (0, _d3.rollup)(I, (G)=>(G.fx = FX[G[0]], G), (i)=>FX[i]) : (0, _d3.rollup)(I, (G)=>(G.fy = FY[G[0]], G), (i)=>FY[i]);
}
function facetTranslator(fx, fy, { marginTop, marginLeft }) {
    return fx && fy ? ({ x, y })=>`translate(${fx(x) - marginLeft},${fy(y) - marginTop})` : fx ? ({ x })=>`translate(${fx(x) - marginLeft},0)` : ({ y })=>`translate(0,${fy(y) - marginTop})`;
}
function facetExclude(index) {
    const ex = [];
    const e = new Uint32Array((0, _d3.sum)(index, (d)=>d.length));
    for (const i of index){
        let n = 0;
        for (const j of index){
            if (i === j) continue;
            e.set(j, n);
            n += j.length;
        }
        ex.push(e.slice(0, n));
    }
    return ex;
}
const facetAnchors = new Map([
    [
        "top",
        facetAnchorTop
    ],
    [
        "right",
        facetAnchorRight
    ],
    [
        "bottom",
        facetAnchorBottom
    ],
    [
        "left",
        facetAnchorLeft
    ],
    [
        "top-left",
        and(facetAnchorTop, facetAnchorLeft)
    ],
    [
        "top-right",
        and(facetAnchorTop, facetAnchorRight)
    ],
    [
        "bottom-left",
        and(facetAnchorBottom, facetAnchorLeft)
    ],
    [
        "bottom-right",
        and(facetAnchorBottom, facetAnchorRight)
    ],
    [
        "top-empty",
        facetAnchorTopEmpty
    ],
    [
        "right-empty",
        facetAnchorRightEmpty
    ],
    [
        "bottom-empty",
        facetAnchorBottomEmpty
    ],
    [
        "left-empty",
        facetAnchorLeftEmpty
    ],
    [
        "empty",
        facetAnchorEmpty
    ]
]);
function maybeFacetAnchor(facetAnchor) {
    if (facetAnchor == null) return null;
    const anchor = facetAnchors.get(`${facetAnchor}`.toLowerCase());
    if (anchor) return anchor;
    throw new Error(`invalid facet anchor: ${facetAnchor}`);
}
const indexCache = new WeakMap();
function facetIndex(V) {
    let I = indexCache.get(V);
    if (!I) indexCache.set(V, I = new (0, _d3.InternMap)((0, _optionsJs.map)(V, (v, i)=>[
            v,
            i
        ])));
    return I;
}
// Like V.indexOf(v), but with the same semantics as InternMap.
function facetIndexOf(V, v) {
    return facetIndex(V).get(v);
}
// Like facets.find, but with the same semantics as InternMap.
function facetFind(facets, x, y) {
    x = (0, _optionsJs.keyof)(x);
    y = (0, _optionsJs.keyof)(y);
    return facets.find((f)=>Object.is((0, _optionsJs.keyof)(f.x), x) && Object.is((0, _optionsJs.keyof)(f.y), y));
}
function facetEmpty(facets, x, y) {
    return facetFind(facets, x, y)?.empty;
}
function facetAnchorTop(facets, { y: Y }, { y }) {
    return Y ? facetIndexOf(Y, y) === 0 : true;
}
function facetAnchorBottom(facets, { y: Y }, { y }) {
    return Y ? facetIndexOf(Y, y) === Y.length - 1 : true;
}
function facetAnchorLeft(facets, { x: X }, { x }) {
    return X ? facetIndexOf(X, x) === 0 : true;
}
function facetAnchorRight(facets, { x: X }, { x }) {
    return X ? facetIndexOf(X, x) === X.length - 1 : true;
}
function facetAnchorTopEmpty(facets, { y: Y }, { x, y, empty }) {
    if (empty) return false;
    if (!Y) return;
    const i = facetIndexOf(Y, y);
    if (i > 0) return facetEmpty(facets, x, Y[i - 1]);
}
function facetAnchorBottomEmpty(facets, { y: Y }, { x, y, empty }) {
    if (empty) return false;
    if (!Y) return;
    const i = facetIndexOf(Y, y);
    if (i < Y.length - 1) return facetEmpty(facets, x, Y[i + 1]);
}
function facetAnchorLeftEmpty(facets, { x: X }, { x, y, empty }) {
    if (empty) return false;
    if (!X) return;
    const i = facetIndexOf(X, x);
    if (i > 0) return facetEmpty(facets, X[i - 1], y);
}
function facetAnchorRightEmpty(facets, { x: X }, { x, y, empty }) {
    if (empty) return false;
    if (!X) return;
    const i = facetIndexOf(X, x);
    if (i < X.length - 1) return facetEmpty(facets, X[i + 1], y);
}
function facetAnchorEmpty(facets, channels, { empty }) {
    return empty;
}
function and(a, b) {
    return function() {
        return a.apply(null, arguments) && b.apply(null, arguments);
    };
}
function facetFilter(facets, { channels: { fx, fy }, groups }) {
    return fx && fy ? facets.map(({ x, y })=>groups.get(x)?.get(y) ?? []) : fx ? facets.map(({ x })=>groups.get(x) ?? []) : facets.map(({ y })=>groups.get(y) ?? []);
}

},{"d3":"17XFv","./options.js":"eJmsy","./scales.js":"cZh8W","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cZh8W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createScales", ()=>createScales);
parcelHelpers.export(exports, "createScaleFunctions", ()=>createScaleFunctions);
// Mutates scale.range!
parcelHelpers.export(exports, "autoScaleRange", ()=>autoScaleRange);
// Determines whether the scale points in the “positive” (right or down) or
// “negative” (left or up) direction; if the scale order cannot be determined,
// returns NaN; used to assign an appropriate label arrow.
parcelHelpers.export(exports, "inferScaleOrder", ()=>inferScaleOrder);
// Returns the dimensions of the outer frame; this is subdivided into facets
// with the margins of each facet collapsing into the outer margins.
parcelHelpers.export(exports, "outerDimensions", ()=>outerDimensions);
// Returns the dimensions of each facet.
parcelHelpers.export(exports, "innerDimensions", ()=>innerDimensions);
parcelHelpers.export(exports, "normalizeScale", ()=>normalizeScale);
parcelHelpers.export(exports, "isTemporalScale", ()=>isTemporalScale);
parcelHelpers.export(exports, "isOrdinalScale", ()=>isOrdinalScale);
parcelHelpers.export(exports, "isThresholdScale", ()=>isThresholdScale);
parcelHelpers.export(exports, "isDivergingScale", ()=>isDivergingScale);
// Certain marks have special behavior if a scale is collapsed, i.e. if the
// domain is degenerate and represents only a single value such as [3, 3]; for
// example, a rect will span the full extent of the chart along a collapsed
// dimension (whereas a dot will simply be drawn in the center).
parcelHelpers.export(exports, "isCollapsed", ()=>isCollapsed);
parcelHelpers.export(exports, "scale", ()=>scale);
parcelHelpers.export(exports, "exposeScales", ()=>exposeScales);
var _optionsJs = require("./options.js");
var _orderJs = require("./order.js");
var _indexJs = require("./scales/index.js");
var _quantitativeJs = require("./scales/quantitative.js");
var _divergingJs = require("./scales/diverging.js");
var _schemesJs = require("./scales/schemes.js");
var _temporalJs = require("./scales/temporal.js");
var _ordinalJs = require("./scales/ordinal.js");
var _symbolJs = require("./symbol.js");
var _warningsJs = require("./warnings.js");
function createScales(channelsByScale, { label: globalLabel, inset: globalInset = 0, insetTop: globalInsetTop = globalInset, insetRight: globalInsetRight = globalInset, insetBottom: globalInsetBottom = globalInset, insetLeft: globalInsetLeft = globalInset, round, nice, clamp, zero, align, padding, projection, facet: { label: facetLabel = globalLabel } = {}, ...options } = {}) {
    const scales = {};
    for (const [key, channels] of channelsByScale){
        const scaleOptions = options[key];
        const scale = createScale(key, channels, {
            round: (0, _indexJs.registry).get(key) === (0, _indexJs.position) ? round : undefined,
            nice,
            clamp,
            zero,
            align,
            padding,
            projection,
            ...scaleOptions
        });
        if (scale) {
            // populate generic scale options (percent, transform, insets)
            let { label = key === "fx" || key === "fy" ? facetLabel : globalLabel, percent, transform, inset, insetTop = inset !== undefined ? inset : key === "y" ? globalInsetTop : 0, insetRight = inset !== undefined ? inset : key === "x" ? globalInsetRight : 0, insetBottom = inset !== undefined ? inset : key === "y" ? globalInsetBottom : 0, insetLeft = inset !== undefined ? inset : key === "x" ? globalInsetLeft : 0 // not fx
             } = scaleOptions || {};
            if (transform == null) transform = undefined;
            else if (typeof transform !== "function") throw new Error("invalid scale transform; not a function");
            scale.percent = !!percent;
            scale.label = label === undefined ? inferScaleLabel(channels, scale) : label;
            scale.transform = transform;
            if (key === "x" || key === "fx") {
                scale.insetLeft = +insetLeft;
                scale.insetRight = +insetRight;
            } else if (key === "y" || key === "fy") {
                scale.insetTop = +insetTop;
                scale.insetBottom = +insetBottom;
            }
            scales[key] = scale;
        }
    }
    return scales;
}
function createScaleFunctions(descriptors) {
    const scales = {};
    const scaleFunctions = {
        scales
    };
    for (const [key, descriptor] of Object.entries(descriptors)){
        const { scale, type, interval, label } = descriptor;
        scales[key] = exposeScale(descriptor);
        scaleFunctions[key] = scale;
        // TODO: pass these properties, which are needed for axes, in the descriptor.
        scale.type = type;
        if (interval != null) scale.interval = interval;
        if (label != null) scale.label = label;
    }
    return scaleFunctions;
}
function autoScaleRange(scales, dimensions) {
    const { x, y, fx, fy } = scales;
    const superdimensions = fx || fy ? outerDimensions(dimensions) : dimensions;
    if (fx) autoScaleRangeX(fx, superdimensions);
    if (fy) autoScaleRangeY(fy, superdimensions);
    const subdimensions = fx || fy ? innerDimensions(scales, dimensions) : dimensions;
    if (x) autoScaleRangeX(x, subdimensions);
    if (y) autoScaleRangeY(y, subdimensions);
}
// Channels can have labels; if all the channels for a given scale are
// consistently labeled (i.e., have the same value if not undefined), and the
// corresponding scale doesn’t already have an explicit label, then the
// channels’ label is promoted to the scale. This inferred label should have an
// orientation-appropriate arrow added when used as an axis, but we don’t want
// to add the arrow when the label is set explicitly as an option; so, the
// inferred label is distinguished as an object with an “inferred” property.
function inferScaleLabel(channels = [], scale) {
    let label;
    for (const { label: l } of channels){
        if (l === undefined) continue;
        if (label === undefined) label = l;
        else if (label !== l) return;
    }
    if (label === undefined) return;
    if (!isOrdinalScale(scale) && scale.percent) label = `${label} (%)`;
    return {
        inferred: true,
        toString: ()=>label
    };
}
function inferScaleOrder(scale) {
    return Math.sign((0, _orderJs.orderof)(scale.domain())) * Math.sign((0, _orderJs.orderof)(scale.range()));
}
function outerDimensions(dimensions) {
    const { marginTop, marginRight, marginBottom, marginLeft, width, height, facet: { marginTop: facetMarginTop, marginRight: facetMarginRight, marginBottom: facetMarginBottom, marginLeft: facetMarginLeft } } = dimensions;
    return {
        marginTop: Math.max(marginTop, facetMarginTop),
        marginRight: Math.max(marginRight, facetMarginRight),
        marginBottom: Math.max(marginBottom, facetMarginBottom),
        marginLeft: Math.max(marginLeft, facetMarginLeft),
        width,
        height
    };
}
function innerDimensions({ fx, fy }, dimensions) {
    const { marginTop, marginRight, marginBottom, marginLeft, width, height } = outerDimensions(dimensions);
    return {
        marginTop,
        marginRight,
        marginBottom,
        marginLeft,
        width: fx ? fx.scale.bandwidth() + marginLeft + marginRight : width,
        height: fy ? fy.scale.bandwidth() + marginTop + marginBottom : height,
        facet: {
            width,
            height
        }
    };
}
function autoScaleRangeX(scale, dimensions) {
    if (scale.range === undefined) {
        const { insetLeft, insetRight } = scale;
        const { width, marginLeft = 0, marginRight = 0 } = dimensions;
        const left = marginLeft + insetLeft;
        const right = width - marginRight - insetRight;
        scale.range = [
            left,
            Math.max(left, right)
        ];
        if (!isOrdinalScale(scale)) scale.range = piecewiseRange(scale);
        scale.scale.range(scale.range);
    }
    autoScaleRound(scale);
}
function autoScaleRangeY(scale, dimensions) {
    if (scale.range === undefined) {
        const { insetTop, insetBottom } = scale;
        const { height, marginTop = 0, marginBottom = 0 } = dimensions;
        const top = marginTop + insetTop;
        const bottom = height - marginBottom - insetBottom;
        scale.range = [
            Math.max(top, bottom),
            top
        ];
        if (!isOrdinalScale(scale)) scale.range = piecewiseRange(scale);
        else scale.range.reverse();
        scale.scale.range(scale.range);
    }
    autoScaleRound(scale);
}
function autoScaleRound(scale) {
    if (scale.round === undefined && isBandScale(scale) && roundError(scale) <= 30) scale.scale.round(true);
}
// If we were to turn on rounding for this band or point scale, how much wasted
// space would it introduce (on both ends of the range)? This must match
// d3.scaleBand’s rounding behavior:
// https://github.com/d3/d3-scale/blob/83555bd759c7314420bd4240642beda5e258db9e/src/band.js#L20-L32
function roundError({ scale }) {
    const n = scale.domain().length;
    const [start, stop] = scale.range();
    const paddingInner = scale.paddingInner ? scale.paddingInner() : 1;
    const paddingOuter = scale.paddingOuter ? scale.paddingOuter() : scale.padding();
    const m = n - paddingInner;
    const step = Math.abs(stop - start) / Math.max(1, m + paddingOuter * 2);
    return (step - Math.floor(step)) * m;
}
function piecewiseRange(scale) {
    const length = scale.scale.domain().length + isThresholdScale(scale);
    if (!(length > 2)) return scale.range;
    const [start, end] = scale.range;
    return Array.from({
        length
    }, (_, i)=>start + i / (length - 1) * (end - start));
}
function normalizeScale(key, scale, hint) {
    return createScale(key, hint === undefined ? undefined : [
        {
            hint
        }
    ], {
        ...scale
    });
}
function createScale(key, channels = [], options = {}) {
    const type = inferScaleType(key, channels, options);
    // Warn for common misuses of implicit ordinal scales. We disable this test if
    // you specify a scale interval or if you set the domain or range explicitly,
    // since setting the domain or range (typically with a cardinality of more than
    // two) is another indication that you intended for the scale to be ordinal; we
    // also disable it for facet scales since these are always band scales.
    if (options.type === undefined && options.domain === undefined && options.range === undefined && options.interval == null && key !== "fx" && key !== "fy" && isOrdinalScale({
        type
    })) {
        const values = channels.map(({ value })=>value).filter((value)=>value !== undefined);
        if (values.some((0, _optionsJs.isTemporal))) (0, _warningsJs.warn)(`Warning: some data associated with the ${key} scale are dates. Dates are typically associated with a "utc" or "time" scale rather than a "${formatScaleType(type)}" scale. If you are using a bar mark, you probably want a rect mark with the interval option instead; if you are using a group transform, you probably want a bin transform instead. If you want to treat this data as ordinal, you can specify the interval of the ${key} scale (e.g., d3.utcDay), or you can suppress this warning by setting the type of the ${key} scale to "${formatScaleType(type)}".`);
        else if (values.some((0, _optionsJs.isTemporalString))) (0, _warningsJs.warn)(`Warning: some data associated with the ${key} scale are strings that appear to be dates (e.g., YYYY-MM-DD). If these strings represent dates, you should parse them to Date objects. Dates are typically associated with a "utc" or "time" scale rather than a "${formatScaleType(type)}" scale. If you are using a bar mark, you probably want a rect mark with the interval option instead; if you are using a group transform, you probably want a bin transform instead. If you want to treat this data as ordinal, you can suppress this warning by setting the type of the ${key} scale to "${formatScaleType(type)}".`);
        else if (values.some((0, _optionsJs.isNumericString))) (0, _warningsJs.warn)(`Warning: some data associated with the ${key} scale are strings that appear to be numbers. If these strings represent numbers, you should parse or coerce them to numbers. Numbers are typically associated with a "linear" scale rather than a "${formatScaleType(type)}" scale. If you want to treat this data as ordinal, you can specify the interval of the ${key} scale (e.g., 1 for integers), or you can suppress this warning by setting the type of the ${key} scale to "${formatScaleType(type)}".`);
    }
    options.type = type; // Mutates input!
    // Once the scale type is known, coerce the associated channel values and any
    // explicitly-specified domain to the expected type.
    switch(type){
        case "diverging":
        case "diverging-sqrt":
        case "diverging-pow":
        case "diverging-log":
        case "diverging-symlog":
        case "cyclical":
        case "sequential":
        case "linear":
        case "sqrt":
        case "threshold":
        case "quantile":
        case "pow":
        case "log":
        case "symlog":
            options = coerceType(channels, options, (0, _optionsJs.coerceNumbers));
            break;
        case "identity":
            switch((0, _indexJs.registry).get(key)){
                case 0, _indexJs.position:
                    options = coerceType(channels, options, (0, _optionsJs.coerceNumbers));
                    break;
                case 0, _indexJs.symbol:
                    options = coerceType(channels, options, coerceSymbols);
                    break;
            }
            break;
        case "utc":
        case "time":
            options = coerceType(channels, options, (0, _optionsJs.coerceDates));
            break;
    }
    switch(type){
        case "diverging":
            return (0, _divergingJs.createScaleDiverging)(key, channels, options);
        case "diverging-sqrt":
            return (0, _divergingJs.createScaleDivergingSqrt)(key, channels, options);
        case "diverging-pow":
            return (0, _divergingJs.createScaleDivergingPow)(key, channels, options);
        case "diverging-log":
            return (0, _divergingJs.createScaleDivergingLog)(key, channels, options);
        case "diverging-symlog":
            return (0, _divergingJs.createScaleDivergingSymlog)(key, channels, options);
        case "categorical":
        case "ordinal":
        case 0, _ordinalJs.ordinalImplicit:
            return (0, _ordinalJs.createScaleOrdinal)(key, channels, options);
        case "cyclical":
        case "sequential":
        case "linear":
            return (0, _quantitativeJs.createScaleLinear)(key, channels, options);
        case "sqrt":
            return (0, _quantitativeJs.createScaleSqrt)(key, channels, options);
        case "threshold":
            return (0, _quantitativeJs.createScaleThreshold)(key, channels, options);
        case "quantile":
            return (0, _quantitativeJs.createScaleQuantile)(key, channels, options);
        case "quantize":
            return (0, _quantitativeJs.createScaleQuantize)(key, channels, options);
        case "pow":
            return (0, _quantitativeJs.createScalePow)(key, channels, options);
        case "log":
            return (0, _quantitativeJs.createScaleLog)(key, channels, options);
        case "symlog":
            return (0, _quantitativeJs.createScaleSymlog)(key, channels, options);
        case "utc":
            return (0, _temporalJs.createScaleUtc)(key, channels, options);
        case "time":
            return (0, _temporalJs.createScaleTime)(key, channels, options);
        case "point":
            return (0, _ordinalJs.createScalePoint)(key, channels, options);
        case "band":
            return (0, _ordinalJs.createScaleBand)(key, channels, options);
        case "identity":
            return (0, _quantitativeJs.createScaleIdentity)(key);
        case undefined:
            return;
        default:
            throw new Error(`unknown scale type: ${type}`);
    }
}
function formatScaleType(type) {
    return typeof type === "symbol" ? type.description : type;
}
function maybeScaleType(type) {
    return typeof type === "string" ? `${type}`.toLowerCase() : type;
}
// A special type symbol when the x and y scales are replaced with a projection.
const typeProjection = {
    toString: ()=>"projection"
};
function inferScaleType(key, channels, { type, domain, range, scheme, pivot, projection }) {
    type = maybeScaleType(type);
    // The facet scales are always band scales; this cannot be changed.
    if (key === "fx" || key === "fy") return "band";
    // If a projection is specified, the x- and y-scales are disabled; these
    // channels will be projected rather than scaled. (But still check that none
    // of the associated channels are incompatible with a projection.)
    if ((key === "x" || key === "y") && projection != null) type = typeProjection;
    // If a channel dictates a scale type, make sure that it is consistent with
    // the user-specified scale type (if any) and all other channels. For example,
    // barY requires x to be a band scale and disallows any other scale type.
    for (const channel of channels){
        const t = maybeScaleType(channel.type);
        if (t === undefined) continue;
        else if (type === undefined) type = t;
        else if (type !== t) throw new Error(`scale incompatible with channel: ${type} !== ${t}`);
    }
    // If the scale, a channel, or user specified a (consistent) type, return it.
    if (type === typeProjection) return;
    if (type !== undefined) return type;
    // If there’s no data (and no type) associated with this scale, don’t create a scale.
    if (domain === undefined && !channels.some(({ value })=>value !== undefined)) return;
    // Some scales have default types.
    const kind = (0, _indexJs.registry).get(key);
    if (kind === (0, _indexJs.radius)) return "sqrt";
    if (kind === (0, _indexJs.opacity) || kind === (0, _indexJs.length)) return "linear";
    if (kind === (0, _indexJs.symbol)) return "ordinal";
    // If the domain or range has more than two values, assume it’s ordinal. You
    // can still use a “piecewise” (or “polylinear”) scale, but you must set the
    // type explicitly.
    if ((domain || range || []).length > 2) return asOrdinalType(kind);
    // Otherwise, infer the scale type from the data! Prefer the domain, if
    // present, over channels. (The domain and channels should be consistently
    // typed, and the domain is more explicit and typically much smaller.) We only
    // check the first defined value for expedience and simplicity; we expect
    // that the types are consistent.
    if (domain !== undefined) {
        if ((0, _optionsJs.isOrdinal)(domain)) return asOrdinalType(kind);
        if ((0, _optionsJs.isTemporal)(domain)) return "utc";
    } else {
        const values = channels.map(({ value })=>value).filter((value)=>value !== undefined);
        if (values.some((0, _optionsJs.isOrdinal))) return asOrdinalType(kind);
        if (values.some((0, _optionsJs.isTemporal))) return "utc";
    }
    // For color scales, take a hint from the color scheme and pivot option.
    if (kind === (0, _indexJs.color)) {
        if (pivot != null || (0, _schemesJs.isDivergingScheme)(scheme)) return "diverging";
        if ((0, _schemesJs.isCategoricalScheme)(scheme)) return "categorical";
    }
    return "linear";
}
// Positional scales default to a point scale instead of an ordinal scale.
function asOrdinalType(kind) {
    switch(kind){
        case 0, _indexJs.position:
            return "point";
        case 0, _indexJs.color:
            return 0, _ordinalJs.ordinalImplicit;
        default:
            return "ordinal";
    }
}
function isTemporalScale({ type }) {
    return type === "time" || type === "utc";
}
function isOrdinalScale({ type }) {
    return type === "ordinal" || type === "point" || type === "band" || type === (0, _ordinalJs.ordinalImplicit);
}
function isThresholdScale({ type }) {
    return type === "threshold";
}
function isBandScale({ type }) {
    return type === "point" || type === "band";
}
function isDivergingScale({ type }) {
    return /^diverging($|-)/.test(type);
}
function isCollapsed(scale) {
    if (scale === undefined) return true; // treat missing scale as collapsed
    const domain = scale.domain();
    const value = scale(domain[0]);
    for(let i = 1, n = domain.length; i < n; ++i){
        if (scale(domain[i]) - value) return false;
    }
    return true;
}
// Mutates channel.value!
function coerceType(channels, { domain, ...options }, coerceValues) {
    for (const c of channels)if (c.value !== undefined) {
        if (domain === undefined) domain = c.value?.domain; // promote channel domain
        c.value = coerceValues(c.value);
    }
    return {
        domain: domain === undefined ? domain : coerceValues(domain),
        ...options
    };
}
function coerceSymbols(values) {
    return (0, _optionsJs.map)(values, (0, _symbolJs.maybeSymbol));
}
function scale(options = {}) {
    let scale;
    for(const key in options){
        if (!(0, _indexJs.registry).has(key)) continue; // ignore unknown properties
        if (!(0, _optionsJs.isScaleOptions)(options[key])) continue; // e.g., ignore {color: "red"}
        if (scale !== undefined) throw new Error("ambiguous scale definition; multiple scales found");
        scale = exposeScale(normalizeScale(key, options[key]));
    }
    if (scale === undefined) throw new Error("invalid scale definition; no scale found");
    return scale;
}
function exposeScales(scales) {
    return (key)=>{
        if (!(0, _indexJs.registry).has(key = `${key}`)) throw new Error(`unknown scale: ${key}`);
        return scales[key];
    };
}
// Note: axis- and legend-related properties (such as label, ticks and
// tickFormat) are not included here as they do not affect the scale’s behavior.
function exposeScale({ scale, type, domain, range, interpolate, interval, transform, percent, pivot }) {
    if (type === "identity") return {
        type: "identity",
        apply: (d)=>d,
        invert: (d)=>d
    };
    const unknown = scale.unknown ? scale.unknown() : undefined;
    return {
        type,
        domain: (0, _optionsJs.slice)(domain),
        ...range !== undefined && {
            range: (0, _optionsJs.slice)(range)
        },
        ...transform !== undefined && {
            transform
        },
        ...percent && {
            percent
        },
        ...unknown !== undefined && {
            unknown
        },
        ...interval !== undefined && {
            interval
        },
        // quantitative
        ...interpolate !== undefined && {
            interpolate
        },
        ...scale.clamp && {
            clamp: scale.clamp()
        },
        // diverging (always asymmetric; we never want to apply the symmetric transform twice)
        ...pivot !== undefined && {
            pivot,
            symmetric: false
        },
        // log, diverging-log
        ...scale.base && {
            base: scale.base()
        },
        // pow, diverging-pow
        ...scale.exponent && {
            exponent: scale.exponent()
        },
        // symlog, diverging-symlog
        ...scale.constant && {
            constant: scale.constant()
        },
        // band, point
        ...scale.align && {
            align: scale.align(),
            round: scale.round()
        },
        ...scale.padding && (scale.paddingInner ? {
            paddingInner: scale.paddingInner(),
            paddingOuter: scale.paddingOuter()
        } : {
            padding: scale.padding()
        }),
        ...scale.bandwidth && {
            bandwidth: scale.bandwidth(),
            step: scale.step()
        },
        // utilities
        apply: (t)=>scale(t),
        ...scale.invert && {
            invert: (t)=>scale.invert(t)
        }
    };
}

},{"./options.js":"eJmsy","./order.js":"ieWhH","./scales/index.js":"kiF55","./scales/quantitative.js":"duaCH","./scales/diverging.js":"co7kN","./scales/schemes.js":"5XQmJ","./scales/temporal.js":"gecYx","./scales/ordinal.js":"51U21","./symbol.js":"ePwOU","./warnings.js":"hBaa6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"duaCH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "flip", ()=>flip);
parcelHelpers.export(exports, "maybeInterpolator", ()=>maybeInterpolator);
parcelHelpers.export(exports, "createScaleQ", ()=>createScaleQ);
parcelHelpers.export(exports, "createScaleLinear", ()=>createScaleLinear);
parcelHelpers.export(exports, "createScaleSqrt", ()=>createScaleSqrt);
parcelHelpers.export(exports, "createScalePow", ()=>createScalePow);
parcelHelpers.export(exports, "createScaleLog", ()=>createScaleLog);
parcelHelpers.export(exports, "createScaleSymlog", ()=>createScaleSymlog);
parcelHelpers.export(exports, "createScaleQuantile", ()=>createScaleQuantile);
parcelHelpers.export(exports, "createScaleQuantize", ()=>createScaleQuantize);
parcelHelpers.export(exports, "createScaleThreshold", ()=>createScaleThreshold);
// For non-numeric identity scales such as color and symbol, we can’t use D3’s
// identity scale because it coerces to number; and we can’t compute the domain
// (and equivalently range) since we can’t know whether the values are
// continuous or discrete.
parcelHelpers.export(exports, "createScaleIdentity", ()=>createScaleIdentity);
parcelHelpers.export(exports, "inferDomain", ()=>inferDomain);
parcelHelpers.export(exports, "interpolatePiecewise", ()=>interpolatePiecewise);
var _d3 = require("d3");
var _definedJs = require("../defined.js");
var _optionsJs = require("../options.js");
var _orderJs = require("../order.js");
var _indexJs = require("./index.js");
var _schemesJs = require("./schemes.js");
const flip = (i)=>(t)=>i(1 - t);
const unit = [
    0,
    1
];
const interpolators = new Map([
    // numbers
    [
        "number",
        (0, _d3.interpolateNumber)
    ],
    // color spaces
    [
        "rgb",
        (0, _d3.interpolateRgb)
    ],
    [
        "hsl",
        (0, _d3.interpolateHsl)
    ],
    [
        "hcl",
        (0, _d3.interpolateHcl)
    ],
    [
        "lab",
        (0, _d3.interpolateLab)
    ]
]);
function maybeInterpolator(interpolate) {
    const i = `${interpolate}`.toLowerCase();
    if (!interpolators.has(i)) throw new Error(`unknown interpolator: ${i}`);
    return interpolators.get(i);
}
function createScaleQ(key, scale, channels, { type, nice, clamp, zero, domain = inferAutoDomain(key, channels), unknown, round, scheme, interval, range = (0, _indexJs.registry).get(key) === (0, _indexJs.radius) ? inferRadialRange(channels, domain) : (0, _indexJs.registry).get(key) === (0, _indexJs.length) ? inferLengthRange(channels, domain) : (0, _indexJs.registry).get(key) === (0, _indexJs.opacity) ? unit : undefined, interpolate = (0, _indexJs.registry).get(key) === (0, _indexJs.color) ? scheme == null && range !== undefined ? (0, _d3.interpolateRgb) : (0, _schemesJs.quantitativeScheme)(scheme !== undefined ? scheme : type === "cyclical" ? "rainbow" : "turbo") : round ? (0, _d3.interpolateRound) : (0, _d3.interpolateNumber), reverse }) {
    interval = (0, _optionsJs.maybeRangeInterval)(interval, type);
    if (type === "cyclical" || type === "sequential") type = "linear"; // shorthand for color schemes
    if (typeof interpolate !== "function") interpolate = maybeInterpolator(interpolate); // named interpolator
    reverse = !!reverse;
    // If an explicit range is specified, and it has a different length than the
    // domain, then redistribute the range using a piecewise interpolator.
    if (range !== undefined) {
        const n = (domain = (0, _optionsJs.arrayify)(domain)).length;
        const m = (range = (0, _optionsJs.arrayify)(range)).length;
        if (n !== m) {
            if (interpolate.length === 1) throw new Error("invalid piecewise interpolator"); // e.g., turbo
            interpolate = (0, _d3.piecewise)(interpolate, range);
            range = undefined;
        }
    }
    // Disambiguate between a two-argument interpolator that is used in
    // conjunction with the range, and a one-argument “fixed” interpolator on the
    // [0, 1] interval as with the RdBu color scheme.
    if (interpolate.length === 1) {
        if (reverse) {
            interpolate = flip(interpolate);
            reverse = false;
        }
        if (range === undefined) {
            range = Float64Array.from(domain, (_, i)=>i / (domain.length - 1));
            if (range.length === 2) range = unit; // optimize common case of [0, 1]
        }
        scale.interpolate((range === unit ? (0, _optionsJs.constant) : interpolatePiecewise)(interpolate));
    } else scale.interpolate(interpolate);
    // If a zero option is specified, we assume that the domain is numeric, and we
    // want to ensure that the domain crosses zero. However, note that the domain
    // may be reversed (descending) so we shouldn’t assume that the first value is
    // smaller than the last; and also it’s possible that the domain has more than
    // two values for a “poly” scale. And lastly be careful not to mutate input!
    if (zero) {
        const [min, max] = (0, _d3.extent)(domain);
        if (min > 0 || max < 0) {
            domain = (0, _optionsJs.slice)(domain);
            const o = (0, _orderJs.orderof)(domain) || 1; // treat degenerate as ascending
            if (o === Math.sign(min)) domain[0] = 0; // [1, 2] or [-1, -2]
            else domain[domain.length - 1] = 0; // [2, 1] or [-2, -1]
        }
    }
    if (reverse) domain = (0, _d3.reverse)(domain);
    scale.domain(domain).unknown(unknown);
    if (nice) scale.nice(maybeNice(nice, type)), domain = scale.domain();
    if (range !== undefined) scale.range(range);
    if (clamp) scale.clamp(clamp);
    return {
        type,
        domain,
        range,
        scale,
        interpolate,
        interval
    };
}
function maybeNice(nice, type) {
    return nice === true ? undefined : typeof nice === "number" ? nice : (0, _optionsJs.maybeNiceInterval)(nice, type);
}
function createScaleLinear(key, channels, options) {
    return createScaleQ(key, (0, _d3.scaleLinear)(), channels, options);
}
function createScaleSqrt(key, channels, options) {
    return createScalePow(key, channels, {
        ...options,
        exponent: 0.5
    });
}
function createScalePow(key, channels, { exponent = 1, ...options }) {
    return createScaleQ(key, (0, _d3.scalePow)().exponent(exponent), channels, {
        ...options,
        type: "pow"
    });
}
function createScaleLog(key, channels, { base = 10, domain = inferLogDomain(channels), ...options }) {
    return createScaleQ(key, (0, _d3.scaleLog)().base(base), channels, {
        ...options,
        domain
    });
}
function createScaleSymlog(key, channels, { constant = 1, ...options }) {
    return createScaleQ(key, (0, _d3.scaleSymlog)().constant(constant), channels, options);
}
function createScaleQuantile(key, channels, { range, quantiles = range === undefined ? 5 : (range = [
    ...range
]).length, n = quantiles, scheme = "rdylbu", domain = inferQuantileDomain(channels), unknown, interpolate, reverse }) {
    if (range === undefined) range = interpolate !== undefined ? (0, _d3.quantize)(interpolate, n) : (0, _indexJs.registry).get(key) === (0, _indexJs.color) ? (0, _schemesJs.ordinalRange)(scheme, n) : undefined;
    if (domain.length > 0) domain = (0, _d3.scaleQuantile)(domain, range === undefined ? {
        length: n
    } : range).quantiles();
    return createScaleThreshold(key, channels, {
        domain,
        range,
        reverse,
        unknown
    });
}
function createScaleQuantize(key, channels, { range, n = range === undefined ? 5 : (range = [
    ...range
]).length, scheme = "rdylbu", domain = inferAutoDomain(key, channels), unknown, interpolate, reverse }) {
    const [min, max] = (0, _d3.extent)(domain);
    let thresholds;
    if (range === undefined) {
        thresholds = (0, _d3.ticks)(min, max, n); // approximate number of nice, round thresholds
        if (thresholds[0] <= min) thresholds.splice(0, 1); // drop exact lower bound
        if (thresholds[thresholds.length - 1] >= max) thresholds.pop(); // drop exact upper bound
        n = thresholds.length + 1;
        range = interpolate !== undefined ? (0, _d3.quantize)(interpolate, n) : (0, _indexJs.registry).get(key) === (0, _indexJs.color) ? (0, _schemesJs.ordinalRange)(scheme, n) : undefined;
    } else {
        thresholds = (0, _d3.quantize)((0, _d3.interpolateNumber)(min, max), n + 1).slice(1, -1); // exactly n - 1 thresholds to match range
        if (min instanceof Date) thresholds = thresholds.map((x)=>new Date(x)); // preserve date types
    }
    if ((0, _orderJs.orderof)((0, _optionsJs.arrayify)(domain)) < 0) thresholds.reverse(); // preserve descending domain
    return createScaleThreshold(key, channels, {
        domain: thresholds,
        range,
        reverse,
        unknown
    });
}
function createScaleThreshold(key, channels, { domain = [
    0
], unknown, scheme = "rdylbu", interpolate, range = interpolate !== undefined ? (0, _d3.quantize)(interpolate, domain.length + 1) : (0, _indexJs.registry).get(key) === (0, _indexJs.color) ? (0, _schemesJs.ordinalRange)(scheme, domain.length + 1) : undefined, reverse }) {
    domain = (0, _optionsJs.arrayify)(domain);
    const sign = (0, _orderJs.orderof)(domain); // preserve descending domain
    if (!isNaN(sign) && !isOrdered(domain, sign)) throw new Error(`the ${key} scale has a non-monotonic domain`);
    if (reverse) range = (0, _d3.reverse)(range); // domain ascending, so reverse range
    return {
        type: "threshold",
        scale: (0, _d3.scaleThreshold)(sign < 0 ? (0, _d3.reverse)(domain) : domain, range === undefined ? [] : range).unknown(unknown),
        domain,
        range
    };
}
function isOrdered(domain, sign) {
    for(let i = 1, n = domain.length, d = domain[0]; i < n; ++i){
        const s = (0, _d3.descending)(d, d = domain[i]);
        if (s !== 0 && s !== sign) return false;
    }
    return true;
}
function createScaleIdentity(key) {
    return {
        type: "identity",
        scale: (0, _indexJs.hasNumericRange)((0, _indexJs.registry).get(key)) ? (0, _d3.scaleIdentity)() : (d)=>d
    };
}
function inferDomain(channels, f = (0, _definedJs.finite)) {
    return channels.length ? [
        (0, _d3.min)(channels, ({ value })=>value === undefined ? value : (0, _d3.min)(value, f)),
        (0, _d3.max)(channels, ({ value })=>value === undefined ? value : (0, _d3.max)(value, f))
    ] : [
        0,
        1
    ];
}
function inferAutoDomain(key, channels) {
    const type = (0, _indexJs.registry).get(key);
    return (type === (0, _indexJs.radius) || type === (0, _indexJs.opacity) || type === (0, _indexJs.length) ? inferZeroDomain : inferDomain)(channels);
}
function inferZeroDomain(channels) {
    return [
        0,
        channels.length ? (0, _d3.max)(channels, ({ value })=>value === undefined ? value : (0, _d3.max)(value, (0, _definedJs.finite))) : 1
    ];
}
// We don’t want the upper bound of the radial domain to be zero, as this would
// be degenerate, so we ignore nonpositive values. We also don’t want the
// maximum default radius to exceed 30px.
function inferRadialRange(channels, domain) {
    const hint = channels.find(({ radius })=>radius !== undefined);
    if (hint !== undefined) return [
        0,
        hint.radius
    ]; // a natural maximum radius, e.g. hexbins
    const h25 = (0, _d3.quantile)(channels, 0.5, ({ value })=>value === undefined ? NaN : (0, _d3.quantile)(value, 0.25, (0, _definedJs.positive)));
    const range = domain.map((d)=>3 * Math.sqrt(d / h25));
    const k = 30 / (0, _d3.max)(range);
    return k < 1 ? range.map((r)=>r * k) : range;
}
// We want a length scale’s domain to go from zero to a positive value, and to
// treat negative lengths if any as inverted vectors of equivalent magnitude. We
// also don’t want the maximum default length to exceed 60px.
function inferLengthRange(channels, domain) {
    const h50 = (0, _d3.median)(channels, ({ value })=>value === undefined ? NaN : (0, _d3.median)(value, Math.abs));
    const range = domain.map((d)=>12 * d / h50);
    const k = 60 / (0, _d3.max)(range);
    return k < 1 ? range.map((r)=>r * k) : range;
}
function inferLogDomain(channels) {
    for (const { value } of channels){
        if (value !== undefined) for (let v of value){
            if (v > 0) return inferDomain(channels, (0, _definedJs.positive));
            if (v < 0) return inferDomain(channels, (0, _definedJs.negative));
        }
    }
    return [
        1,
        10
    ];
}
function inferQuantileDomain(channels) {
    const domain = [];
    for (const { value } of channels){
        if (value === undefined) continue;
        for (const v of value)domain.push(v);
    }
    return domain;
}
function interpolatePiecewise(interpolate) {
    return (i, j)=>(t)=>interpolate(i + t * (j - i));
}

},{"d3":"17XFv","../defined.js":"3n4Hk","../options.js":"eJmsy","../order.js":"ieWhH","./index.js":"kiF55","./schemes.js":"5XQmJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5XQmJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isCategoricalScheme", ()=>isCategoricalScheme);
parcelHelpers.export(exports, "ordinalScheme", ()=>ordinalScheme);
parcelHelpers.export(exports, "ordinalRange", ()=>ordinalRange);
// If the specified domain contains only booleans (ignoring null and undefined),
// returns a corresponding range where false is mapped to the low color and true
// is mapped to the high color of the specified scheme.
parcelHelpers.export(exports, "maybeBooleanRange", ()=>maybeBooleanRange);
parcelHelpers.export(exports, "quantitativeScheme", ()=>quantitativeScheme);
parcelHelpers.export(exports, "isDivergingScheme", ()=>isDivergingScheme);
var _d3 = require("d3");
const categoricalSchemes = new Map([
    [
        "accent",
        (0, _d3.schemeAccent)
    ],
    [
        "category10",
        (0, _d3.schemeCategory10)
    ],
    [
        "dark2",
        (0, _d3.schemeDark2)
    ],
    [
        "observable10",
        (0, _d3.schemeObservable10)
    ],
    [
        "paired",
        (0, _d3.schemePaired)
    ],
    [
        "pastel1",
        (0, _d3.schemePastel1)
    ],
    [
        "pastel2",
        (0, _d3.schemePastel2)
    ],
    [
        "set1",
        (0, _d3.schemeSet1)
    ],
    [
        "set2",
        (0, _d3.schemeSet2)
    ],
    [
        "set3",
        (0, _d3.schemeSet3)
    ],
    [
        "tableau10",
        (0, _d3.schemeTableau10)
    ]
]);
function isCategoricalScheme(scheme) {
    return scheme != null && categoricalSchemes.has(`${scheme}`.toLowerCase());
}
const ordinalSchemes = new Map([
    ...categoricalSchemes,
    // diverging
    [
        "brbg",
        scheme11((0, _d3.schemeBrBG), (0, _d3.interpolateBrBG))
    ],
    [
        "prgn",
        scheme11((0, _d3.schemePRGn), (0, _d3.interpolatePRGn))
    ],
    [
        "piyg",
        scheme11((0, _d3.schemePiYG), (0, _d3.interpolatePiYG))
    ],
    [
        "puor",
        scheme11((0, _d3.schemePuOr), (0, _d3.interpolatePuOr))
    ],
    [
        "rdbu",
        scheme11((0, _d3.schemeRdBu), (0, _d3.interpolateRdBu))
    ],
    [
        "rdgy",
        scheme11((0, _d3.schemeRdGy), (0, _d3.interpolateRdGy))
    ],
    [
        "rdylbu",
        scheme11((0, _d3.schemeRdYlBu), (0, _d3.interpolateRdYlBu))
    ],
    [
        "rdylgn",
        scheme11((0, _d3.schemeRdYlGn), (0, _d3.interpolateRdYlGn))
    ],
    [
        "spectral",
        scheme11((0, _d3.schemeSpectral), (0, _d3.interpolateSpectral))
    ],
    // reversed diverging (for temperature data)
    [
        "burd",
        scheme11r((0, _d3.schemeRdBu), (0, _d3.interpolateRdBu))
    ],
    [
        "buylrd",
        scheme11r((0, _d3.schemeRdYlBu), (0, _d3.interpolateRdYlBu))
    ],
    // sequential (single-hue)
    [
        "blues",
        scheme9((0, _d3.schemeBlues), (0, _d3.interpolateBlues))
    ],
    [
        "greens",
        scheme9((0, _d3.schemeGreens), (0, _d3.interpolateGreens))
    ],
    [
        "greys",
        scheme9((0, _d3.schemeGreys), (0, _d3.interpolateGreys))
    ],
    [
        "oranges",
        scheme9((0, _d3.schemeOranges), (0, _d3.interpolateOranges))
    ],
    [
        "purples",
        scheme9((0, _d3.schemePurples), (0, _d3.interpolatePurples))
    ],
    [
        "reds",
        scheme9((0, _d3.schemeReds), (0, _d3.interpolateReds))
    ],
    // sequential (multi-hue)
    [
        "turbo",
        schemei((0, _d3.interpolateTurbo))
    ],
    [
        "viridis",
        schemei((0, _d3.interpolateViridis))
    ],
    [
        "magma",
        schemei((0, _d3.interpolateMagma))
    ],
    [
        "inferno",
        schemei((0, _d3.interpolateInferno))
    ],
    [
        "plasma",
        schemei((0, _d3.interpolatePlasma))
    ],
    [
        "cividis",
        schemei((0, _d3.interpolateCividis))
    ],
    [
        "cubehelix",
        schemei((0, _d3.interpolateCubehelixDefault))
    ],
    [
        "warm",
        schemei((0, _d3.interpolateWarm))
    ],
    [
        "cool",
        schemei((0, _d3.interpolateCool))
    ],
    [
        "bugn",
        scheme9((0, _d3.schemeBuGn), (0, _d3.interpolateBuGn))
    ],
    [
        "bupu",
        scheme9((0, _d3.schemeBuPu), (0, _d3.interpolateBuPu))
    ],
    [
        "gnbu",
        scheme9((0, _d3.schemeGnBu), (0, _d3.interpolateGnBu))
    ],
    [
        "orrd",
        scheme9((0, _d3.schemeOrRd), (0, _d3.interpolateOrRd))
    ],
    [
        "pubu",
        scheme9((0, _d3.schemePuBu), (0, _d3.interpolatePuBu))
    ],
    [
        "pubugn",
        scheme9((0, _d3.schemePuBuGn), (0, _d3.interpolatePuBuGn))
    ],
    [
        "purd",
        scheme9((0, _d3.schemePuRd), (0, _d3.interpolatePuRd))
    ],
    [
        "rdpu",
        scheme9((0, _d3.schemeRdPu), (0, _d3.interpolateRdPu))
    ],
    [
        "ylgn",
        scheme9((0, _d3.schemeYlGn), (0, _d3.interpolateYlGn))
    ],
    [
        "ylgnbu",
        scheme9((0, _d3.schemeYlGnBu), (0, _d3.interpolateYlGnBu))
    ],
    [
        "ylorbr",
        scheme9((0, _d3.schemeYlOrBr), (0, _d3.interpolateYlOrBr))
    ],
    [
        "ylorrd",
        scheme9((0, _d3.schemeYlOrRd), (0, _d3.interpolateYlOrRd))
    ],
    // cyclical
    [
        "rainbow",
        schemeicyclical((0, _d3.interpolateRainbow))
    ],
    [
        "sinebow",
        schemeicyclical((0, _d3.interpolateSinebow))
    ]
]);
function scheme9(scheme, interpolate) {
    return ({ length: n })=>{
        if (n === 1) return [
            scheme[3][1]
        ]; // favor midpoint
        if (n === 2) return [
            scheme[3][1],
            scheme[3][2]
        ]; // favor darker
        n = Math.max(3, Math.floor(n));
        return n > 9 ? (0, _d3.quantize)(interpolate, n) : scheme[n];
    };
}
function scheme11(scheme, interpolate) {
    return ({ length: n })=>{
        if (n === 2) return [
            scheme[3][0],
            scheme[3][2]
        ]; // favor diverging extrema
        n = Math.max(3, Math.floor(n));
        return n > 11 ? (0, _d3.quantize)(interpolate, n) : scheme[n];
    };
}
function scheme11r(scheme, interpolate) {
    return ({ length: n })=>{
        if (n === 2) return [
            scheme[3][2],
            scheme[3][0]
        ]; // favor diverging extrema
        n = Math.max(3, Math.floor(n));
        return n > 11 ? (0, _d3.quantize)((t)=>interpolate(1 - t), n) : scheme[n].slice().reverse();
    };
}
function schemei(interpolate) {
    return ({ length: n })=>(0, _d3.quantize)(interpolate, Math.max(2, Math.floor(n)));
}
function schemeicyclical(interpolate) {
    return ({ length: n })=>(0, _d3.quantize)(interpolate, Math.floor(n) + 1).slice(0, -1);
}
function ordinalScheme(scheme) {
    const s = `${scheme}`.toLowerCase();
    if (!ordinalSchemes.has(s)) throw new Error(`unknown ordinal scheme: ${s}`);
    return ordinalSchemes.get(s);
}
function ordinalRange(scheme, length) {
    const s = ordinalScheme(scheme);
    const r = typeof s === "function" ? s({
        length
    }) : s;
    return r.length !== length ? r.slice(0, length) : r;
}
function maybeBooleanRange(domain, scheme = "greys") {
    const range = new Set();
    const [f, t] = ordinalRange(scheme, 2);
    for (const value of domain){
        if (value == null) continue;
        if (value === true) range.add(t);
        else if (value === false) range.add(f);
        else return;
    }
    return [
        ...range
    ];
}
const quantitativeSchemes = new Map([
    // diverging
    [
        "brbg",
        (0, _d3.interpolateBrBG)
    ],
    [
        "prgn",
        (0, _d3.interpolatePRGn)
    ],
    [
        "piyg",
        (0, _d3.interpolatePiYG)
    ],
    [
        "puor",
        (0, _d3.interpolatePuOr)
    ],
    [
        "rdbu",
        (0, _d3.interpolateRdBu)
    ],
    [
        "rdgy",
        (0, _d3.interpolateRdGy)
    ],
    [
        "rdylbu",
        (0, _d3.interpolateRdYlBu)
    ],
    [
        "rdylgn",
        (0, _d3.interpolateRdYlGn)
    ],
    [
        "spectral",
        (0, _d3.interpolateSpectral)
    ],
    // reversed diverging (for temperature data)
    [
        "burd",
        (t)=>(0, _d3.interpolateRdBu)(1 - t)
    ],
    [
        "buylrd",
        (t)=>(0, _d3.interpolateRdYlBu)(1 - t)
    ],
    // sequential (single-hue)
    [
        "blues",
        (0, _d3.interpolateBlues)
    ],
    [
        "greens",
        (0, _d3.interpolateGreens)
    ],
    [
        "greys",
        (0, _d3.interpolateGreys)
    ],
    [
        "purples",
        (0, _d3.interpolatePurples)
    ],
    [
        "reds",
        (0, _d3.interpolateReds)
    ],
    [
        "oranges",
        (0, _d3.interpolateOranges)
    ],
    // sequential (multi-hue)
    [
        "turbo",
        (0, _d3.interpolateTurbo)
    ],
    [
        "viridis",
        (0, _d3.interpolateViridis)
    ],
    [
        "magma",
        (0, _d3.interpolateMagma)
    ],
    [
        "inferno",
        (0, _d3.interpolateInferno)
    ],
    [
        "plasma",
        (0, _d3.interpolatePlasma)
    ],
    [
        "cividis",
        (0, _d3.interpolateCividis)
    ],
    [
        "cubehelix",
        (0, _d3.interpolateCubehelixDefault)
    ],
    [
        "warm",
        (0, _d3.interpolateWarm)
    ],
    [
        "cool",
        (0, _d3.interpolateCool)
    ],
    [
        "bugn",
        (0, _d3.interpolateBuGn)
    ],
    [
        "bupu",
        (0, _d3.interpolateBuPu)
    ],
    [
        "gnbu",
        (0, _d3.interpolateGnBu)
    ],
    [
        "orrd",
        (0, _d3.interpolateOrRd)
    ],
    [
        "pubugn",
        (0, _d3.interpolatePuBuGn)
    ],
    [
        "pubu",
        (0, _d3.interpolatePuBu)
    ],
    [
        "purd",
        (0, _d3.interpolatePuRd)
    ],
    [
        "rdpu",
        (0, _d3.interpolateRdPu)
    ],
    [
        "ylgnbu",
        (0, _d3.interpolateYlGnBu)
    ],
    [
        "ylgn",
        (0, _d3.interpolateYlGn)
    ],
    [
        "ylorbr",
        (0, _d3.interpolateYlOrBr)
    ],
    [
        "ylorrd",
        (0, _d3.interpolateYlOrRd)
    ],
    // cyclical
    [
        "rainbow",
        (0, _d3.interpolateRainbow)
    ],
    [
        "sinebow",
        (0, _d3.interpolateSinebow)
    ]
]);
function quantitativeScheme(scheme) {
    const s = `${scheme}`.toLowerCase();
    if (!quantitativeSchemes.has(s)) throw new Error(`unknown quantitative scheme: ${s}`);
    return quantitativeSchemes.get(s);
}
const divergingSchemes = new Set([
    "brbg",
    "prgn",
    "piyg",
    "puor",
    "rdbu",
    "rdgy",
    "rdylbu",
    "rdylgn",
    "spectral",
    "burd",
    "buylrd"
]);
function isDivergingScheme(scheme) {
    return scheme != null && divergingSchemes.has(`${scheme}`.toLowerCase());
}

},{"d3":"17XFv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"co7kN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createScaleDiverging", ()=>createScaleDiverging);
parcelHelpers.export(exports, "createScaleDivergingSqrt", ()=>createScaleDivergingSqrt);
parcelHelpers.export(exports, "createScaleDivergingPow", ()=>createScaleDivergingPow);
parcelHelpers.export(exports, "createScaleDivergingLog", ()=>createScaleDivergingLog);
parcelHelpers.export(exports, "createScaleDivergingSymlog", ()=>createScaleDivergingSymlog);
var _d3 = require("d3");
var _definedJs = require("../defined.js");
var _optionsJs = require("../options.js");
var _warningsJs = require("../warnings.js");
var _indexJs = require("./index.js");
var _quantitativeJs = require("./quantitative.js");
var _schemesJs = require("./schemes.js");
function createScaleD(key, scale, transform, channels, { type, nice, clamp, domain = (0, _quantitativeJs.inferDomain)(channels), unknown, pivot = 0, scheme, range, symmetric = true, interpolate = (0, _indexJs.registry).get(key) === (0, _indexJs.color) ? scheme == null && range !== undefined ? (0, _d3.interpolateRgb) : (0, _schemesJs.quantitativeScheme)(scheme !== undefined ? scheme : "rdbu") : (0, _d3.interpolateNumber), reverse }) {
    pivot = +pivot;
    domain = (0, _optionsJs.arrayify)(domain);
    let [min, max] = domain;
    if (domain.length > 2) (0, _warningsJs.warn)(`Warning: the diverging ${key} scale domain contains extra elements.`);
    if ((0, _d3.descending)(min, max) < 0) [min, max] = [
        max,
        min
    ], reverse = !reverse;
    min = Math.min(min, pivot);
    max = Math.max(max, pivot);
    // Sometimes interpolate is a named interpolator, such as "lab" for Lab color
    // space. Other times interpolate is a function that takes two arguments and
    // is used in conjunction with the range. And other times the interpolate
    // function is a “fixed” interpolator on the [0, 1] interval, as when a
    // color scheme such as interpolateRdBu is used.
    if (typeof interpolate !== "function") interpolate = (0, _quantitativeJs.maybeInterpolator)(interpolate);
    // If an explicit range is specified, promote it to a piecewise interpolator.
    if (range !== undefined) interpolate = interpolate.length === 1 ? (0, _quantitativeJs.interpolatePiecewise)(interpolate)(...range) : (0, _d3.piecewise)(interpolate, range);
    // Reverse before normalization.
    if (reverse) interpolate = (0, _quantitativeJs.flip)(interpolate);
    // Normalize the interpolator for symmetric difference around the pivot.
    if (symmetric) {
        const mid = transform.apply(pivot);
        const mindelta = mid - transform.apply(min);
        const maxdelta = transform.apply(max) - mid;
        if (mindelta < maxdelta) min = transform.invert(mid - maxdelta);
        else if (mindelta > maxdelta) max = transform.invert(mid + mindelta);
    }
    scale.domain([
        min,
        pivot,
        max
    ]).unknown(unknown).interpolator(interpolate);
    if (clamp) scale.clamp(clamp);
    if (nice) scale.nice(nice);
    return {
        type,
        domain: [
            min,
            max
        ],
        pivot,
        interpolate,
        scale
    };
}
function createScaleDiverging(key, channels, options) {
    return createScaleD(key, (0, _d3.scaleDiverging)(), transformIdentity, channels, options);
}
function createScaleDivergingSqrt(key, channels, options) {
    return createScaleDivergingPow(key, channels, {
        ...options,
        exponent: 0.5
    });
}
function createScaleDivergingPow(key, channels, { exponent = 1, ...options }) {
    return createScaleD(key, (0, _d3.scaleDivergingPow)().exponent(exponent = +exponent), transformPow(exponent), channels, {
        ...options,
        type: "diverging-pow"
    });
}
function createScaleDivergingLog(key, channels, { base = 10, pivot = 1, domain = (0, _quantitativeJs.inferDomain)(channels, pivot < 0 ? (0, _definedJs.negative) : (0, _definedJs.positive)), ...options }) {
    return createScaleD(key, (0, _d3.scaleDivergingLog)().base(base = +base), transformLog, channels, {
        domain,
        pivot,
        ...options
    });
}
function createScaleDivergingSymlog(key, channels, { constant = 1, ...options }) {
    return createScaleD(key, (0, _d3.scaleDivergingSymlog)().constant(constant = +constant), transformSymlog(constant), channels, options);
}
const transformIdentity = {
    apply (x) {
        return x;
    },
    invert (x) {
        return x;
    }
};
const transformLog = {
    apply: Math.log,
    invert: Math.exp
};
const transformSqrt = {
    apply (x) {
        return Math.sign(x) * Math.sqrt(Math.abs(x));
    },
    invert (x) {
        return Math.sign(x) * (x * x);
    }
};
function transformPow(exponent) {
    return exponent === 0.5 ? transformSqrt : {
        apply (x) {
            return Math.sign(x) * Math.pow(Math.abs(x), exponent);
        },
        invert (x) {
            return Math.sign(x) * Math.pow(Math.abs(x), 1 / exponent);
        }
    };
}
function transformSymlog(constant) {
    return {
        apply (x) {
            return Math.sign(x) * Math.log1p(Math.abs(x / constant));
        },
        invert (x) {
            return Math.sign(x) * Math.expm1(Math.abs(x)) * constant;
        }
    };
}

},{"d3":"17XFv","../defined.js":"3n4Hk","../options.js":"eJmsy","../warnings.js":"hBaa6","./index.js":"kiF55","./quantitative.js":"duaCH","./schemes.js":"5XQmJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hBaa6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "consumeWarnings", ()=>consumeWarnings);
parcelHelpers.export(exports, "warn", ()=>warn);
let warnings = 0;
let lastMessage;
function consumeWarnings() {
    const w = warnings;
    warnings = 0;
    lastMessage = undefined;
    return w;
}
function warn(message) {
    if (message === lastMessage) return;
    lastMessage = message;
    console.warn(message);
    ++warnings;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gecYx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createScaleTime", ()=>createScaleTime);
parcelHelpers.export(exports, "createScaleUtc", ()=>createScaleUtc);
var _d3 = require("d3");
var _quantitativeJs = require("./quantitative.js");
function createScaleT(key, scale, channels, options) {
    return (0, _quantitativeJs.createScaleQ)(key, scale, channels, options);
}
function createScaleTime(key, channels, options) {
    return createScaleT(key, (0, _d3.scaleTime)(), channels, options);
}
function createScaleUtc(key, channels, options) {
    return createScaleT(key, (0, _d3.scaleUtc)(), channels, options);
}

},{"d3":"17XFv","./quantitative.js":"duaCH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"51U21":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ordinalImplicit", ()=>ordinalImplicit);
parcelHelpers.export(exports, "createScaleOrdinal", ()=>createScaleOrdinal);
parcelHelpers.export(exports, "createScalePoint", ()=>createScalePoint);
parcelHelpers.export(exports, "createScaleBand", ()=>createScaleBand);
var _d3 = require("d3");
var _definedJs = require("../defined.js");
var _optionsJs = require("../options.js");
var _symbolJs = require("../symbol.js");
var _indexJs = require("./index.js");
var _schemesJs = require("./schemes.js");
const ordinalImplicit = Symbol("ordinal");
function createScaleO(key, scale, channels, { type, interval, domain, range, reverse, hint }) {
    interval = (0, _optionsJs.maybeRangeInterval)(interval, type);
    if (domain === undefined) domain = inferDomain(channels, interval, key);
    if (type === "categorical" || type === ordinalImplicit) type = "ordinal"; // shorthand for color schemes
    if (reverse) domain = (0, _d3.reverse)(domain);
    domain = scale.domain(domain).domain(); // deduplicate
    if (range !== undefined) {
        // If the range is specified as a function, pass it the domain.
        if (typeof range === "function") range = range(domain);
        scale.range(range);
    }
    return {
        type,
        domain,
        range,
        scale,
        hint,
        interval
    };
}
function createScaleOrdinal(key, channels, { type, interval, domain, range, scheme, unknown, ...options }) {
    interval = (0, _optionsJs.maybeRangeInterval)(interval, type);
    if (domain === undefined) domain = inferDomain(channels, interval, key);
    let hint;
    if ((0, _indexJs.registry).get(key) === (0, _indexJs.symbol)) {
        hint = inferSymbolHint(channels);
        range = range === undefined ? inferSymbolRange(hint) : (0, _optionsJs.map)(range, (0, _symbolJs.maybeSymbol));
    } else if ((0, _indexJs.registry).get(key) === (0, _indexJs.color)) {
        if (range === undefined && (type === "ordinal" || type === ordinalImplicit)) {
            range = (0, _schemesJs.maybeBooleanRange)(domain, scheme);
            if (range !== undefined) scheme = undefined; // Don’t re-apply scheme.
        }
        if (scheme === undefined && range === undefined) scheme = type === "ordinal" ? "turbo" : "observable10";
        if (scheme !== undefined) {
            if (range !== undefined) {
                const interpolate = (0, _schemesJs.quantitativeScheme)(scheme);
                const t0 = range[0], d = range[1] - range[0];
                range = ({ length: n })=>(0, _d3.quantize)((t)=>interpolate(t0 + d * t), n);
            } else range = (0, _schemesJs.ordinalScheme)(scheme);
        }
    }
    if (unknown === (0, _d3.scaleImplicit)) throw new Error(`implicit unknown on ${key} scale is not supported`);
    return createScaleO(key, (0, _d3.scaleOrdinal)().unknown(unknown), channels, {
        ...options,
        type,
        domain,
        range,
        hint
    });
}
function createScalePoint(key, channels, { align = 0.5, padding = 0.5, ...options }) {
    return maybeRound((0, _d3.scalePoint)().align(align).padding(padding), channels, options, key);
}
function createScaleBand(key, channels, { align = 0.5, padding = 0.1, paddingInner = padding, paddingOuter = key === "fx" || key === "fy" ? 0 : padding, ...options }) {
    return maybeRound((0, _d3.scaleBand)().align(align).paddingInner(paddingInner).paddingOuter(paddingOuter), channels, options, key);
}
function maybeRound(scale, channels, options, key) {
    let { round } = options;
    if (round !== undefined) scale.round(round = !!round);
    scale = createScaleO(key, scale, channels, options);
    scale.round = round; // preserve for autoScaleRound
    return scale;
}
function inferDomain(channels, interval, key) {
    const values = new (0, _d3.InternSet)();
    for (const { value, domain } of channels){
        if (domain !== undefined) return domain(); // see channelDomain
        if (value === undefined) continue;
        for (const v of value)values.add(v);
    }
    if (interval !== undefined) {
        const [min, max] = (0, _d3.extent)(values).map(interval.floor, interval);
        return interval.range(min, interval.offset(max));
    }
    if (values.size > 10e3 && (0, _indexJs.registry).get(key) === (0, _indexJs.position)) throw new Error(`implicit ordinal domain of ${key} scale has more than 10,000 values`);
    return (0, _d3.sort)(values, (0, _definedJs.ascendingDefined));
}
// If all channels provide a consistent hint, propagate it to the scale.
function inferHint(channels, key) {
    let value;
    for (const { hint } of channels){
        const candidate = hint?.[key];
        if (candidate === undefined) continue; // no hint here
        if (value === undefined) value = candidate; // first hint
        else if (value !== candidate) return; // inconsistent hint
    }
    return value;
}
function inferSymbolHint(channels) {
    return {
        fill: inferHint(channels, "fill"),
        stroke: inferHint(channels, "stroke")
    };
}
function inferSymbolRange(hint) {
    return (0, _optionsJs.isNoneish)(hint.fill) ? (0, _d3.symbolsStroke) : (0, _d3.symbolsFill);
}

},{"d3":"17XFv","../defined.js":"3n4Hk","../options.js":"eJmsy","../symbol.js":"ePwOU","./index.js":"kiF55","./schemes.js":"5XQmJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eTnHA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createProjection", ()=>createProjection);
// Applies a point-wise projection to the given paired x and y channels.
// Note: mutates values!
parcelHelpers.export(exports, "project", ()=>project);
// Returns true if a projection was specified. This should match the logic of
// createProjection above, and is called before we construct the projection.
// (Though note that we ignore the edge case where the projection initializer
// may return null.)
parcelHelpers.export(exports, "hasProjection", ()=>hasProjection);
// When a projection is specified, we can use its aspect ratio to determine a
// good value for the projection’s height based on the desired width. When we
// don’t have a way to know, the golden ratio is our best guess. Due to a
// circular dependency (we need to know the height before we can construct the
// projection), we have to test the raw projection option rather than the
// materialized projection; therefore we must be extremely careful that the
// logic of this function exactly matches createProjection above!
parcelHelpers.export(exports, "projectionAspectRatio", ()=>projectionAspectRatio);
// Extract the (possibly) scaled values for the x and y channels, and apply the
// projection if any.
parcelHelpers.export(exports, "applyPosition", ()=>applyPosition);
parcelHelpers.export(exports, "getGeometryChannels", ()=>getGeometryChannels);
var _d3 = require("d3");
var _channelJs = require("./channel.js");
var _optionsJs = require("./options.js");
var _warningsJs = require("./warnings.js");
const pi = Math.PI;
const tau = 2 * pi;
const defaultAspectRatio = 0.618;
function createProjection({ projection, inset: globalInset = 0, insetTop = globalInset, insetRight = globalInset, insetBottom = globalInset, insetLeft = globalInset } = {}, dimensions) {
    if (projection == null) return;
    if (typeof projection.stream === "function") return projection; // d3 projection
    let options;
    let domain;
    let clip = "frame";
    // If the projection was specified as an object with additional options,
    // extract those. The order of precedence for insetTop (and other insets) is:
    // projection.insetTop, projection.inset, (global) insetTop, (global) inset.
    // Any other options on this object will be passed through to the initializer.
    if ((0, _optionsJs.isObject)(projection)) {
        let inset;
        ({ type: projection, domain, inset, insetTop = inset !== undefined ? inset : insetTop, insetRight = inset !== undefined ? inset : insetRight, insetBottom = inset !== undefined ? inset : insetBottom, insetLeft = inset !== undefined ? inset : insetLeft, clip = clip, ...options } = projection);
        if (projection == null) return;
    }
    // For named projections, retrieve the corresponding projection initializer.
    if (typeof projection !== "function") ({ type: projection } = namedProjection(projection));
    // Compute the frame dimensions and invoke the projection initializer.
    const { width, height, marginLeft, marginRight, marginTop, marginBottom } = dimensions;
    const dx = width - marginLeft - marginRight - insetLeft - insetRight;
    const dy = height - marginTop - marginBottom - insetTop - insetBottom;
    projection = projection?.({
        width: dx,
        height: dy,
        clip,
        ...options
    });
    // The projection initializer might decide to not use a projection.
    if (projection == null) return;
    clip = maybePostClip(clip, marginLeft, marginTop, width - marginRight, height - marginBottom);
    // Translate the origin to the top-left corner, respecting margins and insets.
    let tx = marginLeft + insetLeft;
    let ty = marginTop + insetTop;
    let transform;
    // If a domain is specified, fit the projection to the frame.
    if (domain != null) {
        const [[x0, y0], [x1, y1]] = (0, _d3.geoPath)(projection).bounds(domain);
        const k = Math.min(dx / (x1 - x0), dy / (y1 - y0));
        if (k > 0) {
            tx -= (k * (x0 + x1) - dx) / 2;
            ty -= (k * (y0 + y1) - dy) / 2;
            transform = (0, _d3.geoTransform)({
                point (x, y) {
                    this.stream.point(x * k + tx, y * k + ty);
                }
            });
        } else (0, _warningsJs.warn)(`Warning: the projection could not be fit to the specified domain; using the default scale.`);
    }
    transform ??= tx === 0 && ty === 0 ? identity() : (0, _d3.geoTransform)({
        point (x, y) {
            this.stream.point(x + tx, y + ty);
        }
    });
    return {
        stream: (s)=>projection.stream(transform.stream(clip(s)))
    };
}
function namedProjection(projection) {
    switch(`${projection}`.toLowerCase()){
        case "albers-usa":
            return scaleProjection((0, _d3.geoAlbersUsa), 0.7463, 0.4673);
        case "albers":
            return conicProjection((0, _d3.geoAlbers), 0.7463, 0.4673);
        case "azimuthal-equal-area":
            return scaleProjection((0, _d3.geoAzimuthalEqualArea), 4, 4);
        case "azimuthal-equidistant":
            return scaleProjection((0, _d3.geoAzimuthalEquidistant), tau, tau);
        case "conic-conformal":
            return conicProjection((0, _d3.geoConicConformal), tau, tau);
        case "conic-equal-area":
            return conicProjection((0, _d3.geoConicEqualArea), 6.1702, 2.9781);
        case "conic-equidistant":
            return conicProjection((0, _d3.geoConicEquidistant), 7.312, 3.6282);
        case "equal-earth":
            return scaleProjection((0, _d3.geoEqualEarth), 5.4133, 2.6347);
        case "equirectangular":
            return scaleProjection((0, _d3.geoEquirectangular), tau, pi);
        case "gnomonic":
            return scaleProjection((0, _d3.geoGnomonic), 3.4641, 3.4641);
        case "identity":
            return {
                type: identity
            };
        case "reflect-y":
            return {
                type: reflectY
            };
        case "mercator":
            return scaleProjection((0, _d3.geoMercator), tau, tau);
        case "orthographic":
            return scaleProjection((0, _d3.geoOrthographic), 2, 2);
        case "stereographic":
            return scaleProjection((0, _d3.geoStereographic), 2, 2);
        case "transverse-mercator":
            return scaleProjection((0, _d3.geoTransverseMercator), tau, tau);
        default:
            throw new Error(`unknown projection type: ${projection}`);
    }
}
function maybePostClip(clip, x1, y1, x2, y2) {
    if (clip === false || clip == null || typeof clip === "number") return (s)=>s;
    if (clip === true) clip = "frame";
    switch(`${clip}`.toLowerCase()){
        case "frame":
            return (0, _d3.geoClipRectangle)(x1, y1, x2, y2);
        default:
            throw new Error(`unknown projection clip type: ${clip}`);
    }
}
function scaleProjection(createProjection, kx, ky) {
    return {
        type: ({ width, height, rotate, precision = 0.15, clip })=>{
            const projection = createProjection();
            if (precision != null) projection.precision?.(precision);
            if (rotate != null) projection.rotate?.(rotate);
            if (typeof clip === "number") projection.clipAngle?.(clip);
            if (width != null) {
                projection.scale(Math.min(width / kx, height / ky));
                projection.translate([
                    width / 2,
                    height / 2
                ]);
            }
            return projection;
        },
        aspectRatio: ky / kx
    };
}
function conicProjection(createProjection, kx, ky) {
    const { type, aspectRatio } = scaleProjection(createProjection, kx, ky);
    return {
        type: (options)=>{
            const { parallels, domain, width, height } = options;
            const projection = type(options);
            if (parallels != null) {
                projection.parallels(parallels);
                if (domain === undefined && width != null) projection.fitSize([
                    width,
                    height
                ], {
                    type: "Sphere"
                });
            }
            return projection;
        },
        aspectRatio
    };
}
const identity = (0, _optionsJs.constant)({
    stream: (stream)=>stream
});
const reflectY = (0, _optionsJs.constant)((0, _d3.geoTransform)({
    point (x, y) {
        this.stream.point(x, -y);
    }
}));
function project(cx, cy, values, projection) {
    const x = values[cx];
    const y = values[cy];
    const n = x.length;
    const X = values[cx] = new Float64Array(n).fill(NaN);
    const Y = values[cy] = new Float64Array(n).fill(NaN);
    let i;
    const stream = projection.stream({
        point (x, y) {
            X[i] = x;
            Y[i] = y;
        }
    });
    for(i = 0; i < n; ++i)stream.point(x[i], y[i]);
}
function hasProjection({ projection } = {}) {
    if (projection == null) return false;
    if (typeof projection.stream === "function") return true;
    if ((0, _optionsJs.isObject)(projection)) projection = projection.type;
    return projection != null;
}
function projectionAspectRatio(projection) {
    if (typeof projection?.stream === "function") return defaultAspectRatio;
    if ((0, _optionsJs.isObject)(projection)) {
        let domain, options;
        ({ domain, type: projection, ...options } = projection);
        if (domain != null && projection != null) {
            const type = typeof projection === "string" ? namedProjection(projection).type : projection;
            const [[x0, y0], [x1, y1]] = (0, _d3.geoPath)(type({
                ...options,
                width: 100,
                height: 100
            })).bounds(domain);
            const r = (y1 - y0) / (x1 - x0);
            return r && isFinite(r) ? r < 0.2 ? 0.2 : r > 5 ? 5 : r : defaultAspectRatio;
        }
    }
    if (projection == null) return;
    if (typeof projection !== "function") {
        const { aspectRatio } = namedProjection(projection);
        if (aspectRatio) return aspectRatio;
    }
    return defaultAspectRatio;
}
function applyPosition(channels, scales, { projection }) {
    const { x, y } = channels;
    let position = {};
    if (x) position.x = x;
    if (y) position.y = y;
    position = (0, _channelJs.valueObject)(position, scales);
    if (projection && x?.scale === "x" && y?.scale === "y") project("x", "y", position, projection);
    if (x) position.x = (0, _optionsJs.coerceNumbers)(position.x);
    if (y) position.y = (0, _optionsJs.coerceNumbers)(position.y);
    return position;
}
function getGeometryChannels(channel) {
    const X = [];
    const Y = [];
    const x = {
        scale: "x",
        value: X
    };
    const y = {
        scale: "y",
        value: Y
    };
    const sink = {
        point (x, y) {
            X.push(x);
            Y.push(y);
        },
        lineStart () {},
        lineEnd () {},
        polygonStart () {},
        polygonEnd () {},
        sphere () {}
    };
    for (const object of channel.value)(0, _d3.geoStream)(object, sink);
    return [
        x,
        y
    ];
}

},{"d3":"17XFv","./channel.js":"h3rWV","./options.js":"eJmsy","./warnings.js":"hBaa6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c9bmo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "offset", ()=>offset);
parcelHelpers.export(exports, "getClipId", ()=>getClipId);
parcelHelpers.export(exports, "getPatternId", ()=>getPatternId);
parcelHelpers.export(exports, "styles", ()=>styles);
// Applies the specified titles via selection.call.
parcelHelpers.export(exports, "applyTitle", ()=>applyTitle);
// Like applyTitle, but for grouped data (lines, areas).
parcelHelpers.export(exports, "applyTitleGroup", ()=>applyTitleGroup);
parcelHelpers.export(exports, "applyText", ()=>applyText);
parcelHelpers.export(exports, "applyTextGroup", ()=>applyTextGroup);
parcelHelpers.export(exports, "applyChannelStyles", ()=>applyChannelStyles);
parcelHelpers.export(exports, "applyGroupedChannelStyles", ()=>applyGroupedChannelStyles);
parcelHelpers.export(exports, "groupZ", ()=>groupZ);
parcelHelpers.export(exports, "groupIndex", ()=>groupIndex);
// Note: may mutate selection.node!
parcelHelpers.export(exports, "applyIndirectStyles", ()=>applyIndirectStyles);
parcelHelpers.export(exports, "applyDirectStyles", ()=>applyDirectStyles);
parcelHelpers.export(exports, "applyAttr", ()=>applyAttr);
parcelHelpers.export(exports, "applyStyle", ()=>applyStyle);
parcelHelpers.export(exports, "applyTransform", ()=>applyTransform);
parcelHelpers.export(exports, "impliedString", ()=>impliedString);
parcelHelpers.export(exports, "impliedNumber", ()=>impliedNumber);
parcelHelpers.export(exports, "maybeClassName", ()=>maybeClassName);
parcelHelpers.export(exports, "applyInlineStyles", ()=>applyInlineStyles);
parcelHelpers.export(exports, "applyFrameAnchor", ()=>applyFrameAnchor);
var _d3 = require("d3");
var _contextJs = require("./context.js");
var _definedJs = require("./defined.js");
var _formatJs = require("./format.js");
var _optionsJs = require("./options.js");
var _warningsJs = require("./warnings.js");
const offset = (typeof window !== "undefined" ? window.devicePixelRatio > 1 : typeof it === "undefined") ? 0 : 0.5; // prettier-ignore
let nextClipId = 0;
let nextPatternId = 0;
function getClipId() {
    return `plot-clip-${++nextClipId}`;
}
function getPatternId() {
    return `plot-pattern-${++nextPatternId}`;
}
function styles(mark, { title, href, ariaLabel: variaLabel, ariaDescription, ariaHidden, target, fill, fillOpacity, stroke, strokeWidth, strokeOpacity, strokeLinejoin, strokeLinecap, strokeMiterlimit, strokeDasharray, strokeDashoffset, opacity, mixBlendMode, imageFilter, paintOrder, pointerEvents, shapeRendering, channels }, { ariaLabel: cariaLabel, fill: defaultFill = "currentColor", fillOpacity: defaultFillOpacity, stroke: defaultStroke = "none", strokeOpacity: defaultStrokeOpacity, strokeWidth: defaultStrokeWidth, strokeLinecap: defaultStrokeLinecap, strokeLinejoin: defaultStrokeLinejoin, strokeMiterlimit: defaultStrokeMiterlimit, paintOrder: defaultPaintOrder }) {
    // Some marks don’t support fill (e.g., tick and rule).
    if (defaultFill === null) {
        fill = null;
        fillOpacity = null;
    }
    // Some marks don’t support stroke (e.g., image).
    if (defaultStroke === null) {
        stroke = null;
        strokeOpacity = null;
    }
    // Some marks default to fill with no stroke, while others default to stroke
    // with no fill. For example, bar and area default to fill, while dot and line
    // default to stroke. For marks that fill by default, the default fill only
    // applies if the stroke is (constant) none; if you set a stroke, then the
    // default fill becomes none. Similarly for marks that stroke by stroke, the
    // default stroke only applies if the fill is (constant) none.
    if ((0, _optionsJs.isNoneish)(defaultFill)) {
        if (!(0, _optionsJs.isNoneish)(defaultStroke) && (!(0, _optionsJs.isNoneish)(fill) || channels?.fill)) defaultStroke = "none";
    } else if ((0, _optionsJs.isNoneish)(defaultStroke) && (!(0, _optionsJs.isNoneish)(stroke) || channels?.stroke)) defaultFill = "none";
    const [vfill, cfill] = (0, _optionsJs.maybeColorChannel)(fill, defaultFill);
    const [vfillOpacity, cfillOpacity] = (0, _optionsJs.maybeNumberChannel)(fillOpacity, defaultFillOpacity);
    const [vstroke, cstroke] = (0, _optionsJs.maybeColorChannel)(stroke, defaultStroke);
    const [vstrokeOpacity, cstrokeOpacity] = (0, _optionsJs.maybeNumberChannel)(strokeOpacity, defaultStrokeOpacity);
    const [vopacity, copacity] = (0, _optionsJs.maybeNumberChannel)(opacity);
    // For styles that have no effect if there is no stroke, only apply the
    // defaults if the stroke is not the constant none. (If stroke is a channel,
    // then cstroke will be undefined, but there’s still a stroke; hence we don’t
    // use isNoneish here.)
    if (!(0, _optionsJs.isNone)(cstroke)) {
        if (strokeWidth === undefined) strokeWidth = defaultStrokeWidth;
        if (strokeLinecap === undefined) strokeLinecap = defaultStrokeLinecap;
        if (strokeLinejoin === undefined) strokeLinejoin = defaultStrokeLinejoin;
        // The default stroke miterlimit need not be applied if the current stroke
        // is the constant round; this only has effect on miter joins.
        if (strokeMiterlimit === undefined && !(0, _optionsJs.isRound)(strokeLinejoin)) strokeMiterlimit = defaultStrokeMiterlimit;
        // The paint order only takes effect if there is both a fill and a stroke
        // (at least if we ignore markers, which no built-in marks currently use).
        if (!(0, _optionsJs.isNone)(cfill) && paintOrder === undefined) paintOrder = defaultPaintOrder;
    }
    const [vstrokeWidth, cstrokeWidth] = (0, _optionsJs.maybeNumberChannel)(strokeWidth);
    // Some marks don’t support fill (e.g., tick and rule).
    if (defaultFill !== null) {
        mark.fill = impliedString(cfill, "currentColor");
        mark.fillOpacity = impliedNumber(cfillOpacity, 1);
    }
    // Some marks don’t support stroke (e.g., image).
    if (defaultStroke !== null) {
        mark.stroke = impliedString(cstroke, "none");
        mark.strokeWidth = impliedNumber(cstrokeWidth, 1);
        mark.strokeOpacity = impliedNumber(cstrokeOpacity, 1);
        mark.strokeLinejoin = impliedString(strokeLinejoin, "miter");
        mark.strokeLinecap = impliedString(strokeLinecap, "butt");
        mark.strokeMiterlimit = impliedNumber(strokeMiterlimit, 4);
        mark.strokeDasharray = impliedString(strokeDasharray, "none");
        mark.strokeDashoffset = impliedString(strokeDashoffset, "0");
    }
    mark.target = (0, _optionsJs.string)(target);
    mark.ariaLabel = (0, _optionsJs.string)(cariaLabel);
    mark.ariaDescription = (0, _optionsJs.string)(ariaDescription);
    mark.ariaHidden = (0, _optionsJs.string)(ariaHidden);
    mark.opacity = impliedNumber(copacity, 1);
    mark.mixBlendMode = impliedString(mixBlendMode, "normal");
    mark.imageFilter = impliedString(imageFilter, "none");
    mark.paintOrder = impliedString(paintOrder, "normal");
    mark.pointerEvents = impliedString(pointerEvents, "auto");
    mark.shapeRendering = impliedString(shapeRendering, "auto");
    return {
        title: {
            value: title,
            optional: true,
            filter: null
        },
        href: {
            value: href,
            optional: true,
            filter: null
        },
        ariaLabel: {
            value: variaLabel,
            optional: true,
            filter: null
        },
        fill: {
            value: vfill,
            scale: "auto",
            optional: true
        },
        fillOpacity: {
            value: vfillOpacity,
            scale: "auto",
            optional: true
        },
        stroke: {
            value: vstroke,
            scale: "auto",
            optional: true
        },
        strokeOpacity: {
            value: vstrokeOpacity,
            scale: "auto",
            optional: true
        },
        strokeWidth: {
            value: vstrokeWidth,
            optional: true
        },
        opacity: {
            value: vopacity,
            scale: "auto",
            optional: true
        }
    };
}
function applyTitle(selection, L) {
    if (L) selection.filter((i)=>(0, _definedJs.nonempty)(L[i])).append("title").call(applyText, L);
}
function applyTitleGroup(selection, L) {
    if (L) selection.filter(([i])=>(0, _definedJs.nonempty)(L[i])).append("title").call(applyTextGroup, L);
}
function applyText(selection, T) {
    if (T) selection.text((i)=>(0, _formatJs.formatDefault)(T[i]));
}
function applyTextGroup(selection, T) {
    if (T) selection.text(([i])=>(0, _formatJs.formatDefault)(T[i]));
}
function applyChannelStyles(selection, { target, tip }, { ariaLabel: AL, title: T, fill: F, fillOpacity: FO, stroke: S, strokeOpacity: SO, strokeWidth: SW, opacity: O, href: H }) {
    if (AL) applyAttr(selection, "aria-label", (i)=>AL[i]);
    if (F) applyAttr(selection, "fill", (i)=>F[i]);
    if (FO) applyAttr(selection, "fill-opacity", (i)=>FO[i]);
    if (S) applyAttr(selection, "stroke", (i)=>S[i]);
    if (SO) applyAttr(selection, "stroke-opacity", (i)=>SO[i]);
    if (SW) applyAttr(selection, "stroke-width", (i)=>SW[i]);
    if (O) applyAttr(selection, "opacity", (i)=>O[i]);
    if (H) applyHref(selection, (i)=>H[i], target);
    if (!tip) applyTitle(selection, T);
}
function applyGroupedChannelStyles(selection, { target, tip }, { ariaLabel: AL, title: T, fill: F, fillOpacity: FO, stroke: S, strokeOpacity: SO, strokeWidth: SW, opacity: O, href: H }) {
    if (AL) applyAttr(selection, "aria-label", ([i])=>AL[i]);
    if (F) applyAttr(selection, "fill", ([i])=>F[i]);
    if (FO) applyAttr(selection, "fill-opacity", ([i])=>FO[i]);
    if (S) applyAttr(selection, "stroke", ([i])=>S[i]);
    if (SO) applyAttr(selection, "stroke-opacity", ([i])=>SO[i]);
    if (SW) applyAttr(selection, "stroke-width", ([i])=>SW[i]);
    if (O) applyAttr(selection, "opacity", ([i])=>O[i]);
    if (H) applyHref(selection, ([i])=>H[i], target);
    if (!tip) applyTitleGroup(selection, T);
}
function groupAesthetics({ ariaLabel: AL, title: T, fill: F, fillOpacity: FO, stroke: S, strokeOpacity: SO, strokeWidth: SW, opacity: O, href: H }, { tip }) {
    return [
        AL,
        tip ? undefined : T,
        F,
        FO,
        S,
        SO,
        SW,
        O,
        H
    ].filter((c)=>c !== undefined);
}
function groupZ(I, Z, z) {
    const G = (0, _d3.group)(I, (i)=>Z[i]);
    if (z === undefined && G.size > 1 + I.length >> 1) (0, _warningsJs.warn)(`Warning: the implicit z channel has high cardinality. This may occur when the fill or stroke channel is associated with quantitative data rather than ordinal or categorical data. You can suppress this warning by setting the z option explicitly; if this data represents a single series, set z to null.`);
    return G.values();
}
function* groupIndex(I, position, mark, channels) {
    const { z } = mark;
    const { z: Z } = channels; // group channel
    const A = groupAesthetics(channels, mark); // aesthetic channels
    const C = [
        ...position,
        ...A
    ]; // all channels
    // Group the current index by Z (if any).
    for (const G of Z ? groupZ(I, Z, z) : [
        I
    ]){
        let Ag; // the A-values (aesthetics) of the current group, if any
        let Gg; // the current group index (a subset of G, and I), if any
        out: for (const i of G){
            // If any channel has an undefined value for this index, skip it.
            for (const c of C)if (!(0, _definedJs.defined)(c[i])) {
                if (Gg) Gg.push(-1);
                continue out;
            }
            // Otherwise, if this is a new group, record the aesthetics for this
            // group. Yield the current group and start a new one.
            if (Ag === undefined) {
                if (Gg) yield Gg;
                Ag = A.map((c)=>(0, _optionsJs.keyof)(c[i])), Gg = [
                    i
                ];
                continue;
            }
            // Otherwise, add the current index to the current group. Then, if any of
            // the aesthetics don’t match the current group, yield the current group
            // and start a new group of the current index.
            Gg.push(i);
            for(let j = 0; j < A.length; ++j){
                const k = (0, _optionsJs.keyof)(A[j][i]);
                if (k !== Ag[j]) {
                    yield Gg;
                    Ag = A.map((c)=>(0, _optionsJs.keyof)(c[i])), Gg = [
                        i
                    ];
                    continue out;
                }
            }
        }
        // Yield the current group, if any.
        if (Gg) yield Gg;
    }
}
// Note: may mutate selection.node!
function applyClip(selection, mark, dimensions, context) {
    let clipUrl;
    const { clip = context.clip } = mark;
    switch(clip){
        case "frame":
            // Wrap the G element with another (untransformed) G element, applying the
            // clip to the parent G element so that the clip path is not affected by
            // the mark’s transform. To simplify the adoption of this fix, mutate the
            // passed-in selection.node to return the parent G element.
            selection = (0, _contextJs.create)("svg:g", context).each(function() {
                this.appendChild(selection.node());
                selection.node = ()=>this; // Note: mutation!
            });
            clipUrl = getFrameClip(context, dimensions);
            break;
        case "sphere":
            clipUrl = getProjectionClip(context);
            break;
    }
    // Here we’re careful to apply the ARIA attributes to the outer G element when
    // clipping is applied, and to apply the ARIA attributes before any other
    // attributes (for readability).
    applyAttr(selection, "aria-label", mark.ariaLabel);
    applyAttr(selection, "aria-description", mark.ariaDescription);
    applyAttr(selection, "aria-hidden", mark.ariaHidden);
    applyAttr(selection, "clip-path", clipUrl);
}
function memoizeClip(clip) {
    const cache = new WeakMap();
    return (context, dimensions)=>{
        let url = cache.get(context);
        if (!url) {
            const id = getClipId();
            (0, _d3.select)(context.ownerSVGElement).append("clipPath").attr("id", id).call(clip, context, dimensions);
            cache.set(context, url = `url(#${id})`);
        }
        return url;
    };
}
const getFrameClip = memoizeClip((clipPath, context, dimensions)=>{
    const { width, height, marginLeft, marginRight, marginTop, marginBottom } = dimensions;
    clipPath.append("rect").attr("x", marginLeft).attr("y", marginTop).attr("width", width - marginRight - marginLeft).attr("height", height - marginTop - marginBottom);
});
const getProjectionClip = memoizeClip((clipPath, context)=>{
    const { projection } = context;
    if (!projection) throw new Error(`the "sphere" clip option requires a projection`);
    clipPath.append("path").attr("d", (0, _d3.geoPath)(projection)({
        type: "Sphere"
    }));
});
function applyIndirectStyles(selection, mark, dimensions, context) {
    applyClip(selection, mark, dimensions, context);
    applyAttr(selection, "class", mark.className);
    applyAttr(selection, "fill", mark.fill);
    applyAttr(selection, "fill-opacity", mark.fillOpacity);
    applyAttr(selection, "stroke", mark.stroke);
    applyAttr(selection, "stroke-width", mark.strokeWidth);
    applyAttr(selection, "stroke-opacity", mark.strokeOpacity);
    applyAttr(selection, "stroke-linejoin", mark.strokeLinejoin);
    applyAttr(selection, "stroke-linecap", mark.strokeLinecap);
    applyAttr(selection, "stroke-miterlimit", mark.strokeMiterlimit);
    applyAttr(selection, "stroke-dasharray", mark.strokeDasharray);
    applyAttr(selection, "stroke-dashoffset", mark.strokeDashoffset);
    applyAttr(selection, "shape-rendering", mark.shapeRendering);
    applyAttr(selection, "filter", mark.imageFilter);
    applyAttr(selection, "paint-order", mark.paintOrder);
    const { pointerEvents = context.pointerSticky === false ? "none" : undefined } = mark;
    applyAttr(selection, "pointer-events", pointerEvents);
}
function applyDirectStyles(selection, mark) {
    applyStyle(selection, "mix-blend-mode", mark.mixBlendMode);
    applyAttr(selection, "opacity", mark.opacity);
}
function applyHref(selection, href, target) {
    selection.each(function(i) {
        const h = href(i);
        if (h != null) {
            const a = this.ownerDocument.createElementNS((0, _d3.namespaces).svg, "a");
            a.setAttribute("fill", "inherit");
            a.setAttributeNS((0, _d3.namespaces).xlink, "href", h);
            if (target != null) a.setAttribute("target", target);
            this.parentNode.insertBefore(a, this).appendChild(this);
        }
    });
}
function applyAttr(selection, name, value) {
    if (value != null) selection.attr(name, value);
}
function applyStyle(selection, name, value) {
    if (value != null) selection.style(name, value);
}
function applyTransform(selection, mark, { x, y }, tx = offset, ty = offset) {
    tx += mark.dx;
    ty += mark.dy;
    if (x?.bandwidth) tx += x.bandwidth() / 2;
    if (y?.bandwidth) ty += y.bandwidth() / 2;
    if (tx || ty) selection.attr("transform", `translate(${tx},${ty})`);
}
function impliedString(value, impliedValue) {
    if ((value = (0, _optionsJs.string)(value)) !== impliedValue) return value;
}
function impliedNumber(value, impliedValue) {
    if ((value = (0, _optionsJs.number)(value)) !== impliedValue) return value;
}
// https://www.w3.org/TR/CSS21/grammar.html
const validClassName = /^-?([_a-z]|[\240-\377]|\\[0-9a-f]{1,6}(\r\n|[ \t\r\n\f])?|\\[^\r\n\f0-9a-f])([_a-z0-9-]|[\240-\377]|\\[0-9a-f]{1,6}(\r\n|[ \t\r\n\f])?|\\[^\r\n\f0-9a-f])*$/i;
function maybeClassName(name) {
    // The default should be changed whenever the default styles are changed, so
    // as to avoid conflict when multiple versions of Plot are on the page.
    if (name === undefined) return "plot-d6a7b5";
    name = `${name}`;
    if (!validClassName.test(name)) throw new Error(`invalid class name: ${name}`);
    return name;
}
function applyInlineStyles(selection, style) {
    if (typeof style === "string") selection.property("style", style);
    else if (style != null) for (const element of selection)Object.assign(element.style, style);
}
function applyFrameAnchor({ frameAnchor }, { width, height, marginTop, marginRight, marginBottom, marginLeft }) {
    return [
        /left$/.test(frameAnchor) ? marginLeft : /right$/.test(frameAnchor) ? width - marginRight : (marginLeft + width - marginRight) / 2,
        /^top/.test(frameAnchor) ? marginTop : /^bottom/.test(frameAnchor) ? height - marginBottom : (marginTop + height - marginBottom) / 2
    ];
}

},{"d3":"17XFv","./context.js":"kyLYX","./defined.js":"3n4Hk","./format.js":"7mxs9","./options.js":"eJmsy","./warnings.js":"hBaa6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kyLYX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createContext", ()=>createContext);
parcelHelpers.export(exports, "create", ()=>create);
var _d3 = require("d3");
var _optionsJs = require("./options.js");
function createContext(options = {}) {
    const { document = typeof window !== "undefined" ? window.document : undefined, clip } = options;
    return {
        document,
        clip: (0, _optionsJs.maybeClip)(clip)
    };
}
function create(name, { document }) {
    return (0, _d3.select)((0, _d3.creator)(name).call(document.documentElement));
}

},{"d3":"17XFv","./options.js":"eJmsy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7mxs9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formatNumber", ()=>formatNumber);
parcelHelpers.export(exports, "formatMonth", ()=>formatMonth);
parcelHelpers.export(exports, "formatWeekday", ()=>formatWeekday);
parcelHelpers.export(exports, "formatIsoDate", ()=>formatIsoDate);
parcelHelpers.export(exports, "formatAuto", ()=>formatAuto);
parcelHelpers.export(exports, "formatDefault", ()=>formatDefault);
var _isoformat = require("isoformat");
var _optionsJs = require("./options.js");
var _memoizeJs = require("./memoize.js");
const numberFormat = (0, _memoizeJs.memoize1)((locale)=>{
    return new Intl.NumberFormat(locale);
});
const monthFormat = (0, _memoizeJs.memoize1)((locale, month)=>{
    return new Intl.DateTimeFormat(locale, {
        timeZone: "UTC",
        ...month && {
            month
        }
    });
});
const weekdayFormat = (0, _memoizeJs.memoize1)((locale, weekday)=>{
    return new Intl.DateTimeFormat(locale, {
        timeZone: "UTC",
        ...weekday && {
            weekday
        }
    });
});
function formatNumber(locale = "en-US") {
    const format = numberFormat(locale);
    return (i)=>i != null && !isNaN(i) ? format.format(i) : undefined;
}
function formatMonth(locale = "en-US", format = "short") {
    const fmt = monthFormat(locale, format);
    return (i)=>i != null && !isNaN(i = +new Date(Date.UTC(2000, +i))) ? fmt.format(i) : undefined;
}
function formatWeekday(locale = "en-US", format = "short") {
    const fmt = weekdayFormat(locale, format);
    return (i)=>i != null && !isNaN(i = +new Date(Date.UTC(2001, 0, +i))) ? fmt.format(i) : undefined;
}
function formatIsoDate(date) {
    return (0, _isoformat.format)(date, "Invalid Date");
}
function formatAuto(locale = "en-US") {
    const number = formatNumber(locale);
    return (v)=>(v instanceof Date ? formatIsoDate : typeof v === "number" ? number : (0, _optionsJs.string))(v);
}
const formatDefault = formatAuto();

},{"isoformat":"EsiF8","./options.js":"eJmsy","./memoize.js":"fSUNH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fSUNH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "unset", ()=>unset);
parcelHelpers.export(exports, "memoize1", ()=>memoize1);
const unset = Symbol("unset");
function memoize1(compute) {
    return (compute.length === 1 ? memoize1Arg : memoize1Args)(compute);
}
function memoize1Arg(compute) {
    let cacheValue;
    let cacheKey = unset;
    return (key)=>{
        if (!Object.is(cacheKey, key)) {
            cacheKey = key;
            cacheValue = compute(key);
        }
        return cacheValue;
    };
}
function memoize1Args(compute) {
    let cacheValue, cacheKeys;
    return (...keys)=>{
        if (cacheKeys?.length !== keys.length || cacheKeys.some((k, i)=>!Object.is(k, keys[i]))) {
            cacheKeys = keys;
            cacheValue = compute(...keys);
        }
        return cacheValue;
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aF3GL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "plot", ()=>plot);
var _d3 = require("d3");
var _channelJs = require("./channel.js");
var _contextJs = require("./context.js");
var _dimensionsJs = require("./dimensions.js");
var _facetJs = require("./facet.js");
var _pointerJs = require("./interactions/pointer.js");
var _legendsJs = require("./legends.js");
var _markJs = require("./mark.js");
var _axisJs = require("./marks/axis.js");
var _frameJs = require("./marks/frame.js");
var _tipJs = require("./marks/tip.js");
var _optionsJs = require("./options.js");
var _projectionJs = require("./projection.js");
var _scalesJs = require("./scales.js");
var _indexJs = require("./scales/index.js");
var _styleJs = require("./style.js");
var _basicJs = require("./transforms/basic.js");
var _warningsJs = require("./warnings.js");
function plot(options = {}) {
    const { facet, style, title, subtitle, caption, ariaLabel, ariaDescription } = options;
    // className for inline styles
    const className = (0, _styleJs.maybeClassName)(options.className);
    // Flatten any nested marks.
    const marks = options.marks === undefined ? [] : flatMarks(options.marks);
    // Add implicit tips.
    marks.push(...inferTips(marks));
    // Compute the top-level facet state. This has roughly the same structure as
    // mark-specific facet state, except there isn’t a facetsIndex, and there’s a
    // data and dataLength so we can warn the user if a different data of the same
    // length is used in a mark.
    const topFacetState = maybeTopFacet(facet, options);
    // Construct a map from (faceted) Mark instance to facet state, including:
    // channels - an {fx?, fy?} object to add to the fx and fy scale
    // groups - a possibly-nested map from facet values to indexes in the data array
    // facetsIndex - a sparse nested array of indices corresponding to the valid facets
    const facetStateByMark = new Map();
    for (const mark of marks){
        const facetState = maybeMarkFacet(mark, topFacetState, options);
        if (facetState) facetStateByMark.set(mark, facetState);
    }
    // Compute a Map from scale name to an array of associated channels.
    const channelsByScale = new Map();
    if (topFacetState) addScaleChannels(channelsByScale, [
        topFacetState
    ], options);
    addScaleChannels(channelsByScale, facetStateByMark, options);
    // Add implicit axis marks. Because this happens after faceting (because it
    // depends on whether faceting is present), we must initialize the facet state
    // of any implicit axes, too.
    const axes = flatMarks(inferAxes(marks, channelsByScale, options));
    for (const mark of axes){
        const facetState = maybeMarkFacet(mark, topFacetState, options);
        if (facetState) facetStateByMark.set(mark, facetState);
    }
    marks.unshift(...axes);
    // All the possible facets are given by the domains of the fx or fy scales, or
    // the cross-product of these domains if we facet by both x and y. We sort
    // them in order to apply the facet filters afterwards.
    let facets = (0, _facetJs.createFacets)(channelsByScale, options);
    if (facets !== undefined) {
        const topFacetsIndex = topFacetState ? (0, _facetJs.facetFilter)(facets, topFacetState) : undefined;
        // Compute a facet index for each mark, parallel to the facets array. For
        // mark-level facets, compute an index for that mark’s data and options.
        // Otherwise, use the top-level facet index.
        for (const mark of marks){
            if (mark.facet === null || mark.facet === "super") continue;
            const facetState = facetStateByMark.get(mark);
            if (facetState === undefined) continue;
            facetState.facetsIndex = mark.fx != null || mark.fy != null ? (0, _facetJs.facetFilter)(facets, facetState) : topFacetsIndex;
        }
        // The cross product of the domains of fx and fy can include fx-fy
        // combinations for which no mark has an instance associated with that
        // combination, and therefore we don’t want to render this facet (not even
        // the frame). The same can occur if you specify the domain of fx and fy
        // explicitly, but there is no mark instance associated with some values in
        // the domain. Expunge empty facets, and clear the corresponding elements
        // from the nested index in each mark.
        const nonEmpty = new Set();
        for (const { facetsIndex } of facetStateByMark.values())facetsIndex?.forEach((index, i)=>{
            if (index?.length > 0) nonEmpty.add(i);
        });
        // If all the facets are empty (as when none of the marks are actually
        // faceted), none of them are empty.
        facets.forEach(0 < nonEmpty.size && nonEmpty.size < facets.length ? (f, i)=>f.empty = !nonEmpty.has(i) : (f)=>f.empty = false);
        // For any mark using the “exclude” facet mode, invert the index.
        for (const mark of marks)if (mark.facet === "exclude") {
            const facetState = facetStateByMark.get(mark);
            if (facetState !== undefined) facetState.facetsIndex = (0, _facetJs.facetExclude)(facetState.facetsIndex);
        }
    }
    // If a scale is explicitly declared in options, initialize its associated
    // channels to the empty array; this will guarantee that a corresponding scale
    // will be created later (even if there are no other channels). Ignore facet
    // scale declarations, which are handled above.
    for (const key of (0, _indexJs.registry).keys())if ((0, _optionsJs.isScaleOptions)(options[key]) && key !== "fx" && key !== "fy") channelsByScale.set(key, []);
    // A Map from Mark instance to its render state, including:
    // index - the data index e.g. [0, 1, 2, 3, …]
    // channels - an array of materialized channels e.g. [["x", {value}], …]
    // faceted - a boolean indicating whether this mark is faceted
    // values - an object of scaled values e.g. {x: [40, 32, …], …}
    const stateByMark = new Map();
    // Initialize the marks’ state.
    for (const mark of marks){
        if (stateByMark.has(mark)) throw new Error("duplicate mark; each mark must be unique");
        const { facetsIndex, channels: facetChannels } = facetStateByMark.get(mark) ?? {};
        const { data, facets, channels } = mark.initialize(facetsIndex, facetChannels, options);
        applyScaleTransforms(channels, options);
        stateByMark.set(mark, {
            data,
            facets,
            channels
        });
    }
    // Initalize the scales and dimensions.
    const scaleDescriptors = (0, _scalesJs.createScales)(addScaleChannels(channelsByScale, stateByMark, options), options);
    const dimensions = (0, _dimensionsJs.createDimensions)(scaleDescriptors, marks, options);
    (0, _scalesJs.autoScaleRange)(scaleDescriptors, dimensions);
    const scales = (0, _scalesJs.createScaleFunctions)(scaleDescriptors);
    const { fx, fy } = scales;
    const subdimensions = fx || fy ? (0, _scalesJs.innerDimensions)(scaleDescriptors, dimensions) : dimensions;
    const superdimensions = fx || fy ? actualDimensions(scales, dimensions) : dimensions;
    // Initialize the context.
    const context = (0, _contextJs.createContext)(options);
    const document = context.document;
    const svg = (0, _d3.creator)("svg").call(document.documentElement);
    let figure = svg; // replaced with the figure element, if any
    context.ownerSVGElement = svg;
    context.className = className;
    context.projection = (0, _projectionJs.createProjection)(options, subdimensions);
    // Allows e.g. the axis mark to determine faceting lazily.
    context.filterFacets = (data, channels)=>{
        return (0, _facetJs.facetFilter)(facets, {
            channels,
            groups: (0, _facetJs.facetGroups)(data, channels)
        });
    };
    // Allows e.g. the tip mark to reference channels and data on other marks.
    context.getMarkState = (mark)=>{
        const state = stateByMark.get(mark);
        const facetState = facetStateByMark.get(mark);
        return {
            ...state,
            channels: {
                ...state.channels,
                ...facetState?.channels
            }
        };
    };
    // Allows e.g. the pointer transform to support viewof.
    context.dispatchValue = (value)=>{
        if (figure.value === value) return;
        figure.value = value;
        figure.dispatchEvent(new Event("input", {
            bubbles: true
        }));
    };
    // Reinitialize; for deriving channels dependent on other channels.
    const newByScale = new Set();
    for (const [mark, state] of stateByMark)if (mark.initializer != null) {
        const dimensions = mark.facet === "super" ? superdimensions : subdimensions;
        const update = mark.initializer(state.data, state.facets, state.channels, scales, dimensions, context);
        if (update.data !== undefined) state.data = update.data;
        if (update.facets !== undefined) state.facets = update.facets;
        if (update.channels !== undefined) {
            const { fx, fy, ...channels } = update.channels; // separate facet channels
            inferChannelScales(channels);
            Object.assign(state.channels, channels);
            for (const channel of Object.values(channels)){
                const { scale } = channel;
                // Initializers aren’t allowed to redefine position scales as this
                // would introduce a circular dependency; so simply scale these
                // channels as-is rather than creating new scales, and assume that
                // they already have the scale’s transform applied, if any (e.g., when
                // generating ticks for the axis mark).
                if (scale != null && !(0, _indexJs.isPosition)((0, _indexJs.registry).get(scale))) {
                    applyScaleTransform(channel, options);
                    newByScale.add(scale);
                }
            }
            // If the initializer returns new mark-level facet channels, we must
            // record that the mark is now faceted. Note: we aren’t actually
            // populating the facet state, but subsequently we won’t need it.
            if (fx != null || fy != null) facetStateByMark.set(mark, true);
        }
    }
    // Reconstruct scales if new scaled channels were created during
    // reinitialization. Preserve existing scale labels, if any.
    if (newByScale.size) {
        const newChannelsByScale = new Map();
        addScaleChannels(newChannelsByScale, stateByMark, options, (key)=>newByScale.has(key));
        addScaleChannels(channelsByScale, stateByMark, options, (key)=>newByScale.has(key));
        const newScaleDescriptors = inheritScaleLabels((0, _scalesJs.createScales)(newChannelsByScale, options), scaleDescriptors);
        const { scales: newExposedScales, ...newScales } = (0, _scalesJs.createScaleFunctions)(newScaleDescriptors);
        Object.assign(scaleDescriptors, newScaleDescriptors);
        Object.assign(scales, newScales);
        Object.assign(scales.scales, newExposedScales);
    }
    // Sort and filter the facets to match the fx and fy domains; this is needed
    // because the facets were constructed prior to the fx and fy scales.
    let facetDomains, facetTranslate;
    if (facets !== undefined) {
        facetDomains = {
            x: fx?.domain(),
            y: fy?.domain()
        };
        facets = (0, _facetJs.recreateFacets)(facets, facetDomains);
        facetTranslate = (0, _facetJs.facetTranslator)(fx, fy, dimensions);
    }
    // Compute value objects, applying scales and projection as needed.
    for (const [mark, state] of stateByMark)state.values = mark.scale(state.channels, scales, context);
    const { width, height } = dimensions;
    (0, _d3.select)(svg).attr("class", className).attr("fill", "currentColor").attr("font-family", "system-ui, sans-serif").attr("font-size", 10).attr("text-anchor", "middle").attr("width", width).attr("height", height).attr("viewBox", `0 0 ${width} ${height}`).attr("aria-label", ariaLabel).attr("aria-description", ariaDescription).call((svg)=>// Warning: if you edit this, change defaultClassName.
        svg.append("style").text(`:where(.${className}) {
  --plot-background: white;
  display: block;
  height: auto;
  height: intrinsic;
  max-width: 100%;
}
:where(.${className} text),
:where(.${className} tspan) {
  white-space: pre;
}`)).call((0, _styleJs.applyInlineStyles), style);
    // Render marks.
    for (const mark of marks){
        const { channels, values, facets: indexes } = stateByMark.get(mark);
        // Render a non-faceted mark.
        if (facets === undefined || mark.facet === "super") {
            let index = null;
            if (indexes) {
                index = indexes[0];
                index = mark.filter(index, channels, values);
                if (index.length === 0) continue;
            }
            const node = mark.render(index, scales, values, superdimensions, context);
            if (node == null) continue;
            svg.appendChild(node);
        } else {
            let g;
            for (const f of facets){
                if (!(mark.facetAnchor?.(facets, facetDomains, f) ?? !f.empty)) continue;
                let index = null;
                if (indexes) {
                    const faceted = facetStateByMark.has(mark);
                    index = indexes[faceted ? f.i : 0];
                    index = mark.filter(index, channels, values);
                    if (index.length === 0) continue;
                    if (!faceted && index === indexes[0]) index = (0, _optionsJs.subarray)(index); // copy before assigning fx, fy, fi
                    index.fx = f.x, index.fy = f.y, index.fi = f.i;
                }
                const node = mark.render(index, scales, values, subdimensions, context);
                if (node == null) continue;
                // Lazily construct the shared group (to drop empty marks).
                (g ??= (0, _d3.select)(svg).append("g")).append(()=>node).datum(f);
                // Promote ARIA attributes and mark transform to avoid repetition on
                // each facet; this assumes that these attributes are consistent across
                // facets, but that should be the case!
                for (const name of [
                    "aria-label",
                    "aria-description",
                    "aria-hidden",
                    "transform"
                ])if (node.hasAttribute(name)) {
                    g.attr(name, node.getAttribute(name));
                    node.removeAttribute(name);
                }
            }
            g?.selectChildren().attr("transform", facetTranslate);
        }
    }
    // Wrap the plot in a figure, if needed.
    const legends = (0, _legendsJs.createLegends)(scaleDescriptors, context, options);
    const { figure: figured = title != null || subtitle != null || caption != null || legends.length > 0 } = options;
    if (figured) {
        figure = document.createElement("figure");
        figure.className = `${className}-figure`;
        figure.style.maxWidth = "initial"; // avoid Observable default style
        if (title != null) figure.append(createTitleElement(document, title, "h2"));
        if (subtitle != null) figure.append(createTitleElement(document, subtitle, "h3"));
        figure.append(...legends, svg);
        if (caption != null) figure.append(createFigcaption(document, caption));
        if ("value" in svg) figure.value = svg.value, delete svg.value;
    }
    figure.scale = (0, _scalesJs.exposeScales)(scales.scales);
    figure.legend = (0, _legendsJs.exposeLegends)(scaleDescriptors, context, options);
    const w = (0, _warningsJs.consumeWarnings)();
    if (w > 0) (0, _d3.select)(svg).append("text").attr("x", width).attr("y", 20).attr("dy", "-1em").attr("text-anchor", "end").attr("font-family", "initial") // fix emoji rendering in Chrome
    .text("\u26A0\uFE0F") // emoji variation selector
    .append("title").text(`${w.toLocaleString("en-US")} warning${w === 1 ? "" : "s"}. Please check the console.`);
    return figure;
}
function createTitleElement(document, contents, tag) {
    if (contents.ownerDocument) return contents;
    const e = document.createElement(tag);
    e.append(contents);
    return e;
}
function createFigcaption(document, caption) {
    const e = document.createElement("figcaption");
    e.append(caption);
    return e;
}
function flatMarks(marks) {
    return marks.flat(Infinity).filter((mark)=>mark != null).map(markify);
}
function markify(mark) {
    return typeof mark.render === "function" ? mark : new Render(mark);
}
class Render extends (0, _markJs.Mark) {
    constructor(render){
        if (typeof render !== "function") throw new TypeError("invalid mark; missing render function");
        super();
        this.render = render;
    }
    render() {}
}
// Note: mutates channel.value to apply the scale transform, if any.
function applyScaleTransforms(channels, options) {
    for(const name in channels)applyScaleTransform(channels[name], options);
    return channels;
}
// Note: mutates channel.value to apply the scale transform, if any. Also sets
// channel.transform to false to prevent duplicate transform application.
function applyScaleTransform(channel, options) {
    const { scale, transform: t = true } = channel;
    if (scale == null || !t) return;
    const { type, percent, interval, transform = percent ? (x)=>x == null ? NaN : x * 100 : (0, _optionsJs.maybeIntervalTransform)(interval, type) } = options[scale] ?? {};
    if (transform == null) return;
    channel.value = (0, _optionsJs.map)(channel.value, transform);
    channel.transform = false;
}
// An initializer may generate channels without knowing how the downstream mark
// will use them. Marks are typically responsible associated scales with
// channels, but here we assume common behavior across marks.
function inferChannelScales(channels) {
    for(const name in channels)(0, _channelJs.inferChannelScale)(name, channels[name]);
}
function addScaleChannels(channelsByScale, stateByMark, options, filter = (0, _optionsJs.yes)) {
    for (const { channels } of stateByMark.values())for(const name in channels){
        const channel = channels[name];
        const { scale } = channel;
        if (scale != null && filter(scale)) {
            // Geo marks affect the default x and y domains if there is no
            // projection. Skip this (as an optimization) when a projection is
            // specified, or when the domains for x and y are specified.
            if (scale === "projection") {
                if (!(0, _projectionJs.hasProjection)(options)) {
                    const gx = options.x?.domain === undefined;
                    const gy = options.y?.domain === undefined;
                    if (gx || gy) {
                        const [x, y] = (0, _projectionJs.getGeometryChannels)(channel);
                        if (gx) addScaleChannel(channelsByScale, "x", x);
                        if (gy) addScaleChannel(channelsByScale, "y", y);
                    }
                }
            } else addScaleChannel(channelsByScale, scale, channel);
        }
    }
    return channelsByScale;
}
function addScaleChannel(channelsByScale, scale, channel) {
    const scaleChannels = channelsByScale.get(scale);
    if (scaleChannels !== undefined) scaleChannels.push(channel);
    else channelsByScale.set(scale, [
        channel
    ]);
}
// Returns the facet groups, and possibly fx and fy channels, associated with
// the top-level facet option {data, x, y}.
function maybeTopFacet(facet, options) {
    if (facet == null) return;
    const { x, y } = facet;
    if (x == null && y == null) return;
    const data = (0, _optionsJs.dataify)(facet.data);
    if (data == null) throw new Error("missing facet data");
    const channels = {};
    if (x != null) channels.fx = (0, _channelJs.createChannel)(data, {
        value: x,
        scale: "fx"
    });
    if (y != null) channels.fy = (0, _channelJs.createChannel)(data, {
        value: y,
        scale: "fy"
    });
    applyScaleTransforms(channels, options);
    const groups = (0, _facetJs.facetGroups)(data, channels);
    return {
        channels,
        groups,
        data: facet.data
    };
}
// Returns the facet groups, and possibly fx and fy channels, associated with a
// mark, either through top-level faceting or mark-level facet options {fx, fy}.
function maybeMarkFacet(mark, topFacetState, options) {
    if (mark.facet === null || mark.facet === "super") return;
    // This mark defines a mark-level facet. TODO There’s some code duplication
    // here with maybeTopFacet that we could reduce.
    const { fx, fy } = mark;
    if (fx != null || fy != null) {
        const data = (0, _optionsJs.dataify)(mark.data ?? fx ?? fy);
        if (data === undefined) throw new Error(`missing facet data in ${mark.ariaLabel}`);
        if (data === null) return; // ignore channel definitions if no data is provided TODO this right?
        const channels = {};
        if (fx != null) channels.fx = (0, _channelJs.createChannel)(data, {
            value: fx,
            scale: "fx"
        });
        if (fy != null) channels.fy = (0, _channelJs.createChannel)(data, {
            value: fy,
            scale: "fy"
        });
        applyScaleTransforms(channels, options);
        return {
            channels,
            groups: (0, _facetJs.facetGroups)(data, channels)
        };
    }
    // This mark links to a top-level facet, if present.
    if (topFacetState === undefined) return;
    // TODO Can we link the top-level facet channels here?
    const { channels, groups, data } = topFacetState;
    if (mark.facet !== "auto" || mark.data === data) return {
        channels,
        groups
    };
    // Warn for the common pitfall of wanting to facet mapped data with the
    // top-level facet option.
    if (data.length > 0 && (groups.size > 1 || groups.size === 1 && channels.fx && channels.fy && [
        ...groups
    ][0][1].size > 1) && (0, _optionsJs.lengthof)((0, _optionsJs.dataify)(mark.data)) === (0, _optionsJs.lengthof)(data)) (0, _warningsJs.warn)(`Warning: the ${mark.ariaLabel} mark appears to use faceted data, but isn\u{2019}t faceted. The mark data has the same length as the facet data and the mark facet option is "auto", but the mark data and facet data are distinct. If this mark should be faceted, set the mark facet option to true; otherwise, suppress this warning by setting the mark facet option to false.`);
}
function derive(mark, options = {}) {
    return (0, _basicJs.initializer)({
        ...options,
        x: null,
        y: null
    }, (data, facets, channels, scales, dimensions, context)=>{
        return context.getMarkState(mark);
    });
}
function inferTips(marks) {
    const tips = [];
    for (const mark of marks){
        let tipOptions = mark.tip;
        if (tipOptions) {
            if (tipOptions === true) tipOptions = {};
            else if (typeof tipOptions === "string") tipOptions = {
                pointer: tipOptions
            };
            let { pointer: p, preferredAnchor: a } = tipOptions;
            p = /^x$/i.test(p) ? (0, _pointerJs.pointerX) : /^y$/i.test(p) ? (0, _pointerJs.pointerY) : (0, _pointerJs.pointer); // TODO validate?
            tipOptions = p(derive(mark, tipOptions));
            tipOptions.title = null; // prevent implicit title for primitive data
            if (a === undefined) tipOptions.preferredAnchor = p === (0, _pointerJs.pointerY) ? "left" : "bottom";
            const t = (0, _tipJs.tip)(mark.data, tipOptions);
            t.facet = mark.facet; // inherit facet settings
            t.facetAnchor = mark.facetAnchor; // inherit facet settings
            tips.push(t);
        }
    }
    return tips;
}
function inferAxes(marks, channelsByScale, options) {
    let { projection, x = {}, y = {}, fx = {}, fy = {}, axis, grid, facet = {}, facet: { axis: facetAxis = axis, grid: facetGrid } = facet, x: { axis: xAxis = axis, grid: xGrid = xAxis === null ? null : grid } = x, y: { axis: yAxis = axis, grid: yGrid = yAxis === null ? null : grid } = y, fx: { axis: fxAxis = facetAxis, grid: fxGrid = fxAxis === null ? null : facetGrid } = fx, fy: { axis: fyAxis = facetAxis, grid: fyGrid = fyAxis === null ? null : facetGrid } = fy } = options;
    // Disable axes if the corresponding scale is not present.
    if (projection || !(0, _optionsJs.isScaleOptions)(x) && !hasPositionChannel("x", marks)) xAxis = xGrid = null;
    if (projection || !(0, _optionsJs.isScaleOptions)(y) && !hasPositionChannel("y", marks)) yAxis = yGrid = null;
    if (!channelsByScale.has("fx")) fxAxis = fxGrid = null;
    if (!channelsByScale.has("fy")) fyAxis = fyGrid = null;
    // Resolve the default implicit axes by checking for explicit ones.
    if (xAxis === undefined) xAxis = !hasAxis(marks, "x");
    if (yAxis === undefined) yAxis = !hasAxis(marks, "y");
    if (fxAxis === undefined) fxAxis = !hasAxis(marks, "fx");
    if (fyAxis === undefined) fyAxis = !hasAxis(marks, "fy");
    // Resolve the default orientation of axes.
    if (xAxis === true) xAxis = "bottom";
    if (yAxis === true) yAxis = "left";
    if (fxAxis === true) fxAxis = xAxis === "top" || xAxis === null ? "bottom" : "top";
    if (fyAxis === true) fyAxis = yAxis === "right" || yAxis === null ? "left" : "right";
    const axes = [];
    maybeGrid(axes, fyGrid, (0, _axisJs.gridFy), fy);
    maybeAxis(axes, fyAxis, (0, _axisJs.axisFy), "right", "left", facet, fy);
    maybeGrid(axes, fxGrid, (0, _axisJs.gridFx), fx);
    maybeAxis(axes, fxAxis, (0, _axisJs.axisFx), "top", "bottom", facet, fx);
    maybeGrid(axes, yGrid, (0, _axisJs.gridY), y);
    maybeAxis(axes, yAxis, (0, _axisJs.axisY), "left", "right", options, y);
    maybeGrid(axes, xGrid, (0, _axisJs.gridX), x);
    maybeAxis(axes, xAxis, (0, _axisJs.axisX), "bottom", "top", options, x);
    return axes;
}
function maybeAxis(axes, axis, axisType, primary, secondary, defaults, options) {
    if (!axis) return;
    const both = isBoth(axis);
    options = axisOptions(both ? primary : axis, defaults, options);
    const { line } = options;
    if ((axisType === (0, _axisJs.axisY) || axisType === (0, _axisJs.axisX)) && line && !(0, _optionsJs.isNone)(line)) axes.push((0, _frameJs.frame)(lineOptions(options)));
    axes.push(axisType(options));
    if (both) axes.push(axisType({
        ...options,
        anchor: secondary,
        label: null
    }));
}
function maybeGrid(axes, grid, gridType, options) {
    if (!grid || (0, _optionsJs.isNone)(grid)) return;
    axes.push(gridType(gridOptions(grid, options)));
}
function isBoth(value) {
    return /^\s*both\s*$/i.test(value);
}
function axisOptions(anchor, defaults, { line = defaults.line, ticks, tickSize, tickSpacing, tickPadding, tickFormat, tickRotate, fontVariant, ariaLabel, ariaDescription, label = defaults.label, labelAnchor, labelArrow = defaults.labelArrow, labelOffset }) {
    return {
        anchor,
        line,
        ticks,
        tickSize,
        tickSpacing,
        tickPadding,
        tickFormat,
        tickRotate,
        fontVariant,
        ariaLabel,
        ariaDescription,
        label,
        labelAnchor,
        labelArrow,
        labelOffset
    };
}
function lineOptions(options) {
    const { anchor, line } = options;
    return {
        anchor,
        facetAnchor: anchor + "-empty",
        stroke: line === true ? undefined : line
    };
}
function gridOptions(grid, { stroke = (0, _optionsJs.isColor)(grid) ? grid : undefined, ticks = isGridTicks(grid) ? grid : undefined, tickSpacing, ariaLabel, ariaDescription }) {
    return {
        stroke,
        ticks,
        tickSpacing,
        ariaLabel,
        ariaDescription
    };
}
function isGridTicks(grid) {
    switch(typeof grid){
        case "number":
            return true;
        case "string":
            return !(0, _optionsJs.isColor)(grid);
    }
    return (0, _optionsJs.isIterable)(grid) || typeof grid?.range === "function";
}
// Is there an explicit axis already present? TODO We probably want a more
// explicit test than looking for the ARIA label, but it does afford some
// flexibility in axis implementation which is nice.
function hasAxis(marks, k) {
    const prefix = `${k}-axis `;
    return marks.some((m)=>m.ariaLabel?.startsWith(prefix));
}
function hasPositionChannel(k, marks) {
    for (const mark of marks)for(const key in mark.channels){
        const { scale } = mark.channels[key];
        if (scale === k || scale === "projection") return true;
    }
    return false;
}
function inheritScaleLabels(newScales, scales) {
    for(const key in newScales){
        const newScale = newScales[key];
        const scale = scales[key];
        if (newScale.label === undefined && scale) newScale.label = scale.label;
    }
    return newScales;
}
// This differs from the other outerDimensions in that it accounts for rounding
// and outer padding in the facet scales; we want the frame to align exactly
// with the actual range, not the desired range.
function actualDimensions({ fx, fy }, dimensions) {
    const { marginTop, marginRight, marginBottom, marginLeft, width, height } = (0, _scalesJs.outerDimensions)(dimensions);
    const fxr = fx && outerRange(fx);
    const fyr = fy && outerRange(fy);
    return {
        marginTop: fy ? fyr[0] : marginTop,
        marginRight: fx ? width - fxr[1] : marginRight,
        marginBottom: fy ? height - fyr[1] : marginBottom,
        marginLeft: fx ? fxr[0] : marginLeft,
        // Some marks, namely the x- and y-axis labels, want to know what the
        // desired (rather than actual) margins are for positioning.
        inset: {
            marginTop: dimensions.marginTop,
            marginRight: dimensions.marginRight,
            marginBottom: dimensions.marginBottom,
            marginLeft: dimensions.marginLeft
        },
        width,
        height
    };
}
function outerRange(scale) {
    const domain = scale.domain();
    if (domain.length === 0) return [
        0,
        scale.bandwidth()
    ];
    let x1 = scale(domain[0]);
    let x2 = scale(domain[domain.length - 1]);
    if (x2 < x1) [x1, x2] = [
        x2,
        x1
    ];
    return [
        x1,
        x2 + scale.bandwidth()
    ];
}

},{"d3":"17XFv","./channel.js":"h3rWV","./context.js":"kyLYX","./dimensions.js":"49k1r","./facet.js":"4CBrW","./interactions/pointer.js":"erI4H","./legends.js":"itQTv","./mark.js":"a4RyP","./marks/axis.js":"jKxJZ","./marks/frame.js":"jiFE1","./marks/tip.js":"c2zhy","./options.js":"eJmsy","./projection.js":"eTnHA","./scales.js":"cZh8W","./scales/index.js":"kiF55","./style.js":"c9bmo","./transforms/basic.js":"hU2qc","./warnings.js":"hBaa6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"49k1r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createDimensions", ()=>createDimensions);
var _d3 = require("d3");
var _projectionJs = require("./projection.js");
var _scalesJs = require("./scales.js");
var _styleJs = require("./style.js");
function createDimensions(scales, marks, options = {}) {
    // Compute the default margins: the maximum of the marks’ margins. While not
    // always used, they may be needed to compute the default height of the plot.
    let marginTopDefault = 0.5 - (0, _styleJs.offset), marginRightDefault = 0.5 + (0, _styleJs.offset), marginBottomDefault = 0.5 + (0, _styleJs.offset), marginLeftDefault = 0.5 - (0, _styleJs.offset);
    for (const { marginTop, marginRight, marginBottom, marginLeft } of marks){
        if (marginTop > marginTopDefault) marginTopDefault = marginTop;
        if (marginRight > marginRightDefault) marginRightDefault = marginRight;
        if (marginBottom > marginBottomDefault) marginBottomDefault = marginBottom;
        if (marginLeft > marginLeftDefault) marginLeftDefault = marginLeft;
    }
    // Compute the actual margins. The order of precedence is: the side-specific
    // margin options, then the global margin option, then the defaults.
    let { margin, marginTop = margin !== undefined ? margin : marginTopDefault, marginRight = margin !== undefined ? margin : marginRightDefault, marginBottom = margin !== undefined ? margin : marginBottomDefault, marginLeft = margin !== undefined ? margin : marginLeftDefault } = options;
    // Coerce the margin options to numbers.
    marginTop = +marginTop;
    marginRight = +marginRight;
    marginBottom = +marginBottom;
    marginLeft = +marginLeft;
    // Compute the outer dimensions of the plot. If the top and bottom margins are
    // specified explicitly, adjust the automatic height accordingly.
    let { width = 640, height = autoHeight(scales, options, {
        width,
        marginTopDefault,
        marginRightDefault,
        marginBottomDefault,
        marginLeftDefault
    }) + Math.max(0, marginTop - marginTopDefault + marginBottom - marginBottomDefault) } = options;
    // Coerce the width and height.
    width = +width;
    height = +height;
    const dimensions = {
        width,
        height,
        marginTop,
        marginRight,
        marginBottom,
        marginLeft
    };
    // Compute the facet margins.
    if (scales.fx || scales.fy) {
        let { margin: facetMargin, marginTop: facetMarginTop = facetMargin !== undefined ? facetMargin : marginTop, marginRight: facetMarginRight = facetMargin !== undefined ? facetMargin : marginRight, marginBottom: facetMarginBottom = facetMargin !== undefined ? facetMargin : marginBottom, marginLeft: facetMarginLeft = facetMargin !== undefined ? facetMargin : marginLeft } = options.facet ?? {};
        // Coerce the facet margin options to numbers.
        facetMarginTop = +facetMarginTop;
        facetMarginRight = +facetMarginRight;
        facetMarginBottom = +facetMarginBottom;
        facetMarginLeft = +facetMarginLeft;
        dimensions.facet = {
            marginTop: facetMarginTop,
            marginRight: facetMarginRight,
            marginBottom: facetMarginBottom,
            marginLeft: facetMarginLeft
        };
    }
    return dimensions;
}
function autoHeight({ x, y, fy, fx }, { projection, aspectRatio }, { width, marginTopDefault, marginRightDefault, marginBottomDefault, marginLeftDefault }) {
    const nfy = fy ? fy.scale.domain().length || 1 : 1;
    // If a projection is specified, compute an aspect ratio based on the domain,
    // defaulting to the projection’s natural aspect ratio (if known).
    const ar = (0, _projectionJs.projectionAspectRatio)(projection);
    if (ar) {
        const nfx = fx ? fx.scale.domain().length : 1;
        const far = (1.1 * nfy - 0.1) / (1.1 * nfx - 0.1) * ar; // 0.1 is default facet padding
        const lar = Math.max(0.1, Math.min(10, far)); // clamp the aspect ratio to a “reasonable” value
        return Math.round((width - marginLeftDefault - marginRightDefault) * lar + marginTopDefault + marginBottomDefault);
    }
    const ny = y ? (0, _scalesJs.isOrdinalScale)(y) ? y.scale.domain().length || 1 : Math.max(7, 17 / nfy) : 1;
    // If a desired aspect ratio is given, compute a default height to match.
    if (aspectRatio != null) {
        aspectRatio = +aspectRatio;
        if (!(isFinite(aspectRatio) && aspectRatio > 0)) throw new Error(`invalid aspectRatio: ${aspectRatio}`);
        const ratio = aspectRatioLength("y", y) / (aspectRatioLength("x", x) * aspectRatio);
        const fxb = fx ? fx.scale.bandwidth() : 1;
        const fyb = fy ? fy.scale.bandwidth() : 1;
        const w = fxb * (width - marginLeftDefault - marginRightDefault) - x.insetLeft - x.insetRight;
        return (ratio * w + y.insetTop + y.insetBottom) / fyb + marginTopDefault + marginBottomDefault;
    }
    return !!(y || fy) * Math.max(1, Math.min(60, ny * nfy)) * 20 + !!fx * 30 + 60;
}
function aspectRatioLength(k, scale) {
    if (!scale) throw new Error(`aspectRatio requires ${k} scale`);
    const { type, domain } = scale;
    let transform;
    switch(type){
        case "linear":
        case "utc":
        case "time":
            transform = Number;
            break;
        case "pow":
            {
                const exponent = scale.scale.exponent();
                transform = (x)=>Math.pow(x, exponent);
                break;
            }
        case "log":
            transform = Math.log;
            break;
        case "point":
        case "band":
            return domain.length;
        default:
            throw new Error(`unsupported ${k} scale for aspectRatio: ${type}`);
    }
    const [min, max] = (0, _d3.extent)(domain);
    return Math.abs(transform(max) - transform(min));
}

},{"d3":"17XFv","./projection.js":"eTnHA","./scales.js":"cZh8W","./style.js":"c9bmo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"erI4H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "pointer", ()=>pointer);
parcelHelpers.export(exports, "pointerX", ()=>pointerX);
parcelHelpers.export(exports, "pointerY", ()=>pointerY);
parcelHelpers.export(exports, "anchorX", ()=>anchorX);
parcelHelpers.export(exports, "anchorY", ()=>anchorY);
var _d3 = require("d3");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _styleJs = require("../style.js");
const states = new WeakMap();
function pointerK(kx, ky, { x, y, px, py, maxRadius = 40, channels, render, ...options } = {}) {
    maxRadius = +maxRadius;
    // When px or py is used, register an extra channel that the pointer
    // interaction can use to control which point is focused; this allows pointing
    // to function independently of where the downstream mark (e.g., a tip) is
    // displayed. Also default x or y to null to disable maybeTuple etc.
    if (px != null) x ??= null, channels = {
        ...channels,
        px: {
            value: px,
            scale: "x"
        }
    };
    if (py != null) y ??= null, channels = {
        ...channels,
        py: {
            value: py,
            scale: "y"
        }
    };
    return {
        x,
        y,
        channels,
        ...options,
        // Unlike other composed transforms, the render transform must be the
        // outermost render function because it will re-render dynamically in
        // response to pointer events.
        render: (0, _markJs.composeRender)(function(index, scales, values, dimensions, context, next) {
            context = {
                ...context,
                pointerSticky: false
            };
            const svg = context.ownerSVGElement;
            const { data } = context.getMarkState(this);
            // Isolate state per-pointer, per-plot; if the pointer is reused by
            // multiple marks, they will share the same state (e.g., sticky modality).
            let state = states.get(svg);
            if (!state) states.set(svg, state = {
                sticky: false,
                roots: [],
                renders: []
            });
            // This serves as a unique identifier of the rendered mark per-plot; it is
            // used to record the currently-rendered elements (state.roots) so that we
            // can tell when a rendered element is clicked on.
            let renderIndex = state.renders.push(render) - 1;
            // For faceting, we want to compute the local coordinates of each point,
            // which means subtracting out the facet translation, if any. (It’s
            // tempting to do this using the local coordinates in SVG, but that’s
            // complicated by mark-specific transforms such as dx and dy.) Also, since
            // band scales return the upper bound of the band, we have to offset by
            // half the bandwidth.
            const { x, y, fx, fy } = scales;
            let tx = fx ? fx(index.fx) - dimensions.marginLeft : 0;
            let ty = fy ? fy(index.fy) - dimensions.marginTop : 0;
            if (x?.bandwidth) tx += x.bandwidth() / 2;
            if (y?.bandwidth) ty += y.bandwidth() / 2;
            // For faceting, we also need to record the closest point per facet per
            // mark (!), since each facet has its own pointer event listeners; we only
            // want the closest point across facets to be visible.
            const faceted = index.fi != null;
            let facetState;
            if (faceted) {
                let facetStates = state.facetStates;
                if (!facetStates) state.facetStates = facetStates = new Map();
                facetState = facetStates.get(this);
                if (!facetState) facetStates.set(this, facetState = new Map());
            }
            // The order of precedence for the pointer position is: px & py; the
            // middle of x1 & y1 and x2 & y2; or x1 & y1 (e.g., area); or lastly x &
            // y. If a dimension is unspecified, the frame anchor is used.
            const [cx, cy] = (0, _styleJs.applyFrameAnchor)(this, dimensions);
            const { px: PX, py: PY } = values;
            const px = PX ? (i)=>PX[i] : anchorX(values, cx);
            const py = PY ? (i)=>PY[i] : anchorY(values, cy);
            let i; // currently focused index
            let g; // currently rendered mark
            let s; // currently rendered stickiness
            let f; // current animation frame
            // When faceting, if more than one pointer would be visible, only show
            // this one if it is the closest. We defer rendering using an animation
            // frame to allow all pointer events to be received before deciding which
            // mark to render; although when hiding, we render immediately.
            function update(ii, ri) {
                if (faceted) {
                    if (f) f = cancelAnimationFrame(f);
                    if (ii == null) facetState.delete(index.fi);
                    else {
                        facetState.set(index.fi, ri);
                        f = requestAnimationFrame(()=>{
                            f = null;
                            for (const [fi, r] of facetState)if (r < ri || r === ri && fi < index.fi) {
                                ii = null;
                                break;
                            }
                            render(ii);
                        });
                        return;
                    }
                }
                render(ii);
            }
            function render(ii) {
                if (i === ii && s === state.sticky) return; // the tooltip hasn’t moved
                i = ii;
                s = context.pointerSticky = state.sticky;
                const I = i == null ? [] : [
                    i
                ];
                if (faceted) I.fx = index.fx, I.fy = index.fy, I.fi = index.fi;
                const r = next(I, scales, values, dimensions, context);
                if (g) {
                    // When faceting, preserve swapped mark and facet transforms; also
                    // remove ARIA attributes since these are promoted to the parent. This
                    // is perhaps brittle in that it depends on how Plot renders facets,
                    // but it produces a cleaner and more accessible SVG structure.
                    if (faceted) {
                        const p = g.parentNode;
                        const ft = g.getAttribute("transform");
                        const mt = r.getAttribute("transform");
                        ft ? r.setAttribute("transform", ft) : r.removeAttribute("transform");
                        mt ? p.setAttribute("transform", mt) : p.removeAttribute("transform");
                        r.removeAttribute("aria-label");
                        r.removeAttribute("aria-description");
                        r.removeAttribute("aria-hidden");
                    }
                    g.replaceWith(r);
                }
                state.roots[renderIndex] = g = r;
                // Dispatch the value. When simultaneously exiting this facet and
                // entering a new one, prioritize the entering facet.
                if (!(i == null && facetState?.size > 1)) {
                    const value = i == null ? null : (0, _optionsJs.isArray)(data) ? data[i] : data.get(i);
                    context.dispatchValue(value);
                }
                return r;
            }
            // Select the closest point to the mouse in the current facet; for
            // pointerX or pointerY, the orthogonal component of the distance is
            // squashed, selecting primarily on the dominant dimension. Across facets,
            // use unsquashed distance to determine the winner.
            function pointermove(event) {
                if (state.sticky || event.pointerType === "mouse" && event.buttons === 1) return; // dragging
                let [xp, yp] = (0, _d3.pointer)(event);
                xp -= tx, yp -= ty; // correct for facets and band scales
                const kpx = xp < dimensions.marginLeft || xp > dimensions.width - dimensions.marginRight ? 1 : kx;
                const kpy = yp < dimensions.marginTop || yp > dimensions.height - dimensions.marginBottom ? 1 : ky;
                let ii = null;
                let ri = maxRadius * maxRadius;
                for (const j of index){
                    const dx = kpx * (px(j) - xp);
                    const dy = kpy * (py(j) - yp);
                    const rj = dx * dx + dy * dy;
                    if (rj <= ri) ii = j, ri = rj;
                }
                if (ii != null && (kx !== 1 || ky !== 1)) {
                    const dx = px(ii) - xp;
                    const dy = py(ii) - yp;
                    ri = dx * dx + dy * dy;
                }
                update(ii, ri);
            }
            function pointerdown(event) {
                if (event.pointerType !== "mouse") return;
                if (i == null) return; // not pointing
                if (state.sticky && state.roots.some((r)=>r?.contains(event.target))) return; // stay sticky
                if (state.sticky) state.sticky = false, state.renders.forEach((r)=>r(null)); // clear all pointers
                else state.sticky = true, render(i);
                event.stopImmediatePropagation(); // suppress other pointers
            }
            function pointerleave(event) {
                if (event.pointerType !== "mouse") return;
                if (!state.sticky) update(null);
            }
            // We listen to the svg element; listening to the window instead would let
            // us receive pointer events from farther away, but would also make it
            // hard to know when to remove the listeners. (Using a mutation observer
            // to watch the entire document is likely too expensive.)
            svg.addEventListener("pointerenter", pointermove);
            svg.addEventListener("pointermove", pointermove);
            svg.addEventListener("pointerdown", pointerdown);
            svg.addEventListener("pointerleave", pointerleave);
            return render(null);
        }, render)
    };
}
function pointer(options) {
    return pointerK(1, 1, options);
}
function pointerX(options) {
    return pointerK(1, 0.01, options);
}
function pointerY(options) {
    return pointerK(0.01, 1, options);
}
function anchorX({ x1: X1, x2: X2, x: X = X1 }, cx) {
    return X1 && X2 ? (i)=>(X1[i] + X2[i]) / 2 : X ? (i)=>X[i] : ()=>cx;
}
function anchorY({ y1: Y1, y2: Y2, y: Y = Y1 }, cy) {
    return Y1 && Y2 ? (i)=>(Y1[i] + Y2[i]) / 2 : Y ? (i)=>Y[i] : ()=>cy;
}

},{"d3":"17XFv","../mark.js":"a4RyP","../options.js":"eJmsy","../style.js":"c9bmo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"itQTv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "legend", ()=>legend);
parcelHelpers.export(exports, "exposeLegends", ()=>exposeLegends);
parcelHelpers.export(exports, "createLegends", ()=>createLegends);
var _d3 = require("d3");
var _contextJs = require("./context.js");
var _rampJs = require("./legends/ramp.js");
var _swatchesJs = require("./legends/swatches.js");
var _optionsJs = require("./options.js");
var _scalesJs = require("./scales.js");
const legendRegistry = new Map([
    [
        "symbol",
        (0, _swatchesJs.legendSymbols)
    ],
    [
        "color",
        legendColor
    ],
    [
        "opacity",
        legendOpacity
    ]
]);
function legend(options = {}) {
    for (const [key, value] of legendRegistry){
        const scale = options[key];
        if ((0, _optionsJs.isScaleOptions)(scale)) {
            // e.g., ignore {color: "red"}
            const context = (0, _contextJs.createContext)(options);
            let hint;
            // For symbol legends, pass a hint to the symbol scale.
            if (key === "symbol") {
                const { fill, stroke = fill === undefined && (0, _optionsJs.isScaleOptions)(options.color) ? "color" : undefined } = options;
                hint = {
                    fill,
                    stroke
                };
            }
            return value((0, _scalesJs.normalizeScale)(key, scale, hint), legendOptions(context, scale, options), (key)=>(0, _optionsJs.isScaleOptions)(options[key]) ? (0, _scalesJs.normalizeScale)(key, options[key]) : null);
        }
    }
    throw new Error("unknown legend type; no scale found");
}
function exposeLegends(scales, context, defaults = {}) {
    return (key, options)=>{
        if (!legendRegistry.has(key)) throw new Error(`unknown legend type: ${key}`);
        if (!(key in scales)) return;
        return legendRegistry.get(key)(scales[key], legendOptions(context, defaults[key], options), (key)=>scales[key]);
    };
}
function legendOptions({ className, ...context }, { label, ticks, tickFormat } = {}, options) {
    return (0, _optionsJs.inherit)(options, {
        className,
        ...context
    }, {
        label,
        ticks,
        tickFormat
    });
}
function legendColor(color, { legend = true, ...options }) {
    if (legend === true) legend = color.type === "ordinal" ? "swatches" : "ramp";
    if (color.domain === undefined) return; // no identity legend
    switch(`${legend}`.toLowerCase()){
        case "swatches":
            return (0, _swatchesJs.legendSwatches)(color, options);
        case "ramp":
            return (0, _rampJs.legendRamp)(color, options);
        default:
            throw new Error(`unknown legend type: ${legend}`);
    }
}
function legendOpacity({ type, interpolate, ...scale }, { legend = true, color = (0, _d3.rgb)(0, 0, 0), ...options }) {
    if (!interpolate) throw new Error(`${type} opacity scales are not supported`);
    if (legend === true) legend = "ramp";
    if (`${legend}`.toLowerCase() !== "ramp") throw new Error(`${legend} opacity legends are not supported`);
    return legendColor({
        type,
        ...scale,
        interpolate: interpolateOpacity(color)
    }, {
        legend,
        ...options
    });
}
function interpolateOpacity(color) {
    const { r, g, b } = (0, _d3.rgb)(color) || (0, _d3.rgb)(0, 0, 0); // treat invalid color as black
    return (t)=>`rgba(${r},${g},${b},${t})`;
}
function createLegends(scales, context, options) {
    const legends = [];
    for (const [key, value] of legendRegistry){
        const o = options[key];
        if (o?.legend && key in scales) {
            const legend = value(scales[key], legendOptions(context, scales[key], o), (key)=>scales[key]);
            if (legend != null) legends.push(legend);
        }
    }
    return legends;
}

},{"d3":"17XFv","./context.js":"kyLYX","./legends/ramp.js":"j99ko","./legends/swatches.js":"6S2xP","./options.js":"eJmsy","./scales.js":"cZh8W","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j99ko":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "legendRamp", ()=>legendRamp);
var _d3 = require("d3");
var _axesJs = require("../axes.js");
var _contextJs = require("../context.js");
var _optionsJs = require("../options.js");
var _quantitativeJs = require("../scales/quantitative.js");
var _styleJs = require("../style.js");
function legendRamp(color, options) {
    let { label = color.label, tickSize = 6, width = 240, height = 44 + tickSize, marginTop = 18, marginRight = 0, marginBottom = 16 + tickSize, marginLeft = 0, style, ticks = (width - marginLeft - marginRight) / 64, tickFormat, fontVariant = (0, _axesJs.inferFontVariant)(color), round = true, opacity, className } = options;
    const context = (0, _contextJs.createContext)(options);
    className = (0, _styleJs.maybeClassName)(className);
    opacity = (0, _optionsJs.maybeNumberChannel)(opacity)[1];
    if (tickFormat === null) tickFormat = ()=>null;
    const svg = (0, _contextJs.create)("svg", context).attr("class", `${className}-ramp`).attr("font-family", "system-ui, sans-serif").attr("font-size", 10).attr("width", width).attr("height", height).attr("viewBox", `0 0 ${width} ${height}`).call((svg)=>// Warning: if you edit this, change defaultClassName.
        svg.append("style").text(`:where(.${className}-ramp) {
  display: block;
  height: auto;
  height: intrinsic;
  max-width: 100%;
  overflow: visible;
}
:where(.${className}-ramp text) {
  white-space: pre;
}`)).call((0, _styleJs.applyInlineStyles), style);
    let tickAdjust = (g)=>g.selectAll(".tick line").attr("y1", marginTop + marginBottom - height);
    let x;
    // Some D3 scales use scale.interpolate, some scale.interpolator, and some
    // scale.round; this normalizes the API so it works with all scale types.
    const applyRange = round ? (x, range)=>x.rangeRound(range) : (x, range)=>x.range(range);
    const { type, domain, range, interpolate, scale, pivot } = color;
    // Continuous
    if (interpolate) {
        // Often interpolate is a “fixed” interpolator on the [0, 1] interval, as
        // with a built-in color scheme, but sometimes it is a function that takes
        // two arguments and is used in conjunction with the range.
        const interpolator = range === undefined ? interpolate : (0, _d3.piecewise)(interpolate.length === 1 ? (0, _quantitativeJs.interpolatePiecewise)(interpolate) : interpolate, range);
        // Construct a D3 scale of the same type, but with a range that evenly
        // divides the horizontal extent of the legend. (In the common case, the
        // domain.length is two, and so the range is simply the extent.) For a
        // diverging scale, we need an extra point in the range for the pivot such
        // that the pivot is always drawn in the middle.
        x = applyRange(scale.copy(), (0, _d3.quantize)((0, _d3.interpolateNumber)(marginLeft, width - marginRight), Math.min(domain.length + (pivot !== undefined), range === undefined ? Infinity : range.length)));
        // Construct a 256×1 canvas, filling each pixel using the interpolator.
        const n = 256;
        const canvas = context.document.createElement("canvas");
        canvas.width = n;
        canvas.height = 1;
        const context2 = canvas.getContext("2d");
        for(let i = 0, j = n - 1; i < n; ++i){
            context2.fillStyle = interpolator(i / j);
            context2.fillRect(i, 0, 1, 1);
        }
        svg.append("image").attr("opacity", opacity).attr("x", marginLeft).attr("y", marginTop).attr("width", width - marginLeft - marginRight).attr("height", height - marginTop - marginBottom).attr("preserveAspectRatio", "none").attr("xlink:href", canvas.toDataURL());
    } else if (type === "threshold") {
        const thresholds = domain;
        const thresholdFormat = tickFormat === undefined ? (d)=>d : typeof tickFormat === "string" ? (0, _d3.format)(tickFormat) : tickFormat;
        // Construct a linear scale with evenly-spaced ticks for each of the
        // thresholds; the domain extends one beyond the threshold extent.
        x = applyRange((0, _d3.scaleLinear)().domain([
            -1,
            range.length - 1
        ]), [
            marginLeft,
            width - marginRight
        ]);
        svg.append("g").attr("fill-opacity", opacity).selectAll().data(range).enter().append("rect").attr("x", (d, i)=>x(i - 1)).attr("y", marginTop).attr("width", (d, i)=>x(i) - x(i - 1)).attr("height", height - marginTop - marginBottom).attr("fill", (d)=>d);
        ticks = (0, _optionsJs.map)(thresholds, (_, i)=>i);
        tickFormat = (i)=>thresholdFormat(thresholds[i], i);
    } else {
        x = applyRange((0, _d3.scaleBand)().domain(domain), [
            marginLeft,
            width - marginRight
        ]);
        svg.append("g").attr("fill-opacity", opacity).selectAll().data(domain).enter().append("rect").attr("x", x).attr("y", marginTop).attr("width", Math.max(0, x.bandwidth() - 1)).attr("height", height - marginTop - marginBottom).attr("fill", scale);
        tickAdjust = ()=>{};
    }
    svg.append("g").attr("transform", `translate(0,${height - marginBottom})`).call((0, _d3.axisBottom)(x).ticks(Array.isArray(ticks) ? null : ticks, typeof tickFormat === "string" ? tickFormat : undefined).tickFormat(typeof tickFormat === "function" ? tickFormat : undefined).tickSize(tickSize).tickValues(Array.isArray(ticks) ? ticks : null)).attr("font-size", null).attr("font-family", null).attr("font-variant", (0, _styleJs.impliedString)(fontVariant, "normal")).call(tickAdjust).call((g)=>g.select(".domain").remove());
    if (label !== undefined) svg.append("text").attr("x", marginLeft).attr("y", marginTop - 6).attr("fill", "currentColor") // TODO move to stylesheet?
    .attr("font-weight", "bold").text(label);
    return svg.node();
}

},{"d3":"17XFv","../axes.js":"8HClP","../context.js":"kyLYX","../options.js":"eJmsy","../scales/quantitative.js":"duaCH","../style.js":"c9bmo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8HClP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "inferFontVariant", ()=>inferFontVariant);
var _scalesJs = require("./scales.js");
function inferFontVariant(scale) {
    return (0, _scalesJs.isOrdinalScale)(scale) && scale.interval === undefined ? undefined : "tabular-nums";
}

},{"./scales.js":"cZh8W","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6S2xP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "legendSwatches", ()=>legendSwatches);
parcelHelpers.export(exports, "legendSymbols", ()=>legendSymbols);
var _d3 = require("d3");
var _axesJs = require("../axes.js");
var _contextJs = require("../context.js");
var _optionsJs = require("../options.js");
var _scalesJs = require("../scales.js");
var _styleJs = require("../style.js");
var _axisJs = require("../marks/axis.js");
function maybeScale(scale, key) {
    if (key == null) return key;
    const s = scale(key);
    if (!s) throw new Error(`scale not found: ${key}`);
    return s;
}
function legendSwatches(color, { opacity, ...options } = {}) {
    if (!(0, _scalesJs.isOrdinalScale)(color) && !(0, _scalesJs.isThresholdScale)(color)) throw new Error(`swatches legend requires ordinal or threshold color scale (not ${color.type})`);
    return legendItems(color, options, (selection, scale, width, height)=>selection.append("svg").attr("width", width).attr("height", height).attr("fill", scale.scale).attr("fill-opacity", (0, _optionsJs.maybeNumberChannel)(opacity)[1]).append("rect").attr("width", "100%").attr("height", "100%"));
}
function legendSymbols(symbol, { fill = symbol.hint?.fill !== undefined ? symbol.hint.fill : "none", fillOpacity = 1, stroke = symbol.hint?.stroke !== undefined ? symbol.hint.stroke : (0, _optionsJs.isNoneish)(fill) ? "currentColor" : "none", strokeOpacity = 1, strokeWidth = 1.5, r = 4.5, ...options } = {}, scale) {
    const [vf, cf] = (0, _optionsJs.maybeColorChannel)(fill);
    const [vs, cs] = (0, _optionsJs.maybeColorChannel)(stroke);
    const sf = maybeScale(scale, vf);
    const ss = maybeScale(scale, vs);
    const size = r * r * Math.PI;
    fillOpacity = (0, _optionsJs.maybeNumberChannel)(fillOpacity)[1];
    strokeOpacity = (0, _optionsJs.maybeNumberChannel)(strokeOpacity)[1];
    strokeWidth = (0, _optionsJs.maybeNumberChannel)(strokeWidth)[1];
    return legendItems(symbol, options, (selection, scale, width, height)=>selection.append("svg").attr("viewBox", "-8 -8 16 16").attr("width", width).attr("height", height).attr("fill", vf === "color" ? (d)=>sf.scale(d) : cf).attr("fill-opacity", fillOpacity).attr("stroke", vs === "color" ? (d)=>ss.scale(d) : cs).attr("stroke-opacity", strokeOpacity).attr("stroke-width", strokeWidth).append("path").attr("d", (d)=>{
            const p = (0, _d3.pathRound)();
            symbol.scale(d).draw(p, size);
            return p;
        }));
}
function legendItems(scale, options = {}, swatch) {
    let { columns, tickFormat, fontVariant = (0, _axesJs.inferFontVariant)(scale), // TODO label,
    swatchSize = 15, swatchWidth = swatchSize, swatchHeight = swatchSize, marginLeft = 0, className, style, width } = options;
    const context = (0, _contextJs.createContext)(options);
    className = (0, _styleJs.maybeClassName)(className);
    tickFormat = (0, _axisJs.inferTickFormat)(scale.scale, scale.domain, undefined, tickFormat);
    const swatches = (0, _contextJs.create)("div", context).attr("class", `${className}-swatches ${className}-swatches-${columns != null ? "columns" : "wrap"}`);
    let extraStyle;
    if (columns != null) {
        extraStyle = `:where(.${className}-swatches-columns .${className}-swatch) {
  display: flex;
  align-items: center;
  break-inside: avoid;
  padding-bottom: 1px;
}
:where(.${className}-swatches-columns .${className}-swatch::before) {
  flex-shrink: 0;
}
:where(.${className}-swatches-columns .${className}-swatch-label) {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}`;
        swatches.style("columns", columns).selectAll().data(scale.domain).enter().append("div").attr("class", `${className}-swatch`).call(swatch, scale, swatchWidth, swatchHeight).call((item)=>item.append("div").attr("class", `${className}-swatch-label`).attr("title", tickFormat).text(tickFormat));
    } else {
        extraStyle = `:where(.${className}-swatches-wrap) {
  display: flex;
  align-items: center;
  min-height: 33px;
  flex-wrap: wrap;
}
:where(.${className}-swatches-wrap .${className}-swatch) {
  display: inline-flex;
  align-items: center;
  margin-right: 1em;
}`;
        swatches.selectAll().data(scale.domain).enter().append("span").attr("class", `${className}-swatch`).call(swatch, scale, swatchWidth, swatchHeight).append(function() {
            return this.ownerDocument.createTextNode(tickFormat.apply(this, arguments));
        });
    }
    return swatches.call((div)=>div.insert("style", "*").text(`:where(.${className}-swatches) {
  font-family: system-ui, sans-serif;
  font-size: 10px;
  margin-bottom: 0.5em;
}
:where(.${className}-swatch > svg) {
  margin-right: 0.5em;
  overflow: visible;
}
${extraStyle}`)).style("margin-left", marginLeft ? `${+marginLeft}px` : null).style("width", width === undefined ? null : `${+width}px`).style("font-variant", (0, _styleJs.impliedString)(fontVariant, "normal")).call((0, _styleJs.applyInlineStyles), style).node();
}

},{"d3":"17XFv","../axes.js":"8HClP","../context.js":"kyLYX","../options.js":"eJmsy","../scales.js":"cZh8W","../style.js":"c9bmo","../marks/axis.js":"jKxJZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jKxJZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "axisY", ()=>axisY);
parcelHelpers.export(exports, "axisFy", ()=>axisFy);
parcelHelpers.export(exports, "axisX", ()=>axisX);
parcelHelpers.export(exports, "axisFx", ()=>axisFx);
parcelHelpers.export(exports, "gridY", ()=>gridY);
parcelHelpers.export(exports, "gridFy", ()=>gridFy);
parcelHelpers.export(exports, "gridX", ()=>gridX);
parcelHelpers.export(exports, "gridFx", ()=>gridFx);
// D3’s ordinal scales simply use toString by default, but if the ordinal scale
// domain (or ticks) are numbers or dates (say because we’re applying a time
// interval to the ordinal scale), we want Plot’s default formatter. And for
// time ticks, we want to use the multi-line time format (e.g., Jan 26) if
// possible, or the default ISO format (2014-01-26). TODO We need a better way
// to infer whether the ordinal scale is UTC or local time.
parcelHelpers.export(exports, "inferTickFormat", ()=>inferTickFormat);
var _d3 = require("d3");
var _formatJs = require("../format.js");
var _markJs = require("../mark.js");
var _mathJs = require("../math.js");
var _optionsJs = require("../options.js");
var _scalesJs = require("../scales.js");
var _styleJs = require("../style.js");
var _timeJs = require("../time.js");
var _basicJs = require("../transforms/basic.js");
var _warningsJs = require("../warnings.js");
var _ruleJs = require("./rule.js");
var _textJs = require("./text.js");
var _vectorJs = require("./vector.js");
function maybeData(data, options) {
    if (arguments.length < 2 && !(0, _optionsJs.isIterable)(data)) options = data, data = null;
    if (options === undefined) options = {};
    return [
        data,
        options
    ];
}
function maybeAnchor({ anchor } = {}, anchors) {
    return anchor === undefined ? anchors[0] : (0, _optionsJs.keyword)(anchor, "anchor", anchors);
}
function anchorY(options) {
    return maybeAnchor(options, [
        "left",
        "right"
    ]);
}
function anchorFy(options) {
    return maybeAnchor(options, [
        "right",
        "left"
    ]);
}
function anchorX(options) {
    return maybeAnchor(options, [
        "bottom",
        "top"
    ]);
}
function anchorFx(options) {
    return maybeAnchor(options, [
        "top",
        "bottom"
    ]);
}
function axisY() {
    const [data, options] = maybeData(...arguments);
    return axisKy("y", anchorY(options), data, options);
}
function axisFy() {
    const [data, options] = maybeData(...arguments);
    return axisKy("fy", anchorFy(options), data, options);
}
function axisX() {
    const [data, options] = maybeData(...arguments);
    return axisKx("x", anchorX(options), data, options);
}
function axisFx() {
    const [data, options] = maybeData(...arguments);
    return axisKx("fx", anchorFx(options), data, options);
}
function axisKy(k, anchor, data, { color = "currentColor", opacity = 1, stroke = color, strokeOpacity = opacity, strokeWidth = 1, fill = color, fillOpacity = opacity, textAnchor, textStroke, textStrokeOpacity, textStrokeWidth, tickSize = k === "y" ? 6 : 0, tickPadding, tickRotate, x, margin, marginTop = margin === undefined ? 20 : margin, marginRight = margin === undefined ? anchor === "right" ? 40 : 0 : margin, marginBottom = margin === undefined ? 20 : margin, marginLeft = margin === undefined ? anchor === "left" ? 40 : 0 : margin, label, labelAnchor, labelArrow, labelOffset, ...options }) {
    tickSize = (0, _optionsJs.number)(tickSize);
    tickPadding = (0, _optionsJs.number)(tickPadding);
    tickRotate = (0, _optionsJs.number)(tickRotate);
    if (labelAnchor !== undefined) labelAnchor = (0, _optionsJs.keyword)(labelAnchor, "labelAnchor", [
        "center",
        "top",
        "bottom"
    ]);
    labelArrow = maybeLabelArrow(labelArrow);
    return (0, _markJs.marks)(tickSize && !(0, _optionsJs.isNoneish)(stroke) ? axisTickKy(k, anchor, data, {
        stroke,
        strokeOpacity,
        strokeWidth,
        tickSize,
        tickPadding,
        tickRotate,
        x,
        ...options
    }) : null, !(0, _optionsJs.isNoneish)(fill) ? axisTextKy(k, anchor, data, {
        fill,
        fillOpacity,
        stroke: textStroke,
        strokeOpacity: textStrokeOpacity,
        strokeWidth: textStrokeWidth,
        textAnchor,
        tickSize,
        tickPadding,
        tickRotate,
        x,
        marginTop,
        marginRight,
        marginBottom,
        marginLeft,
        ...options
    }) : null, !(0, _optionsJs.isNoneish)(fill) && label !== null ? (0, _textJs.text)([], labelOptions({
        fill,
        fillOpacity,
        ...options
    }, function(data, facets, channels, scales, dimensions) {
        const scale = scales[k];
        const { marginTop, marginRight, marginBottom, marginLeft } = k === "y" && dimensions.inset || dimensions;
        const cla = labelAnchor ?? (scale.bandwidth ? "center" : "top");
        const clo = labelOffset ?? (anchor === "right" ? marginRight : marginLeft) - 3;
        if (cla === "center") {
            this.textAnchor = undefined; // middle
            this.lineAnchor = anchor === "right" ? "bottom" : "top";
            this.frameAnchor = anchor;
            this.rotate = -90;
        } else {
            this.textAnchor = anchor === "right" ? "end" : "start";
            this.lineAnchor = cla;
            this.frameAnchor = `${cla}-${anchor}`;
            this.rotate = 0;
        }
        this.dy = cla === "top" ? 3 - marginTop : cla === "bottom" ? marginBottom - 3 : 0;
        this.dx = anchor === "right" ? clo : -clo;
        this.ariaLabel = `${k}-axis label`;
        return {
            facets: [
                [
                    0
                ]
            ],
            channels: {
                text: {
                    value: [
                        formatAxisLabel(k, scale, {
                            anchor,
                            label,
                            labelAnchor: cla,
                            labelArrow
                        })
                    ]
                }
            }
        };
    })) : null);
}
function axisKx(k, anchor, data, { color = "currentColor", opacity = 1, stroke = color, strokeOpacity = opacity, strokeWidth = 1, fill = color, fillOpacity = opacity, textAnchor, textStroke, textStrokeOpacity, textStrokeWidth, tickSize = k === "x" ? 6 : 0, tickPadding, tickRotate, y, margin, marginTop = margin === undefined ? anchor === "top" ? 30 : 0 : margin, marginRight = margin === undefined ? 20 : margin, marginBottom = margin === undefined ? anchor === "bottom" ? 30 : 0 : margin, marginLeft = margin === undefined ? 20 : margin, label, labelAnchor, labelArrow, labelOffset, ...options }) {
    tickSize = (0, _optionsJs.number)(tickSize);
    tickPadding = (0, _optionsJs.number)(tickPadding);
    tickRotate = (0, _optionsJs.number)(tickRotate);
    if (labelAnchor !== undefined) labelAnchor = (0, _optionsJs.keyword)(labelAnchor, "labelAnchor", [
        "center",
        "left",
        "right"
    ]);
    labelArrow = maybeLabelArrow(labelArrow);
    return (0, _markJs.marks)(tickSize && !(0, _optionsJs.isNoneish)(stroke) ? axisTickKx(k, anchor, data, {
        stroke,
        strokeOpacity,
        strokeWidth,
        tickSize,
        tickPadding,
        tickRotate,
        y,
        ...options
    }) : null, !(0, _optionsJs.isNoneish)(fill) ? axisTextKx(k, anchor, data, {
        fill,
        fillOpacity,
        stroke: textStroke,
        strokeOpacity: textStrokeOpacity,
        strokeWidth: textStrokeWidth,
        textAnchor,
        tickSize,
        tickPadding,
        tickRotate,
        y,
        marginTop,
        marginRight,
        marginBottom,
        marginLeft,
        ...options
    }) : null, !(0, _optionsJs.isNoneish)(fill) && label !== null ? (0, _textJs.text)([], labelOptions({
        fill,
        fillOpacity,
        ...options
    }, function(data, facets, channels, scales, dimensions) {
        const scale = scales[k];
        const { marginTop, marginRight, marginBottom, marginLeft } = k === "x" && dimensions.inset || dimensions;
        const cla = labelAnchor ?? (scale.bandwidth ? "center" : "right");
        const clo = labelOffset ?? (anchor === "top" ? marginTop : marginBottom) - 3;
        if (cla === "center") {
            this.frameAnchor = anchor;
            this.textAnchor = undefined; // middle
        } else {
            this.frameAnchor = `${anchor}-${cla}`;
            this.textAnchor = cla === "right" ? "end" : "start";
        }
        this.lineAnchor = anchor;
        this.dy = anchor === "top" ? -clo : clo;
        this.dx = cla === "right" ? marginRight - 3 : cla === "left" ? 3 - marginLeft : 0;
        this.ariaLabel = `${k}-axis label`;
        return {
            facets: [
                [
                    0
                ]
            ],
            channels: {
                text: {
                    value: [
                        formatAxisLabel(k, scale, {
                            anchor,
                            label,
                            labelAnchor: cla,
                            labelArrow
                        })
                    ]
                }
            }
        };
    })) : null);
}
function axisTickKy(k, anchor, data, { strokeWidth = 1, strokeLinecap = null, strokeLinejoin = null, facetAnchor = anchor + (k === "y" ? "-empty" : ""), frameAnchor = anchor, tickSize, inset = 0, insetLeft = inset, insetRight = inset, dx = 0, y = k === "y" ? undefined : null, ...options }) {
    return axisMark((0, _vectorJs.vectorY), k, data, {
        ariaLabel: `${k}-axis tick`,
        ariaHidden: true
    }, {
        strokeWidth,
        strokeLinecap,
        strokeLinejoin,
        facetAnchor,
        frameAnchor,
        y,
        ...options,
        dx: anchor === "left" ? +dx - (0, _styleJs.offset) + +insetLeft : +dx + (0, _styleJs.offset) - insetRight,
        anchor: "start",
        length: tickSize,
        shape: anchor === "left" ? shapeTickLeft : shapeTickRight
    });
}
function axisTickKx(k, anchor, data, { strokeWidth = 1, strokeLinecap = null, strokeLinejoin = null, facetAnchor = anchor + (k === "x" ? "-empty" : ""), frameAnchor = anchor, tickSize, inset = 0, insetTop = inset, insetBottom = inset, dy = 0, x = k === "x" ? undefined : null, ...options }) {
    return axisMark((0, _vectorJs.vectorX), k, data, {
        ariaLabel: `${k}-axis tick`,
        ariaHidden: true
    }, {
        strokeWidth,
        strokeLinejoin,
        strokeLinecap,
        facetAnchor,
        frameAnchor,
        x,
        ...options,
        dy: anchor === "bottom" ? +dy - (0, _styleJs.offset) - insetBottom : +dy + (0, _styleJs.offset) + +insetTop,
        anchor: "start",
        length: tickSize,
        shape: anchor === "bottom" ? shapeTickBottom : shapeTickTop
    });
}
function axisTextKy(k, anchor, data, { facetAnchor = anchor + (k === "y" ? "-empty" : ""), frameAnchor = anchor, tickSize, tickRotate = 0, tickPadding = Math.max(3, 9 - tickSize) + (Math.abs(tickRotate) > 60 ? 4 * Math.cos(tickRotate * (0, _mathJs.radians)) : 0), text, textAnchor = Math.abs(tickRotate) > 60 ? "middle" : anchor === "left" ? "end" : "start", lineAnchor = tickRotate > 60 ? "top" : tickRotate < -60 ? "bottom" : "middle", fontVariant, inset = 0, insetLeft = inset, insetRight = inset, dx = 0, y = k === "y" ? undefined : null, ...options }) {
    return axisMark((0, _textJs.textY), k, data, {
        ariaLabel: `${k}-axis tick label`
    }, {
        facetAnchor,
        frameAnchor,
        text,
        textAnchor,
        lineAnchor,
        fontVariant,
        rotate: tickRotate,
        y,
        ...options,
        dx: anchor === "left" ? +dx - tickSize - tickPadding + +insetLeft : +dx + +tickSize + +tickPadding - insetRight
    }, function(scale, data, ticks, tickFormat, channels) {
        if (fontVariant === undefined) this.fontVariant = inferFontVariant(scale);
        if (text === undefined) channels.text = inferTextChannel(scale, data, ticks, tickFormat, anchor);
    });
}
function axisTextKx(k, anchor, data, { facetAnchor = anchor + (k === "x" ? "-empty" : ""), frameAnchor = anchor, tickSize, tickRotate = 0, tickPadding = Math.max(3, 9 - tickSize) + (Math.abs(tickRotate) >= 10 ? 4 * Math.cos(tickRotate * (0, _mathJs.radians)) : 0), text, textAnchor = Math.abs(tickRotate) >= 10 ? tickRotate < 0 ^ anchor === "bottom" ? "start" : "end" : "middle", lineAnchor = Math.abs(tickRotate) >= 10 ? "middle" : anchor === "bottom" ? "top" : "bottom", fontVariant, inset = 0, insetTop = inset, insetBottom = inset, dy = 0, x = k === "x" ? undefined : null, ...options }) {
    return axisMark((0, _textJs.textX), k, data, {
        ariaLabel: `${k}-axis tick label`
    }, {
        facetAnchor,
        frameAnchor,
        text: text === undefined ? null : text,
        textAnchor,
        lineAnchor,
        fontVariant,
        rotate: tickRotate,
        x,
        ...options,
        dy: anchor === "bottom" ? +dy + +tickSize + +tickPadding - insetBottom : +dy - tickSize - tickPadding + +insetTop
    }, function(scale, data, ticks, tickFormat, channels) {
        if (fontVariant === undefined) this.fontVariant = inferFontVariant(scale);
        if (text === undefined) channels.text = inferTextChannel(scale, data, ticks, tickFormat, anchor);
    });
}
function gridY() {
    const [data, options] = maybeData(...arguments);
    return gridKy("y", anchorY(options), data, options);
}
function gridFy() {
    const [data, options] = maybeData(...arguments);
    return gridKy("fy", anchorFy(options), data, options);
}
function gridX() {
    const [data, options] = maybeData(...arguments);
    return gridKx("x", anchorX(options), data, options);
}
function gridFx() {
    const [data, options] = maybeData(...arguments);
    return gridKx("fx", anchorFx(options), data, options);
}
function gridKy(k, anchor, data, { y = k === "y" ? undefined : null, x = null, x1 = anchor === "left" ? x : null, x2 = anchor === "right" ? x : null, ...options }) {
    return axisMark((0, _ruleJs.ruleY), k, data, {
        ariaLabel: `${k}-grid`,
        ariaHidden: true
    }, {
        y,
        x1,
        x2,
        ...gridDefaults(options)
    });
}
function gridKx(k, anchor, data, { x = k === "x" ? undefined : null, y = null, y1 = anchor === "top" ? y : null, y2 = anchor === "bottom" ? y : null, ...options }) {
    return axisMark((0, _ruleJs.ruleX), k, data, {
        ariaLabel: `${k}-grid`,
        ariaHidden: true
    }, {
        x,
        y1,
        y2,
        ...gridDefaults(options)
    });
}
function gridDefaults({ color = "currentColor", opacity = 0.1, stroke = color, strokeOpacity = opacity, strokeWidth = 1, ...options }) {
    return {
        stroke,
        strokeOpacity,
        strokeWidth,
        ...options
    };
}
function labelOptions({ fill, fillOpacity, fontFamily, fontSize, fontStyle, fontVariant, fontWeight, monospace, pointerEvents, shapeRendering, clip = false }, initializer) {
    // Only propagate these options if constant.
    [, fill] = (0, _optionsJs.maybeColorChannel)(fill);
    [, fillOpacity] = (0, _optionsJs.maybeNumberChannel)(fillOpacity);
    return {
        facet: "super",
        x: null,
        y: null,
        fill,
        fillOpacity,
        fontFamily,
        fontSize,
        fontStyle,
        fontVariant,
        fontWeight,
        monospace,
        pointerEvents,
        shapeRendering,
        clip,
        initializer
    };
}
function axisMark(mark, k, data, properties, options, initialize) {
    let channels;
    function axisInitializer(data, facets, _channels, scales, dimensions, context) {
        const initializeFacets = data == null && (k === "fx" || k === "fy");
        const { [k]: scale } = scales;
        if (!scale) throw new Error(`missing scale: ${k}`);
        const domain = scale.domain();
        let { interval, ticks, tickFormat, tickSpacing = k === "x" ? 80 : 35 } = options;
        // For a scale with a temporal domain, also allow the ticks to be specified
        // as a string which is promoted to a time interval. In the case of ordinal
        // scales, the interval is interpreted as UTC.
        if (typeof ticks === "string" && hasTemporalDomain(scale)) interval = ticks, ticks = undefined;
        // The interval axis option is an alternative method of specifying ticks;
        // for example, for a numeric scale, ticks = 5 means “about 5 ticks” whereas
        // interval = 5 means “ticks every 5 units”. (This is not to be confused
        // with the interval scale option, which affects the scale’s behavior!)
        // Lastly use the tickSpacing option to infer the desired tick count.
        if (ticks === undefined) ticks = (0, _optionsJs.maybeRangeInterval)(interval, scale.type) ?? inferTickCount(scale, tickSpacing);
        if (data == null) {
            if ((0, _optionsJs.isIterable)(ticks)) // Use explicit ticks, if specified.
            data = (0, _optionsJs.arrayify)(ticks);
            else if ((0, _optionsJs.isInterval)(ticks)) // Use the tick interval, if specified.
            data = inclusiveRange(ticks, ...(0, _d3.extent)(domain));
            else if (scale.interval) {
                // If the scale interval is a standard time interval such as "day", we
                // may be able to generalize the scale interval it to a larger aligned
                // time interval to create the desired number of ticks.
                let interval = scale.interval;
                if (scale.ticks) {
                    const [min, max] = (0, _d3.extent)(domain);
                    const n = (max - min) / interval[0, _timeJs.intervalDuration]; // current tick count
                    // We don’t explicitly check that given interval is a time interval;
                    // in that case the generalized interval will be undefined, just like
                    // a nonstandard interval. TODO Generalize integer intervals, too.
                    interval = (0, _timeJs.generalizeTimeInterval)(interval, n / ticks) ?? interval;
                    data = inclusiveRange(interval, min, max);
                } else {
                    data = domain;
                    const n = data.length; // current tick count
                    interval = (0, _timeJs.generalizeTimeInterval)(interval, n / ticks) ?? interval;
                    if (interval !== scale.interval) data = inclusiveRange(interval, ...(0, _d3.extent)(data));
                }
                if (interval === scale.interval) {
                    // If we weren’t able to generalize the scale’s interval, compute the
                    // positive number n such that taking every nth value from the scale’s
                    // domain produces as close as possible to the desired number of
                    // ticks. For example, if the domain has 100 values and 5 ticks are
                    // desired, n = 20.
                    const n = Math.round(data.length / ticks);
                    if (n > 1) data = data.filter((d, i)=>i % n === 0);
                }
            } else if (scale.ticks) data = scale.ticks(ticks);
            else // For ordinal scales, the domain will already be generated using the
            // scale’s interval, if any.
            data = domain;
            if (!scale.ticks && data.length && data !== domain) {
                // For ordinal scales, intersect the ticks with the scale domain since
                // the scale is only defined on its domain. If all of the ticks are
                // removed, then warn that the ticks and scale domain may be misaligned
                // (e.g., "year" ticks and "4 weeks" interval).
                const domainSet = new (0, _d3.InternSet)(domain);
                data = data.filter((d)=>domainSet.has(d));
                if (!data.length) (0, _warningsJs.warn)(`Warning: the ${k}-axis ticks appear to not align with the scale domain, resulting in no ticks. Try different ticks?`); // prettier-ignore
            }
            if (k === "y" || k === "x") facets = [
                (0, _optionsJs.range)(data)
            ];
            else channels[k] = {
                scale: k,
                value: (0, _optionsJs.identity)
            };
        }
        initialize?.call(this, scale, data, ticks, tickFormat, channels);
        const initializedChannels = Object.fromEntries(Object.entries(channels).map(([name, channel])=>{
            return [
                name,
                {
                    ...channel,
                    value: (0, _optionsJs.valueof)(data, channel.value)
                }
            ];
        }));
        if (initializeFacets) facets = context.filterFacets(data, initializedChannels);
        return {
            data,
            facets,
            channels: initializedChannels
        };
    }
    // Apply any basic initializers after the axis initializer computes the ticks.
    const basicInitializer = (0, _basicJs.initializer)(options).initializer;
    const m = mark(data, (0, _basicJs.initializer)({
        ...options,
        initializer: axisInitializer
    }, basicInitializer));
    if (data == null) {
        channels = m.channels;
        m.channels = {};
    } else channels = {};
    if (properties !== undefined) Object.assign(m, properties);
    if (m.clip === undefined) m.clip = false; // don’t clip axes by default
    return m;
}
function inferTickCount(scale, tickSpacing) {
    const [min, max] = (0, _d3.extent)(scale.range());
    return (max - min) / tickSpacing;
}
function inferTextChannel(scale, data, ticks, tickFormat, anchor) {
    return {
        value: inferTickFormat(scale, data, ticks, tickFormat, anchor)
    };
}
function inferTickFormat(scale, data, ticks, tickFormat, anchor) {
    return typeof tickFormat === "function" && !(scale.type === "log" && scale.tickFormat) ? tickFormat : tickFormat === undefined && data && (0, _optionsJs.isTemporal)(data) ? (0, _timeJs.inferTimeFormat)(scale.type, data, anchor) ?? (0, _formatJs.formatDefault) : scale.tickFormat ? scale.tickFormat(typeof ticks === "number" ? ticks : null, tickFormat) : tickFormat === undefined ? (0, _formatJs.formatDefault) : typeof tickFormat === "string" ? ((0, _optionsJs.isTemporal)(scale.domain()) ? (0, _d3.utcFormat) : (0, _d3.format))(tickFormat) : (0, _optionsJs.constant)(tickFormat);
}
function inclusiveRange(interval, min, max) {
    return interval.range(min, interval.offset(interval.floor(max)));
}
const shapeTickBottom = {
    draw (context, l) {
        context.moveTo(0, 0);
        context.lineTo(0, l);
    }
};
const shapeTickTop = {
    draw (context, l) {
        context.moveTo(0, 0);
        context.lineTo(0, -l);
    }
};
const shapeTickLeft = {
    draw (context, l) {
        context.moveTo(0, 0);
        context.lineTo(-l, 0);
    }
};
const shapeTickRight = {
    draw (context, l) {
        context.moveTo(0, 0);
        context.lineTo(l, 0);
    }
};
// TODO Unify this with the other inferFontVariant; here we only have a scale
// function rather than a scale descriptor.
function inferFontVariant(scale) {
    return scale.bandwidth && !scale.interval ? undefined : "tabular-nums";
}
// Takes the scale label, and if this is not an ordinal scale and the label was
// inferred from an associated channel, adds an orientation-appropriate arrow.
function formatAxisLabel(k, scale, { anchor, label = scale.label, labelAnchor, labelArrow } = {}) {
    if (label == null || label.inferred && hasTemporalDomain(scale) && /^(date|time|year)$/i.test(label)) return;
    label = String(label); // coerce to a string after checking if inferred
    if (labelArrow === "auto") labelArrow = (!scale.bandwidth || scale.interval) && !/[↑↓→←]/.test(label);
    if (!labelArrow) return label;
    if (labelArrow === true) {
        const order = (0, _scalesJs.inferScaleOrder)(scale);
        if (order) labelArrow = /x$/.test(k) || labelAnchor === "center" ? /x$/.test(k) === order < 0 ? "left" : "right" : order < 0 ? "up" : "down";
    }
    switch(labelArrow){
        case "left":
            return `\u{2190} ${label}`;
        case "right":
            return `${label} \u{2192}`;
        case "up":
            return anchor === "right" ? `${label} \u{2191}` : `\u{2191} ${label}`;
        case "down":
            return anchor === "right" ? `${label} \u{2193}` : `\u{2193} ${label}`;
    }
    return label;
}
function maybeLabelArrow(labelArrow = "auto") {
    return (0, _optionsJs.isNoneish)(labelArrow) ? false : typeof labelArrow === "boolean" ? labelArrow : (0, _optionsJs.keyword)(labelArrow, "labelArrow", [
        "auto",
        "up",
        "right",
        "down",
        "left"
    ]);
}
function hasTemporalDomain(scale) {
    return (0, _optionsJs.isTemporal)(scale.domain());
}

},{"d3":"17XFv","../format.js":"7mxs9","../mark.js":"a4RyP","../math.js":"gGePl","../options.js":"eJmsy","../scales.js":"cZh8W","../style.js":"c9bmo","../time.js":"3rFQb","../transforms/basic.js":"hU2qc","../warnings.js":"hBaa6","./rule.js":"ligGV","./text.js":"5cTpv","./vector.js":"gd2x1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gGePl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "radians", ()=>radians);
const radians = Math.PI / 180;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ligGV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RuleX", ()=>RuleX);
parcelHelpers.export(exports, "RuleY", ()=>RuleY);
parcelHelpers.export(exports, "ruleX", ()=>ruleX);
parcelHelpers.export(exports, "ruleY", ()=>ruleY);
var _contextJs = require("../context.js");
var _markJs = require("../mark.js");
var _markerJs = require("../marker.js");
var _optionsJs = require("../options.js");
var _scalesJs = require("../scales.js");
var _styleJs = require("../style.js");
var _intervalJs = require("../transforms/interval.js");
const defaults = {
    ariaLabel: "rule",
    fill: null,
    stroke: "currentColor"
};
class RuleX extends (0, _markJs.Mark) {
    constructor(data, options = {}){
        const { x, y1, y2, inset = 0, insetTop = inset, insetBottom = inset } = options;
        super(data, {
            x: {
                value: x,
                scale: "x",
                optional: true
            },
            y1: {
                value: y1,
                scale: "y",
                optional: true
            },
            y2: {
                value: y2,
                scale: "y",
                optional: true
            }
        }, (0, _markJs.withTip)(options, "x"), defaults);
        this.insetTop = (0, _optionsJs.number)(insetTop);
        this.insetBottom = (0, _optionsJs.number)(insetBottom);
        (0, _markerJs.markers)(this, options);
    }
    render(index, scales, channels, dimensions, context) {
        const { x, y } = scales;
        const { x: X, y1: Y1, y2: Y2 } = channels;
        const { width, height, marginTop, marginRight, marginLeft, marginBottom } = dimensions;
        const { insetTop, insetBottom } = this;
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyTransform), this, {
            x: X && x
        }, (0, _styleJs.offset), 0).call((g)=>g.selectAll().data(index).enter().append("line").call((0, _styleJs.applyDirectStyles), this).attr("x1", X ? (i)=>X[i] : (marginLeft + width - marginRight) / 2).attr("x2", X ? (i)=>X[i] : (marginLeft + width - marginRight) / 2).attr("y1", Y1 && !(0, _scalesJs.isCollapsed)(y) ? (i)=>Y1[i] + insetTop : marginTop + insetTop).attr("y2", Y2 && !(0, _scalesJs.isCollapsed)(y) ? y.bandwidth ? (i)=>Y2[i] + y.bandwidth() - insetBottom : (i)=>Y2[i] - insetBottom : height - marginBottom - insetBottom).call((0, _styleJs.applyChannelStyles), this, channels).call((0, _markerJs.applyMarkers), this, channels, context)).node();
    }
}
class RuleY extends (0, _markJs.Mark) {
    constructor(data, options = {}){
        const { x1, x2, y, inset = 0, insetRight = inset, insetLeft = inset } = options;
        super(data, {
            y: {
                value: y,
                scale: "y",
                optional: true
            },
            x1: {
                value: x1,
                scale: "x",
                optional: true
            },
            x2: {
                value: x2,
                scale: "x",
                optional: true
            }
        }, (0, _markJs.withTip)(options, "y"), defaults);
        this.insetRight = (0, _optionsJs.number)(insetRight);
        this.insetLeft = (0, _optionsJs.number)(insetLeft);
        (0, _markerJs.markers)(this, options);
    }
    render(index, scales, channels, dimensions, context) {
        const { x, y } = scales;
        const { y: Y, x1: X1, x2: X2 } = channels;
        const { width, height, marginTop, marginRight, marginLeft, marginBottom } = dimensions;
        const { insetLeft, insetRight } = this;
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyTransform), this, {
            y: Y && y
        }, 0, (0, _styleJs.offset)).call((g)=>g.selectAll().data(index).enter().append("line").call((0, _styleJs.applyDirectStyles), this).attr("x1", X1 && !(0, _scalesJs.isCollapsed)(x) ? (i)=>X1[i] + insetLeft : marginLeft + insetLeft).attr("x2", X2 && !(0, _scalesJs.isCollapsed)(x) ? x.bandwidth ? (i)=>X2[i] + x.bandwidth() - insetRight : (i)=>X2[i] - insetRight : width - marginRight - insetRight).attr("y1", Y ? (i)=>Y[i] : (marginTop + height - marginBottom) / 2).attr("y2", Y ? (i)=>Y[i] : (marginTop + height - marginBottom) / 2).call((0, _styleJs.applyChannelStyles), this, channels).call((0, _markerJs.applyMarkers), this, channels, context)).node();
    }
}
function ruleX(data, options) {
    let { x = (0, _optionsJs.identity), y, y1, y2, ...rest } = (0, _intervalJs.maybeIntervalY)(options);
    [y1, y2] = maybeOptionalZero(y, y1, y2);
    return new RuleX(data, {
        ...rest,
        x,
        y1,
        y2
    });
}
function ruleY(data, options) {
    let { y = (0, _optionsJs.identity), x, x1, x2, ...rest } = (0, _intervalJs.maybeIntervalX)(options);
    [x1, x2] = maybeOptionalZero(x, x1, x2);
    return new RuleY(data, {
        ...rest,
        y,
        x1,
        x2
    });
}
// For marks specified either as [0, x] or [x1, x2], or nothing.
function maybeOptionalZero(x, x1, x2) {
    if (x == null) {
        if (x1 === undefined) {
            if (x2 !== undefined) return [
                0,
                x2
            ];
        } else {
            if (x2 === undefined) return [
                0,
                x1
            ];
        }
    } else if (x1 === undefined) return x2 === undefined ? [
        0,
        x
    ] : [
        x,
        x2
    ];
    else if (x2 === undefined) return [
        x,
        x1
    ];
    return [
        x1,
        x2
    ];
}

},{"../context.js":"kyLYX","../mark.js":"a4RyP","../marker.js":"2m35i","../options.js":"eJmsy","../scales.js":"cZh8W","../style.js":"c9bmo","../transforms/interval.js":"jzD9C","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2m35i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "markers", ()=>markers);
parcelHelpers.export(exports, "applyMarkers", ()=>applyMarkers);
parcelHelpers.export(exports, "applyGroupedMarkers", ()=>applyGroupedMarkers);
var _contextJs = require("./context.js");
var _memoizeJs = require("./memoize.js");
var _optionsJs = require("./options.js");
function markers(mark, { marker, markerStart = marker, markerMid = marker, markerEnd = marker } = {}) {
    mark.markerStart = maybeMarker(markerStart);
    mark.markerMid = maybeMarker(markerMid);
    mark.markerEnd = maybeMarker(markerEnd);
}
function maybeMarker(marker) {
    if (marker == null || marker === false) return null;
    if (marker === true) return markerCircleFill;
    if (typeof marker === "function") return marker;
    switch(`${marker}`.toLowerCase()){
        case "none":
            return null;
        case "arrow":
            return markerArrow("auto");
        case "arrow-reverse":
            return markerArrow("auto-start-reverse");
        case "dot":
            return markerDot;
        case "circle":
        case "circle-fill":
            return markerCircleFill;
        case "circle-stroke":
            return markerCircleStroke;
        case "tick":
            return markerTick("auto");
        case "tick-x":
            return markerTick(90);
        case "tick-y":
            return markerTick(0);
    }
    throw new Error(`invalid marker: ${marker}`);
}
function markerArrow(orient) {
    return (color, context)=>(0, _contextJs.create)("svg:marker", context).attr("viewBox", "-5 -5 10 10").attr("markerWidth", 6.67).attr("markerHeight", 6.67).attr("orient", orient).attr("fill", "none").attr("stroke", color).attr("stroke-width", 1.5).attr("stroke-linecap", "round").attr("stroke-linejoin", "round").call((marker)=>marker.append("path").attr("d", "M-1.5,-3l3,3l-3,3")).node();
}
function markerDot(color, context) {
    return (0, _contextJs.create)("svg:marker", context).attr("viewBox", "-5 -5 10 10").attr("markerWidth", 6.67).attr("markerHeight", 6.67).attr("fill", color).attr("stroke", "none").call((marker)=>marker.append("circle").attr("r", 2.5)).node();
}
function markerCircleFill(color, context) {
    return (0, _contextJs.create)("svg:marker", context).attr("viewBox", "-5 -5 10 10").attr("markerWidth", 6.67).attr("markerHeight", 6.67).attr("fill", color).attr("stroke", "var(--plot-background)").attr("stroke-width", 1.5).call((marker)=>marker.append("circle").attr("r", 3)).node();
}
function markerCircleStroke(color, context) {
    return (0, _contextJs.create)("svg:marker", context).attr("viewBox", "-5 -5 10 10").attr("markerWidth", 6.67).attr("markerHeight", 6.67).attr("fill", "var(--plot-background)").attr("stroke", color).attr("stroke-width", 1.5).call((marker)=>marker.append("circle").attr("r", 3)).node();
}
function markerTick(orient) {
    return (color, context)=>(0, _contextJs.create)("svg:marker", context).attr("viewBox", "-3 -3 6 6").attr("markerWidth", 6).attr("markerHeight", 6).attr("orient", orient).attr("stroke", color).call((marker)=>marker.append("path").attr("d", "M0,-3v6")).node();
}
let nextMarkerId = 0;
function applyMarkers(path, mark, { stroke: S }, context) {
    return applyMarkersColor(path, mark, S && ((i)=>S[i]), null, context);
}
function applyGroupedMarkers(path, mark, { stroke: S, z: Z }, context) {
    return applyMarkersColor(path, mark, S && (([i])=>S[i]), Z, context);
}
const START = 1;
const END = 2;
/**
 * When rendering lines or areas with variable aesthetics, a single series
 * produces multiple path elements. The first path element is a START segment;
 * the last path element is an END segment. When there is only a single path
 * element, it is both a START and an END segment.
 */ function getGroupedOrientation(path, Z) {
    const O = new Uint8Array(Z.length);
    const D = path.data().filter((I)=>I.length > 1);
    const n = D.length;
    // Forward pass to find start segments.
    for(let i = 0, z = (0, _memoizeJs.unset); i < n; ++i){
        const I = D[i];
        if (I.length > 1) {
            const i = I[0];
            if (z !== (z = (0, _optionsJs.keyof)(Z[i]))) O[i] |= START;
        }
    }
    // Backwards pass to find end segments.
    for(let i = n - 1, z = (0, _memoizeJs.unset); i >= 0; --i){
        const I = D[i];
        if (I.length > 1) {
            const i = I[0];
            if (z !== (z = (0, _optionsJs.keyof)(Z[i]))) O[i] |= END;
        }
    }
    return ([i])=>O[i];
}
function applyMarkersColor(path, { markerStart, markerMid, markerEnd, stroke }, strokeof = ()=>stroke, Z, context) {
    if (!markerStart && !markerMid && !markerEnd) return;
    const iriByMarkerColor = new Map();
    const orient = Z && getGroupedOrientation(path, Z);
    function applyMarker(name, marker, filter) {
        return function(i) {
            if (filter && !filter(i)) return;
            const color = strokeof(i);
            let iriByColor = iriByMarkerColor.get(marker);
            if (!iriByColor) iriByMarkerColor.set(marker, iriByColor = new Map());
            let iri = iriByColor.get(color);
            if (!iri) {
                const node = this.parentNode.insertBefore(marker(color, context), this);
                const id = `plot-marker-${++nextMarkerId}`;
                node.setAttribute("id", id);
                iriByColor.set(color, iri = `url(#${id})`);
            }
            this.setAttribute(name, iri);
        };
    }
    if (markerStart) path.each(applyMarker("marker-start", markerStart, orient && ((i)=>orient(i) & START)));
    if (markerMid && orient) path.each(applyMarker("marker-start", markerMid, (i)=>!(orient(i) & START)));
    if (markerMid) path.each(applyMarker("marker-mid", markerMid));
    if (markerEnd) path.each(applyMarker("marker-end", markerEnd, orient && ((i)=>orient(i) & END)));
}

},{"./context.js":"kyLYX","./memoize.js":"fSUNH","./options.js":"eJmsy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jzD9C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maybeTrivialIntervalX", ()=>maybeTrivialIntervalX);
parcelHelpers.export(exports, "maybeTrivialIntervalY", ()=>maybeTrivialIntervalY);
parcelHelpers.export(exports, "maybeIntervalX", ()=>maybeIntervalX);
parcelHelpers.export(exports, "maybeIntervalY", ()=>maybeIntervalY);
parcelHelpers.export(exports, "maybeIntervalMidX", ()=>maybeIntervalMidX);
parcelHelpers.export(exports, "maybeIntervalMidY", ()=>maybeIntervalMidY);
var _optionsJs = require("../options.js");
var _insetJs = require("./inset.js");
// The interval may be specified either as x: {value, interval} or as {x,
// interval}. The former can be used to specify separate intervals for x and y,
// for example with Plot.rect.
function maybeIntervalValue(value, { interval }) {
    value = {
        ...(0, _optionsJs.maybeValue)(value)
    };
    value.interval = (0, _optionsJs.maybeInterval)(value.interval === undefined ? interval : value.interval);
    return value;
}
function maybeIntervalK(k, maybeInsetK, options, trivial) {
    const { [k]: v, [`${k}1`]: v1, [`${k}2`]: v2 } = options;
    const { value, interval } = maybeIntervalValue(v, options);
    if (value == null || interval == null && !trivial) return options;
    const label = (0, _optionsJs.labelof)(v);
    if (interval == null) {
        let V;
        const kv = {
            transform: (data)=>V || (V = (0, _optionsJs.valueof)(data, value)),
            label
        };
        return {
            ...options,
            [k]: undefined,
            [`${k}1`]: v1 === undefined ? kv : v1,
            [`${k}2`]: v2 === undefined && !(v1 === v2 && trivial) ? kv : v2
        };
    }
    let D1, V1;
    function transform(data) {
        if (V1 !== undefined && data === D1) return V1; // memoize
        return V1 = (0, _optionsJs.map)((0, _optionsJs.valueof)(D1 = data, value), (v)=>interval.floor(v));
    }
    return maybeInsetK({
        ...options,
        [k]: undefined,
        [`${k}1`]: v1 === undefined ? {
            transform,
            label
        } : v1,
        [`${k}2`]: v2 === undefined ? {
            transform: (data)=>transform(data).map((v)=>interval.offset(v)),
            label
        } : v2
    });
}
function maybeIntervalMidK(k, maybeInsetK, options) {
    const { [k]: v } = options;
    const { value, interval } = maybeIntervalValue(v, options);
    if (value == null || interval == null) return options;
    return maybeInsetK({
        ...options,
        [k]: {
            label: (0, _optionsJs.labelof)(v),
            transform: (data)=>{
                const V1 = (0, _optionsJs.map)((0, _optionsJs.valueof)(data, value), (v)=>interval.floor(v));
                const V2 = V1.map((v)=>interval.offset(v));
                return V1.map((0, _optionsJs.isTemporal)(V1) ? (v1, v2)=>v1 == null || isNaN(v1 = +v1) || (v2 = V2[v2], v2 == null) || isNaN(v2 = +v2) ? undefined : new Date((v1 + v2) / 2) : (v1, v2)=>v1 == null || (v2 = V2[v2], v2 == null) ? NaN : (+v1 + +v2) / 2);
            }
        }
    });
}
function maybeTrivialIntervalX(options = {}) {
    return maybeIntervalK("x", (0, _insetJs.maybeInsetX), options, true);
}
function maybeTrivialIntervalY(options = {}) {
    return maybeIntervalK("y", (0, _insetJs.maybeInsetY), options, true);
}
function maybeIntervalX(options = {}) {
    return maybeIntervalK("x", (0, _insetJs.maybeInsetX), options);
}
function maybeIntervalY(options = {}) {
    return maybeIntervalK("y", (0, _insetJs.maybeInsetY), options);
}
function maybeIntervalMidX(options = {}) {
    return maybeIntervalMidK("x", (0, _insetJs.maybeInsetX), options);
}
function maybeIntervalMidY(options = {}) {
    return maybeIntervalMidK("y", (0, _insetJs.maybeInsetY), options);
}

},{"../options.js":"eJmsy","./inset.js":"lUOw6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lUOw6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maybeInsetX", ()=>maybeInsetX);
parcelHelpers.export(exports, "maybeInsetY", ()=>maybeInsetY);
var _styleJs = require("../style.js");
function maybeInsetX({ inset, insetLeft, insetRight, ...options } = {}) {
    [insetLeft, insetRight] = maybeInset(inset, insetLeft, insetRight);
    return {
        inset,
        insetLeft,
        insetRight,
        ...options
    };
}
function maybeInsetY({ inset, insetTop, insetBottom, ...options } = {}) {
    [insetTop, insetBottom] = maybeInset(inset, insetTop, insetBottom);
    return {
        inset,
        insetTop,
        insetBottom,
        ...options
    };
}
function maybeInset(inset, inset1, inset2) {
    return inset === undefined && inset1 === undefined && inset2 === undefined ? (0, _styleJs.offset) ? [
        1,
        0
    ] : [
        0.5,
        0.5
    ] : [
        inset1,
        inset2
    ];
}

},{"../style.js":"c9bmo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5cTpv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Text", ()=>Text);
parcelHelpers.export(exports, "maybeTextOverflow", ()=>maybeTextOverflow);
parcelHelpers.export(exports, "text", ()=>text);
parcelHelpers.export(exports, "textX", ()=>textX);
parcelHelpers.export(exports, "textY", ()=>textY);
parcelHelpers.export(exports, "applyIndirectTextStyles", ()=>applyIndirectTextStyles);
// This is a rudimentary (and U.S.-centric) algorithm for measuring the width of
// a string based on a technique of Gregor Aisch; it assumes that individual
// characters are laid out independently and does not implement the Unicode
// grapheme cluster breaking algorithm. It does understand code points, though,
// and so treats things like emoji as having the width of a lowercase e (and
// should be equivalent to using for-of to iterate over code points, while also
// being fast). TODO Optimize this by noting that we often re-measure characters
// that were previously measured?
// http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries
// https://exploringjs.com/impatient-js/ch_strings.html#atoms-of-text
parcelHelpers.export(exports, "defaultWidth", ()=>defaultWidth);
// Even for monospaced text, we can’t assume that the number of UTF-16 code
// points (i.e., the length of a string) corresponds to the number of visible
// characters; we still have to count graphemes. And note that pictographic
// characters such as emojis are typically not monospaced!
parcelHelpers.export(exports, "monospaceWidth", ()=>monospaceWidth);
parcelHelpers.export(exports, "splitter", ()=>splitter);
parcelHelpers.export(exports, "clipper", ()=>clipper);
parcelHelpers.export(exports, "ellipsis", ()=>ellipsis);
// Cuts the given text to the given width, using the specified widthof function;
// the returned [index, error] guarantees text.slice(0, index) fits within the
// specified width with the given error. If the text fits naturally within the
// given width, returns [-1, 0]. If the text needs cutting, the given inset
// specifies how much space (in the same units as width and widthof) to reserve
// for a possible ellipsis character.
parcelHelpers.export(exports, "cut", ()=>cut);
parcelHelpers.export(exports, "clipEnd", ()=>clipEnd);
parcelHelpers.export(exports, "clipMiddle", ()=>clipMiddle);
parcelHelpers.export(exports, "clipStart", ()=>clipStart);
// Reads a single “character” element from the given text starting at the given
// index, returning the index after the read character. Ideally, this implements
// the Unicode text segmentation algorithm and understands grapheme cluster
// boundaries, etc., but in practice this is only smart enough to detect UTF-16
// surrogate pairs, combining marks, and zero-width joiner (zwj) sequences such
// as emoji skin color modifiers. https://unicode.org/reports/tr29/
parcelHelpers.export(exports, "readCharacter", ()=>readCharacter);
var _d3 = require("d3");
var _contextJs = require("../context.js");
var _definedJs = require("../defined.js");
var _formatJs = require("../format.js");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _styleJs = require("../style.js");
var _templateJs = require("../template.js");
var _intervalJs = require("../transforms/interval.js");
const defaults = {
    ariaLabel: "text",
    strokeLinejoin: "round",
    strokeWidth: 3,
    paintOrder: "stroke"
};
const softHyphen = "\xad";
class Text extends (0, _markJs.Mark) {
    constructor(data, options = {}){
        const { x, y, text = (0, _optionsJs.isIterable)(data) && (0, _optionsJs.isTextual)(data) ? (0, _optionsJs.identity) : (0, _optionsJs.indexOf), frameAnchor, textAnchor = /right$/i.test(frameAnchor) ? "end" : /left$/i.test(frameAnchor) ? "start" : "middle", lineAnchor = /^top/i.test(frameAnchor) ? "top" : /^bottom/i.test(frameAnchor) ? "bottom" : "middle", lineHeight = 1, lineWidth = Infinity, textOverflow, monospace, fontFamily = monospace ? "ui-monospace, monospace" : undefined, fontSize, fontStyle, fontVariant, fontWeight, rotate } = options;
        const [vrotate, crotate] = (0, _optionsJs.maybeNumberChannel)(rotate, 0);
        const [vfontSize, cfontSize] = maybeFontSizeChannel(fontSize);
        super(data, {
            x: {
                value: x,
                scale: "x",
                optional: true
            },
            y: {
                value: y,
                scale: "y",
                optional: true
            },
            fontSize: {
                value: vfontSize,
                optional: true
            },
            rotate: {
                value: (0, _optionsJs.numberChannel)(vrotate),
                optional: true
            },
            text: {
                value: text,
                filter: (0, _definedJs.nonempty),
                optional: true
            }
        }, options, defaults);
        this.rotate = crotate;
        this.textAnchor = (0, _styleJs.impliedString)(textAnchor, "middle");
        this.lineAnchor = (0, _optionsJs.keyword)(lineAnchor, "lineAnchor", [
            "top",
            "middle",
            "bottom"
        ]);
        this.lineHeight = +lineHeight;
        this.lineWidth = +lineWidth;
        this.textOverflow = maybeTextOverflow(textOverflow);
        this.monospace = !!monospace;
        this.fontFamily = (0, _optionsJs.string)(fontFamily);
        this.fontSize = cfontSize;
        this.fontStyle = (0, _optionsJs.string)(fontStyle);
        this.fontVariant = (0, _optionsJs.string)(fontVariant);
        this.fontWeight = (0, _optionsJs.string)(fontWeight);
        this.frameAnchor = (0, _optionsJs.maybeFrameAnchor)(frameAnchor);
        if (!(this.lineWidth >= 0)) throw new Error(`invalid lineWidth: ${lineWidth}`);
        this.splitLines = splitter(this);
        this.clipLine = clipper(this);
    }
    render(index, scales, channels, dimensions, context) {
        const { x, y } = scales;
        const { x: X, y: Y, rotate: R, text: T, title: TL, fontSize: FS } = channels;
        const { rotate } = this;
        const [cx, cy] = (0, _styleJs.applyFrameAnchor)(this, dimensions);
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call(applyIndirectTextStyles, this, T, dimensions).call((0, _styleJs.applyTransform), this, {
            x: X && x,
            y: Y && y
        }).call((g)=>g.selectAll().data(index).enter().append("text").call((0, _styleJs.applyDirectStyles), this).call(applyMultilineText, this, T, TL).attr("transform", (0, _templateJs.template)`translate(${X ? (i)=>X[i] : cx},${Y ? (i)=>Y[i] : cy})${R ? (i)=>` rotate(${R[i]})` : rotate ? ` rotate(${rotate})` : ``}`).call((0, _styleJs.applyAttr), "font-size", FS && ((i)=>FS[i])).call((0, _styleJs.applyChannelStyles), this, channels)).node();
    }
}
function maybeTextOverflow(textOverflow) {
    return textOverflow == null ? null : (0, _optionsJs.keyword)(textOverflow, "textOverflow", [
        "clip",
        "ellipsis",
        "clip-start",
        "clip-end",
        "ellipsis-start",
        "ellipsis-middle",
        "ellipsis-end"
    ]).replace(/^(clip|ellipsis)$/, "$1-end");
}
function applyMultilineText(selection, mark, T, TL) {
    if (!T) return;
    const { lineAnchor, lineHeight, textOverflow, splitLines, clipLine } = mark;
    selection.each(function(i) {
        const lines = splitLines((0, _formatJs.formatDefault)(T[i]) ?? "").map(clipLine);
        const n = lines.length;
        const y = lineAnchor === "top" ? 0.71 : lineAnchor === "bottom" ? 1 - n : (164 - n * 100) / 200;
        if (n > 1) {
            let m = 0;
            for(let i = 0; i < n; ++i){
                ++m;
                if (!lines[i]) continue;
                const tspan = this.ownerDocument.createElementNS((0, _d3.namespaces).svg, "tspan");
                tspan.setAttribute("x", 0);
                if (i === m - 1) tspan.setAttribute("y", `${(y + i) * lineHeight}em`);
                else tspan.setAttribute("dy", `${m * lineHeight}em`);
                tspan.textContent = lines[i];
                this.appendChild(tspan);
                m = 0;
            }
        } else {
            if (y) this.setAttribute("y", `${y * lineHeight}em`);
            this.textContent = lines[0];
        }
        if (textOverflow && !TL && lines[0] !== T[i]) {
            const title = this.ownerDocument.createElementNS((0, _d3.namespaces).svg, "title");
            title.textContent = T[i];
            this.appendChild(title);
        }
    });
}
function text(data, { x, y, ...options } = {}) {
    if (options.frameAnchor === undefined) [x, y] = (0, _optionsJs.maybeTuple)(x, y);
    return new Text(data, {
        ...options,
        x,
        y
    });
}
function textX(data, { x = (0, _optionsJs.identity), ...options } = {}) {
    return new Text(data, (0, _intervalJs.maybeIntervalMidY)({
        ...options,
        x
    }));
}
function textY(data, { y = (0, _optionsJs.identity), ...options } = {}) {
    return new Text(data, (0, _intervalJs.maybeIntervalMidX)({
        ...options,
        y
    }));
}
function applyIndirectTextStyles(selection, mark, T) {
    (0, _styleJs.applyAttr)(selection, "text-anchor", mark.textAnchor);
    (0, _styleJs.applyAttr)(selection, "font-family", mark.fontFamily);
    (0, _styleJs.applyAttr)(selection, "font-size", mark.fontSize);
    (0, _styleJs.applyAttr)(selection, "font-style", mark.fontStyle);
    (0, _styleJs.applyAttr)(selection, "font-variant", mark.fontVariant === undefined ? inferFontVariant(T) : mark.fontVariant);
    (0, _styleJs.applyAttr)(selection, "font-weight", mark.fontWeight);
}
function inferFontVariant(T) {
    return T && ((0, _optionsJs.isNumeric)(T) || (0, _optionsJs.isTemporal)(T)) ? "tabular-nums" : undefined;
}
// https://developer.mozilla.org/en-US/docs/Web/CSS/font-size
const fontSizes = new Set([
    // global keywords
    "inherit",
    "initial",
    "revert",
    "unset",
    // absolute keywords
    "xx-small",
    "x-small",
    "small",
    "medium",
    "large",
    "x-large",
    "xx-large",
    "xxx-large",
    // relative keywords
    "larger",
    "smaller"
]);
// The font size may be expressed as a constant in the following forms:
// - number in pixels
// - string keyword: see above
// - string <length>: e.g., "12px"
// - string <percentage>: e.g., "80%"
// Anything else is assumed to be a channel definition.
function maybeFontSizeChannel(fontSize) {
    if (fontSize == null || typeof fontSize === "number") return [
        undefined,
        fontSize
    ];
    if (typeof fontSize !== "string") return [
        fontSize,
        undefined
    ];
    fontSize = fontSize.trim().toLowerCase();
    return fontSizes.has(fontSize) || /^[+-]?\d*\.?\d+(e[+-]?\d+)?(\w*|%)$/.test(fontSize) ? [
        undefined,
        fontSize
    ] : [
        fontSize,
        undefined
    ];
}
// This is a greedy algorithm for line wrapping. It would be better to use the
// Knuth–Plass line breaking algorithm (but that would be much more complex).
// https://en.wikipedia.org/wiki/Line_wrap_and_word_wrap
function lineWrap(input, maxWidth, widthof) {
    const lines = [];
    let lineStart, lineEnd = 0;
    for (const [wordStart, wordEnd, required] of lineBreaks(input)){
        // Record the start of a line. This isn’t the same as the previous line’s
        // end because we often skip spaces between lines.
        if (lineStart === undefined) lineStart = wordStart;
        // If the current line is not empty, and if adding the current word would
        // make the line longer than the allowed width, then break the line at the
        // previous word end.
        if (lineEnd > lineStart && widthof(input, lineStart, wordEnd) > maxWidth) {
            lines.push(input.slice(lineStart, lineEnd) + (input[lineEnd - 1] === softHyphen ? "-" : ""));
            lineStart = wordStart;
        }
        // If this is a required break (a newline), emit the line and reset.
        if (required) {
            lines.push(input.slice(lineStart, wordEnd));
            lineStart = undefined;
            continue;
        }
        // Extend the current line to include the new word.
        lineEnd = wordEnd;
    }
    return lines;
}
// This is a rudimentary (and U.S.-centric) algorithm for finding opportunities
// to break lines between words. A better and far more comprehensive approach
// would be to use the official Unicode Line Breaking Algorithm.
// https://unicode.org/reports/tr14/
function* lineBreaks(input) {
    let i = 0, j = 0;
    const n = input.length;
    while(j < n){
        let k = 1;
        switch(input[j]){
            case softHyphen:
            case "-":
                ++j;
                yield [
                    i,
                    j,
                    false
                ];
                i = j;
                break;
            case " ":
                yield [
                    i,
                    j,
                    false
                ];
                while(input[++j] === " "); // skip multiple spaces
                i = j;
                break;
            case "\r":
                if (input[j + 1] === "\n") ++k; // falls through
            case "\n":
                yield [
                    i,
                    j,
                    true
                ];
                j += k;
                i = j;
                break;
            default:
                ++j;
                break;
        }
    }
    yield [
        i,
        j,
        true
    ];
}
// Computed as round(measureText(text).width * 10) at 10px system-ui. For
// characters that are not represented in this map, we’d ideally want to use a
// weighted average of what we expect to see. But since we don’t really know
// what that is, using “e” seems reasonable.
const defaultWidthMap = {
    a: 56,
    b: 63,
    c: 57,
    d: 63,
    e: 58,
    f: 37,
    g: 62,
    h: 60,
    i: 26,
    j: 26,
    k: 55,
    l: 26,
    m: 88,
    n: 60,
    o: 60,
    p: 62,
    q: 62,
    r: 39,
    s: 54,
    t: 38,
    u: 60,
    v: 55,
    w: 79,
    x: 54,
    y: 55,
    z: 55,
    A: 69,
    B: 67,
    C: 73,
    D: 74,
    E: 61,
    F: 58,
    G: 76,
    H: 75,
    I: 28,
    J: 55,
    K: 67,
    L: 58,
    M: 89,
    N: 75,
    O: 78,
    P: 65,
    Q: 78,
    R: 67,
    S: 65,
    T: 65,
    U: 75,
    V: 69,
    W: 98,
    X: 69,
    Y: 67,
    Z: 67,
    0: 64,
    1: 48,
    2: 62,
    3: 64,
    4: 66,
    5: 63,
    6: 65,
    7: 58,
    8: 65,
    9: 65,
    " ": 29,
    "!": 32,
    '"': 49,
    "'": 31,
    "(": 39,
    ")": 39,
    ",": 31,
    "-": 48,
    ".": 31,
    "/": 32,
    ":": 31,
    ";": 31,
    "?": 52,
    "\u2018": 31,
    "\u2019": 31,
    "\u201C": 47,
    "\u201D": 47,
    "\u2026": 82
};
function defaultWidth(text, start = 0, end = text.length) {
    let sum = 0;
    for(let i = start; i < end; i = readCharacter(text, i))sum += defaultWidthMap[text[i]] ?? (isPictographic(text, i) ? 120 : defaultWidthMap.e);
    return sum;
}
function monospaceWidth(text, start = 0, end = text.length) {
    let sum = 0;
    for(let i = start; i < end; i = readCharacter(text, i))sum += isPictographic(text, i) ? 126 : 63;
    return sum;
}
function splitter({ monospace, lineWidth, textOverflow }) {
    if (textOverflow != null || lineWidth == Infinity) return (text)=>text.split(/\r\n?|\n/g);
    const widthof = monospace ? monospaceWidth : defaultWidth;
    const maxWidth = lineWidth * 100;
    return (text)=>lineWrap(text, maxWidth, widthof);
}
function clipper({ monospace, lineWidth, textOverflow }) {
    if (textOverflow == null || lineWidth == Infinity) return (text)=>text;
    const widthof = monospace ? monospaceWidth : defaultWidth;
    const maxWidth = lineWidth * 100;
    switch(textOverflow){
        case "clip-start":
            return (text)=>clipStart(text, maxWidth, widthof, "");
        case "clip-end":
            return (text)=>clipEnd(text, maxWidth, widthof, "");
        case "ellipsis-start":
            return (text)=>clipStart(text, maxWidth, widthof, ellipsis);
        case "ellipsis-middle":
            return (text)=>clipMiddle(text, maxWidth, widthof, ellipsis);
        case "ellipsis-end":
            return (text)=>clipEnd(text, maxWidth, widthof, ellipsis);
    }
}
const ellipsis = "\u2026";
function cut(text, width, widthof, inset) {
    const I = []; // indexes of read character boundaries
    let w = 0; // current line width
    for(let i = 0, j = 0, n = text.length; i < n; i = j){
        j = readCharacter(text, i); // read the next character
        const l = widthof(text, i, j); // current character width
        if (w + l > width) {
            w += inset;
            while(w > width && i > 0)j = i, i = I.pop(), w -= widthof(text, i, j); // remove excess
            return [
                i,
                width - w
            ];
        }
        w += l;
        I.push(i);
    }
    return [
        -1,
        0
    ];
}
function clipEnd(text, width, widthof, ellipsis) {
    text = text.trim(); // ignore leading and trailing whitespace
    const e = widthof(ellipsis);
    const [i] = cut(text, width, widthof, e);
    return i < 0 ? text : text.slice(0, i).trimEnd() + ellipsis;
}
function clipMiddle(text, width, widthof, ellipsis) {
    text = text.trim(); // ignore leading and trailing whitespace
    const w = widthof(text);
    if (w <= width) return text;
    const e = widthof(ellipsis) / 2;
    const [i, ei] = cut(text, width / 2, widthof, e);
    const [j] = cut(text, w - width / 2 - ei + e, widthof, -e); // TODO read spaces?
    return j < 0 ? ellipsis : text.slice(0, i).trimEnd() + ellipsis + text.slice(readCharacter(text, j)).trimStart();
}
function clipStart(text, width, widthof, ellipsis) {
    text = text.trim(); // ignore leading and trailing whitespace
    const w = widthof(text);
    if (w <= width) return text;
    const e = widthof(ellipsis);
    const [j] = cut(text, w - width + e, widthof, -e); // TODO read spaces?
    return j < 0 ? ellipsis : ellipsis + text.slice(readCharacter(text, j)).trimStart();
}
const reCombiner = /[\p{Combining_Mark}\p{Emoji_Modifier}]+/uy;
const rePictographic = /\p{Extended_Pictographic}/uy;
function readCharacter(text, i) {
    i += isSurrogatePair(text, i) ? 2 : 1;
    if (isCombiner(text, i)) i = reCombiner.lastIndex;
    if (isZeroWidthJoiner(text, i)) return readCharacter(text, i + 1);
    return i;
}
// We avoid more expensive regex tests involving Unicode property classes by
// first checking for the common case of 7-bit ASCII characters.
function isAscii(text, i) {
    return text.charCodeAt(i) < 0x80;
}
function isSurrogatePair(text, i) {
    const hi = text.charCodeAt(i);
    if (hi >= 0xd800 && hi < 0xdc00) {
        const lo = text.charCodeAt(i + 1);
        return lo >= 0xdc00 && lo < 0xe000;
    }
    return false;
}
function isZeroWidthJoiner(text, i) {
    return text.charCodeAt(i) === 0x200d;
}
function isCombiner(text, i) {
    return isAscii(text, i) ? false : (reCombiner.lastIndex = i, reCombiner.test(text));
}
function isPictographic(text, i) {
    return isAscii(text, i) ? false : (rePictographic.lastIndex = i, rePictographic.test(text));
}

},{"d3":"17XFv","../context.js":"kyLYX","../defined.js":"3n4Hk","../format.js":"7mxs9","../mark.js":"a4RyP","../options.js":"eJmsy","../style.js":"c9bmo","../template.js":"gIQDL","../transforms/interval.js":"jzD9C","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gIQDL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "template", ()=>template);
function template(strings, ...parts) {
    let n = parts.length;
    // If any of the interpolated parameters are strings rather than functions,
    // bake them into the template to optimize performance during render.
    for(let j = 0, copy = true; j < n; ++j)if (typeof parts[j] !== "function") {
        if (copy) {
            strings = strings.slice(); // copy before mutate
            copy = false;
        }
        strings.splice(j, 2, strings[j] + parts[j] + strings[j + 1]);
        parts.splice(j, 1);
        --j, --n;
    }
    return (i)=>{
        let s = strings[0];
        for(let j = 0; j < n; ++j)s += parts[j](i) + strings[j + 1];
        return s;
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gd2x1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Vector", ()=>Vector);
parcelHelpers.export(exports, "vector", ()=>vector);
parcelHelpers.export(exports, "vectorX", ()=>vectorX);
parcelHelpers.export(exports, "vectorY", ()=>vectorY);
parcelHelpers.export(exports, "spike", ()=>spike);
var _d3 = require("d3");
var _contextJs = require("../context.js");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _styleJs = require("../style.js");
var _templateJs = require("../template.js");
const defaults = {
    ariaLabel: "vector",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: 1.5,
    strokeLinejoin: "round",
    strokeLinecap: "round"
};
const defaultRadius = 3.5;
// The size of the arrowhead is proportional to its length, but we still allow
// the relative size of the head to be controlled via the mark’s width option;
// doubling the default radius will produce an arrowhead that is twice as big.
// That said, we’ll probably want a arrow with a fixed head size, too.
const wingRatio = defaultRadius * 5;
const shapeArrow = {
    draw (context, l, r) {
        const wing = l * r / wingRatio;
        context.moveTo(0, 0);
        context.lineTo(0, -l);
        context.moveTo(-wing, wing - l);
        context.lineTo(0, -l);
        context.lineTo(wing, wing - l);
    }
};
const shapeSpike = {
    draw (context, l, r) {
        context.moveTo(-r, 0);
        context.lineTo(0, -l);
        context.lineTo(r, 0);
    }
};
const shapes = new Map([
    [
        "arrow",
        shapeArrow
    ],
    [
        "spike",
        shapeSpike
    ]
]);
function isShapeObject(value) {
    return value && typeof value.draw === "function";
}
function maybeShape(shape) {
    if (isShapeObject(shape)) return shape;
    const value = shapes.get(`${shape}`.toLowerCase());
    if (value) return value;
    throw new Error(`invalid shape: ${shape}`);
}
class Vector extends (0, _markJs.Mark) {
    constructor(data, options = {}){
        const { x, y, r = defaultRadius, length, rotate, shape = shapeArrow, anchor = "middle", frameAnchor } = options;
        const [vl, cl] = (0, _optionsJs.maybeNumberChannel)(length, 12);
        const [vr, cr] = (0, _optionsJs.maybeNumberChannel)(rotate, 0);
        super(data, {
            x: {
                value: x,
                scale: "x",
                optional: true
            },
            y: {
                value: y,
                scale: "y",
                optional: true
            },
            length: {
                value: vl,
                scale: "length",
                optional: true
            },
            rotate: {
                value: vr,
                optional: true
            }
        }, options, defaults);
        this.r = +r;
        this.length = cl;
        this.rotate = cr;
        this.shape = maybeShape(shape);
        this.anchor = (0, _optionsJs.keyword)(anchor, "anchor", [
            "start",
            "middle",
            "end"
        ]);
        this.frameAnchor = (0, _optionsJs.maybeFrameAnchor)(frameAnchor);
    }
    render(index, scales, channels, dimensions, context) {
        const { x, y } = scales;
        const { x: X, y: Y, length: L, rotate: A } = channels;
        const { length, rotate, anchor, shape, r } = this;
        const [cx, cy] = (0, _styleJs.applyFrameAnchor)(this, dimensions);
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyTransform), this, {
            x: X && x,
            y: Y && y
        }).call((g)=>g.selectAll().data(index).enter().append("path").call((0, _styleJs.applyDirectStyles), this).attr("transform", (0, _templateJs.template)`translate(${X ? (i)=>X[i] : cx},${Y ? (i)=>Y[i] : cy})${A ? (i)=>` rotate(${A[i]})` : rotate ? ` rotate(${rotate})` : ``}${anchor === "start" ? `` : anchor === "end" ? L ? (i)=>` translate(0,${L[i]})` : ` translate(0,${length})` : L ? (i)=>` translate(0,${L[i] / 2})` : ` translate(0,${length / 2})`}`).attr("d", L ? (i)=>{
                const p = (0, _d3.pathRound)();
                shape.draw(p, L[i], r);
                return p;
            } : (()=>{
                const p = (0, _d3.pathRound)();
                shape.draw(p, length, r);
                return p;
            })()).call((0, _styleJs.applyChannelStyles), this, channels)).node();
    }
}
function vector(data, options = {}) {
    let { x, y, ...rest } = options;
    if (options.frameAnchor === undefined) [x, y] = (0, _optionsJs.maybeTuple)(x, y);
    return new Vector(data, {
        ...rest,
        x,
        y
    });
}
function vectorX(data, options = {}) {
    const { x = (0, _optionsJs.identity), ...rest } = options;
    return new Vector(data, {
        ...rest,
        x
    });
}
function vectorY(data, options = {}) {
    const { y = (0, _optionsJs.identity), ...rest } = options;
    return new Vector(data, {
        ...rest,
        y
    });
}
function spike(data, options = {}) {
    const { shape = shapeSpike, stroke = defaults.stroke, strokeWidth = 1, fill = stroke, fillOpacity = 0.3, anchor = "start", ...rest } = options;
    return vector(data, {
        ...rest,
        shape,
        stroke,
        strokeWidth,
        fill,
        fillOpacity,
        anchor
    });
}

},{"d3":"17XFv","../context.js":"kyLYX","../mark.js":"a4RyP","../options.js":"eJmsy","../style.js":"c9bmo","../template.js":"gIQDL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jiFE1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Frame", ()=>Frame);
parcelHelpers.export(exports, "frame", ()=>frame);
var _contextJs = require("../context.js");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _styleJs = require("../style.js");
var _rectJs = require("./rect.js");
const defaults = {
    ariaLabel: "frame",
    fill: "none",
    stroke: "currentColor",
    clip: false
};
const lineDefaults = {
    ariaLabel: "frame",
    fill: null,
    stroke: "currentColor",
    strokeLinecap: "square",
    clip: false
};
class Frame extends (0, _markJs.Mark) {
    constructor(options = {}){
        const { anchor = null } = options;
        super((0, _optionsJs.singleton), undefined, options, anchor == null ? defaults : lineDefaults);
        this.anchor = (0, _optionsJs.maybeKeyword)(anchor, "anchor", [
            "top",
            "right",
            "bottom",
            "left"
        ]);
        (0, _rectJs.rectInsets)(this, options);
        if (!anchor) (0, _rectJs.rectRadii)(this, options);
    }
    render(index, scales, channels, dimensions, context) {
        const { marginTop, marginRight, marginBottom, marginLeft, width, height } = dimensions;
        const { anchor, insetTop, insetRight, insetBottom, insetLeft } = this;
        const { rx, ry, rx1y1, rx1y2, rx2y1, rx2y2 } = this;
        const x1 = marginLeft + insetLeft;
        const x2 = width - marginRight - insetRight;
        const y1 = marginTop + insetTop;
        const y2 = height - marginBottom - insetBottom;
        return (0, _contextJs.create)(anchor ? "svg:line" : rx1y1 || rx1y2 || rx2y1 || rx2y2 ? "svg:path" : "svg:rect", context).datum(0).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyDirectStyles), this).call((0, _styleJs.applyChannelStyles), this, channels).call((0, _styleJs.applyTransform), this, {}).call(anchor === "left" ? (line)=>line.attr("x1", x1).attr("x2", x1).attr("y1", y1).attr("y2", y2) : anchor === "right" ? (line)=>line.attr("x1", x2).attr("x2", x2).attr("y1", y1).attr("y2", y2) : anchor === "top" ? (line)=>line.attr("x1", x1).attr("x2", x2).attr("y1", y1).attr("y2", y1) : anchor === "bottom" ? (line)=>line.attr("x1", x1).attr("x2", x2).attr("y1", y2).attr("y2", y2) : rx1y1 || rx1y2 || rx2y1 || rx2y2 ? (path)=>path.call((0, _rectJs.applyRoundedRect), x1, y1, x2, y2, this) : (rect)=>rect.attr("x", x1).attr("y", y1).attr("width", x2 - x1).attr("height", y2 - y1).attr("rx", rx).attr("ry", ry)).node();
    }
}
function frame(options) {
    return new Frame(options);
}

},{"../context.js":"kyLYX","../mark.js":"a4RyP","../options.js":"eJmsy","../style.js":"c9bmo","./rect.js":"19Awg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"19Awg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Rect", ()=>Rect);
parcelHelpers.export(exports, "rectInsets", ()=>rectInsets);
parcelHelpers.export(exports, "rectRadii", ()=>rectRadii);
parcelHelpers.export(exports, "applyRoundedRect", ()=>applyRoundedRect);
parcelHelpers.export(exports, "rect", ()=>rect);
parcelHelpers.export(exports, "rectX", ()=>rectX);
parcelHelpers.export(exports, "rectY", ()=>rectY);
var _contextJs = require("../context.js");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _scalesJs = require("../scales.js");
var _styleJs = require("../style.js");
var _identityJs = require("../transforms/identity.js");
var _intervalJs = require("../transforms/interval.js");
var _stackJs = require("../transforms/stack.js");
const defaults = {
    ariaLabel: "rect"
};
class Rect extends (0, _markJs.Mark) {
    constructor(data, options = {}){
        const { x1, y1, x2, y2 } = options;
        super(data, {
            x1: {
                value: x1,
                scale: "x",
                type: x1 != null && x2 == null ? "band" : undefined,
                optional: true
            },
            y1: {
                value: y1,
                scale: "y",
                type: y1 != null && y2 == null ? "band" : undefined,
                optional: true
            },
            x2: {
                value: x2,
                scale: "x",
                optional: true
            },
            y2: {
                value: y2,
                scale: "y",
                optional: true
            }
        }, options, defaults);
        rectInsets(this, options);
        rectRadii(this, options);
    }
    render(index, scales, channels, dimensions, context) {
        const { x, y } = scales;
        let { x1: X1, y1: Y1, x2: X2, y2: Y2 } = channels;
        const { marginTop, marginRight, marginBottom, marginLeft, width, height } = dimensions;
        const { projection } = context;
        const { insetTop, insetRight, insetBottom, insetLeft } = this;
        const { rx, ry, rx1y1, rx1y2, rx2y1, rx2y2 } = this;
        if ((X1 || X2) && !projection && (0, _scalesJs.isCollapsed)(x)) X1 = X2 = null; // ignore if collapsed
        if ((Y1 || Y2) && !projection && (0, _scalesJs.isCollapsed)(y)) Y1 = Y2 = null; // ignore if collapsed
        const bx = x?.bandwidth ? x.bandwidth() : 0;
        const by = y?.bandwidth ? y.bandwidth() : 0;
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyTransform), this, {}, 0, 0).call((g)=>g.selectAll().data(index).enter().call(rx1y1 || rx1y2 || rx2y1 || rx2y2 ? (g)=>g.append("path").call((0, _styleJs.applyDirectStyles), this).call(applyRoundedRect, X1 && X2 ? (i)=>X1[i] + (X2[i] < X1[i] ? -insetRight : insetLeft) : X1 ? (i)=>X1[i] + insetLeft : marginLeft + insetLeft, Y1 && Y2 ? (i)=>Y1[i] + (Y2[i] < Y1[i] ? -insetBottom : insetTop) : Y1 ? (i)=>Y1[i] + insetTop : marginTop + insetTop, X1 && X2 ? (i)=>X2[i] - (X2[i] < X1[i] ? -insetLeft : insetRight) : X1 ? (i)=>X1[i] + bx - insetRight : width - marginRight - insetRight, Y1 && Y2 ? (i)=>Y2[i] - (Y2[i] < Y1[i] ? -insetTop : insetBottom) : Y1 ? (i)=>Y1[i] + by - insetBottom : height - marginBottom - insetBottom, this).call((0, _styleJs.applyChannelStyles), this, channels) : (g)=>g.append("rect").call((0, _styleJs.applyDirectStyles), this).attr("x", X1 ? X2 ? (i)=>Math.min(X1[i], X2[i]) + insetLeft : (i)=>X1[i] + insetLeft : marginLeft + insetLeft).attr("y", Y1 ? Y2 ? (i)=>Math.min(Y1[i], Y2[i]) + insetTop : (i)=>Y1[i] + insetTop : marginTop + insetTop).attr("width", X1 ? X2 ? (i)=>Math.max(0, Math.abs(X2[i] - X1[i]) + bx - insetLeft - insetRight) : bx - insetLeft - insetRight : width - marginRight - marginLeft - insetRight - insetLeft).attr("height", Y1 ? Y2 ? (i)=>Math.max(0, Math.abs(Y1[i] - Y2[i]) + by - insetTop - insetBottom) : by - insetTop - insetBottom : height - marginTop - marginBottom - insetTop - insetBottom).call((0, _styleJs.applyAttr), "rx", rx).call((0, _styleJs.applyAttr), "ry", ry).call((0, _styleJs.applyChannelStyles), this, channels))).node();
    }
}
function rectInsets(mark, { inset = 0, insetTop = inset, insetRight = inset, insetBottom = inset, insetLeft = inset } = {}) {
    mark.insetTop = (0, _optionsJs.number)(insetTop);
    mark.insetRight = (0, _optionsJs.number)(insetRight);
    mark.insetBottom = (0, _optionsJs.number)(insetBottom);
    mark.insetLeft = (0, _optionsJs.number)(insetLeft);
}
function rectRadii(mark, { r, rx, ry, rx1 = r, ry1 = r, rx2 = r, ry2 = r, rx1y1 = rx1 !== undefined ? +rx1 : ry1 !== undefined ? +ry1 : 0, rx1y2 = rx1 !== undefined ? +rx1 : ry2 !== undefined ? +ry2 : 0, rx2y1 = rx2 !== undefined ? +rx2 : ry1 !== undefined ? +ry1 : 0, rx2y2 = rx2 !== undefined ? +rx2 : ry2 !== undefined ? +ry2 : 0 } = {}) {
    if (rx1y1 || rx1y2 || rx2y1 || rx2y2) {
        mark.rx1y1 = rx1y1;
        mark.rx1y2 = rx1y2;
        mark.rx2y1 = rx2y1;
        mark.rx2y2 = rx2y2;
    } else {
        mark.rx = (0, _styleJs.impliedString)(rx, "auto"); // number or percentage
        mark.ry = (0, _styleJs.impliedString)(ry, "auto");
    }
}
function applyRoundedRect(selection, X1, Y1, X2, Y2, mark) {
    const { rx1y1: r11, rx1y2: r12, rx2y1: r21, rx2y2: r22 } = mark;
    if (typeof X1 !== "function") X1 = (0, _optionsJs.constant)(X1);
    if (typeof Y1 !== "function") Y1 = (0, _optionsJs.constant)(Y1);
    if (typeof X2 !== "function") X2 = (0, _optionsJs.constant)(X2);
    if (typeof Y2 !== "function") Y2 = (0, _optionsJs.constant)(Y2);
    const rx = Math.max(Math.abs(r11 + r21), Math.abs(r12 + r22));
    const ry = Math.max(Math.abs(r11 + r12), Math.abs(r21 + r22));
    selection.attr("d", (i)=>{
        const x1 = X1(i);
        const y1 = Y1(i);
        const x2 = X2(i);
        const y2 = Y2(i);
        const ix = x1 > x2;
        const iy = y1 > y2;
        const l = ix ? x2 : x1;
        const r = ix ? x1 : x2;
        const t = iy ? y2 : y1;
        const b = iy ? y1 : y2;
        const k = Math.min(1, (r - l) / rx, (b - t) / ry);
        const tl = k * (ix ? iy ? r22 : r21 : iy ? r12 : r11);
        const tr = k * (ix ? iy ? r12 : r11 : iy ? r22 : r21);
        const br = k * (ix ? iy ? r11 : r12 : iy ? r21 : r22);
        const bl = k * (ix ? iy ? r21 : r22 : iy ? r11 : r12);
        return `M${l},${t + biasY(tl, bl)}A${tl},${tl} 0 0 ${tl < 0 ? 0 : 1} ${l + biasX(tl, bl)},${t}` + `H${r - biasX(tr, br)}A${tr},${tr} 0 0 ${tr < 0 ? 0 : 1} ${r},${t + biasY(tr, br)}` + `V${b - biasY(br, tr)}A${br},${br} 0 0 ${br < 0 ? 0 : 1} ${r - biasX(br, tr)},${b}` + `H${l + biasX(bl, tl)}A${bl},${bl} 0 0 ${bl < 0 ? 0 : 1} ${l},${b - biasY(bl, tl)}` + `Z`;
    });
}
/**
 * If the opposing corner has a negative radius r2, if this corner has a
 * negative radius r1, this corner’s “wing” will extend horizontally rather than
 * vertically.
 */ function biasX(r1, r2) {
    return r2 < 0 ? r1 : Math.abs(r1);
}
/**
 * If the opposing corner has a negative radius r2, if this corner has a
 * negative radius r1, this corner’s “wing” will extend horizontally rather than
 * vertically.
 */ function biasY(r1, r2) {
    return r2 < 0 ? Math.abs(r1) : r1;
}
function rect(data, options) {
    return new Rect(data, (0, _intervalJs.maybeTrivialIntervalX)((0, _intervalJs.maybeTrivialIntervalY)(options)));
}
function rectX(data, options = {}) {
    if (!(0, _optionsJs.hasXY)(options)) options = {
        ...options,
        y: (0, _optionsJs.indexOf),
        x2: (0, _optionsJs.identity),
        interval: 1
    };
    return new Rect(data, (0, _stackJs.maybeStackX)((0, _intervalJs.maybeTrivialIntervalY)((0, _identityJs.maybeIdentityX)(options))));
}
function rectY(data, options = {}) {
    if (!(0, _optionsJs.hasXY)(options)) options = {
        ...options,
        x: (0, _optionsJs.indexOf),
        y2: (0, _optionsJs.identity),
        interval: 1
    };
    return new Rect(data, (0, _stackJs.maybeStackY)((0, _intervalJs.maybeTrivialIntervalX)((0, _identityJs.maybeIdentityY)(options))));
}

},{"../context.js":"kyLYX","../mark.js":"a4RyP","../options.js":"eJmsy","../scales.js":"cZh8W","../style.js":"c9bmo","../transforms/identity.js":"kmkvZ","../transforms/interval.js":"jzD9C","../transforms/stack.js":"cZguR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kmkvZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maybeIdentityX", ()=>maybeIdentityX);
parcelHelpers.export(exports, "maybeIdentityY", ()=>maybeIdentityY);
var _optionsJs = require("../options.js");
function maybeIdentityX(options = {}) {
    return (0, _optionsJs.hasX)(options) ? options : {
        ...options,
        x: (0, _optionsJs.identity)
    };
}
function maybeIdentityY(options = {}) {
    return (0, _optionsJs.hasY)(options) ? options : {
        ...options,
        y: (0, _optionsJs.identity)
    };
}

},{"../options.js":"eJmsy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cZguR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stackX", ()=>stackX);
parcelHelpers.export(exports, "stackX1", ()=>stackX1);
parcelHelpers.export(exports, "stackX2", ()=>stackX2);
parcelHelpers.export(exports, "stackY", ()=>stackY);
parcelHelpers.export(exports, "stackY1", ()=>stackY1);
parcelHelpers.export(exports, "stackY2", ()=>stackY2);
parcelHelpers.export(exports, "maybeStackX", ()=>maybeStackX);
parcelHelpers.export(exports, "maybeStackY", ()=>maybeStackY);
var _d3 = require("d3");
var _definedJs = require("../defined.js");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _basicJs = require("./basic.js");
var _exclusiveFacetsJs = require("./exclusiveFacets.js");
function stackX(stackOptions = {}, options = {}) {
    if (arguments.length === 1) [stackOptions, options] = mergeOptions(stackOptions);
    const { y1, y = y1, x, ...rest } = options; // note: consumes x!
    const [transform, Y, x1, x2] = stack(y, x, "y", "x", stackOptions, rest);
    return {
        ...transform,
        y1,
        y: Y,
        x1,
        x2,
        x: (0, _optionsJs.mid)(x1, x2)
    };
}
function stackX1(stackOptions = {}, options = {}) {
    if (arguments.length === 1) [stackOptions, options] = mergeOptions(stackOptions);
    const { y1, y = y1, x } = options;
    const [transform, Y, X] = stack(y, x, "y", "x", stackOptions, options);
    return {
        ...transform,
        y1,
        y: Y,
        x: X
    };
}
function stackX2(stackOptions = {}, options = {}) {
    if (arguments.length === 1) [stackOptions, options] = mergeOptions(stackOptions);
    const { y1, y = y1, x } = options;
    const [transform, Y, , X] = stack(y, x, "y", "x", stackOptions, options);
    return {
        ...transform,
        y1,
        y: Y,
        x: X
    };
}
function stackY(stackOptions = {}, options = {}) {
    if (arguments.length === 1) [stackOptions, options] = mergeOptions(stackOptions);
    const { x1, x = x1, y, ...rest } = options; // note: consumes y!
    const [transform, X, y1, y2] = stack(x, y, "x", "y", stackOptions, rest);
    return {
        ...transform,
        x1,
        x: X,
        y1,
        y2,
        y: (0, _optionsJs.mid)(y1, y2)
    };
}
function stackY1(stackOptions = {}, options = {}) {
    if (arguments.length === 1) [stackOptions, options] = mergeOptions(stackOptions);
    const { x1, x = x1, y } = options;
    const [transform, X, Y] = stack(x, y, "x", "y", stackOptions, options);
    return {
        ...transform,
        x1,
        x: X,
        y: Y
    };
}
function stackY2(stackOptions = {}, options = {}) {
    if (arguments.length === 1) [stackOptions, options] = mergeOptions(stackOptions);
    const { x1, x = x1, y } = options;
    const [transform, X, , Y] = stack(x, y, "x", "y", stackOptions, options);
    return {
        ...transform,
        x1,
        x: X,
        y: Y
    };
}
function maybeStackX({ x, x1, x2, ...options } = {}) {
    options = (0, _markJs.withTip)(options, "y");
    if (x1 === undefined && x2 === undefined) return stackX({
        x,
        ...options
    });
    [x1, x2] = (0, _optionsJs.maybeZero)(x, x1, x2);
    return {
        ...options,
        x1,
        x2
    };
}
function maybeStackY({ y, y1, y2, ...options } = {}) {
    options = (0, _markJs.withTip)(options, "x");
    if (y1 === undefined && y2 === undefined) return stackY({
        y,
        ...options
    });
    [y1, y2] = (0, _optionsJs.maybeZero)(y, y1, y2);
    return {
        ...options,
        y1,
        y2
    };
}
// The reverse option is ambiguous: it is both a stack option and a basic
// transform. If only one options object is specified, we interpret it as a
// stack option, and therefore must remove it from the propagated options.
function mergeOptions(options) {
    const { offset, order, reverse, ...rest } = options;
    return [
        {
            offset,
            order,
            reverse
        },
        rest
    ];
}
// This is a hint to the tooltip mark that the y1 and y2 channels (for stackY,
// or conversely x1 and x2 for stackX) represent a stacked length, and that the
// tooltip should therefore show y2-y1 instead of an extent.
const lengthy = {
    length: true
};
function stack(x, y = (0, _optionsJs.one), kx, ky, { offset, order, reverse }, options) {
    if (y === null) throw new Error(`stack requires ${ky}`);
    const z = (0, _optionsJs.maybeZ)(options);
    const [X, setX] = (0, _optionsJs.maybeColumn)(x);
    const [Y1, setY1] = (0, _optionsJs.column)(y);
    const [Y2, setY2] = (0, _optionsJs.column)(y);
    Y1.hint = Y2.hint = lengthy;
    offset = maybeOffset(offset);
    order = maybeOrder(order, offset, ky);
    return [
        (0, _basicJs.basic)(options, (data, facets, plotOptions)=>{
            ({ data, facets } = (0, _exclusiveFacetsJs.exclusiveFacets)(data, facets));
            const X = x == null ? undefined : setX((0, _optionsJs.maybeApplyInterval)((0, _optionsJs.valueof)(data, x), plotOptions?.[kx]));
            const Y = (0, _optionsJs.valueof)(data, y, Float64Array);
            const Z = (0, _optionsJs.valueof)(data, z);
            const compare = order && order(data, X, Y, Z);
            const n = (0, _optionsJs.lengthof)(data);
            const Y1 = setY1(new Float64Array(n));
            const Y2 = setY2(new Float64Array(n));
            const facetstacks = [];
            for (const facet of facets){
                const stacks = X ? Array.from((0, _d3.group)(facet, (i)=>X[i]).values()) : [
                    facet
                ];
                if (compare) for (const stack of stacks)stack.sort(compare);
                for (const stack of stacks){
                    let yn = 0;
                    let yp = 0;
                    if (reverse) stack.reverse();
                    for (const i of stack){
                        const y = Y[i];
                        if (y < 0) yn = Y2[i] = (Y1[i] = yn) + y;
                        else if (y > 0) yp = Y2[i] = (Y1[i] = yp) + y;
                        else Y2[i] = Y1[i] = yp; // NaN or zero
                    }
                }
                facetstacks.push(stacks);
            }
            if (offset) offset(facetstacks, Y1, Y2, Z);
            return {
                data,
                facets
            };
        }),
        X,
        Y1,
        Y2
    ];
}
function maybeOffset(offset) {
    if (offset == null) return;
    if (typeof offset === "function") return offset;
    switch(`${offset}`.toLowerCase()){
        case "expand":
        case "normalize":
            return offsetExpand;
        case "center":
        case "silhouette":
            return offsetCenter;
        case "wiggle":
            return offsetWiggle;
    }
    throw new Error(`unknown offset: ${offset}`);
}
// Given a single stack, returns the minimum and maximum values from the given
// Y2 column. Note that this relies on Y2 always being the outer column for
// diverging values.
function extent(stack, Y2) {
    let min = 0, max = 0;
    for (const i of stack){
        const y = Y2[i];
        if (y < min) min = y;
        if (y > max) max = y;
    }
    return [
        min,
        max
    ];
}
function offsetExpand(facetstacks, Y1, Y2) {
    for (const stacks of facetstacks)for (const stack of stacks){
        const [yn, yp] = extent(stack, Y2);
        for (const i of stack){
            const m = 1 / (yp - yn || 1);
            Y1[i] = m * (Y1[i] - yn);
            Y2[i] = m * (Y2[i] - yn);
        }
    }
}
function offsetCenter(facetstacks, Y1, Y2) {
    for (const stacks of facetstacks){
        for (const stack of stacks){
            const [yn, yp] = extent(stack, Y2);
            for (const i of stack){
                const m = (yp + yn) / 2;
                Y1[i] -= m;
                Y2[i] -= m;
            }
        }
        offsetZero(stacks, Y1, Y2);
    }
    offsetCenterFacets(facetstacks, Y1, Y2);
}
function offsetWiggle(facetstacks, Y1, Y2, Z) {
    for (const stacks of facetstacks){
        const prev = new (0, _d3.InternMap)();
        let y = 0;
        for (const stack of stacks){
            let j = -1;
            const Fi = stack.map((i)=>Math.abs(Y2[i] - Y1[i]));
            const Df = stack.map((i)=>{
                j = Z ? Z[i] : ++j;
                const value = Y2[i] - Y1[i];
                const diff = prev.has(j) ? value - prev.get(j) : 0;
                prev.set(j, value);
                return diff;
            });
            const Cf1 = [
                0,
                ...(0, _d3.cumsum)(Df)
            ];
            for (const i of stack){
                Y1[i] += y;
                Y2[i] += y;
            }
            const s1 = (0, _d3.sum)(Fi);
            if (s1) y -= (0, _d3.sum)(Fi, (d, i)=>(Df[i] / 2 + Cf1[i]) * d) / s1;
        }
        offsetZero(stacks, Y1, Y2);
    }
    offsetCenterFacets(facetstacks, Y1, Y2);
}
function offsetZero(stacks, Y1, Y2) {
    const m = (0, _d3.min)(stacks, (stack)=>(0, _d3.min)(stack, (i)=>Y1[i]));
    for (const stack of stacks)for (const i of stack){
        Y1[i] -= m;
        Y2[i] -= m;
    }
}
function offsetCenterFacets(facetstacks, Y1, Y2) {
    const n = facetstacks.length;
    if (n === 1) return;
    const facets = facetstacks.map((stacks)=>stacks.flat());
    const m = facets.map((I)=>((0, _d3.min)(I, (i)=>Y1[i]) + (0, _d3.max)(I, (i)=>Y2[i])) / 2);
    const m0 = (0, _d3.min)(m);
    for(let j = 0; j < n; j++){
        const p = m0 - m[j];
        for (const i of facets[j]){
            Y1[i] += p;
            Y2[i] += p;
        }
    }
}
function maybeOrder(order, offset, ky) {
    if (order === undefined && offset === offsetWiggle) return orderInsideOut((0, _definedJs.ascendingDefined));
    if (order == null) return;
    if (typeof order === "string") {
        const negate = order.startsWith("-");
        const compare = negate ? (0, _definedJs.descendingDefined) : (0, _definedJs.ascendingDefined);
        switch((negate ? order.slice(1) : order).toLowerCase()){
            case "value":
            case ky:
                return orderY(compare);
            case "z":
                return orderZ(compare);
            case "sum":
                return orderSum(compare);
            case "appearance":
                return orderAppearance(compare);
            case "inside-out":
                return orderInsideOut(compare);
        }
        return orderAccessor((0, _optionsJs.field)(order));
    }
    if (typeof order === "function") return (order.length === 1 ? orderAccessor : orderComparator)(order);
    if ((0, _optionsJs.isArray)(order)) return orderGiven(order);
    throw new Error(`invalid order: ${order}`);
}
// by value
function orderY(compare) {
    return (data, X, Y)=>(i, j)=>compare(Y[i], Y[j]);
}
// by location
function orderZ(compare) {
    return (data, X, Y, Z)=>(i, j)=>compare(Z[i], Z[j]);
}
// by sum of value (a.k.a. “ascending”)
function orderSum(compare) {
    return orderZDomain(compare, (data, X, Y, Z)=>(0, _d3.groupSort)((0, _optionsJs.range)(data), (I)=>(0, _d3.sum)(I, (i)=>Y[i]), (i)=>Z[i]));
}
// by x = argmax of value
function orderAppearance(compare) {
    return orderZDomain(compare, (data, X, Y, Z)=>(0, _d3.groupSort)((0, _optionsJs.range)(data), (I)=>X[(0, _d3.greatest)(I, (i)=>Y[i])], (i)=>Z[i]));
}
// by x = argmax of value, but rearranged inside-out by alternating series
// according to the sign of a running divergence of sums
function orderInsideOut(compare) {
    return orderZDomain(compare, (data, X, Y, Z)=>{
        const I = (0, _optionsJs.range)(data);
        const K = (0, _d3.groupSort)(I, (I)=>X[(0, _d3.greatest)(I, (i)=>Y[i])], (i)=>Z[i]);
        const sums = (0, _d3.rollup)(I, (I)=>(0, _d3.sum)(I, (i)=>Y[i]), (i)=>Z[i]);
        const Kp = [], Kn = [];
        let s = 0;
        for (const k of K)if (s < 0) {
            s += sums.get(k);
            Kp.push(k);
        } else {
            s -= sums.get(k);
            Kn.push(k);
        }
        return Kn.reverse().concat(Kp);
    });
}
function orderAccessor(f) {
    return (data)=>{
        const O = (0, _optionsJs.valueof)(data, f);
        return (i, j)=>(0, _definedJs.ascendingDefined)(O[i], O[j]);
    };
}
function orderComparator(f) {
    return (data)=>{
        return (0, _optionsJs.isArray)(data) ? (i, j)=>f(data[i], data[j]) : (i, j)=>f(data.get(i), data.get(j));
    };
}
function orderGiven(domain) {
    return orderZDomain((0, _definedJs.ascendingDefined), ()=>domain);
}
// Given an ordering (domain) of distinct values in z that can be derived from
// the data, returns a comparator that can be used to sort stacks. Note that
// this is a series order: it will be consistent across stacks.
function orderZDomain(compare, domain) {
    return (data, X, Y, Z)=>{
        if (!Z) throw new Error("missing channel: z");
        const map = new (0, _d3.InternMap)(domain(data, X, Y, Z).map((d, i)=>[
                d,
                i
            ]));
        return (i, j)=>compare(map.get(Z[i]), map.get(Z[j]));
    };
}

},{"d3":"17XFv","../defined.js":"3n4Hk","../mark.js":"a4RyP","../options.js":"eJmsy","./basic.js":"hU2qc","./exclusiveFacets.js":"kmCMQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kmCMQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "exclusiveFacets", ()=>exclusiveFacets);
var _optionsJs = require("../options.js");
function exclusiveFacets(data, facets) {
    if (facets.length === 1) return {
        data,
        facets
    }; // only one facet; trivially exclusive
    const n = (0, _optionsJs.lengthof)(data);
    const O = new Uint8Array(n);
    let overlaps = 0;
    // Count the number of overlapping indexes across facets.
    for (const facet of facets)for (const i of facet){
        if (O[i]) ++overlaps;
        O[i] = 1;
    }
    // Do nothing if the facets are already exclusive.
    if (overlaps === 0) return {
        data,
        facets
    }; // facets are exclusive
    // For each overlapping index (duplicate), assign a new unique index at the
    // end of the existing array, duplicating the datum. For example, [[0, 1, 2],
    // [2, 1, 3]] would become [[0, 1, 2], [4, 5, 3]]. Also attach a reindex to
    // the data to preserve the association of channel values specified as arrays.
    data = (0, _optionsJs.slice)(data);
    const R = data[0, _optionsJs.reindex] = new Uint32Array(n + overlaps);
    facets = facets.map((facet)=>(0, _optionsJs.slice)(facet, Uint32Array));
    let j = n;
    O.fill(0);
    for (const facet of facets)for(let k = 0, m = facet.length; k < m; ++k){
        const i = facet[k];
        if (O[i]) facet[k] = j, data[j] = data[i], R[j] = i, ++j;
        else R[i] = i;
        O[i] = 1;
    }
    return {
        data,
        facets
    };
}

},{"../options.js":"eJmsy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c2zhy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Tip", ()=>Tip);
parcelHelpers.export(exports, "tip", ()=>tip);
var _d3 = require("d3");
var _channelJs = require("../channel.js");
var _contextJs = require("../context.js");
var _definedJs = require("../defined.js");
var _formatJs = require("../format.js");
var _pointerJs = require("../interactions/pointer.js");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _styleJs = require("../style.js");
var _axisJs = require("./axis.js");
var _textJs = require("./text.js");
const defaults = {
    ariaLabel: "tip",
    fill: "var(--plot-background)",
    stroke: "currentColor"
};
// These channels are not displayed in the default tip; see formatChannels.
const ignoreChannels = new Set([
    "geometry",
    "href",
    "src",
    "ariaLabel",
    "scales"
]);
class Tip extends (0, _markJs.Mark) {
    constructor(data, options = {}){
        if (options.tip) options = {
            ...options,
            tip: false
        };
        if (options.title === undefined && (0, _optionsJs.isIterable)(data) && (0, _optionsJs.isTextual)(data)) options = {
            ...options,
            title: (0, _optionsJs.identity)
        };
        const { x, y, x1, x2, y1, y2, anchor, preferredAnchor = "bottom", monospace, fontFamily = monospace ? "ui-monospace, monospace" : undefined, fontSize, fontStyle, fontVariant, fontWeight, lineHeight = 1, lineWidth = 20, frameAnchor, format, textAnchor = "start", textOverflow, textPadding = 8, title, pointerSize = 12, pathFilter = "drop-shadow(0 3px 4px rgba(0,0,0,0.2))" } = options;
        super(data, {
            x: {
                value: x1 != null && x2 != null ? null : x,
                scale: "x",
                optional: true
            },
            y: {
                value: y1 != null && y2 != null ? null : y,
                scale: "y",
                optional: true
            },
            x1: {
                value: x1,
                scale: "x",
                optional: x2 == null
            },
            y1: {
                value: y1,
                scale: "y",
                optional: y2 == null
            },
            x2: {
                value: x2,
                scale: "x",
                optional: x1 == null
            },
            y2: {
                value: y2,
                scale: "y",
                optional: y1 == null
            },
            title: {
                value: title,
                optional: true
            } // filter: defined
        }, options, defaults);
        this.anchor = (0, _optionsJs.maybeAnchor)(anchor, "anchor");
        this.preferredAnchor = (0, _optionsJs.maybeAnchor)(preferredAnchor, "preferredAnchor");
        this.frameAnchor = (0, _optionsJs.maybeFrameAnchor)(frameAnchor);
        this.textAnchor = (0, _styleJs.impliedString)(textAnchor, "middle");
        this.textPadding = +textPadding;
        this.pointerSize = +pointerSize;
        this.pathFilter = (0, _optionsJs.string)(pathFilter);
        this.lineHeight = +lineHeight;
        this.lineWidth = +lineWidth;
        this.textOverflow = (0, _textJs.maybeTextOverflow)(textOverflow);
        this.monospace = !!monospace;
        this.fontFamily = (0, _optionsJs.string)(fontFamily);
        this.fontSize = (0, _optionsJs.number)(fontSize);
        this.fontStyle = (0, _optionsJs.string)(fontStyle);
        this.fontVariant = (0, _optionsJs.string)(fontVariant);
        this.fontWeight = (0, _optionsJs.string)(fontWeight);
        for(const key in defaults)if (key in this.channels) this[key] = defaults[key]; // apply default even if channel
        this.splitLines = (0, _textJs.splitter)(this);
        this.clipLine = (0, _textJs.clipper)(this);
        this.format = typeof format === "string" || typeof format === "function" ? {
            title: format
        } : {
            ...format
        }; // defensive copy before mutate; also promote nullish to empty
    }
    render(index, scales, values, dimensions, context) {
        const mark = this;
        const { x, y, fx, fy } = scales;
        const { ownerSVGElement: svg, document } = context;
        const { anchor, monospace, lineHeight, lineWidth } = this;
        const { textPadding: r, pointerSize: m, pathFilter } = this;
        const { marginTop, marginLeft } = dimensions;
        // The anchor position is the middle of x1 & y1 and x2 & y2, if available,
        // or x & y; the former is considered more specific because it’s how we
        // disable the implicit stack and interval transforms. If any dimension is
        // unspecified, we fallback to the frame anchor. We also need to know the
        // facet offsets to detect when the tip would draw outside the plot, and
        // thus we need to change the orientation.
        const { x1: X1, y1: Y1, x2: X2, y2: Y2, x: X = X1 ?? X2, y: Y = Y1 ?? Y2 } = values;
        const ox = fx ? fx(index.fx) - marginLeft : 0;
        const oy = fy ? fy(index.fy) - marginTop : 0;
        // The order of precedence for the anchor position is: the middle of x1 & y1
        // and x2 & y2; or x1 & y1 (e.g., area); or lastly x & y. If a dimension is
        // unspecified, the frame anchor is used.
        const [cx, cy] = (0, _styleJs.applyFrameAnchor)(this, dimensions);
        const px = (0, _pointerJs.anchorX)(values, cx);
        const py = (0, _pointerJs.anchorY)(values, cy);
        // Resolve the text metric implementation. We may need an ellipsis for text
        // truncation, so we optimistically compute the ellipsis width.
        const widthof = monospace ? (0, _textJs.monospaceWidth) : (0, _textJs.defaultWidth);
        const ee = widthof((0, _textJs.ellipsis));
        // If there’s a title channel, display that as-is; otherwise, show multiple
        // channels as name-value pairs.
        let sources, format;
        if ("title" in values) {
            sources = getSourceChannels.call(this, {
                title: values.channels.title
            }, scales);
            format = formatTitle;
        } else {
            sources = getSourceChannels.call(this, values.channels, scales);
            format = formatChannels;
        }
        // We don’t call applyChannelStyles because we only use the channels to
        // derive the content of the tip, not its aesthetics.
        const g = (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _textJs.applyIndirectTextStyles), this).call((0, _styleJs.applyTransform), this, {
            x: X && x,
            y: Y && y
        }).call((g)=>g.selectAll().data(index).enter().append("g").attr("transform", (i)=>`translate(${Math.round(px(i))},${Math.round(py(i))})`) // crisp edges
            .call((0, _styleJs.applyDirectStyles), this).call((g)=>g.append("path").attr("filter", pathFilter)).call((g)=>g.append("text").each(function(i) {
                    const that = (0, _d3.select)(this);
                    // prevent style inheritance (from path)
                    this.setAttribute("fill", "currentColor");
                    this.setAttribute("fill-opacity", 1);
                    this.setAttribute("stroke", "none");
                    // iteratively render each channel value
                    const lines = format.call(mark, i, index, sources, scales, values);
                    if (typeof lines === "string") for (const line of mark.splitLines(lines))renderLine(that, {
                        value: mark.clipLine(line)
                    });
                    else {
                        const labels = new Set();
                        for (const line of lines){
                            const { label = "" } = line;
                            if (label && labels.has(label)) continue;
                            else labels.add(label);
                            renderLine(that, line);
                        }
                    }
                })));
        // Renders a single line (a name-value pair) to the tip, truncating the text
        // as needed, and adding a title if the text is truncated. Note that this is
        // just the initial layout of the text; in postrender we will compute the
        // exact text metrics and translate the text as needed once we know the
        // tip’s orientation (anchor).
        function renderLine(selection, { label, value, color, opacity }) {
            label ??= "", value ??= "";
            const swatch = color != null || opacity != null;
            let title;
            let w = lineWidth * 100;
            const [j] = (0, _textJs.cut)(label, w, widthof, ee);
            if (j >= 0) {
                // label is truncated
                label = label.slice(0, j).trimEnd() + (0, _textJs.ellipsis);
                title = value.trim();
                value = "";
            } else {
                if (label || !value && !swatch) value = " " + value;
                const [k] = (0, _textJs.cut)(value, w - widthof(label), widthof, ee);
                if (k >= 0) {
                    // value is truncated
                    title = value.trim();
                    value = value.slice(0, k).trimEnd() + (0, _textJs.ellipsis);
                }
            }
            const line = selection.append("tspan").attr("x", 0).attr("dy", `${lineHeight}em`).text("\u200B"); // zwsp for double-click
            if (label) line.append("tspan").attr("font-weight", "bold").text(label);
            if (value) line.append(()=>document.createTextNode(value));
            if (swatch) line.append("tspan").text(" \u25A0").attr("fill", color).attr("fill-opacity", opacity).style("user-select", "none"); // prettier-ignore
            if (title) line.append("title").text(title);
        }
        // Only after the plot is attached to the page can we compute the exact text
        // metrics needed to determine the tip size and orientation (anchor).
        function postrender() {
            const { width, height } = dimensions.facet ?? dimensions;
            g.selectChildren().each(function(i) {
                let { x: tx, width: w, height: h } = this.getBBox();
                w = Math.round(w), h = Math.round(h); // crisp edges
                let a = anchor; // use the specified anchor, if any
                if (a === undefined) {
                    const x = px(i) + ox;
                    const y = py(i) + oy;
                    const fitLeft = x + w + m + r * 2 < width;
                    const fitRight = x - w - m - r * 2 > 0;
                    const fitTop = y + h + m + r * 2 < height;
                    const fitBottom = y - h - m - r * 2 > 0;
                    a = fitLeft && fitRight ? fitTop && fitBottom ? mark.preferredAnchor : fitBottom ? "bottom" : "top" : fitTop && fitBottom ? fitLeft ? "left" : "right" : (fitLeft || fitRight) && (fitTop || fitBottom) ? `${fitBottom ? "bottom" : "top"}-${fitLeft ? "left" : "right"}` : mark.preferredAnchor;
                }
                const path = this.firstChild; // note: assumes exactly two children!
                const text = this.lastChild; // note: assumes exactly two children!
                path.setAttribute("d", getPath(a, m, r, w, h));
                if (tx) for (const t of text.childNodes)t.setAttribute("x", -tx);
                text.setAttribute("y", `${+getLineOffset(a, text.childNodes.length, lineHeight).toFixed(6)}em`);
                text.setAttribute("transform", `translate(${getTextTranslate(a, m, r, w, h)})`);
            });
            g.attr("visibility", null);
        }
        // Wait until the plot is inserted into the page so that we can use getBBox
        // to compute the exact text dimensions. If the SVG is already connected, as
        // when the pointer interaction triggers the re-render, use a faster
        // microtask instead of an animation frame; if this SSR (e.g., JSDOM), skip
        // this step. Perhaps this could be done synchronously; getting the
        // dimensions of the SVG is easy, and although accurate text metrics are
        // hard, we could use approximate heuristics.
        if (index.length) {
            g.attr("visibility", "hidden"); // hide until postrender
            if (svg.isConnected) Promise.resolve().then(postrender);
            else if (typeof requestAnimationFrame !== "undefined") requestAnimationFrame(postrender);
        }
        return g.node();
    }
}
function tip(data, { x, y, ...options } = {}) {
    if (options.frameAnchor === undefined) [x, y] = (0, _optionsJs.maybeTuple)(x, y);
    return new Tip(data, {
        ...options,
        x,
        y
    });
}
function getLineOffset(anchor, length, lineHeight) {
    return /^top(?:-|$)/.test(anchor) ? 0.94 - lineHeight : -0.29 - length * lineHeight;
}
function getTextTranslate(anchor, m, r, width, height) {
    switch(anchor){
        case "middle":
            return [
                -width / 2,
                height / 2
            ];
        case "top-left":
            return [
                r,
                m + r
            ];
        case "top":
            return [
                -width / 2,
                m / 2 + r
            ];
        case "top-right":
            return [
                -width - r,
                m + r
            ];
        case "right":
            return [
                -m / 2 - width - r,
                height / 2
            ];
        case "bottom-left":
            return [
                r,
                -m - r
            ];
        case "bottom":
            return [
                -width / 2,
                -m / 2 - r
            ];
        case "bottom-right":
            return [
                -width - r,
                -m - r
            ];
        case "left":
            return [
                r + m / 2,
                height / 2
            ];
    }
}
function getPath(anchor, m, r, width, height) {
    const w = width + r * 2;
    const h = height + r * 2;
    switch(anchor){
        case "middle":
            return `M${-w / 2},${-h / 2}h${w}v${h}h${-w}z`;
        case "top-left":
            return `M0,0l${m},${m}h${w - m}v${h}h${-w}z`;
        case "top":
            return `M0,0l${m / 2},${m / 2}h${(w - m) / 2}v${h}h${-w}v${-h}h${(w - m) / 2}z`;
        case "top-right":
            return `M0,0l${-m},${m}h${m - w}v${h}h${w}z`;
        case "right":
            return `M0,0l${-m / 2},${-m / 2}v${m / 2 - h / 2}h${-w}v${h}h${w}v${m / 2 - h / 2}z`;
        case "bottom-left":
            return `M0,0l${m},${-m}h${w - m}v${-h}h${-w}z`;
        case "bottom":
            return `M0,0l${m / 2},${-m / 2}h${(w - m) / 2}v${-h}h${-w}v${h}h${(w - m) / 2}z`;
        case "bottom-right":
            return `M0,0l${-m},${-m}h${m - w}v${-h}h${w}z`;
        case "left":
            return `M0,0l${m / 2},${-m / 2}v${m / 2 - h / 2}h${w}v${h}h${-w}v${m / 2 - h / 2}z`;
    }
}
// Note: mutates this.format!
function getSourceChannels(channels, scales) {
    const sources = {};
    // Promote x and y shorthand for paired channels (in order).
    let format = this.format;
    format = maybeExpandPairedFormat(format, channels, "x");
    format = maybeExpandPairedFormat(format, channels, "y");
    this.format = format;
    // Prioritize channels with explicit formats, in the given order.
    for(const key in format){
        const value = format[key];
        if (value === null || value === false) continue;
        else if (key === "fx" || key === "fy") sources[key] = true;
        else {
            const source = (0, _channelJs.getSource)(channels, key);
            if (source) sources[key] = source;
        }
    }
    // Then fallback to all other (non-ignored) channels.
    for(const key in channels){
        if (key in sources || key in format || ignoreChannels.has(key)) continue;
        if ((key === "x" || key === "y") && channels.geometry) continue; // ignore x & y on geo
        const source = (0, _channelJs.getSource)(channels, key);
        if (source) {
            // Ignore color channels if the values are all literal colors.
            if (source.scale == null && source.defaultScale === "color") continue;
            sources[key] = source;
        }
    }
    // And lastly facet channels, but only if this mark is faceted.
    if (this.facet) {
        if (scales.fx && !("fx" in format)) sources.fx = true;
        if (scales.fy && !("fy" in format)) sources.fy = true;
    }
    // Promote shorthand string formats, and materialize default formats.
    for(const key in sources){
        const format = this.format[key];
        if (typeof format === "string") {
            const value = sources[key]?.value ?? scales[key]?.domain() ?? [];
            this.format[key] = ((0, _optionsJs.isTemporal)(value) ? (0, _d3.utcFormat) : (0, _d3.format))(format);
        } else if (format === undefined || format === true) {
            // For ordinal scales, the inferred tick format can be more concise, such
            // as only showing the year for yearly data.
            const scale = scales[key];
            this.format[key] = scale?.bandwidth ? (0, _axisJs.inferTickFormat)(scale, scale.domain()) : (0, _formatJs.formatDefault);
        }
    }
    return sources;
}
// Promote x and y shorthand for paired channels, while preserving order.
function maybeExpandPairedFormat(format, channels, key) {
    if (!(key in format)) return format;
    const key1 = `${key}1`;
    const key2 = `${key}2`;
    if ((key1 in format || !(key1 in channels)) && (key2 in format || !(key2 in channels))) return format;
    const entries = Object.entries(format);
    const value = format[key];
    entries.splice(entries.findIndex(([name])=>name === key) + 1, 0, [
        key1,
        value
    ], [
        key2,
        value
    ]);
    return Object.fromEntries(entries);
}
function formatTitle(i, index, { title }) {
    return this.format.title(title.value[i], i);
}
function* formatChannels(i, index, channels, scales, values) {
    for(const key in channels){
        if (key === "fx" || key === "fy") {
            yield {
                label: formatLabel(scales, channels, key),
                value: this.format[key](index[key], i)
            };
            continue;
        }
        if (key === "x1" && "x2" in channels) continue;
        if (key === "y1" && "y2" in channels) continue;
        const channel = channels[key];
        if (key === "x2" && "x1" in channels) yield {
            label: formatPairLabel(scales, channels, "x"),
            value: formatPair(this.format.x2, channels.x1, channel, i)
        };
        else if (key === "y2" && "y1" in channels) yield {
            label: formatPairLabel(scales, channels, "y"),
            value: formatPair(this.format.y2, channels.y1, channel, i)
        };
        else {
            const value = channel.value[i];
            const scale = channel.scale;
            if (!(0, _definedJs.defined)(value) && scale == null) continue;
            yield {
                label: formatLabel(scales, channels, key),
                value: this.format[key](value, i),
                color: scale === "color" ? values[key][i] : null,
                opacity: scale === "opacity" ? values[key][i] : null
            };
        }
    }
}
function formatPair(formatValue, c1, c2, i) {
    return c2.hint?.length // e.g., stackY’s y1 and y2
     ? `${formatValue(c2.value[i] - c1.value[i], i)}` : `${formatValue(c1.value[i], i)}\u{2013}${formatValue(c2.value[i], i)}`;
}
function formatPairLabel(scales, channels, key) {
    const l1 = formatLabel(scales, channels, `${key}1`, key);
    const l2 = formatLabel(scales, channels, `${key}2`, key);
    return l1 === l2 ? l1 : `${l1}\u{2013}${l2}`;
}
function formatLabel(scales, channels, key, defaultLabel = key) {
    const channel = channels[key];
    const scale = scales[channel?.scale ?? key];
    return String(scale?.label ?? channel?.label ?? defaultLabel);
}

},{"d3":"17XFv","../channel.js":"h3rWV","../context.js":"kyLYX","../defined.js":"3n4Hk","../format.js":"7mxs9","../interactions/pointer.js":"erI4H","../mark.js":"a4RyP","../options.js":"eJmsy","../style.js":"c9bmo","./axis.js":"jKxJZ","./text.js":"5cTpv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jcUX2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Area", ()=>Area);
parcelHelpers.export(exports, "area", ()=>area);
parcelHelpers.export(exports, "areaX", ()=>areaX);
parcelHelpers.export(exports, "areaY", ()=>areaY);
var _d3 = require("d3");
var _contextJs = require("../context.js");
var _curveJs = require("../curve.js");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _styleJs = require("../style.js");
var _binJs = require("../transforms/bin.js");
var _identityJs = require("../transforms/identity.js");
var _stackJs = require("../transforms/stack.js");
const defaults = {
    ariaLabel: "area",
    strokeWidth: 1,
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeMiterlimit: 1
};
class Area extends (0, _markJs.Mark) {
    constructor(data, options = {}){
        const { x1, y1, x2, y2, z, curve, tension } = options;
        super(data, {
            x1: {
                value: x1,
                scale: "x"
            },
            y1: {
                value: y1,
                scale: "y"
            },
            x2: {
                value: x2,
                scale: "x",
                optional: true
            },
            y2: {
                value: y2,
                scale: "y",
                optional: true
            },
            z: {
                value: (0, _optionsJs.maybeZ)(options),
                optional: true
            }
        }, options, defaults);
        this.z = z;
        this.curve = (0, _curveJs.maybeCurve)(curve, tension);
    }
    filter(index) {
        return index;
    }
    render(index, scales, channels, dimensions, context) {
        const { x1: X1, y1: Y1, x2: X2 = X1, y2: Y2 = Y1 } = channels;
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyTransform), this, scales, 0, 0).call((g)=>g.selectAll().data((0, _styleJs.groupIndex)(index, [
                X1,
                Y1,
                X2,
                Y2
            ], this, channels)).enter().append("path").call((0, _styleJs.applyDirectStyles), this).call((0, _styleJs.applyGroupedChannelStyles), this, channels).attr("d", (0, _d3.area)().curve(this.curve).defined((i)=>i >= 0).x0((i)=>X1[i]).y0((i)=>Y1[i]).x1((i)=>X2[i]).y1((i)=>Y2[i]))).node();
    }
}
function area(data, options) {
    if (options === undefined) return areaY(data, {
        x: (0, _optionsJs.first),
        y: (0, _optionsJs.second)
    });
    return new Area(data, options);
}
function areaX(data, options) {
    const { y = (0, _optionsJs.indexOf), ...rest } = (0, _binJs.maybeDenseIntervalY)(options);
    return new Area(data, (0, _stackJs.maybeStackX)((0, _identityJs.maybeIdentityX)({
        ...rest,
        y1: y,
        y2: undefined
    })));
}
function areaY(data, options) {
    const { x = (0, _optionsJs.indexOf), ...rest } = (0, _binJs.maybeDenseIntervalX)(options);
    return new Area(data, (0, _stackJs.maybeStackY)((0, _identityJs.maybeIdentityY)({
        ...rest,
        x1: x,
        x2: undefined
    })));
}

},{"d3":"17XFv","../context.js":"kyLYX","../curve.js":"bbXk9","../mark.js":"a4RyP","../options.js":"eJmsy","../style.js":"c9bmo","../transforms/bin.js":"4d9wn","../transforms/identity.js":"kmkvZ","../transforms/stack.js":"cZguR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bbXk9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "maybeCurve", ()=>maybeCurve);
// For the “auto” curve, return a symbol instead of a curve implementation;
// we’ll use d3.geoPath to render if there’s a projection.
parcelHelpers.export(exports, "maybeCurveAuto", ()=>maybeCurveAuto);
// This is a special built-in curve that will use d3.geoPath when there is a
// projection, and the linear curve when there is not. You can explicitly
// opt-out of d3.geoPath and instead use d3.line with the "linear" curve.
parcelHelpers.export(exports, "curveAuto", ()=>curveAuto);
var _d3 = require("d3");
const curves = new Map([
    [
        "basis",
        (0, _d3.curveBasis)
    ],
    [
        "basis-closed",
        (0, _d3.curveBasisClosed)
    ],
    [
        "basis-open",
        (0, _d3.curveBasisOpen)
    ],
    [
        "bundle",
        (0, _d3.curveBundle)
    ],
    [
        "bump-x",
        (0, _d3.curveBumpX)
    ],
    [
        "bump-y",
        (0, _d3.curveBumpY)
    ],
    [
        "cardinal",
        (0, _d3.curveCardinal)
    ],
    [
        "cardinal-closed",
        (0, _d3.curveCardinalClosed)
    ],
    [
        "cardinal-open",
        (0, _d3.curveCardinalOpen)
    ],
    [
        "catmull-rom",
        (0, _d3.curveCatmullRom)
    ],
    [
        "catmull-rom-closed",
        (0, _d3.curveCatmullRomClosed)
    ],
    [
        "catmull-rom-open",
        (0, _d3.curveCatmullRomOpen)
    ],
    [
        "linear",
        (0, _d3.curveLinear)
    ],
    [
        "linear-closed",
        (0, _d3.curveLinearClosed)
    ],
    [
        "monotone-x",
        (0, _d3.curveMonotoneX)
    ],
    [
        "monotone-y",
        (0, _d3.curveMonotoneY)
    ],
    [
        "natural",
        (0, _d3.curveNatural)
    ],
    [
        "step",
        (0, _d3.curveStep)
    ],
    [
        "step-after",
        (0, _d3.curveStepAfter)
    ],
    [
        "step-before",
        (0, _d3.curveStepBefore)
    ]
]);
function maybeCurve(curve = (0, _d3.curveLinear), tension) {
    if (typeof curve === "function") return curve; // custom curve
    const c = curves.get(`${curve}`.toLowerCase());
    if (!c) throw new Error(`unknown curve: ${curve}`);
    if (tension !== undefined) {
        if ("beta" in c) return c.beta(tension);
        else if ("tension" in c) return c.tension(tension);
        else if ("alpha" in c) return c.alpha(tension);
    }
    return c;
}
function maybeCurveAuto(curve = curveAuto, tension) {
    return typeof curve !== "function" && `${curve}`.toLowerCase() === "auto" ? curveAuto : maybeCurve(curve, tension);
}
function curveAuto(context) {
    return (0, _d3.curveLinear)(context);
}

},{"d3":"17XFv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4d9wn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Group on {z, fill, stroke}, then optionally on y, then bin x.
parcelHelpers.export(exports, "binX", ()=>binX);
// Group on {z, fill, stroke}, then optionally on x, then bin y.
parcelHelpers.export(exports, "binY", ()=>binY);
// Group on {z, fill, stroke}, then bin on x and y.
parcelHelpers.export(exports, "bin", ()=>bin);
parcelHelpers.export(exports, "maybeDenseIntervalX", ()=>maybeDenseIntervalX);
parcelHelpers.export(exports, "maybeDenseIntervalY", ()=>maybeDenseIntervalY);
parcelHelpers.export(exports, "maybeThresholds", ()=>maybeThresholds);
var _d3 = require("d3");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _timeJs = require("../time.js");
var _basicJs = require("./basic.js");
var _groupJs = require("./group.js");
var _insetJs = require("./inset.js");
function binX(outputs = {
    y: "count"
}, options = {}) {
    [outputs, options] = mergeOptions(outputs, options);
    const { x, y } = options;
    return binn(maybeBinValue(x, options, (0, _optionsJs.identity)), null, null, y, outputs, (0, _insetJs.maybeInsetX)(options));
}
function binY(outputs = {
    x: "count"
}, options = {}) {
    [outputs, options] = mergeOptions(outputs, options);
    const { x, y } = options;
    return binn(null, maybeBinValue(y, options, (0, _optionsJs.identity)), x, null, outputs, (0, _insetJs.maybeInsetY)(options));
}
function bin(outputs = {
    fill: "count"
}, options = {}) {
    [outputs, options] = mergeOptions(outputs, options);
    const { x, y } = maybeBinValueTuple(options);
    return binn(x, y, null, null, outputs, (0, _insetJs.maybeInsetX)((0, _insetJs.maybeInsetY)(options)));
}
function maybeDenseInterval(bin, k, options = {}) {
    if (options?.interval == null) return options;
    const { reduce = (0, _groupJs.reduceFirst) } = options;
    const outputs = {
        filter: null
    };
    if (options[k] != null) outputs[k] = reduce;
    if (options[`${k}1`] != null) outputs[`${k}1`] = reduce;
    if (options[`${k}2`] != null) outputs[`${k}2`] = reduce;
    return bin(outputs, options);
}
function maybeDenseIntervalX(options = {}) {
    return maybeDenseInterval(binX, "y", (0, _markJs.withTip)(options, "x"));
}
function maybeDenseIntervalY(options = {}) {
    return maybeDenseInterval(binY, "x", (0, _markJs.withTip)(options, "y"));
}
function binn(bx, by, gx, gy, { data: reduceData = (0, _groupJs.reduceIdentity), filter = (0, _groupJs.reduceCount), sort, reverse, ...outputs // output channel definitions
 } = {}, inputs = {} // input channels and options
) {
    bx = maybeBin(bx);
    by = maybeBin(by);
    // Compute the outputs.
    outputs = maybeBinOutputs(outputs, inputs);
    reduceData = maybeBinReduce(reduceData, (0, _optionsJs.identity));
    sort = sort == null ? undefined : maybeBinOutput("sort", sort, inputs);
    filter = filter == null ? undefined : maybeBinEvaluator("filter", filter, inputs);
    // Don’t group on a channel if an output requires it as an input!
    if (gx != null && (0, _groupJs.hasOutput)(outputs, "x", "x1", "x2")) gx = null;
    if (gy != null && (0, _groupJs.hasOutput)(outputs, "y", "y1", "y2")) gy = null;
    // Produce x1, x2, y1, and y2 output channels as appropriate (when binning).
    const [BX1, setBX1] = (0, _optionsJs.maybeColumn)(bx);
    const [BX2, setBX2] = (0, _optionsJs.maybeColumn)(bx);
    const [BY1, setBY1] = (0, _optionsJs.maybeColumn)(by);
    const [BY2, setBY2] = (0, _optionsJs.maybeColumn)(by);
    // Produce x or y output channels as appropriate (when grouping).
    const [k, gk] = gx != null ? [
        gx,
        "x"
    ] : gy != null ? [
        gy,
        "y"
    ] : [];
    const [GK, setGK] = (0, _optionsJs.maybeColumn)(k);
    // Greedily materialize the z, fill, and stroke channels (if channels and not
    // constants) so that we can reference them for subdividing groups without
    // computing them more than once. We also want to consume options that should
    // only apply to this transform rather than passing them through to the next.
    const { x, y, z, fill, stroke, x1, x2, y1, y2, domain, cumulative, thresholds, interval, ...options } = inputs;
    const [GZ, setGZ] = (0, _optionsJs.maybeColumn)(z);
    const [vfill] = (0, _optionsJs.maybeColorChannel)(fill);
    const [vstroke] = (0, _optionsJs.maybeColorChannel)(stroke);
    const [GF, setGF] = (0, _optionsJs.maybeColumn)(vfill);
    const [GS, setGS] = (0, _optionsJs.maybeColumn)(vstroke);
    return {
        ..."z" in inputs && {
            z: GZ || z
        },
        ..."fill" in inputs && {
            fill: GF || fill
        },
        ..."stroke" in inputs && {
            stroke: GS || stroke
        },
        ...(0, _basicJs.basic)(options, (data, facets, plotOptions)=>{
            const K = (0, _optionsJs.maybeApplyInterval)((0, _optionsJs.valueof)(data, k), plotOptions?.[gk]);
            const Z = (0, _optionsJs.valueof)(data, z);
            const F = (0, _optionsJs.valueof)(data, vfill);
            const S = (0, _optionsJs.valueof)(data, vstroke);
            const G = (0, _groupJs.maybeSubgroup)(outputs, {
                z: Z,
                fill: F,
                stroke: S
            });
            const groupFacets = [];
            const groupData = [];
            const GK = K && setGK([]);
            const GZ = Z && setGZ([]);
            const GF = F && setGF([]);
            const GS = S && setGS([]);
            const BX1 = bx && setBX1([]);
            const BX2 = bx && setBX2([]);
            const BY1 = by && setBY1([]);
            const BY2 = by && setBY2([]);
            const bin = bing(bx, by, data);
            let i = 0;
            for (const o of outputs)o.initialize(data);
            if (sort) sort.initialize(data);
            if (filter) filter.initialize(data);
            for (const facet of facets){
                const groupFacet = [];
                for (const o of outputs)o.scope("facet", facet);
                if (sort) sort.scope("facet", facet);
                if (filter) filter.scope("facet", facet);
                for (const [f, I] of (0, _groupJs.maybeGroup)(facet, G)){
                    for (const [k, g] of (0, _groupJs.maybeGroup)(I, K))for (const [b, extent] of bin(g)){
                        if (G) extent.z = f;
                        if (filter && !filter.reduce(b, extent)) continue;
                        groupFacet.push(i++);
                        groupData.push(reduceData.reduceIndex(b, data, extent));
                        if (K) GK.push(k);
                        if (Z) GZ.push(G === Z ? f : Z[(b.length > 0 ? b : g)[0]]);
                        if (F) GF.push(G === F ? f : F[(b.length > 0 ? b : g)[0]]);
                        if (S) GS.push(G === S ? f : S[(b.length > 0 ? b : g)[0]]);
                        if (BX1) BX1.push(extent.x1), BX2.push(extent.x2);
                        if (BY1) BY1.push(extent.y1), BY2.push(extent.y2);
                        for (const o of outputs)o.reduce(b, extent);
                        if (sort) sort.reduce(b, extent);
                    }
                }
                groupFacets.push(groupFacet);
            }
            (0, _groupJs.maybeSort)(groupFacets, sort, reverse);
            return {
                data: groupData,
                facets: groupFacets
            };
        }),
        ...!(0, _groupJs.hasOutput)(outputs, "x") && (BX1 ? {
            x1: BX1,
            x2: BX2,
            x: (0, _optionsJs.mid)(BX1, BX2)
        } : {
            x,
            x1,
            x2
        }),
        ...!(0, _groupJs.hasOutput)(outputs, "y") && (BY1 ? {
            y1: BY1,
            y2: BY2,
            y: (0, _optionsJs.mid)(BY1, BY2)
        } : {
            y,
            y1,
            y2
        }),
        ...GK && {
            [gk]: GK
        },
        ...Object.fromEntries(outputs.map(({ name, output })=>[
                name,
                output
            ]))
    };
}
// Allow bin options to be specified as part of outputs; merge them into options.
function mergeOptions({ cumulative, domain, thresholds, interval, ...outputs }, options) {
    return [
        outputs,
        {
            cumulative,
            domain,
            thresholds,
            interval,
            ...options
        }
    ];
}
function maybeBinValue(value, { cumulative, domain, thresholds, interval }, defaultValue) {
    value = {
        ...(0, _optionsJs.maybeValue)(value)
    };
    if (value.domain === undefined) value.domain = domain;
    if (value.cumulative === undefined) value.cumulative = cumulative;
    if (value.thresholds === undefined) value.thresholds = thresholds;
    if (value.interval === undefined) value.interval = interval;
    if (value.value === undefined) value.value = defaultValue;
    value.thresholds = maybeThresholds(value.thresholds, value.interval);
    return value;
}
function maybeBinValueTuple(options) {
    let { x, y } = options;
    x = maybeBinValue(x, options);
    y = maybeBinValue(y, options);
    [x.value, y.value] = (0, _optionsJs.maybeTuple)(x.value, y.value);
    return {
        x,
        y
    };
}
function maybeBin(options) {
    if (options == null) return;
    const { value, cumulative, domain = (0, _d3.extent), thresholds } = options;
    const bin = (data)=>{
        let V = (0, _optionsJs.valueof)(data, value);
        let T; // bin thresholds
        if ((0, _optionsJs.isTemporal)(V) || isTimeThresholds(thresholds)) {
            V = (0, _optionsJs.map)(V, (0, _optionsJs.coerceDate), Float64Array); // like coerceDates, but faster
            let [min, max] = typeof domain === "function" ? domain(V) : domain;
            let t = typeof thresholds === "function" && !(0, _optionsJs.isInterval)(thresholds) ? thresholds(V, min, max) : thresholds;
            if (typeof t === "number") t = (0, _d3.utcTickInterval)(min, max, t);
            if ((0, _optionsJs.isInterval)(t)) {
                if (domain === (0, _d3.extent)) {
                    min = t.floor(min);
                    max = t.offset(t.floor(max));
                }
                t = t.range(min, t.offset(max));
            }
            T = t;
        } else {
            V = (0, _optionsJs.coerceNumbers)(V);
            let [min, max] = typeof domain === "function" ? domain(V) : domain;
            let t = typeof thresholds === "function" && !(0, _optionsJs.isInterval)(thresholds) ? thresholds(V, min, max) : thresholds;
            if (typeof t === "number") {
                // This differs from d3.ticks with regard to exclusive bounds: we want a
                // first threshold less than or equal to the minimum, and a last
                // threshold (strictly) greater than the maximum.
                if (domain === (0, _d3.extent)) {
                    let step = (0, _d3.tickIncrement)(min, max, t);
                    if (isFinite(step)) {
                        if (step > 0) {
                            let r0 = Math.round(min / step);
                            let r1 = Math.round(max / step);
                            if (!(r0 * step <= min)) --r0;
                            if (!(r1 * step > max)) ++r1;
                            let n = r1 - r0 + 1;
                            t = new Float64Array(n);
                            for(let i = 0; i < n; ++i)t[i] = (r0 + i) * step;
                        } else if (step < 0) {
                            step = -step;
                            let r0 = Math.round(min * step);
                            let r1 = Math.round(max * step);
                            if (!(r0 / step <= min)) --r0;
                            if (!(r1 / step > max)) ++r1;
                            let n = r1 - r0 + 1;
                            t = new Float64Array(n);
                            for(let i = 0; i < n; ++i)t[i] = (r0 + i) / step;
                        } else t = [
                            min
                        ];
                    } else t = [
                        min
                    ];
                } else t = (0, _d3.ticks)(min, max, t);
            } else if ((0, _optionsJs.isInterval)(t)) {
                if (domain === (0, _d3.extent)) {
                    min = t.floor(min);
                    max = t.offset(t.floor(max));
                }
                t = t.range(min, t.offset(max));
            }
            T = t;
        }
        const E = [];
        if (T.length === 1) E.push([
            T[0],
            T[0]
        ]); // collapsed domain
        else for(let i = 1; i < T.length; ++i)E.push([
            T[i - 1],
            T[i]
        ]);
        E.bin = (cumulative < 0 ? bin1cn : cumulative > 0 ? bin1cp : bin1)(E, T, V);
        return E;
    };
    bin.label = (0, _optionsJs.labelof)(value);
    return bin;
}
function maybeThresholds(thresholds, interval, defaultThresholds = thresholdAuto) {
    if (thresholds === undefined) return interval === undefined ? defaultThresholds : (0, _optionsJs.maybeRangeInterval)(interval);
    if (typeof thresholds === "string") {
        switch(thresholds.toLowerCase()){
            case "freedman-diaconis":
                return 0, _d3.thresholdFreedmanDiaconis;
            case "scott":
                return 0, _d3.thresholdScott;
            case "sturges":
                return 0, _d3.thresholdSturges;
            case "auto":
                return thresholdAuto;
        }
        return (0, _timeJs.utcInterval)(thresholds);
    }
    return thresholds; // pass array, count, or function to bin.thresholds
}
function maybeBinOutputs(outputs, inputs) {
    return (0, _groupJs.maybeOutputs)(outputs, inputs, maybeBinOutput);
}
function maybeBinOutput(name, reduce, inputs) {
    return (0, _groupJs.maybeOutput)(name, reduce, inputs, maybeBinEvaluator);
}
function maybeBinEvaluator(name, reduce, inputs) {
    return (0, _groupJs.maybeEvaluator)(name, reduce, inputs, maybeBinReduce);
}
function maybeBinReduce(reduce, value) {
    return (0, _groupJs.maybeReduce)(reduce, value, maybeBinReduceFallback);
}
function maybeBinReduceFallback(reduce) {
    switch(`${reduce}`.toLowerCase()){
        case "x":
            return reduceX;
        case "x1":
            return reduceX1;
        case "x2":
            return reduceX2;
        case "y":
            return reduceY;
        case "y1":
            return reduceY1;
        case "y2":
            return reduceY2;
        case "z":
            return 0, _groupJs.reduceZ;
    }
    throw new Error(`invalid bin reduce: ${reduce}`);
}
function thresholdAuto(values, min, max) {
    return Math.min(200, (0, _d3.thresholdScott)(values, min, max));
}
function isTimeThresholds(t) {
    return (0, _optionsJs.isTimeInterval)(t) || (0, _optionsJs.isIterable)(t) && (0, _optionsJs.isTemporal)(t);
}
function bing(bx, by, data) {
    const EX = bx?.(data);
    const EY = by?.(data);
    return EX && EY ? function*(I) {
        const X = EX.bin(I); // first bin on x
        for (const [ix, [x1, x2]] of EX.entries()){
            const Y = EY.bin(X[ix]); // then bin on y
            for (const [iy, [y1, y2]] of EY.entries())yield [
                Y[iy],
                {
                    data,
                    x1,
                    y1,
                    x2,
                    y2
                }
            ];
        }
    } : EX ? function*(I) {
        const X = EX.bin(I);
        for (const [i, [x1, x2]] of EX.entries())yield [
            X[i],
            {
                data,
                x1,
                x2
            }
        ];
    } : function*(I) {
        const Y = EY.bin(I);
        for (const [i, [y1, y2]] of EY.entries())yield [
            Y[i],
            {
                data,
                y1,
                y2
            }
        ];
    };
}
// non-cumulative distribution
function bin1(E, T, V) {
    T = (0, _optionsJs.coerceNumbers)(T); // for faster bisection
    return (I)=>{
        const B = E.map(()=>[]);
        for (const i of I)B[(0, _d3.bisect)(T, V[i]) - 1]?.push(i); // TODO quantization?
        return B;
    };
}
// cumulative distribution
function bin1cp(E, T, V) {
    const bin = bin1(E, T, V);
    return (I)=>{
        const B = bin(I);
        for(let i = 1, n = B.length; i < n; ++i){
            const C = B[i - 1];
            const b = B[i];
            for (const j of C)b.push(j);
        }
        return B;
    };
}
// complementary cumulative distribution
function bin1cn(E, T, V) {
    const bin = bin1(E, T, V);
    return (I)=>{
        const B = bin(I);
        for(let i = B.length - 2; i >= 0; --i){
            const C = B[i + 1];
            const b = B[i];
            for (const j of C)b.push(j);
        }
        return B;
    };
}
function mid1(x1, x2) {
    const m = (+x1 + +x2) / 2;
    return x1 instanceof Date ? new Date(m) : m;
}
const reduceX = {
    reduceIndex (I, X, { x1, x2 }) {
        return mid1(x1, x2);
    }
};
const reduceY = {
    reduceIndex (I, X, { y1, y2 }) {
        return mid1(y1, y2);
    }
};
const reduceX1 = {
    reduceIndex (I, X, { x1 }) {
        return x1;
    }
};
const reduceX2 = {
    reduceIndex (I, X, { x2 }) {
        return x2;
    }
};
const reduceY1 = {
    reduceIndex (I, X, { y1 }) {
        return y1;
    }
};
const reduceY2 = {
    reduceIndex (I, X, { y2 }) {
        return y2;
    }
};

},{"d3":"17XFv","../mark.js":"a4RyP","../options.js":"eJmsy","../time.js":"3rFQb","./basic.js":"hU2qc","./group.js":"1qc0A","./inset.js":"lUOw6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cmX6n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Arrow", ()=>Arrow);
parcelHelpers.export(exports, "arrow", ()=>arrow);
var _d3 = require("d3");
var _contextJs = require("../context.js");
var _markJs = require("../mark.js");
var _mathJs = require("../math.js");
var _optionsJs = require("../options.js");
var _styleJs = require("../style.js");
var _linkJs = require("./link.js");
const defaults = {
    ariaLabel: "arrow",
    fill: "none",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeMiterlimit: 1,
    strokeWidth: 1.5
};
class Arrow extends (0, _markJs.Mark) {
    constructor(data, options = {}){
        const { x1, y1, x2, y2, bend = 0, headAngle = 60, headLength = 8, inset = 0, insetStart = inset, insetEnd = inset, sweep } = options;
        super(data, {
            x1: {
                value: x1,
                scale: "x"
            },
            y1: {
                value: y1,
                scale: "y"
            },
            x2: {
                value: x2,
                scale: "x",
                optional: true
            },
            y2: {
                value: y2,
                scale: "y",
                optional: true
            }
        }, options, defaults);
        this.bend = bend === true ? 22.5 : Math.max(-90, Math.min(90, bend));
        this.headAngle = +headAngle;
        this.headLength = +headLength;
        this.insetStart = +insetStart;
        this.insetEnd = +insetEnd;
        this.sweep = maybeSweep(sweep);
    }
    render(index, scales, channels, dimensions, context) {
        const { x1: X1, y1: Y1, x2: X2 = X1, y2: Y2 = Y1, SW } = channels;
        const { strokeWidth, bend, headAngle, headLength, insetStart, insetEnd } = this;
        const sw = SW ? (i)=>SW[i] : (0, _optionsJs.constant)(strokeWidth === undefined ? 1 : strokeWidth);
        // The angle between the arrow’s shaft and one of the wings; the “head”
        // angle between the wings is twice this value.
        const wingAngle = headAngle * (0, _mathJs.radians) / 2;
        // The length of the arrowhead’s “wings” (the line segments that extend from
        // the end point) relative to the stroke width.
        const wingScale = headLength / 1.5;
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyTransform), this, scales).call((g)=>g.selectAll().data(index).enter().append("path").call((0, _styleJs.applyDirectStyles), this).attr("d", (i)=>{
                // The start ⟨x1,y1⟩ and end ⟨x2,y2⟩ points may be inset, and the
                // ending line angle may be altered for inset swoopy arrows.
                let x1 = X1[i], y1 = Y1[i], x2 = X2[i], y2 = Y2[i];
                const lineLength = Math.hypot(x2 - x1, y2 - y1);
                if (lineLength <= insetStart + insetEnd) return null;
                let lineAngle = Math.atan2(y2 - y1, x2 - x1);
                // We don’t allow the wing length to be too large relative to the
                // length of the arrow. (Plot.vector allows arbitrarily large
                // wings, but that’s okay since vectors are usually small.)
                const headLength = Math.min(wingScale * sw(i), lineLength / 3);
                // When bending, the offset between the straight line between the two points
                // and the outgoing tangent from the start point. (Also the negative
                // incoming tangent to the end point.) This must be within ±π/2. A positive
                // angle will produce a clockwise curve; a negative angle will produce a
                // counterclockwise curve; zero will produce a straight line.
                const bendAngle = this.sweep(x1, y1, x2, y2) * bend * (0, _mathJs.radians);
                // The radius of the circle that intersects with the two endpoints
                // and has the specified bend angle.
                const r = Math.hypot(lineLength / Math.tan(bendAngle), lineLength) / 2;
                // Apply insets.
                if (insetStart || insetEnd) {
                    if (r < 1e5) {
                        // For inset swoopy arrows, compute the circle-circle
                        // intersection between a circle centered around the
                        // respective arrow endpoint and the center of the circle
                        // segment that forms the shaft of the arrow.
                        const sign = Math.sign(bendAngle);
                        const [cx, cy] = pointPointCenter([
                            x1,
                            y1
                        ], [
                            x2,
                            y2
                        ], r, sign);
                        if (insetStart) [x1, y1] = circleCircleIntersect([
                            cx,
                            cy,
                            r
                        ], [
                            x1,
                            y1,
                            insetStart
                        ], -sign * Math.sign(insetStart));
                        // For the end inset, rotate the arrowhead so that it aligns
                        // with the truncated end of the arrow. Since the arrow is a
                        // segment of the circle centered at ⟨cx,cy⟩, we can compute
                        // the angular difference to the new endpoint.
                        if (insetEnd) {
                            const [x, y] = circleCircleIntersect([
                                cx,
                                cy,
                                r
                            ], [
                                x2,
                                y2,
                                insetEnd
                            ], sign * Math.sign(insetEnd));
                            lineAngle += Math.atan2(y - cy, x - cx) - Math.atan2(y2 - cy, x2 - cx);
                            x2 = x, y2 = y;
                        }
                    } else {
                        // For inset straight arrows, offset along the straight line.
                        const dx = x2 - x1, dy = y2 - y1, d = Math.hypot(dx, dy);
                        if (insetStart) x1 += dx / d * insetStart, y1 += dy / d * insetStart;
                        if (insetEnd) x2 -= dx / d * insetEnd, y2 -= dy / d * insetEnd;
                    }
                }
                // The angle of the arrow as it approaches the endpoint, and the
                // angles of the adjacent wings. Here “left” refers to if the
                // arrow is pointing up.
                const endAngle = lineAngle + bendAngle;
                const leftAngle = endAngle + wingAngle;
                const rightAngle = endAngle - wingAngle;
                // The endpoints of the two wings.
                const x3 = x2 - headLength * Math.cos(leftAngle);
                const y3 = y2 - headLength * Math.sin(leftAngle);
                const x4 = x2 - headLength * Math.cos(rightAngle);
                const y4 = y2 - headLength * Math.sin(rightAngle);
                // If the radius is very large (or even infinite, as when the bend
                // angle is zero), then render a straight line.
                const a = r < 1e5 ? `A${r},${r} 0,0,${bendAngle > 0 ? 1 : 0} ` : `L`;
                const h = headLength ? `M${x3},${y3}L${x2},${y2}L${x4},${y4}` : "";
                return `M${x1},${y1}${a}${x2},${y2}${h}`;
            }).call((0, _styleJs.applyChannelStyles), this, channels)).node();
    }
}
// Maybe flip the bend angle, depending on the arrow orientation.
function maybeSweep(sweep = 1) {
    if (typeof sweep === "number") return (0, _optionsJs.constant)(Math.sign(sweep));
    if (typeof sweep === "function") return (x1, y1, x2, y2)=>Math.sign(sweep(x1, y1, x2, y2));
    switch((0, _optionsJs.keyword)(sweep, "sweep", [
        "+x",
        "-x",
        "+y",
        "-y"
    ])){
        case "+x":
            return (x1, y1, x2)=>(0, _d3.ascending)(x1, x2);
        case "-x":
            return (x1, y1, x2)=>(0, _d3.descending)(x1, x2);
        case "+y":
            return (x1, y1, x2, y2)=>(0, _d3.ascending)(y1, y2);
        case "-y":
            return (x1, y1, x2, y2)=>(0, _d3.descending)(y1, y2);
    }
}
// Returns the center of a circle that goes through the two given points ⟨ax,ay⟩
// and ⟨bx,by⟩ and has radius r. There are two such points; use the sign +1 or
// -1 to choose between them. Returns [NaN, NaN] if r is too small.
function pointPointCenter([ax, ay], [bx, by], r, sign) {
    const dx = bx - ax, dy = by - ay, d = Math.hypot(dx, dy);
    const k = sign * Math.sqrt(r * r - d * d / 4) / d;
    return [
        (ax + bx) / 2 - dy * k,
        (ay + by) / 2 + dx * k
    ];
}
// Given two circles, one centered at ⟨ax,ay⟩ with radius ar, and the other
// centered at ⟨bx,by⟩ with radius br, returns a point at which the two circles
// intersect. There are typically two such points; use the sign +1 or -1 to
// chose between them. Returns [NaN, NaN] if there is no intersection.
// https://mathworld.wolfram.com/Circle-CircleIntersection.html
function circleCircleIntersect([ax, ay, ar], [bx, by, br], sign) {
    const dx = bx - ax, dy = by - ay, d = Math.hypot(dx, dy);
    const x = (dx * dx + dy * dy - br * br + ar * ar) / (2 * d);
    const y = sign * Math.sqrt(ar * ar - x * x);
    return [
        ax + (dx * x + dy * y) / d,
        ay + (dy * x - dx * y) / d
    ];
}
function arrow(data, { x, x1, x2, y, y1, y2, ...options } = {}) {
    [x1, x2] = (0, _linkJs.maybeSameValue)(x, x1, x2);
    [y1, y2] = (0, _linkJs.maybeSameValue)(y, y1, y2);
    return new Arrow(data, {
        ...options,
        x1,
        x2,
        y1,
        y2
    });
}

},{"d3":"17XFv","../context.js":"kyLYX","../mark.js":"a4RyP","../math.js":"gGePl","../options.js":"eJmsy","../style.js":"c9bmo","./link.js":"fEUPw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fEUPw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Link", ()=>Link);
parcelHelpers.export(exports, "link", ()=>link);
// If x1 and x2 are specified, return them as {x1, x2}.
// If x and x1 and specified, or x and x2 are specified, return them as {x1, x2}.
// If only x, x1, or x2 are specified, return it as {x1}.
parcelHelpers.export(exports, "maybeSameValue", ()=>maybeSameValue);
var _d3 = require("d3");
var _contextJs = require("../context.js");
var _curveJs = require("../curve.js");
var _markJs = require("../mark.js");
var _markerJs = require("../marker.js");
var _optionsJs = require("../options.js");
var _styleJs = require("../style.js");
const defaults = {
    ariaLabel: "link",
    fill: "none",
    stroke: "currentColor",
    strokeMiterlimit: 1
};
class Link extends (0, _markJs.Mark) {
    constructor(data, options = {}){
        const { x1, y1, x2, y2, curve, tension } = options;
        super(data, {
            x1: {
                value: x1,
                scale: "x"
            },
            y1: {
                value: y1,
                scale: "y"
            },
            x2: {
                value: x2,
                scale: "x",
                optional: true
            },
            y2: {
                value: y2,
                scale: "y",
                optional: true
            }
        }, options, defaults);
        this.curve = (0, _curveJs.maybeCurveAuto)(curve, tension);
        (0, _markerJs.markers)(this, options);
    }
    project(channels, values, context) {
        // For the auto curve, projection is handled at render.
        if (this.curve !== (0, _curveJs.curveAuto)) super.project(channels, values, context);
    }
    render(index, scales, channels, dimensions, context) {
        const { x1: X1, y1: Y1, x2: X2 = X1, y2: Y2 = Y1 } = channels;
        const { curve } = this;
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyTransform), this, scales).call((g)=>g.selectAll().data(index).enter().append("path").call((0, _styleJs.applyDirectStyles), this).attr("d", curve === (0, _curveJs.curveAuto) && context.projection ? sphereLink(context.projection, X1, Y1, X2, Y2) : (i)=>{
                const p = (0, _d3.pathRound)();
                const c = curve(p);
                c.lineStart();
                c.point(X1[i], Y1[i]);
                c.point(X2[i], Y2[i]);
                c.lineEnd();
                return p;
            }).call((0, _styleJs.applyChannelStyles), this, channels).call((0, _markerJs.applyMarkers), this, channels, context)).node();
    }
}
function sphereLink(projection, X1, Y1, X2, Y2) {
    const path = (0, _d3.geoPath)(projection);
    X1 = (0, _optionsJs.coerceNumbers)(X1);
    Y1 = (0, _optionsJs.coerceNumbers)(Y1);
    X2 = (0, _optionsJs.coerceNumbers)(X2);
    Y2 = (0, _optionsJs.coerceNumbers)(Y2);
    return (i)=>path({
            type: "LineString",
            coordinates: [
                [
                    X1[i],
                    Y1[i]
                ],
                [
                    X2[i],
                    Y2[i]
                ]
            ]
        });
}
function link(data, { x, x1, x2, y, y1, y2, ...options } = {}) {
    [x1, x2] = maybeSameValue(x, x1, x2);
    [y1, y2] = maybeSameValue(y, y1, y2);
    return new Link(data, {
        ...options,
        x1,
        x2,
        y1,
        y2
    });
}
function maybeSameValue(x, x1, x2) {
    if (x === undefined) {
        if (x1 === undefined) {
            if (x2 !== undefined) return [
                x2
            ];
        } else {
            if (x2 === undefined) return [
                x1
            ];
        }
    } else if (x1 === undefined) return x2 === undefined ? [
        x
    ] : [
        x,
        x2
    ];
    else if (x2 === undefined) return [
        x,
        x1
    ];
    return [
        x1,
        x2
    ];
}

},{"d3":"17XFv","../context.js":"kyLYX","../curve.js":"bbXk9","../mark.js":"a4RyP","../marker.js":"2m35i","../options.js":"eJmsy","../style.js":"c9bmo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jLF8I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "autoSpec", ()=>autoSpec);
parcelHelpers.export(exports, "auto", ()=>auto);
var _d3 = require("d3");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _binJs = require("../transforms/bin.js");
var _groupJs = require("../transforms/group.js");
var _areaJs = require("./area.js");
var _barJs = require("./bar.js");
var _cellJs = require("./cell.js");
var _dotJs = require("./dot.js");
var _frameJs = require("./frame.js");
var _lineJs = require("./line.js");
var _rectJs = require("./rect.js");
var _ruleJs = require("./rule.js");
function autoSpec(data, options) {
    options = normalizeOptions(options);
    // Greedily materialize columns for type inference; we’ll need them anyway to
    // plot! Note that we don’t apply any type inference to the fx and fy
    // channels, if present; these are always ordinal (at least for now).
    const { x, y, color, size } = options;
    const X = materializeValue(data, x);
    const Y = materializeValue(data, y);
    const C = materializeValue(data, color);
    const S = materializeValue(data, size);
    // Compute the default options.
    let { fx, fy, x: { value: xValue, reduce: xReduce, zero: xZero, ...xOptions }, y: { value: yValue, reduce: yReduce, zero: yZero, ...yOptions }, color: { value: colorValue, color: colorColor, reduce: colorReduce }, size: { value: sizeValue, reduce: sizeReduce }, mark } = options;
    // Determine the default reducer, if any.
    if (xReduce === undefined) xReduce = yReduce == null && xValue == null && sizeValue == null && yValue != null ? "count" : null;
    if (yReduce === undefined) yReduce = xReduce == null && yValue == null && sizeValue == null && xValue != null ? "count" : null;
    // Determine the default size reducer, if any.
    if (sizeReduce === undefined && sizeValue == null && colorReduce == null && xReduce == null && yReduce == null && (xValue == null || (0, _optionsJs.isOrdinal)(X)) && (yValue == null || (0, _optionsJs.isOrdinal)(Y))) sizeReduce = "count";
    // Determine the default zero-ness.
    if (xZero === undefined) xZero = isZeroReducer(xReduce) ? true : undefined;
    if (yZero === undefined) yZero = isZeroReducer(yReduce) ? true : undefined;
    // TODO Shorthand: array of primitives should result in a histogram
    if (xValue == null && yValue == null) throw new Error("must specify x or y");
    if (xReduce != null && yValue == null) throw new Error("reducing x requires y");
    if (yReduce != null && xValue == null) throw new Error("reducing y requires x");
    // Determine the default mark type.
    if (mark === undefined) mark = sizeValue != null || sizeReduce != null ? "dot" : isZeroReducer(xReduce) || isZeroReducer(yReduce) || colorReduce != null // histogram or heatmap
     ? "bar" : xValue != null && yValue != null ? (0, _optionsJs.isOrdinal)(X) || (0, _optionsJs.isOrdinal)(Y) || xReduce == null && yReduce == null && !isMonotonic(X) && !isMonotonic(Y) ? "dot" : "line" : xValue != null || yValue != null ? "rule" : null;
    let Z; // may be set to null to disable series-by-color for line and area
    let colorMode; // "fill" or "stroke"
    // Determine the mark implementation.
    let markImpl;
    switch(mark){
        case "dot":
            markImpl = (0, _dotJs.dot);
            colorMode = "stroke";
            break;
        case "line":
            markImpl = X && Y || xReduce != null || yReduce != null // same logic as area (see below), but default to line
             ? yZero || yReduce != null || X && isMonotonic(X) ? (0, _lineJs.lineY) : xZero || xReduce != null || Y && isMonotonic(Y) ? (0, _lineJs.lineX) : (0, _lineJs.line) : X // 1d line by index
             ? (0, _lineJs.lineX) : (0, _lineJs.lineY);
            colorMode = "stroke";
            if (isHighCardinality(C)) Z = null; // TODO only if z not set by user
            break;
        case "area":
            markImpl = !(yZero || yReduce != null) && (xZero || xReduce != null || Y && isMonotonic(Y)) ? (0, _areaJs.areaX) : (0, _areaJs.areaY); // favor areaY if unsure
            colorMode = "fill";
            if (isHighCardinality(C)) Z = null; // TODO only if z not set by user
            break;
        case "rule":
            markImpl = X ? (0, _ruleJs.ruleX) : (0, _ruleJs.ruleY);
            colorMode = "stroke";
            break;
        case "bar":
            markImpl = xReduce != null // bin or group on y
             ? (0, _optionsJs.isOrdinal)(Y) ? isSelectReducer(xReduce) && X && (0, _optionsJs.isOrdinal)(X) ? (0, _cellJs.cell) : (0, _barJs.barX) : (0, _rectJs.rectX) : yReduce != null // bin or group on x
             ? (0, _optionsJs.isOrdinal)(X) ? isSelectReducer(yReduce) && Y && (0, _optionsJs.isOrdinal)(Y) ? (0, _cellJs.cell) : (0, _barJs.barY) : (0, _rectJs.rectY) : colorReduce != null || sizeReduce != null // bin or group on both x and y
             ? X && (0, _optionsJs.isOrdinal)(X) && Y && (0, _optionsJs.isOrdinal)(Y) ? (0, _cellJs.cell) : X && (0, _optionsJs.isOrdinal)(X) ? (0, _barJs.barY) : Y && (0, _optionsJs.isOrdinal)(Y) ? (0, _barJs.barX) : (0, _rectJs.rect) : X && (0, _optionsJs.isNumeric)(X) && !(Y && (0, _optionsJs.isNumeric)(Y)) ? (0, _barJs.barX // if y is temporal, treat as ordinal
            ) : Y && (0, _optionsJs.isNumeric)(Y) && !(X && (0, _optionsJs.isNumeric)(X)) ? (0, _barJs.barY // if x is temporal, treat as ordinal
            ) : (0, _cellJs.cell);
            colorMode = "fill";
            break;
        default:
            throw new Error(`invalid mark: ${mark}`);
    }
    // Determine the mark options.
    let markOptions = {
        fx,
        fy,
        x: X ?? undefined,
        y: Y ?? undefined,
        [colorMode]: C ?? colorColor,
        z: Z,
        r: S ?? undefined,
        tip: true
    };
    let transformImpl;
    let transformOptions = {
        [colorMode]: colorReduce ?? undefined,
        r: sizeReduce ?? undefined
    };
    if (xReduce != null && yReduce != null) throw new Error(`cannot reduce both x and y`); // for now at least
    else if (yReduce != null) {
        transformOptions.y = yReduce;
        transformImpl = (0, _optionsJs.isOrdinal)(X) ? (0, _groupJs.groupX) : (0, _binJs.binX);
    } else if (xReduce != null) {
        transformOptions.x = xReduce;
        transformImpl = (0, _optionsJs.isOrdinal)(Y) ? (0, _groupJs.groupY) : (0, _binJs.binY);
    } else if (colorReduce != null || sizeReduce != null) {
        if (X && Y) transformImpl = (0, _optionsJs.isOrdinal)(X) && (0, _optionsJs.isOrdinal)(Y) ? (0, _groupJs.group) : (0, _optionsJs.isOrdinal)(X) ? (0, _binJs.binY) : (0, _optionsJs.isOrdinal)(Y) ? (0, _binJs.binX) : (0, _binJs.bin);
        else if (X) transformImpl = (0, _optionsJs.isOrdinal)(X) ? (0, _groupJs.groupX) : (0, _binJs.binX);
        else if (Y) transformImpl = (0, _optionsJs.isOrdinal)(Y) ? (0, _groupJs.groupY) : (0, _binJs.binY);
    }
    // When using the bin transform, pass through additional options (e.g., thresholds).
    if (transformImpl === (0, _binJs.bin) || transformImpl === (0, _binJs.binX)) markOptions.x = {
        value: X,
        ...xOptions
    };
    if (transformImpl === (0, _binJs.bin) || transformImpl === (0, _binJs.binY)) markOptions.y = {
        value: Y,
        ...yOptions
    };
    // If zero-ness is not specified, default based on whether the resolved mark
    // type will include a zero baseline.
    if (xZero === undefined) xZero = X && !(transformImpl === (0, _binJs.bin) || transformImpl === (0, _binJs.binX)) && (markImpl === (0, _barJs.barX) || markImpl === (0, _areaJs.areaX) || markImpl === (0, _rectJs.rectX) || markImpl === (0, _ruleJs.ruleY));
    if (yZero === undefined) yZero = Y && !(transformImpl === (0, _binJs.bin) || transformImpl === (0, _binJs.binY)) && (markImpl === (0, _barJs.barY) || markImpl === (0, _areaJs.areaY) || markImpl === (0, _rectJs.rectY) || markImpl === (0, _ruleJs.ruleX));
    return {
        fx: fx ?? null,
        fy: fy ?? null,
        x: {
            value: xValue ?? null,
            reduce: xReduce ?? null,
            zero: !!xZero,
            ...xOptions
        },
        y: {
            value: yValue ?? null,
            reduce: yReduce ?? null,
            zero: !!yZero,
            ...yOptions
        },
        color: {
            value: colorValue ?? null,
            reduce: colorReduce ?? null,
            ...colorColor !== undefined && {
                color: colorColor
            }
        },
        size: {
            value: sizeValue ?? null,
            reduce: sizeReduce ?? null
        },
        mark,
        markImpl: implNames[markImpl],
        markOptions,
        transformImpl: implNames[transformImpl],
        transformOptions,
        colorMode
    };
}
function auto(data, options) {
    const spec = autoSpec(data, options);
    const { fx, fy, x: { zero: xZero }, y: { zero: yZero }, markOptions, transformOptions, colorMode } = spec;
    const markImpl = impls[spec.markImpl];
    const transformImpl = impls[spec.transformImpl];
    // In the case of filled marks (particularly bars and areas) the frame and
    // rules should come after the mark; in the case of stroked marks
    // (particularly dots and lines) they should come before the mark.
    const frames = fx != null || fy != null ? (0, _frameJs.frame)({
        strokeOpacity: 0.1
    }) : null;
    const rules = [
        xZero ? (0, _ruleJs.ruleX)([
            0
        ]) : null,
        yZero ? (0, _ruleJs.ruleY)([
            0
        ]) : null
    ];
    const mark = markImpl(data, transformImpl ? transformImpl(transformOptions, markOptions) : markOptions);
    return colorMode === "stroke" ? (0, _markJs.marks)(frames, rules, mark) : (0, _markJs.marks)(frames, mark, rules);
}
// TODO What about sorted within series?
function isMonotonic(values) {
    let previous;
    let previousOrder;
    for (const value of values){
        if (value == null) continue;
        if (previous === undefined) {
            previous = value;
            continue;
        }
        const order = Math.sign((0, _d3.ascending)(previous, value));
        if (!order) continue; // skip zero, NaN
        if (previousOrder !== undefined && order !== previousOrder) return false;
        previous = value;
        previousOrder = order;
    }
    return true;
}
// Allow x and y and other dimensions to be specified as shorthand field names
// (but note that they can also be specified as a {transform} object such as
// Plot.identity). We don’t support reducers for the faceting, but for symmetry
// with x and y we allow facets to be specified as {value} objects.
function normalizeOptions({ x, y, color, size, fx, fy, mark } = {}) {
    if (!(0, _optionsJs.isOptions)(x)) x = makeOptions(x);
    if (!(0, _optionsJs.isOptions)(y)) y = makeOptions(y);
    if (!(0, _optionsJs.isOptions)(color)) color = (0, _optionsJs.isColor)(color) ? {
        color
    } : makeOptions(color);
    if (!(0, _optionsJs.isOptions)(size)) size = makeOptions(size);
    if ((0, _optionsJs.isOptions)(fx)) ({ value: fx } = makeOptions(fx));
    if ((0, _optionsJs.isOptions)(fy)) ({ value: fy } = makeOptions(fy));
    if (mark != null) mark = `${mark}`.toLowerCase();
    return {
        x,
        y,
        color,
        size,
        fx,
        fy,
        mark
    };
}
// To apply heuristics based on the data types (values), realize the columns. We
// could maybe look at the data.schema here, but Plot’s behavior depends on the
// actual values anyway, so this probably is what we want.
function materializeValue(data, options) {
    const V = (0, _optionsJs.valueof)(data, options.value);
    if (V) V.label = (0, _optionsJs.labelof)(options.value);
    return V;
}
function makeOptions(value) {
    return isReducer(value) ? {
        reduce: value
    } : {
        value
    };
}
// The distinct, count, sum, and proportion reducers are additive (stackable).
function isZeroReducer(reduce) {
    return /^(?:distinct|count|sum|proportion)$/i.test(reduce);
}
// The first, last, and mode reducers preserve the type of the aggregated values.
function isSelectReducer(reduce) {
    return /^(?:first|last|mode)$/i.test(reduce);
}
// https://github.com/observablehq/plot/blob/818562649280e155136f730fc496e0b3d15ae464/src/transforms/group.js#L236
function isReducer(reduce) {
    if (reduce == null) return false;
    if (typeof reduce.reduceIndex === "function") return true;
    if (typeof reduce.reduce === "function" && (0, _optionsJs.isObject)(reduce)) return true; // N.B. array.reduce
    if (/^p\d{2}$/i.test(reduce)) return true;
    switch(`${reduce}`.toLowerCase()){
        case "first":
        case "last":
        case "count":
        case "distinct":
        case "sum":
        case "proportion":
        case "proportion-facet":
        case "deviation":
        case "min":
        case "min-index":
        case "max":
        case "max-index":
        case "mean":
        case "median":
        case "variance":
        case "mode":
            // These are technically reducers, but I think we’d want to treat them as fields?
            // case "x":
            // case "x1":
            // case "x2":
            // case "y":
            // case "y1":
            // case "y2":
            return true;
    }
    return false;
}
function isHighCardinality(value) {
    return value ? new (0, _d3.InternSet)(value).size > value.length >> 1 : false;
}
const impls = {
    dot: (0, _dotJs.dot),
    line: (0, _lineJs.line),
    lineX: (0, _lineJs.lineX),
    lineY: (0, _lineJs.lineY),
    areaX: (0, _areaJs.areaX),
    areaY: (0, _areaJs.areaY),
    ruleX: (0, _ruleJs.ruleX),
    ruleY: (0, _ruleJs.ruleY),
    barX: (0, _barJs.barX),
    barY: (0, _barJs.barY),
    rect: (0, _rectJs.rect),
    rectX: (0, _rectJs.rectX),
    rectY: (0, _rectJs.rectY),
    cell: (0, _cellJs.cell),
    bin: (0, _binJs.bin),
    binX: (0, _binJs.binX),
    binY: (0, _binJs.binY),
    group: (0, _groupJs.group),
    groupX: (0, _groupJs.groupX),
    groupY: (0, _groupJs.groupY)
};
// Instead of returning the mark or transform implementation directly, we return
// the implementation name to facilitate code compilation (“eject to explicit
// marks”). An implementation-to-name mapping needs to live somewhere for
// compilation, and by having it in Plot we can more easily introduce a new mark
// or transform implementation in Plot.auto without having to synchronize a
// downstream change in the compiler.
const implNames = Object.fromEntries(Object.entries(impls).map(([name, impl])=>[
        impl,
        name
    ]));

},{"d3":"17XFv","../mark.js":"a4RyP","../options.js":"eJmsy","../transforms/bin.js":"4d9wn","../transforms/group.js":"1qc0A","./area.js":"jcUX2","./bar.js":"aMpp7","./cell.js":"i3iYL","./dot.js":"hmb7r","./frame.js":"jiFE1","./line.js":"5VKzd","./rect.js":"19Awg","./rule.js":"ligGV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aMpp7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbstractBar", ()=>AbstractBar);
parcelHelpers.export(exports, "BarX", ()=>BarX);
parcelHelpers.export(exports, "BarY", ()=>BarY);
parcelHelpers.export(exports, "barX", ()=>barX);
parcelHelpers.export(exports, "barY", ()=>barY);
var _contextJs = require("../context.js");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _scalesJs = require("../scales.js");
var _styleJs = require("../style.js");
var _identityJs = require("../transforms/identity.js");
var _intervalJs = require("../transforms/interval.js");
var _stackJs = require("../transforms/stack.js");
var _rectJs = require("./rect.js");
const barDefaults = {
    ariaLabel: "bar"
};
class AbstractBar extends (0, _markJs.Mark) {
    constructor(data, channels, options = {}, defaults = barDefaults){
        super(data, channels, options, defaults);
        (0, _rectJs.rectInsets)(this, options);
        (0, _rectJs.rectRadii)(this, options);
    }
    render(index, scales, channels, dimensions, context) {
        const { rx, ry, rx1y1, rx1y2, rx2y1, rx2y2 } = this;
        const x = this._x(scales, channels, dimensions);
        const y = this._y(scales, channels, dimensions);
        const w = this._width(scales, channels, dimensions);
        const h = this._height(scales, channels, dimensions);
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call(this._transform, this, scales).call((g)=>g.selectAll().data(index).enter().call(rx1y1 || rx1y2 || rx2y1 || rx2y2 ? (g)=>g.append("path").call((0, _styleJs.applyDirectStyles), this).call((0, _rectJs.applyRoundedRect), x, y, add(x, w), add(y, h), this).call((0, _styleJs.applyChannelStyles), this, channels) : (g)=>g.append("rect").call((0, _styleJs.applyDirectStyles), this).attr("x", x).attr("width", w).attr("y", y).attr("height", h).call((0, _styleJs.applyAttr), "rx", rx).call((0, _styleJs.applyAttr), "ry", ry).call((0, _styleJs.applyChannelStyles), this, channels))).node();
    }
    _x(scales, { x: X }, { marginLeft }) {
        const { insetLeft } = this;
        return X ? (i)=>X[i] + insetLeft : marginLeft + insetLeft;
    }
    _y(scales, { y: Y }, { marginTop }) {
        const { insetTop } = this;
        return Y ? (i)=>Y[i] + insetTop : marginTop + insetTop;
    }
    _width({ x }, { x: X }, { marginRight, marginLeft, width }) {
        const { insetLeft, insetRight } = this;
        const bandwidth = X && x ? x.bandwidth() : width - marginRight - marginLeft;
        return Math.max(0, bandwidth - insetLeft - insetRight);
    }
    _height({ y }, { y: Y }, { marginTop, marginBottom, height }) {
        const { insetTop, insetBottom } = this;
        const bandwidth = Y && y ? y.bandwidth() : height - marginTop - marginBottom;
        return Math.max(0, bandwidth - insetTop - insetBottom);
    }
}
function add(a, b) {
    return typeof a === "function" && typeof b === "function" ? (i)=>a(i) + b(i) : typeof a === "function" ? (i)=>a(i) + b : typeof b === "function" ? (i)=>a + b(i) : a + b;
}
class BarX extends AbstractBar {
    constructor(data, options = {}, defaults){
        const { x1, x2, y } = options;
        super(data, {
            x1: {
                value: x1,
                scale: "x"
            },
            x2: {
                value: x2,
                scale: "x"
            },
            y: {
                value: y,
                scale: "y",
                type: "band",
                optional: true
            }
        }, options, defaults);
    }
    _transform(selection, mark, { x }) {
        selection.call((0, _styleJs.applyTransform), mark, {
            x
        }, 0, 0);
    }
    _x({ x }, { x1: X1, x2: X2 }, { marginLeft }) {
        const { insetLeft } = this;
        return (0, _scalesJs.isCollapsed)(x) ? marginLeft + insetLeft : (i)=>Math.min(X1[i], X2[i]) + insetLeft;
    }
    _width({ x }, { x1: X1, x2: X2 }, { marginRight, marginLeft, width }) {
        const { insetLeft, insetRight } = this;
        return (0, _scalesJs.isCollapsed)(x) ? width - marginRight - marginLeft - insetLeft - insetRight : (i)=>Math.max(0, Math.abs(X2[i] - X1[i]) - insetLeft - insetRight);
    }
}
class BarY extends AbstractBar {
    constructor(data, options = {}, defaults){
        const { x, y1, y2 } = options;
        super(data, {
            y1: {
                value: y1,
                scale: "y"
            },
            y2: {
                value: y2,
                scale: "y"
            },
            x: {
                value: x,
                scale: "x",
                type: "band",
                optional: true
            }
        }, options, defaults);
    }
    _transform(selection, mark, { y }) {
        selection.call((0, _styleJs.applyTransform), mark, {
            y
        }, 0, 0);
    }
    _y({ y }, { y1: Y1, y2: Y2 }, { marginTop }) {
        const { insetTop } = this;
        return (0, _scalesJs.isCollapsed)(y) ? marginTop + insetTop : (i)=>Math.min(Y1[i], Y2[i]) + insetTop;
    }
    _height({ y }, { y1: Y1, y2: Y2 }, { marginTop, marginBottom, height }) {
        const { insetTop, insetBottom } = this;
        return (0, _scalesJs.isCollapsed)(y) ? height - marginTop - marginBottom - insetTop - insetBottom : (i)=>Math.max(0, Math.abs(Y2[i] - Y1[i]) - insetTop - insetBottom);
    }
}
function barX(data, options = {}) {
    if (!(0, _optionsJs.hasXY)(options)) options = {
        ...options,
        y: (0, _optionsJs.indexOf),
        x2: (0, _optionsJs.identity)
    };
    return new BarX(data, (0, _stackJs.maybeStackX)((0, _intervalJs.maybeIntervalX)((0, _identityJs.maybeIdentityX)(options))));
}
function barY(data, options = {}) {
    if (!(0, _optionsJs.hasXY)(options)) options = {
        ...options,
        x: (0, _optionsJs.indexOf),
        y2: (0, _optionsJs.identity)
    };
    return new BarY(data, (0, _stackJs.maybeStackY)((0, _intervalJs.maybeIntervalY)((0, _identityJs.maybeIdentityY)(options))));
}

},{"../context.js":"kyLYX","../mark.js":"a4RyP","../options.js":"eJmsy","../scales.js":"cZh8W","../style.js":"c9bmo","../transforms/identity.js":"kmkvZ","../transforms/interval.js":"jzD9C","../transforms/stack.js":"cZguR","./rect.js":"19Awg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i3iYL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Cell", ()=>Cell);
parcelHelpers.export(exports, "cell", ()=>cell);
parcelHelpers.export(exports, "cellX", ()=>cellX);
parcelHelpers.export(exports, "cellY", ()=>cellY);
var _optionsJs = require("../options.js");
var _styleJs = require("../style.js");
var _barJs = require("./bar.js");
const defaults = {
    ariaLabel: "cell"
};
class Cell extends (0, _barJs.AbstractBar) {
    constructor(data, { x, y, ...options } = {}){
        super(data, {
            x: {
                value: x,
                scale: "x",
                type: "band",
                optional: true
            },
            y: {
                value: y,
                scale: "y",
                type: "band",
                optional: true
            }
        }, options, defaults);
    }
    _transform(selection, mark) {
        // apply dx, dy
        selection.call((0, _styleJs.applyTransform), mark, {}, 0, 0);
    }
}
function cell(data, { x, y, ...options } = {}) {
    [x, y] = (0, _optionsJs.maybeTuple)(x, y);
    return new Cell(data, {
        ...options,
        x,
        y
    });
}
function cellX(data, { x = (0, _optionsJs.indexOf), fill, stroke, ...options } = {}) {
    if (fill === undefined && (0, _optionsJs.maybeColorChannel)(stroke)[0] === undefined) fill = (0, _optionsJs.identity);
    return new Cell(data, {
        ...options,
        x,
        fill,
        stroke
    });
}
function cellY(data, { y = (0, _optionsJs.indexOf), fill, stroke, ...options } = {}) {
    if (fill === undefined && (0, _optionsJs.maybeColorChannel)(stroke)[0] === undefined) fill = (0, _optionsJs.identity);
    return new Cell(data, {
        ...options,
        y,
        fill,
        stroke
    });
}

},{"../options.js":"eJmsy","../style.js":"c9bmo","./bar.js":"aMpp7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hmb7r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "withDefaultSort", ()=>withDefaultSort);
parcelHelpers.export(exports, "Dot", ()=>Dot);
parcelHelpers.export(exports, "dot", ()=>dot);
parcelHelpers.export(exports, "dotX", ()=>dotX);
parcelHelpers.export(exports, "dotY", ()=>dotY);
parcelHelpers.export(exports, "circle", ()=>circle);
parcelHelpers.export(exports, "hexagon", ()=>hexagon);
var _d3 = require("d3");
var _contextJs = require("../context.js");
var _definedJs = require("../defined.js");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _styleJs = require("../style.js");
var _symbolJs = require("../symbol.js");
var _templateJs = require("../template.js");
var _basicJs = require("../transforms/basic.js");
var _intervalJs = require("../transforms/interval.js");
const defaults = {
    ariaLabel: "dot",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: 1.5
};
function withDefaultSort(options) {
    return options.sort === undefined && options.reverse === undefined ? (0, _basicJs.sort)({
        channel: "-r"
    }, options) : options;
}
class Dot extends (0, _markJs.Mark) {
    constructor(data, options = {}){
        const { x, y, r, rotate, symbol = (0, _d3.symbolCircle), frameAnchor } = options;
        const [vrotate, crotate] = (0, _optionsJs.maybeNumberChannel)(rotate, 0);
        const [vsymbol, csymbol] = (0, _symbolJs.maybeSymbolChannel)(symbol);
        const [vr, cr] = (0, _optionsJs.maybeNumberChannel)(r, vsymbol == null ? 3 : 4.5);
        super(data, {
            x: {
                value: x,
                scale: "x",
                optional: true
            },
            y: {
                value: y,
                scale: "y",
                optional: true
            },
            r: {
                value: vr,
                scale: "r",
                filter: (0, _definedJs.positive),
                optional: true
            },
            rotate: {
                value: vrotate,
                optional: true
            },
            symbol: {
                value: vsymbol,
                scale: "auto",
                optional: true
            }
        }, withDefaultSort(options), defaults);
        this.r = cr;
        this.rotate = crotate;
        this.symbol = csymbol;
        this.frameAnchor = (0, _optionsJs.maybeFrameAnchor)(frameAnchor);
        // Give a hint to the symbol scale; this allows the symbol scale to choose
        // appropriate default symbols based on whether the dots are filled or
        // stroked, and for the symbol legend to match the appearance of the dots.
        const { channels } = this;
        const { symbol: symbolChannel } = channels;
        if (symbolChannel) {
            const { fill: fillChannel, stroke: strokeChannel } = channels;
            symbolChannel.hint = {
                fill: fillChannel ? fillChannel.value === symbolChannel.value ? "color" : "currentColor" : this.fill ?? "currentColor",
                stroke: strokeChannel ? strokeChannel.value === symbolChannel.value ? "color" : "currentColor" : this.stroke ?? "none"
            };
        }
    }
    render(index, scales, channels, dimensions, context) {
        const { x, y } = scales;
        const { x: X, y: Y, r: R, rotate: A, symbol: S } = channels;
        const { r, rotate, symbol } = this;
        const [cx, cy] = (0, _styleJs.applyFrameAnchor)(this, dimensions);
        const circle = symbol === (0, _d3.symbolCircle);
        const size = R ? undefined : r * r * Math.PI;
        if ((0, _definedJs.negative)(r)) index = [];
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyTransform), this, {
            x: X && x,
            y: Y && y
        }).call((g)=>g.selectAll().data(index).enter().append(circle ? "circle" : "path").call((0, _styleJs.applyDirectStyles), this).call(circle ? (selection)=>{
                selection.attr("cx", X ? (i)=>X[i] : cx).attr("cy", Y ? (i)=>Y[i] : cy).attr("r", R ? (i)=>R[i] : r);
            } : (selection)=>{
                selection.attr("transform", (0, _templateJs.template)`translate(${X ? (i)=>X[i] : cx},${Y ? (i)=>Y[i] : cy})${A ? (i)=>` rotate(${A[i]})` : rotate ? ` rotate(${rotate})` : ``}`).attr("d", R && S ? (i)=>{
                    const p = (0, _d3.pathRound)();
                    S[i].draw(p, R[i] * R[i] * Math.PI);
                    return p;
                } : R ? (i)=>{
                    const p = (0, _d3.pathRound)();
                    symbol.draw(p, R[i] * R[i] * Math.PI);
                    return p;
                } : S ? (i)=>{
                    const p = (0, _d3.pathRound)();
                    S[i].draw(p, size);
                    return p;
                } : (()=>{
                    const p = (0, _d3.pathRound)();
                    symbol.draw(p, size);
                    return p;
                })());
            }).call((0, _styleJs.applyChannelStyles), this, channels)).node();
    }
}
function dot(data, { x, y, ...options } = {}) {
    if (options.frameAnchor === undefined) [x, y] = (0, _optionsJs.maybeTuple)(x, y);
    return new Dot(data, {
        ...options,
        x,
        y
    });
}
function dotX(data, { x = (0, _optionsJs.identity), ...options } = {}) {
    return new Dot(data, (0, _intervalJs.maybeIntervalMidY)({
        ...options,
        x
    }));
}
function dotY(data, { y = (0, _optionsJs.identity), ...options } = {}) {
    return new Dot(data, (0, _intervalJs.maybeIntervalMidX)({
        ...options,
        y
    }));
}
function circle(data, options) {
    return dot(data, {
        ...options,
        symbol: "circle"
    });
}
function hexagon(data, options) {
    return dot(data, {
        ...options,
        symbol: "hexagon"
    });
}

},{"d3":"17XFv","../context.js":"kyLYX","../defined.js":"3n4Hk","../mark.js":"a4RyP","../options.js":"eJmsy","../style.js":"c9bmo","../symbol.js":"ePwOU","../template.js":"gIQDL","../transforms/basic.js":"hU2qc","../transforms/interval.js":"jzD9C","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5VKzd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Line", ()=>Line);
parcelHelpers.export(exports, "line", ()=>line);
parcelHelpers.export(exports, "lineX", ()=>lineX);
parcelHelpers.export(exports, "lineY", ()=>lineY);
var _d3 = require("d3");
var _contextJs = require("../context.js");
var _curveJs = require("../curve.js");
var _markJs = require("../mark.js");
var _markerJs = require("../marker.js");
var _optionsJs = require("../options.js");
var _styleJs = require("../style.js");
var _binJs = require("../transforms/bin.js");
const defaults = {
    ariaLabel: "line",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: 1.5,
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeMiterlimit: 1
};
class Line extends (0, _markJs.Mark) {
    constructor(data, options = {}){
        const { x, y, z, curve, tension } = options;
        super(data, {
            x: {
                value: x,
                scale: "x"
            },
            y: {
                value: y,
                scale: "y"
            },
            z: {
                value: (0, _optionsJs.maybeZ)(options),
                optional: true
            }
        }, options, defaults);
        this.z = z;
        this.curve = (0, _curveJs.maybeCurveAuto)(curve, tension);
        (0, _markerJs.markers)(this, options);
    }
    filter(index) {
        return index;
    }
    project(channels, values, context) {
        // For the auto curve, projection is handled at render.
        if (this.curve !== (0, _curveJs.curveAuto)) super.project(channels, values, context);
    }
    render(index, scales, channels, dimensions, context) {
        const { x: X, y: Y } = channels;
        const { curve } = this;
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyTransform), this, scales).call((g)=>g.selectAll().data((0, _styleJs.groupIndex)(index, [
                X,
                Y
            ], this, channels)).enter().append("path").call((0, _styleJs.applyDirectStyles), this).call((0, _styleJs.applyGroupedChannelStyles), this, channels).call((0, _markerJs.applyGroupedMarkers), this, channels, context).attr("d", curve === (0, _curveJs.curveAuto) && context.projection ? sphereLine(context.projection, X, Y) : (0, _d3.line)().curve(curve).defined((i)=>i >= 0).x((i)=>X[i]).y((i)=>Y[i]))).node();
    }
}
function sphereLine(projection, X, Y) {
    const path = (0, _d3.geoPath)(projection);
    X = (0, _optionsJs.coerceNumbers)(X);
    Y = (0, _optionsJs.coerceNumbers)(Y);
    return (I)=>{
        let line = [];
        const lines = [
            line
        ];
        for (const i of I)// Check for undefined value; see groupIndex.
        if (i === -1) {
            line = [];
            lines.push(line);
        } else line.push([
            X[i],
            Y[i]
        ]);
        return path({
            type: "MultiLineString",
            coordinates: lines
        });
    };
}
function line(data, { x, y, ...options } = {}) {
    [x, y] = (0, _optionsJs.maybeTuple)(x, y);
    return new Line(data, {
        ...options,
        x,
        y
    });
}
function lineX(data, { x = (0, _optionsJs.identity), y = (0, _optionsJs.indexOf), ...options } = {}) {
    return new Line(data, (0, _binJs.maybeDenseIntervalY)({
        ...options,
        x,
        y
    }));
}
function lineY(data, { x = (0, _optionsJs.indexOf), y = (0, _optionsJs.identity), ...options } = {}) {
    return new Line(data, (0, _binJs.maybeDenseIntervalX)({
        ...options,
        x,
        y
    }));
}

},{"d3":"17XFv","../context.js":"kyLYX","../curve.js":"bbXk9","../mark.js":"a4RyP","../marker.js":"2m35i","../options.js":"eJmsy","../style.js":"c9bmo","../transforms/bin.js":"4d9wn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fUmqG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bollingerX", ()=>bollingerX);
parcelHelpers.export(exports, "bollingerY", ()=>bollingerY);
parcelHelpers.export(exports, "bollinger", ()=>bollinger);
var _d3 = require("d3");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _mapJs = require("../transforms/map.js");
var _windowJs = require("../transforms/window.js");
var _areaJs = require("./area.js");
var _lineJs = require("./line.js");
const defaults = {
    n: 20,
    k: 2,
    color: "currentColor",
    opacity: 0.2,
    strict: true,
    anchor: "end"
};
function bollingerX(data, { x = (0, _optionsJs.identity), y, k = defaults.k, color = defaults.color, opacity = defaults.opacity, fill = color, fillOpacity = opacity, stroke = color, strokeOpacity, strokeWidth, ...options } = {}) {
    return (0, _markJs.marks)((0, _optionsJs.isNoneish)(fill) ? null : (0, _areaJs.areaX)(data, (0, _mapJs.map)({
        x1: bollinger({
            k: -k,
            ...options
        }),
        x2: bollinger({
            k,
            ...options
        })
    }, {
        x1: x,
        x2: x,
        y,
        fill,
        fillOpacity,
        ...options
    })), (0, _optionsJs.isNoneish)(stroke) ? null : (0, _lineJs.lineX)(data, (0, _mapJs.map)({
        x: bollinger(options)
    }, {
        x,
        y,
        stroke,
        strokeOpacity,
        strokeWidth,
        ...options
    })));
}
function bollingerY(data, { x, y = (0, _optionsJs.identity), k = defaults.k, color = defaults.color, opacity = defaults.opacity, fill = color, fillOpacity = opacity, stroke = color, strokeOpacity, strokeWidth, ...options } = {}) {
    return (0, _markJs.marks)((0, _optionsJs.isNoneish)(fill) ? null : (0, _areaJs.areaY)(data, (0, _mapJs.map)({
        y1: bollinger({
            k: -k,
            ...options
        }),
        y2: bollinger({
            k,
            ...options
        })
    }, {
        x,
        y1: y,
        y2: y,
        fill,
        fillOpacity,
        ...options
    })), (0, _optionsJs.isNoneish)(stroke) ? null : (0, _lineJs.lineY)(data, (0, _mapJs.map)({
        y: bollinger(options)
    }, {
        x,
        y,
        stroke,
        strokeOpacity,
        strokeWidth,
        ...options
    })));
}
function bollinger({ n = defaults.n, k = 0, strict = defaults.strict, anchor = defaults.anchor } = {}) {
    return (0, _windowJs.window)({
        k: n,
        reduce: (Y)=>(0, _d3.mean)(Y) + k * ((0, _d3.deviation)(Y) || 0),
        strict,
        anchor
    });
}

},{"d3":"17XFv","../mark.js":"a4RyP","../options.js":"eJmsy","../transforms/map.js":"awNvD","../transforms/window.js":"fzXVx","./area.js":"jcUX2","./line.js":"5VKzd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"awNvD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "mapX", ()=>mapX);
parcelHelpers.export(exports, "mapY", ()=>mapY);
parcelHelpers.export(exports, "map", ()=>map);
var _d3 = require("d3");
var _optionsJs = require("../options.js");
var _basicJs = require("./basic.js");
function mapX(mapper, options = {}) {
    let { x, x1, x2 } = options;
    if (x === undefined && x1 === undefined && x2 === undefined) options = {
        ...options,
        x: x = (0, _optionsJs.identity)
    };
    const outputs = {};
    if (x != null) outputs.x = mapper;
    if (x1 != null) outputs.x1 = mapper;
    if (x2 != null) outputs.x2 = mapper;
    return map(outputs, options);
}
function mapY(mapper, options = {}) {
    let { y, y1, y2 } = options;
    if (y === undefined && y1 === undefined && y2 === undefined) options = {
        ...options,
        y: y = (0, _optionsJs.identity)
    };
    const outputs = {};
    if (y != null) outputs.y = mapper;
    if (y1 != null) outputs.y1 = mapper;
    if (y2 != null) outputs.y2 = mapper;
    return map(outputs, options);
}
function map(outputs = {}, options = {}) {
    const z = (0, _optionsJs.maybeZ)(options);
    const channels = Object.entries(outputs).map(([key, map])=>{
        const input = (0, _optionsJs.maybeInput)(key, options);
        if (input == null) throw new Error(`missing channel: ${key}`);
        const [output, setOutput] = (0, _optionsJs.column)(input);
        return {
            key,
            input,
            output,
            setOutput,
            map: maybeMap(map)
        };
    });
    return {
        ...(0, _basicJs.basic)(options, (data, facets)=>{
            const Z = (0, _optionsJs.valueof)(data, z);
            const X = channels.map(({ input })=>(0, _optionsJs.valueof)(data, input));
            const MX = channels.map(({ setOutput })=>setOutput(new Array(data.length)));
            for (const facet of facets)for (const I of Z ? (0, _d3.group)(facet, (i)=>Z[i]).values() : [
                facet
            ])channels.forEach(({ map }, i)=>map.mapIndex(I, X[i], MX[i]));
            return {
                data,
                facets
            };
        }),
        ...Object.fromEntries(channels.map(({ key, output })=>[
                key,
                output
            ]))
    };
}
function maybeMap(map) {
    if (map == null) throw new Error("missing map");
    if (typeof map.mapIndex === "function") return map;
    if (typeof map.map === "function" && (0, _optionsJs.isObject)(map)) return mapMap(map); // N.B. array.map
    if (typeof map === "function") return mapFunction((0, _optionsJs.taker)(map));
    switch(`${map}`.toLowerCase()){
        case "cumsum":
            return mapCumsum;
        case "rank":
            return mapFunction((I, V)=>(0, _d3.rank)(I, (i)=>V[i]));
        case "quantile":
            return mapFunction((I, V)=>rankQuantile(I, (i)=>V[i]));
    }
    throw new Error(`invalid map: ${map}`);
}
function mapMap(map) {
    console.warn("deprecated map interface; implement mapIndex instead.");
    return {
        mapIndex: map.map.bind(map)
    };
}
function rankQuantile(I, f) {
    const n = (0, _d3.count)(I, f) - 1;
    return (0, _d3.rank)(I, f).map((r)=>r / n);
}
function mapFunction(f) {
    return {
        mapIndex (I, S, T) {
            const M = f(I, S);
            if (M.length !== I.length) throw new Error("map function returned a mismatched length");
            for(let i = 0, n = I.length; i < n; ++i)T[I[i]] = M[i];
        }
    };
}
const mapCumsum = {
    mapIndex (I, S, T) {
        let sum = 0;
        for (const i of I)T[i] = sum += S[i];
    }
};

},{"d3":"17XFv","../options.js":"eJmsy","./basic.js":"hU2qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fzXVx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "windowX", ()=>windowX);
parcelHelpers.export(exports, "windowY", ()=>windowY);
parcelHelpers.export(exports, "window", ()=>window);
var _d3 = require("d3");
var _definedJs = require("../defined.js");
var _optionsJs = require("../options.js");
var _warningsJs = require("../warnings.js");
var _mapJs = require("./map.js");
function windowX(windowOptions = {}, options) {
    if (arguments.length === 1) options = windowOptions;
    return (0, _mapJs.mapX)(window(windowOptions), options);
}
function windowY(windowOptions = {}, options) {
    if (arguments.length === 1) options = windowOptions;
    return (0, _mapJs.mapY)(window(windowOptions), options);
}
function window(options = {}) {
    if (typeof options === "number") options = {
        k: options
    };
    let { k, reduce, shift, anchor, strict } = options;
    if (anchor === undefined && shift !== undefined) {
        anchor = maybeShift(shift);
        (0, _warningsJs.warn)(`Warning: the shift option is deprecated; please use anchor "${anchor}" instead.`);
    }
    if (!((k = Math.floor(k)) > 0)) throw new Error(`invalid k: ${k}`);
    return maybeReduce(reduce)(k, maybeAnchor(anchor, k), strict);
}
function maybeAnchor(anchor = "middle", k) {
    switch(`${anchor}`.toLowerCase()){
        case "middle":
            return k - 1 >> 1;
        case "start":
            return 0;
        case "end":
            return k - 1;
    }
    throw new Error(`invalid anchor: ${anchor}`);
}
function maybeShift(shift) {
    switch(`${shift}`.toLowerCase()){
        case "centered":
            return "middle";
        case "leading":
            return "start";
        case "trailing":
            return "end";
    }
    throw new Error(`invalid shift: ${shift}`);
}
function maybeReduce(reduce = "mean") {
    if (typeof reduce === "string") {
        if (/^p\d{2}$/i.test(reduce)) return reduceAccessor((0, _optionsJs.percentile)(reduce));
        switch(reduce.toLowerCase()){
            case "deviation":
                return reduceAccessor((0, _d3.deviation));
            case "max":
                return reduceArray((I, V)=>(0, _d3.max)(I, (i)=>V[i]));
            case "mean":
                return reduceMean;
            case "median":
                return reduceAccessor((0, _d3.median));
            case "min":
                return reduceArray((I, V)=>(0, _d3.min)(I, (i)=>V[i]));
            case "mode":
                return reduceArray((I, V)=>(0, _d3.mode)(I, (i)=>V[i]));
            case "sum":
                return reduceSum;
            case "variance":
                return reduceAccessor((0, _d3.variance));
            case "difference":
                return reduceDifference;
            case "ratio":
                return reduceRatio;
            case "first":
                return reduceFirst;
            case "last":
                return reduceLast;
        }
    }
    if (typeof reduce !== "function") throw new Error(`invalid reduce: ${reduce}`);
    return reduceArray((0, _optionsJs.taker)(reduce));
}
// Note that the subarray may include NaN in the non-strict case; we expect the
// function f to handle that itself (e.g., by filtering as needed). The D3
// reducers (e.g., min, max, mean, median) do, and it’s faster to avoid
// redundant filtering.
function reduceAccessor(f) {
    return (k, s, strict)=>strict ? {
            mapIndex (I, S, T) {
                const v = (i)=>S[i] == null ? NaN : +S[i];
                let nans = 0;
                for(let i = 0; i < k - 1; ++i)if (isNaN(v(i))) ++nans;
                for(let i = 0, n = I.length - k + 1; i < n; ++i){
                    if (isNaN(v(i + k - 1))) ++nans;
                    T[I[i + s]] = nans === 0 ? f((0, _optionsJs.subarray)(I, i, i + k), v) : NaN;
                    if (isNaN(v(i))) --nans;
                }
            }
        } : {
            mapIndex (I, S, T) {
                const v = (i)=>S[i] == null ? NaN : +S[i];
                for(let i = -s; i < 0; ++i)T[I[i + s]] = f((0, _optionsJs.subarray)(I, 0, i + k), v);
                for(let i = 0, n = I.length - s; i < n; ++i)T[I[i + s]] = f((0, _optionsJs.subarray)(I, i, i + k), v);
            }
        };
}
function reduceArray(f) {
    return (k, s, strict)=>strict ? {
            mapIndex (I, S, T) {
                let count = 0;
                for(let i = 0; i < k - 1; ++i)count += (0, _definedJs.defined)(S[I[i]]);
                for(let i = 0, n = I.length - k + 1; i < n; ++i){
                    count += (0, _definedJs.defined)(S[I[i + k - 1]]);
                    if (count === k) T[I[i + s]] = f((0, _optionsJs.subarray)(I, i, i + k), S);
                    count -= (0, _definedJs.defined)(S[I[i]]);
                }
            }
        } : {
            mapIndex (I, S, T) {
                for(let i = -s; i < 0; ++i)T[I[i + s]] = f((0, _optionsJs.subarray)(I, 0, i + k), S);
                for(let i = 0, n = I.length - s; i < n; ++i)T[I[i + s]] = f((0, _optionsJs.subarray)(I, i, i + k), S);
            }
        };
}
function reduceSum(k, s, strict) {
    return strict ? {
        mapIndex (I, S, T) {
            let nans = 0;
            let sum = 0;
            for(let i = 0; i < k - 1; ++i){
                const v = S[I[i]];
                if (v === null || isNaN(v)) ++nans;
                else sum += +v;
            }
            for(let i = 0, n = I.length - k + 1; i < n; ++i){
                const a = S[I[i]];
                const b = S[I[i + k - 1]];
                if (b === null || isNaN(b)) ++nans;
                else sum += +b;
                T[I[i + s]] = nans === 0 ? sum : NaN;
                if (a === null || isNaN(a)) --nans;
                else sum -= +a;
            }
        }
    } : {
        mapIndex (I, S, T) {
            let sum = 0;
            const n = I.length;
            for(let i = 0, j = Math.min(n, k - s - 1); i < j; ++i)sum += +S[I[i]] || 0;
            for(let i = -s, j = n - s; i < j; ++i){
                sum += +S[I[i + k - 1]] || 0;
                T[I[i + s]] = sum;
                sum -= +S[I[i]] || 0;
            }
        }
    };
}
function reduceMean(k, s, strict) {
    if (strict) {
        const sum = reduceSum(k, s, strict);
        return {
            mapIndex (I, S, T) {
                sum.mapIndex(I, S, T);
                for(let i = 0, n = I.length - k + 1; i < n; ++i)T[I[i + s]] /= k;
            }
        };
    } else return {
        mapIndex (I, S, T) {
            let sum = 0;
            let count = 0;
            const n = I.length;
            for(let i = 0, j = Math.min(n, k - s - 1); i < j; ++i){
                let v = S[I[i]];
                if (v !== null && !isNaN(v = +v)) sum += v, ++count;
            }
            for(let i = -s, j = n - s; i < j; ++i){
                let a = S[I[i + k - 1]];
                let b = S[I[i]];
                if (a !== null && !isNaN(a = +a)) sum += a, ++count;
                T[I[i + s]] = sum / count;
                if (b !== null && !isNaN(b = +b)) sum -= b, --count;
            }
        }
    };
}
function firstDefined(S, I, i, k) {
    for(let j = i + k; i < j; ++i){
        const v = S[I[i]];
        if ((0, _definedJs.defined)(v)) return v;
    }
}
function lastDefined(S, I, i, k) {
    for(let j = i + k - 1; j >= i; --j){
        const v = S[I[j]];
        if ((0, _definedJs.defined)(v)) return v;
    }
}
function firstNumber(S, I, i, k) {
    for(let j = i + k; i < j; ++i){
        let v = S[I[i]];
        if (v !== null && !isNaN(v = +v)) return v;
    }
}
function lastNumber(S, I, i, k) {
    for(let j = i + k - 1; j >= i; --j){
        let v = S[I[j]];
        if (v !== null && !isNaN(v = +v)) return v;
    }
}
function reduceDifference(k, s, strict) {
    return strict ? {
        mapIndex (I, S, T) {
            for(let i = 0, n = I.length - k; i < n; ++i){
                const a = S[I[i]];
                const b = S[I[i + k - 1]];
                T[I[i + s]] = a === null || b === null ? NaN : b - a;
            }
        }
    } : {
        mapIndex (I, S, T) {
            for(let i = -s, n = I.length - k + s + 1; i < n; ++i)T[I[i + s]] = lastNumber(S, I, i, k) - firstNumber(S, I, i, k);
        }
    };
}
function reduceRatio(k, s, strict) {
    return strict ? {
        mapIndex (I, S, T) {
            for(let i = 0, n = I.length - k; i < n; ++i){
                const a = S[I[i]];
                const b = S[I[i + k - 1]];
                T[I[i + s]] = a === null || b === null ? NaN : b / a;
            }
        }
    } : {
        mapIndex (I, S, T) {
            for(let i = -s, n = I.length - k + s + 1; i < n; ++i)T[I[i + s]] = lastNumber(S, I, i, k) / firstNumber(S, I, i, k);
        }
    };
}
function reduceFirst(k, s, strict) {
    return strict ? {
        mapIndex (I, S, T) {
            for(let i = 0, n = I.length - k; i < n; ++i)T[I[i + s]] = S[I[i]];
        }
    } : {
        mapIndex (I, S, T) {
            for(let i = -s, n = I.length - k + s + 1; i < n; ++i)T[I[i + s]] = firstDefined(S, I, i, k);
        }
    };
}
function reduceLast(k, s, strict) {
    return strict ? {
        mapIndex (I, S, T) {
            for(let i = 0, n = I.length - k; i < n; ++i)T[I[i + s]] = S[I[i + k - 1]];
        }
    } : {
        mapIndex (I, S, T) {
            for(let i = -s, n = I.length - k + s + 1; i < n; ++i)T[I[i + s]] = lastDefined(S, I, i, k);
        }
    };
}

},{"d3":"17XFv","../defined.js":"3n4Hk","../options.js":"eJmsy","../warnings.js":"hBaa6","./map.js":"awNvD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cJpmO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Returns a composite mark for producing a horizontal box plot, applying the
// necessary statistical transforms. The boxes are grouped by y, if present.
parcelHelpers.export(exports, "boxX", ()=>boxX);
// Returns a composite mark for producing a vertical box plot, applying the
// necessary statistical transforms. The boxes are grouped by x, if present.
parcelHelpers.export(exports, "boxY", ()=>boxY);
var _d3 = require("d3");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _groupJs = require("../transforms/group.js");
var _mapJs = require("../transforms/map.js");
var _barJs = require("./bar.js");
var _dotJs = require("./dot.js");
var _ruleJs = require("./rule.js");
var _tickJs = require("./tick.js");
function boxX(data, { x = (0, _optionsJs.identity), y = null, r, fill = "#ccc", fillOpacity, stroke = "currentColor", strokeOpacity, strokeWidth = 2, sort, ...options } = {}) {
    const group = y != null ? (0, _groupJs.groupY) : (0, _groupJs.groupZ);
    return (0, _markJs.marks)((0, _ruleJs.ruleY)(data, group({
        x1: loqr1,
        x2: hiqr2
    }, {
        x,
        y,
        stroke,
        strokeOpacity,
        ...options
    })), (0, _barJs.barX)(data, group({
        x1: "p25",
        x2: "p75"
    }, {
        x,
        y,
        fill,
        fillOpacity,
        ...options
    })), (0, _tickJs.tickX)(data, group({
        x: "p50"
    }, {
        x,
        y,
        stroke,
        strokeOpacity,
        strokeWidth,
        sort,
        ...options
    })), (0, _dotJs.dot)(data, (0, _mapJs.map)({
        x: oqr
    }, {
        x,
        y,
        z: y,
        r,
        stroke,
        strokeOpacity,
        ...options
    })));
}
function boxY(data, { y = (0, _optionsJs.identity), x = null, r, fill = "#ccc", fillOpacity, stroke = "currentColor", strokeOpacity, strokeWidth = 2, sort, ...options } = {}) {
    const group = x != null ? (0, _groupJs.groupX) : (0, _groupJs.groupZ);
    return (0, _markJs.marks)((0, _ruleJs.ruleX)(data, group({
        y1: loqr1,
        y2: hiqr2
    }, {
        x,
        y,
        stroke,
        strokeOpacity,
        ...options
    })), (0, _barJs.barY)(data, group({
        y1: "p25",
        y2: "p75"
    }, {
        x,
        y,
        fill,
        fillOpacity,
        ...options
    })), (0, _tickJs.tickY)(data, group({
        y: "p50"
    }, {
        x,
        y,
        stroke,
        strokeOpacity,
        strokeWidth,
        sort,
        ...options
    })), (0, _dotJs.dot)(data, (0, _mapJs.map)({
        y: oqr
    }, {
        x,
        y,
        z: x,
        r,
        stroke,
        strokeOpacity,
        ...options
    })));
}
// A map function that returns only outliers, returning NaN for non-outliers
function oqr(values) {
    const r1 = loqr1(values);
    const r2 = hiqr2(values);
    return values.map((v)=>v < r1 || v > r2 ? v : NaN);
}
function loqr1(values) {
    const lo = quartile1(values) * 2.5 - quartile3(values) * 1.5;
    return (0, _d3.min)(values, (d)=>d >= lo ? d : NaN);
}
function hiqr2(values) {
    const hi = quartile3(values) * 2.5 - quartile1(values) * 1.5;
    return (0, _d3.max)(values, (d)=>d <= hi ? d : NaN);
}
function quartile1(values) {
    return (0, _d3.quantile)(values, 0.25);
}
function quartile3(values) {
    return (0, _d3.quantile)(values, 0.75);
}

},{"d3":"17XFv","../mark.js":"a4RyP","../options.js":"eJmsy","../transforms/group.js":"1qc0A","../transforms/map.js":"awNvD","./bar.js":"aMpp7","./dot.js":"hmb7r","./rule.js":"ligGV","./tick.js":"eSP4V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eSP4V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TickX", ()=>TickX);
parcelHelpers.export(exports, "TickY", ()=>TickY);
parcelHelpers.export(exports, "tickX", ()=>tickX);
parcelHelpers.export(exports, "tickY", ()=>tickY);
var _contextJs = require("../context.js");
var _optionsJs = require("../options.js");
var _markJs = require("../mark.js");
var _markerJs = require("../marker.js");
var _styleJs = require("../style.js");
const defaults = {
    ariaLabel: "tick",
    fill: null,
    stroke: "currentColor"
};
class AbstractTick extends (0, _markJs.Mark) {
    constructor(data, channels, options){
        super(data, channels, options, defaults);
        (0, _markerJs.markers)(this, options);
    }
    render(index, scales, channels, dimensions, context) {
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call(this._transform, this, scales).call((g)=>g.selectAll().data(index).enter().append("line").call((0, _styleJs.applyDirectStyles), this).attr("x1", this._x1(scales, channels, dimensions)).attr("x2", this._x2(scales, channels, dimensions)).attr("y1", this._y1(scales, channels, dimensions)).attr("y2", this._y2(scales, channels, dimensions)).call((0, _styleJs.applyChannelStyles), this, channels).call((0, _markerJs.applyMarkers), this, channels, context)).node();
    }
}
class TickX extends AbstractTick {
    constructor(data, options = {}){
        const { x, y, inset = 0, insetTop = inset, insetBottom = inset } = options;
        super(data, {
            x: {
                value: x,
                scale: "x"
            },
            y: {
                value: y,
                scale: "y",
                type: "band",
                optional: true
            }
        }, options);
        this.insetTop = (0, _optionsJs.number)(insetTop);
        this.insetBottom = (0, _optionsJs.number)(insetBottom);
    }
    _transform(selection, mark, { x }) {
        selection.call((0, _styleJs.applyTransform), mark, {
            x
        }, (0, _styleJs.offset), 0);
    }
    _x1(scales, { x: X }) {
        return (i)=>X[i];
    }
    _x2(scales, { x: X }) {
        return (i)=>X[i];
    }
    _y1({ y }, { y: Y }, { marginTop }) {
        const { insetTop } = this;
        return Y && y ? (i)=>Y[i] + insetTop : marginTop + insetTop;
    }
    _y2({ y }, { y: Y }, { height, marginBottom }) {
        const { insetBottom } = this;
        return Y && y ? (i)=>Y[i] + y.bandwidth() - insetBottom : height - marginBottom - insetBottom;
    }
}
class TickY extends AbstractTick {
    constructor(data, options = {}){
        const { x, y, inset = 0, insetRight = inset, insetLeft = inset } = options;
        super(data, {
            y: {
                value: y,
                scale: "y"
            },
            x: {
                value: x,
                scale: "x",
                type: "band",
                optional: true
            }
        }, options);
        this.insetRight = (0, _optionsJs.number)(insetRight);
        this.insetLeft = (0, _optionsJs.number)(insetLeft);
    }
    _transform(selection, mark, { y }) {
        selection.call((0, _styleJs.applyTransform), mark, {
            y
        }, 0, (0, _styleJs.offset));
    }
    _x1({ x }, { x: X }, { marginLeft }) {
        const { insetLeft } = this;
        return X && x ? (i)=>X[i] + insetLeft : marginLeft + insetLeft;
    }
    _x2({ x }, { x: X }, { width, marginRight }) {
        const { insetRight } = this;
        return X && x ? (i)=>X[i] + x.bandwidth() - insetRight : width - marginRight - insetRight;
    }
    _y1(scales, { y: Y }) {
        return (i)=>Y[i];
    }
    _y2(scales, { y: Y }) {
        return (i)=>Y[i];
    }
}
function tickX(data, { x = (0, _optionsJs.identity), ...options } = {}) {
    return new TickX(data, {
        ...options,
        x
    });
}
function tickY(data, { y = (0, _optionsJs.identity), ...options } = {}) {
    return new TickY(data, {
        ...options,
        y
    });
}

},{"../context.js":"kyLYX","../options.js":"eJmsy","../mark.js":"a4RyP","../marker.js":"2m35i","../style.js":"c9bmo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"giIS1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Contour", ()=>Contour);
parcelHelpers.export(exports, "contour", ()=>contour);
var _d3 = require("d3");
var _channelJs = require("../channel.js");
var _contextJs = require("../context.js");
var _optionsJs = require("../options.js");
var _projectionJs = require("../projection.js");
var _styleJs = require("../style.js");
var _basicJs = require("../transforms/basic.js");
var _binJs = require("../transforms/bin.js");
var _rasterJs = require("./raster.js");
const defaults = {
    ariaLabel: "contour",
    fill: "none",
    stroke: "currentColor",
    strokeMiterlimit: 1,
    pixelSize: 2
};
class Contour extends (0, _rasterJs.AbstractRaster) {
    constructor(data, { smooth = true, value, ...options } = {}){
        const channels = (0, _styleJs.styles)({}, options, defaults);
        // If value is not specified explicitly, look for a channel to promote. If
        // more than one channel is present, throw an error. (To disambiguate,
        // specify the value option explicitly.)
        if (value === undefined) {
            for(const key in channels)if (channels[key].value != null) {
                if (value !== undefined) throw new Error("ambiguous contour value");
                value = options[key];
                options[key] = "value";
            }
        }
        // For any channel specified as the literal (contour threshold) "value"
        // (maybe because of the promotion above), propagate the label from the
        // original value definition.
        if (value != null) {
            const v = {
                transform: (D)=>D.map((d)=>d.value),
                label: (0, _optionsJs.labelof)(value)
            };
            for(const key in channels)if (options[key] === "value") options[key] = v;
        }
        // If the data is null, then we’ll construct the raster grid by evaluating a
        // function for each point in a dense grid. The value channel is populated
        // by the sampler initializer, and hence is not passed to super to avoid
        // computing it before there’s data.
        if (data == null) {
            if (value == null) throw new Error("missing contour value");
            options = (0, _rasterJs.sampler)("value", {
                value,
                ...options
            });
            value = null;
        } else {
            let { interpolate } = options;
            if (value === undefined) value = (0, _optionsJs.identity);
            if (interpolate === undefined) options.interpolate = "nearest";
        }
        // Wrap the options in our initializer that computes the contour geometries;
        // this runs after any other initializers (and transforms).
        super(data, {
            value: {
                value,
                optional: true
            }
        }, contourGeometry(options), defaults);
        // With the exception of the x, y, x1, y1, x2, y2, and value channels, this
        // mark’s channels are not evaluated on the initial data but rather on the
        // contour multipolygons generated in the initializer.
        const contourChannels = {
            geometry: {
                value: (0, _optionsJs.identity)
            }
        };
        for(const key in this.channels){
            const channel = this.channels[key];
            const { scale } = channel;
            if (scale === "x" || scale === "y" || key === "value") continue;
            contourChannels[key] = channel;
            delete this.channels[key];
        }
        this.contourChannels = contourChannels;
        this.smooth = !!smooth;
    }
    filter(index, { x, y, value, ...channels }, values) {
        // Only filter channels constructed by the contourGeometry initializer; the
        // x, y, and value channels must be filtered by the initializer itself.
        return super.filter(index, channels, values);
    }
    render(index, scales, channels, dimensions, context) {
        const { geometry: G } = channels;
        const path = (0, _d3.geoPath)();
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyTransform), this, scales).call((g)=>{
            g.selectAll().data(index).enter().append("path").call((0, _styleJs.applyDirectStyles), this).attr("d", (i)=>path(G[i])).call((0, _styleJs.applyChannelStyles), this, channels);
        }).node();
    }
}
function contourGeometry({ thresholds, interval, ...options }) {
    thresholds = (0, _binJs.maybeThresholds)(thresholds, interval, (0, _d3.thresholdSturges));
    return (0, _basicJs.initializer)(options, function(data, facets, channels, scales, dimensions, context) {
        const [x1, y1, x2, y2] = (0, _rasterJs.rasterBounds)(channels, scales, dimensions, context);
        const dx = x2 - x1;
        const dy = y2 - y1;
        const { pixelSize: k, width: w = Math.round(Math.abs(dx) / k), height: h = Math.round(Math.abs(dy) / k) } = this;
        const kx = w / dx;
        const ky = h / dy;
        const V = channels.value.value;
        const VV = []; // V per facet
        // Interpolate the raster grid, as needed.
        if (this.interpolate) {
            const { x: X, y: Y } = (0, _projectionJs.applyPosition)(channels, scales, context);
            // Convert scaled (screen) coordinates to grid (canvas) coordinates.
            const IX = (0, _optionsJs.map)(X, (x)=>(x - x1) * kx, Float64Array);
            const IY = (0, _optionsJs.map)(Y, (y)=>(y - y1) * ky, Float64Array);
            // The contour mark normally skips filtering on x, y, and value, so here
            // we’re careful to use different names (0, 1, 2) when filtering.
            const ichannels = [
                channels.x,
                channels.y,
                channels.value
            ];
            const ivalues = [
                IX,
                IY,
                V
            ];
            for (const facet of facets){
                const index = this.filter(facet, ichannels, ivalues);
                VV.push(this.interpolate(index, w, h, IX, IY, V));
            }
        } else if (facets) {
            const n = w * h;
            const m = facets.length;
            for(let i = 0; i < m; ++i)VV.push(V.slice(i * n, i * n + n));
        } else VV.push(V);
        // Blur the raster grid, if desired.
        if (this.blur > 0) for (const V of VV)(0, _d3.blur2)({
            data: V,
            width: w,
            height: h
        }, this.blur);
        // Compute the contour thresholds.
        const T = maybeTicks(thresholds, V, ...finiteExtent(VV));
        if (T === null) throw new Error(`unsupported thresholds: ${thresholds}`);
        // Compute the (maybe faceted) contours.
        const { contour } = (0, _d3.contours)().size([
            w,
            h
        ]).smooth(this.smooth);
        const contourData = [];
        const contourFacets = [];
        for (const V of VV)contourFacets.push((0, _d3.range)(contourData.length, contourData.push(...(0, _optionsJs.map)(T, (t)=>contour(V, t)))));
        // Rescale the contour multipolygon from grid to screen coordinates.
        for (const { coordinates } of contourData)for (const rings of coordinates){
            for (const ring of rings)for (const point of ring){
                point[0] = point[0] / kx + x1;
                point[1] = point[1] / ky + y1;
            }
        }
        // Compute the deferred channels.
        return {
            data: contourData,
            facets: contourFacets,
            channels: (0, _channelJs.createChannels)(this.contourChannels, contourData)
        };
    });
}
// Apply the thresholds interval, function, or count, and return an array of
// ticks. d3-contour unlike d3-array doesn’t pass the min and max automatically,
// so we do that here to normalize, and also so we can share consistent
// thresholds across facets. When an interval is used, note that the lowest
// threshold should be below (or equal) to the lowest value, or else some data
// will be missing.
function maybeTicks(thresholds, V, min, max) {
    if (typeof thresholds?.range === "function") return thresholds.range(thresholds.floor(min), max);
    if (typeof thresholds === "function") thresholds = thresholds(V, min, max);
    if (typeof thresholds !== "number") return (0, _optionsJs.arrayify)(thresholds);
    const tz = (0, _d3.ticks)(...(0, _d3.nice)(min, max, thresholds), thresholds);
    while(tz[tz.length - 1] >= max)tz.pop();
    while(tz[1] < min)tz.shift();
    return tz;
}
function contour() {
    return new Contour(...(0, _rasterJs.maybeTuples)("value", ...arguments));
}
function finiteExtent(VV) {
    return [
        (0, _d3.min)(VV, (V)=>(0, _d3.min)(V, finite)),
        (0, _d3.max)(VV, (V)=>(0, _d3.max)(V, finite))
    ];
}
function finite(x) {
    return isFinite(x) ? x : NaN;
}

},{"d3":"17XFv","../channel.js":"h3rWV","../context.js":"kyLYX","../options.js":"eJmsy","../projection.js":"eTnHA","../style.js":"c9bmo","../transforms/basic.js":"hU2qc","../transforms/bin.js":"4d9wn","./raster.js":"jW7UY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jW7UY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbstractRaster", ()=>AbstractRaster);
parcelHelpers.export(exports, "Raster", ()=>Raster);
parcelHelpers.export(exports, "maybeTuples", ()=>maybeTuples);
parcelHelpers.export(exports, "raster", ()=>raster);
// If x1, y1, x2, y2 were specified, and no projection is in use (and thus the
// raster grid is necessarily an axis-aligned rectangle), then we can compute
// tighter bounds for the image, improving resolution.
parcelHelpers.export(exports, "rasterBounds", ()=>rasterBounds);
// Evaluates the function with the given name, if it exists, on the raster grid,
// generating a channel of the same name.
parcelHelpers.export(exports, "sampler", ()=>sampler);
// Applies a simple forward mapping of samples, binning them into pixels without
// any blending or interpolation. Note: if multiple samples map to the same
// pixel, the last one wins; this can introduce bias if the points are not in
// random order, so use Plot.shuffle to randomize the input if needed.
parcelHelpers.export(exports, "interpolateNone", ()=>interpolateNone);
parcelHelpers.export(exports, "interpolatorBarycentric", ()=>interpolatorBarycentric);
parcelHelpers.export(exports, "interpolateNearest", ()=>interpolateNearest);
// https://observablehq.com/@observablehq/walk-on-spheres-precision
parcelHelpers.export(exports, "interpolatorRandomWalk", ()=>interpolatorRandomWalk);
var _d3 = require("d3");
var _channelJs = require("../channel.js");
var _contextJs = require("../context.js");
var _optionsJs = require("../options.js");
var _markJs = require("../mark.js");
var _styleJs = require("../style.js");
var _basicJs = require("../transforms/basic.js");
const defaults = {
    ariaLabel: "raster",
    stroke: null,
    pixelSize: 1
};
function number(input, name) {
    const x = +input;
    if (isNaN(x)) throw new Error(`invalid ${name}: ${input}`);
    return x;
}
function integer(input, name) {
    const x = Math.floor(input);
    if (isNaN(x)) throw new Error(`invalid ${name}: ${input}`);
    return x;
}
class AbstractRaster extends (0, _markJs.Mark) {
    constructor(data, channels, options = {}, defaults){
        let { width, height, x, y, x1 = x == null ? 0 : undefined, y1 = y == null ? 0 : undefined, x2 = x == null ? width : undefined, y2 = y == null ? height : undefined, pixelSize = defaults.pixelSize, blur = 0, interpolate } = options;
        if (width != null) width = integer(width, "width");
        if (height != null) height = integer(height, "height");
        // These represent the (minimum) bounds of the raster; they are not
        // evaluated for each datum. Also, if x and y are not specified explicitly,
        // then these bounds are used to compute the dense linear grid.
        if (x1 != null) x1 = number(x1, "x1");
        if (y1 != null) y1 = number(y1, "y1");
        if (x2 != null) x2 = number(x2, "x2");
        if (y2 != null) y2 = number(y2, "y2");
        if (x == null && (x1 == null || x2 == null)) throw new Error("missing x");
        if (y == null && (y1 == null || y2 == null)) throw new Error("missing y");
        if (data != null && width != null && height != null) {
            // If x and y are not given, assume the data is a dense array of samples
            // covering the entire grid in row-major order. These defaults allow
            // further shorthand where x and y represent grid column and row index.
            // TODO If we know that the x and y scales are linear, then we could avoid
            // materializing these columns to improve performance.
            if (x === undefined && x1 != null && x2 != null) x = denseX(x1, x2, width, height);
            if (y === undefined && y1 != null && y2 != null) y = denseY(y1, y2, width, height);
        }
        super(data, {
            x: {
                value: x,
                scale: "x",
                optional: true
            },
            y: {
                value: y,
                scale: "y",
                optional: true
            },
            x1: {
                value: x1 == null ? null : [
                    x1
                ],
                scale: "x",
                optional: true,
                filter: null
            },
            y1: {
                value: y1 == null ? null : [
                    y1
                ],
                scale: "y",
                optional: true,
                filter: null
            },
            x2: {
                value: x2 == null ? null : [
                    x2
                ],
                scale: "x",
                optional: true,
                filter: null
            },
            y2: {
                value: y2 == null ? null : [
                    y2
                ],
                scale: "y",
                optional: true,
                filter: null
            },
            ...channels
        }, options, defaults);
        this.width = width;
        this.height = height;
        this.pixelSize = number(pixelSize, "pixelSize");
        this.blur = number(blur, "blur");
        this.interpolate = x == null || y == null ? null : maybeInterpolate(interpolate); // interpolation requires x & y
    }
}
class Raster extends AbstractRaster {
    constructor(data, options = {}){
        const { imageRendering } = options;
        if (data == null) {
            const { fill, fillOpacity } = options;
            if ((0, _optionsJs.maybeNumberChannel)(fillOpacity)[0] !== undefined) options = sampler("fillOpacity", options);
            if ((0, _optionsJs.maybeColorChannel)(fill)[0] !== undefined) options = sampler("fill", options);
        }
        super(data, undefined, options, defaults);
        this.imageRendering = (0, _styleJs.impliedString)(imageRendering, "auto");
    }
    // Ignore the color scale, so the fill channel is returned unscaled.
    scale(channels, { color, ...scales }, context) {
        return super.scale(channels, scales, context);
    }
    render(index, scales, values, dimensions, context) {
        const color = scales[values.channels.fill?.scale] ?? ((x)=>x);
        const { x: X, y: Y } = values;
        const { document } = context;
        const [x1, y1, x2, y2] = renderBounds(values, dimensions, context);
        const dx = x2 - x1;
        const dy = y2 - y1;
        const { pixelSize: k, width: w = Math.round(Math.abs(dx) / k), height: h = Math.round(Math.abs(dy) / k) } = this;
        const n = w * h;
        // Interpolate the samples to fill the raster grid. If interpolate is null,
        // then a continuous function is being sampled, and the raster grid is
        // already aligned with the canvas.
        let { fill: F, fillOpacity: FO } = values;
        let offset = 0;
        if (this.interpolate) {
            const kx = w / dx;
            const ky = h / dy;
            const IX = (0, _optionsJs.map)(X, (x)=>(x - x1) * kx, Float64Array);
            const IY = (0, _optionsJs.map)(Y, (y)=>(y - y1) * ky, Float64Array);
            if (F) F = this.interpolate(index, w, h, IX, IY, F);
            if (FO) FO = this.interpolate(index, w, h, IX, IY, FO);
        } else if (this.data == null && index) offset = index.fi * n;
        // Render the raster grid to the canvas, blurring if needed.
        const canvas = document.createElement("canvas");
        canvas.width = w;
        canvas.height = h;
        const context2d = canvas.getContext("2d");
        const image = context2d.createImageData(w, h);
        const imageData = image.data;
        let { r, g, b } = (0, _d3.rgb)(this.fill) ?? {
            r: 0,
            g: 0,
            b: 0
        };
        let a = (this.fillOpacity ?? 1) * 255;
        for(let i = 0; i < n; ++i){
            const j = i << 2;
            if (F) {
                const fi = color(F[i + offset]);
                if (fi == null) {
                    imageData[j + 3] = 0;
                    continue;
                }
                ({ r, g, b } = (0, _d3.rgb)(fi));
            }
            if (FO) a = FO[i + offset] * 255;
            imageData[j + 0] = r;
            imageData[j + 1] = g;
            imageData[j + 2] = b;
            imageData[j + 3] = a;
        }
        if (this.blur > 0) (0, _d3.blurImage)(image, this.blur);
        context2d.putImageData(image, 0, 0);
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyTransform), this, scales).call((g)=>g.append("image").attr("transform", `translate(${x1},${y1}) scale(${Math.sign(x2 - x1)},${Math.sign(y2 - y1)})`).attr("width", Math.abs(dx)).attr("height", Math.abs(dy)).attr("preserveAspectRatio", "none").call((0, _styleJs.applyAttr), "image-rendering", this.imageRendering).call((0, _styleJs.applyDirectStyles), this).attr("xlink:href", canvas.toDataURL())).node();
    }
}
function maybeTuples(k, data, options) {
    if (arguments.length < 3) options = data, data = null;
    let { x, y, [k]: z, ...rest } = options;
    // Because we use implicit x and y when z is a function of (x, y), and when
    // data is a dense grid, we must further disambiguate by testing whether data
    // contains [x, y, z?] tuples. Hence you can’t use this shorthand with a
    // transform that lazily generates tuples, but that seems reasonable since
    // this is just for convenience anyway.
    if (x === undefined && y === undefined && (0, _optionsJs.isTuples)(data)) {
        x = (0, _optionsJs.first), y = (0, _optionsJs.second);
        if (z === undefined) z = (0, _optionsJs.third);
    }
    return [
        data,
        {
            ...rest,
            x,
            y,
            [k]: z
        }
    ];
}
function raster() {
    const [data, options] = maybeTuples("fill", ...arguments);
    return new Raster(data, data == null || options.fill !== undefined || options.fillOpacity !== undefined ? options : {
        ...options,
        fill: (0, _optionsJs.identity)
    });
}
// See rasterBounds; this version is called during render.
function renderBounds({ x1, y1, x2, y2 }, dimensions, { projection }) {
    const { width, height, marginTop, marginRight, marginBottom, marginLeft } = dimensions;
    return [
        x1 && projection == null ? x1[0] : marginLeft,
        y1 && projection == null ? y1[0] : marginTop,
        x2 && projection == null ? x2[0] : width - marginRight,
        y2 && projection == null ? y2[0] : height - marginBottom
    ];
}
function rasterBounds({ x1, y1, x2, y2 }, scales, dimensions, context) {
    const channels = {};
    if (x1) channels.x1 = x1;
    if (y1) channels.y1 = y1;
    if (x2) channels.x2 = x2;
    if (y2) channels.y2 = y2;
    return renderBounds((0, _channelJs.valueObject)(channels, scales), dimensions, context);
}
function sampler(name, options = {}) {
    const { [name]: value } = options;
    if (typeof value !== "function") throw new Error(`invalid ${name}: not a function`);
    return (0, _basicJs.initializer)({
        ...options,
        [name]: undefined
    }, function(data, facets, channels, scales, dimensions, context) {
        const { x, y } = scales;
        // TODO Allow projections, if invertible.
        if (!x) throw new Error("missing scale: x");
        if (!y) throw new Error("missing scale: y");
        const [x1, y1, x2, y2] = rasterBounds(channels, scales, dimensions, context);
        const dx = x2 - x1;
        const dy = y2 - y1;
        const { pixelSize: k } = this;
        // Note: this must exactly match the defaults in render above!
        const { width: w = Math.round(Math.abs(dx) / k), height: h = Math.round(Math.abs(dy) / k) } = options;
        // TODO Hint to use a typed array when possible?
        const V = new Array(w * h * (facets ? facets.length : 1));
        const kx = dx / w;
        const ky = dy / h;
        let i = 0;
        for (const facet of facets ?? [
            undefined
        ]){
            for(let yi = 0.5; yi < h; ++yi)for(let xi = 0.5; xi < w; ++xi, ++i)V[i] = value(x.invert(x1 + xi * kx), y.invert(y1 + yi * ky), facet);
        }
        return {
            data: V,
            facets,
            channels: {
                [name]: {
                    value: V,
                    scale: "auto"
                }
            }
        };
    });
}
function maybeInterpolate(interpolate) {
    if (typeof interpolate === "function") return interpolate;
    if (interpolate == null) return interpolateNone;
    switch(`${interpolate}`.toLowerCase()){
        case "none":
            return interpolateNone;
        case "nearest":
            return interpolateNearest;
        case "barycentric":
            return interpolatorBarycentric();
        case "random-walk":
            return interpolatorRandomWalk();
    }
    throw new Error(`invalid interpolate: ${interpolate}`);
}
function interpolateNone(index, width, height, X, Y, V) {
    const W = new Array(width * height);
    for (const i of index){
        if (X[i] < 0 || X[i] >= width || Y[i] < 0 || Y[i] >= height) continue;
        W[Math.floor(Y[i]) * width + Math.floor(X[i])] = V[i];
    }
    return W;
}
function interpolatorBarycentric({ random = (0, _d3.randomLcg)(42) } = {}) {
    return (index, width, height, X, Y, V)=>{
        // Interpolate the interior of all triangles with barycentric coordinates
        const { points, triangles, hull } = (0, _d3.Delaunay).from(index, (i)=>X[i], (i)=>Y[i]);
        const W = new V.constructor(width * height).fill(NaN);
        const S = new Uint8Array(width * height); // 1 if pixel has been seen.
        const mix = mixer(V, random);
        for(let i = 0; i < triangles.length; i += 3){
            const ta = triangles[i];
            const tb = triangles[i + 1];
            const tc = triangles[i + 2];
            const Ax = points[2 * ta];
            const Bx = points[2 * tb];
            const Cx = points[2 * tc];
            const Ay = points[2 * ta + 1];
            const By = points[2 * tb + 1];
            const Cy = points[2 * tc + 1];
            const x1 = Math.min(Ax, Bx, Cx);
            const x2 = Math.max(Ax, Bx, Cx);
            const y1 = Math.min(Ay, By, Cy);
            const y2 = Math.max(Ay, By, Cy);
            const z = (By - Cy) * (Ax - Cx) + (Ay - Cy) * (Cx - Bx);
            if (!z) continue;
            const va = V[index[ta]];
            const vb = V[index[tb]];
            const vc = V[index[tc]];
            for(let x = Math.floor(x1); x < x2; ++x)for(let y = Math.floor(y1); y < y2; ++y){
                if (x < 0 || x >= width || y < 0 || y >= height) continue;
                const xp = x + 0.5; // sample pixel centroids
                const yp = y + 0.5;
                const s = Math.sign(z);
                const ga = (By - Cy) * (xp - Cx) + (yp - Cy) * (Cx - Bx);
                if (ga * s < 0) continue;
                const gb = (Cy - Ay) * (xp - Cx) + (yp - Cy) * (Ax - Cx);
                if (gb * s < 0) continue;
                const gc = z - (ga + gb);
                if (gc * s < 0) continue;
                const i = x + width * y;
                W[i] = mix(va, ga / z, vb, gb / z, vc, gc / z, x, y);
                S[i] = 1;
            }
        }
        extrapolateBarycentric(W, S, X, Y, V, width, height, hull, index, mix);
        return W;
    };
}
// Extrapolate by finding the closest point on the hull.
function extrapolateBarycentric(W, S, X, Y, V, width, height, hull, index, mix) {
    X = Float64Array.from(hull, (i)=>X[index[i]]);
    Y = Float64Array.from(hull, (i)=>Y[index[i]]);
    V = Array.from(hull, (i)=>V[index[i]]);
    const n = X.length;
    const rays = Array.from({
        length: n
    }, (_, j)=>ray(j, X, Y));
    let k = 0;
    for(let y = 0; y < height; ++y){
        const yp = y + 0.5;
        for(let x = 0; x < width; ++x){
            const i = x + width * y;
            if (!S[i]) {
                const xp = x + 0.5;
                for(let l = 0; l < n; ++l){
                    const j = (n + k + (l % 2 ? (l + 1) / 2 : -l / 2)) % n;
                    if (rays[j](xp, yp)) {
                        const t = segmentProject(X.at(j - 1), Y.at(j - 1), X[j], Y[j], xp, yp);
                        W[i] = mix(V.at(j - 1), t, V[j], 1 - t, V[j], 0, x, y);
                        k = j;
                        break;
                    }
                }
            }
        }
    }
}
// Projects a point p = [x, y] onto the line segment [p1, p2], returning the
// projected coordinates p’ as t in [0, 1] with p’ = t p1 + (1 - t) p2.
function segmentProject(x1, y1, x2, y2, x, y) {
    const dx = x2 - x1;
    const dy = y2 - y1;
    const a = dx * (x2 - x) + dy * (y2 - y);
    const b = dx * (x - x1) + dy * (y - y1);
    return a > 0 && b > 0 ? a / (a + b) : +(a > b);
}
function cross(xa, ya, xb, yb) {
    return xa * yb - xb * ya;
}
function ray(j, X, Y) {
    const n = X.length;
    const xc = X.at(j - 2);
    const yc = Y.at(j - 2);
    const xa = X.at(j - 1);
    const ya = Y.at(j - 1);
    const xb = X[j];
    const yb = Y[j];
    const xd = X.at(j + 1 - n);
    const yd = Y.at(j + 1 - n);
    const dxab = xa - xb;
    const dyab = ya - yb;
    const dxca = xc - xa;
    const dyca = yc - ya;
    const dxbd = xb - xd;
    const dybd = yb - yd;
    const hab = Math.hypot(dxab, dyab);
    const hca = Math.hypot(dxca, dyca);
    const hbd = Math.hypot(dxbd, dybd);
    return (x, y)=>{
        const dxa = x - xa;
        const dya = y - ya;
        const dxb = x - xb;
        const dyb = y - yb;
        return cross(dxa, dya, dxb, dyb) > -0.000001 && cross(dxa, dya, dxab, dyab) * hca - cross(dxa, dya, dxca, dyca) * hab > -0.000001 && cross(dxb, dyb, dxbd, dybd) * hab - cross(dxb, dyb, dxab, dyab) * hbd <= 0;
    };
}
function interpolateNearest(index, width, height, X, Y, V) {
    const W = new V.constructor(width * height);
    const delaunay = (0, _d3.Delaunay).from(index, (i)=>X[i], (i)=>Y[i]);
    // memoization of delaunay.find for the line start (iy) and pixel (ix)
    let iy, ix;
    for(let y = 0.5, k = 0; y < height; ++y){
        ix = iy;
        for(let x = 0.5; x < width; ++x, ++k){
            ix = delaunay.find(x, y, ix);
            if (x === 0.5) iy = ix;
            W[k] = V[index[ix]];
        }
    }
    return W;
}
function interpolatorRandomWalk({ random = (0, _d3.randomLcg)(42), minDistance = 0.5, maxSteps = 2 } = {}) {
    return (index, width, height, X, Y, V)=>{
        const W = new V.constructor(width * height);
        const delaunay = (0, _d3.Delaunay).from(index, (i)=>X[i], (i)=>Y[i]);
        // memoization of delaunay.find for the line start (iy), pixel (ix), and wos step (iw)
        let iy, ix, iw;
        for(let y = 0.5, k = 0; y < height; ++y){
            ix = iy;
            for(let x = 0.5; x < width; ++x, ++k){
                let cx = x;
                let cy = y;
                iw = ix = delaunay.find(cx, cy, ix);
                if (x === 0.5) iy = ix;
                let distance; // distance to closest sample
                let step = 0; // count of steps for this walk
                while((distance = Math.hypot(X[index[iw]] - cx, Y[index[iw]] - cy)) > minDistance && step < maxSteps){
                    const angle = random(x, y, step) * 2 * Math.PI;
                    cx += Math.cos(angle) * distance;
                    cy += Math.sin(angle) * distance;
                    iw = delaunay.find(cx, cy, iw);
                    ++step;
                }
                W[k] = V[index[iw]];
            }
        }
        return W;
    };
}
function blend(a, ca, b, cb, c, cc) {
    return ca * a + cb * b + cc * c;
}
function pick(random) {
    return (a, ca, b, cb, c, cc, x, y)=>{
        const u = random(x, y);
        return u < ca ? a : u < ca + cb ? b : c;
    };
}
function mixer(F, random) {
    return (0, _optionsJs.isNumeric)(F) || (0, _optionsJs.isTemporal)(F) ? blend : pick(random);
}
function denseX(x1, x2, width) {
    return {
        transform (data) {
            const n = data.length;
            const X = new Float64Array(n);
            const kx = (x2 - x1) / width;
            const x0 = x1 + kx / 2;
            for(let i = 0; i < n; ++i)X[i] = i % width * kx + x0;
            return X;
        }
    };
}
function denseY(y1, y2, width, height) {
    return {
        transform (data) {
            const n = data.length;
            const Y = new Float64Array(n);
            const ky = (y2 - y1) / height;
            const y0 = y1 + ky / 2;
            for(let i = 0; i < n; ++i)Y[i] = Math.floor(i / width) % height * ky + y0;
            return Y;
        }
    };
}

},{"d3":"17XFv","../channel.js":"h3rWV","../context.js":"kyLYX","../options.js":"eJmsy","../mark.js":"a4RyP","../style.js":"c9bmo","../transforms/basic.js":"hU2qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"31Gb5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "crosshair", ()=>crosshair);
parcelHelpers.export(exports, "crosshairX", ()=>crosshairX);
parcelHelpers.export(exports, "crosshairY", ()=>crosshairY);
var _channelJs = require("../channel.js");
var _pointerJs = require("../interactions/pointer.js");
var _markJs = require("../mark.js");
var _basicJs = require("../transforms/basic.js");
var _ruleJs = require("./rule.js");
var _textJs = require("./text.js");
function crosshair(data, options) {
    return crosshairK((0, _pointerJs.pointer), data, options);
}
function crosshairX(data, options = {}) {
    return crosshairK((0, _pointerJs.pointerX), data, options);
}
function crosshairY(data, options = {}) {
    return crosshairK((0, _pointerJs.pointerY), data, options);
}
function crosshairK(pointer, data, options = {}) {
    const { x, y, maxRadius } = options;
    const p = pointer({
        px: x,
        py: y,
        maxRadius
    });
    const M = [];
    if (x != null) M.push((0, _ruleJs.ruleX)(data, ruleOptions("x", {
        ...p,
        inset: -6
    }, options)));
    if (y != null) M.push((0, _ruleJs.ruleY)(data, ruleOptions("y", {
        ...p,
        inset: -6
    }, options)));
    if (x != null) M.push((0, _textJs.text)(data, textOptions("x", {
        ...p,
        dy: 9,
        frameAnchor: "bottom",
        lineAnchor: "top"
    }, options)));
    if (y != null) M.push((0, _textJs.text)(data, textOptions("y", {
        ...p,
        dx: -9,
        frameAnchor: "left",
        textAnchor: "end"
    }, options)));
    for (const m of M)m.ariaLabel = `crosshair ${m.ariaLabel}`;
    return (0, _markJs.marks)(...M);
}
function markOptions(k, { channels: pointerChannels, ...pointerOptions }, { facet, facetAnchor, fx, fy, [k]: p, channels, transform, initializer }) {
    return {
        ...pointerOptions,
        facet,
        facetAnchor,
        fx,
        fy,
        [k]: p,
        channels: {
            ...pointerChannels,
            ...channels
        },
        transform,
        initializer: pxpy(k, initializer)
    };
}
// Wrap the initializer, if any, mapping px and py to x and y temporarily (e.g.,
// for hexbin) then mapping back to px and py for rendering.
function pxpy(k, i) {
    if (i == null) return i;
    return function(data, facets, { x: x1, y: y1, px, py, ...c1 }, ...args) {
        const { channels: { x, y, ...c } = {}, ...rest } = i.call(this, data, facets, {
            ...c1,
            x: px,
            y: py
        }, ...args);
        return {
            channels: {
                ...c,
                ...x && {
                    px: x,
                    ...k === "x" && {
                        x
                    }
                },
                ...y && {
                    py: y,
                    ...k === "y" && {
                        y
                    }
                }
            },
            ...rest
        };
    };
}
function ruleOptions(k, pointerOptions, options) {
    const { color = "currentColor", opacity = 0.2, ruleStroke: stroke = color, ruleStrokeOpacity: strokeOpacity = opacity, ruleStrokeWidth: strokeWidth } = options;
    return {
        ...markOptions(k, pointerOptions, options),
        stroke,
        strokeOpacity,
        strokeWidth
    };
}
function textOptions(k, pointerOptions, options) {
    const { color = "currentColor", textFill: fill = color, textFillOpacity: fillOpacity, textStroke: stroke = "var(--plot-background)", textStrokeOpacity: strokeOpacity, textStrokeWidth: strokeWidth = 5 } = options;
    return {
        ...markOptions(k, pointerOptions, textChannel(k, options)),
        fill,
        fillOpacity,
        stroke,
        strokeOpacity,
        strokeWidth
    };
}
// Rather than aliasing text to have the same definition as x and y, we use an
// initializer to alias the channel values, such that the text channel can be
// derived by an initializer such as hexbin.
function textChannel(source, options) {
    return (0, _basicJs.initializer)(options, (data, facets, channels)=>{
        return {
            channels: {
                text: {
                    value: (0, _channelJs.getSource)(channels, source)?.value
                }
            }
        };
    });
}

},{"../channel.js":"h3rWV","../interactions/pointer.js":"erI4H","../mark.js":"a4RyP","../transforms/basic.js":"hU2qc","./rule.js":"ligGV","./text.js":"5cTpv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8JN3o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "delaunayLink", ()=>delaunayLink);
parcelHelpers.export(exports, "delaunayMesh", ()=>delaunayMesh);
parcelHelpers.export(exports, "hull", ()=>hull);
parcelHelpers.export(exports, "voronoi", ()=>voronoi);
parcelHelpers.export(exports, "voronoiMesh", ()=>voronoiMesh);
var _d3 = require("d3");
var _contextJs = require("../context.js");
var _curveJs = require("../curve.js");
var _definedJs = require("../defined.js");
var _markJs = require("../mark.js");
var _markerJs = require("../marker.js");
var _optionsJs = require("../options.js");
var _projectionJs = require("../projection.js");
var _styleJs = require("../style.js");
var _basicJs = require("../transforms/basic.js");
var _exclusiveFacetsJs = require("../transforms/exclusiveFacets.js");
var _groupJs = require("../transforms/group.js");
const delaunayLinkDefaults = {
    ariaLabel: "delaunay link",
    fill: "none",
    stroke: "currentColor",
    strokeMiterlimit: 1
};
const delaunayMeshDefaults = {
    ariaLabel: "delaunay mesh",
    fill: null,
    stroke: "currentColor",
    strokeOpacity: 0.2
};
const hullDefaults = {
    ariaLabel: "hull",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: 1.5,
    strokeMiterlimit: 1
};
const voronoiDefaults = {
    ariaLabel: "voronoi",
    fill: "none",
    stroke: "currentColor",
    strokeMiterlimit: 1
};
const voronoiMeshDefaults = {
    ariaLabel: "voronoi mesh",
    fill: null,
    stroke: "currentColor",
    strokeOpacity: 0.2
};
class DelaunayLink extends (0, _markJs.Mark) {
    constructor(data, options = {}){
        const { x, y, z, curve, tension } = options;
        super(data, {
            x: {
                value: x,
                scale: "x",
                optional: true
            },
            y: {
                value: y,
                scale: "y",
                optional: true
            },
            z: {
                value: z,
                optional: true
            }
        }, options, delaunayLinkDefaults);
        this.curve = (0, _curveJs.maybeCurve)(curve, tension);
        (0, _markerJs.markers)(this, options);
    }
    render(index, scales, channels, dimensions, context) {
        const { x, y } = scales;
        const { x: X, y: Y, z: Z } = channels;
        const { curve } = this;
        const [cx, cy] = (0, _styleJs.applyFrameAnchor)(this, dimensions);
        const xi = X ? (i)=>X[i] : (0, _optionsJs.constant)(cx);
        const yi = Y ? (i)=>Y[i] : (0, _optionsJs.constant)(cy);
        const mark = this;
        function links(index) {
            let i = -1;
            const newIndex = [];
            const newChannels = {};
            for(const k in channels)newChannels[k] = [];
            const X1 = [];
            const X2 = [];
            const Y1 = [];
            const Y2 = [];
            function link(ti, tj) {
                ti = index[ti];
                tj = index[tj];
                newIndex.push(++i);
                X1[i] = xi(ti);
                Y1[i] = yi(ti);
                X2[i] = xi(tj);
                Y2[i] = yi(tj);
                for(const k in channels)newChannels[k].push(channels[k][tj]);
            }
            const { halfedges, hull, triangles } = (0, _d3.Delaunay).from(index, xi, yi);
            for(let i = 0; i < halfedges.length; ++i){
                // inner edges
                const j = halfedges[i];
                if (j > i) link(triangles[i], triangles[j]);
            }
            for(let i = 0; i < hull.length; ++i)// convex hull
            link(hull[i], hull[(i + 1) % hull.length]);
            (0, _d3.select)(this).selectAll().data(newIndex).enter().append("path").call((0, _styleJs.applyDirectStyles), mark).attr("d", (i)=>{
                const p = (0, _d3.pathRound)();
                const c = curve(p);
                c.lineStart();
                c.point(X1[i], Y1[i]);
                c.point(X2[i], Y2[i]);
                c.lineEnd();
                return p;
            }).call((0, _styleJs.applyChannelStyles), mark, newChannels).call((0, _markerJs.applyMarkers), mark, newChannels, context);
        }
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyTransform), this, {
            x: X && x,
            y: Y && y
        }).call(Z ? (g)=>g.selectAll().data((0, _d3.group)(index, (i)=>Z[i]).values()).enter().append("g").each(links) : (g)=>g.datum(index).each(links)).node();
    }
}
class AbstractDelaunayMark extends (0, _markJs.Mark) {
    constructor(data, options = {}, defaults, zof = ({ z })=>z){
        const { x, y } = options;
        super(data, {
            x: {
                value: x,
                scale: "x",
                optional: true
            },
            y: {
                value: y,
                scale: "y",
                optional: true
            },
            z: {
                value: zof(options),
                optional: true
            }
        }, options, defaults);
    }
    render(index, scales, channels, dimensions, context) {
        const { x, y } = scales;
        const { x: X, y: Y, z: Z } = channels;
        const [cx, cy] = (0, _styleJs.applyFrameAnchor)(this, dimensions);
        const xi = X ? (i)=>X[i] : (0, _optionsJs.constant)(cx);
        const yi = Y ? (i)=>Y[i] : (0, _optionsJs.constant)(cy);
        const mark = this;
        function mesh(index) {
            const delaunay = (0, _d3.Delaunay).from(index, xi, yi);
            (0, _d3.select)(this).append("path").datum(index[0]).call((0, _styleJs.applyDirectStyles), mark).attr("d", mark._render(delaunay, dimensions)).call((0, _styleJs.applyChannelStyles), mark, channels);
        }
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyTransform), this, {
            x: X && x,
            y: Y && y
        }).call(Z ? (g)=>g.selectAll().data((0, _d3.group)(index, (i)=>Z[i]).values()).enter().append("g").each(mesh) : (g)=>g.datum(index).each(mesh)).node();
    }
}
class DelaunayMesh extends AbstractDelaunayMark {
    constructor(data, options = {}){
        super(data, options, delaunayMeshDefaults);
        this.fill = "none";
    }
    _render(delaunay) {
        return delaunay.render();
    }
}
class Hull extends AbstractDelaunayMark {
    constructor(data, options = {}){
        super(data, options, hullDefaults, (0, _optionsJs.maybeZ));
    }
    _render(delaunay) {
        return delaunay.renderHull();
    }
}
class Voronoi extends (0, _markJs.Mark) {
    constructor(data, options = {}){
        const { x, y, z } = options;
        super(data, {
            x: {
                value: x,
                scale: "x",
                optional: true
            },
            y: {
                value: y,
                scale: "y",
                optional: true
            },
            z: {
                value: z,
                optional: true
            }
        }, (0, _basicJs.initializer)(options, function(data, facets, channels, scales, dimensions, context) {
            let { x: X, y: Y, z: Z } = channels;
            ({ x: X, y: Y } = (0, _projectionJs.applyPosition)(channels, scales, context));
            Z = Z?.value;
            const C = new Array((X ?? Y).length).fill(null);
            const [cx, cy] = (0, _styleJs.applyFrameAnchor)(this, dimensions);
            const xi = X ? (i)=>X[i] : (0, _optionsJs.constant)(cx);
            const yi = Y ? (i)=>Y[i] : (0, _optionsJs.constant)(cy);
            for (let I of facets){
                if (X) I = I.filter((i)=>(0, _definedJs.defined)(xi(i)));
                if (Y) I = I.filter((i)=>(0, _definedJs.defined)(yi(i)));
                for (const [, J] of (0, _groupJs.maybeGroup)(I, Z)){
                    const delaunay = (0, _d3.Delaunay).from(J, xi, yi);
                    const voronoi = voronoiof(delaunay, dimensions);
                    for(let i = 0, n = J.length; i < n; ++i)C[J[i]] = voronoi.renderCell(i);
                }
            }
            return {
                data,
                facets,
                channels: {
                    cells: {
                        value: C
                    }
                }
            };
        }), voronoiDefaults);
    }
    render(index, scales, channels, dimensions, context) {
        const { x, y } = scales;
        const { x: X, y: Y, cells: C } = channels;
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyTransform), this, {
            x: X && x,
            y: Y && y
        }).call((g)=>{
            g.selectAll().data(index).enter().append("path").call((0, _styleJs.applyDirectStyles), this).attr("d", (i)=>C[i]).call((0, _styleJs.applyChannelStyles), this, channels);
        }).node();
    }
}
class VoronoiMesh extends AbstractDelaunayMark {
    constructor(data, options){
        super(data, options, voronoiMeshDefaults);
        this.fill = "none";
    }
    _render(delaunay, dimensions) {
        return voronoiof(delaunay, dimensions).render();
    }
}
function voronoiof(delaunay, dimensions) {
    const { width, height, marginTop, marginRight, marginBottom, marginLeft } = dimensions;
    return delaunay.voronoi([
        marginLeft,
        marginTop,
        width - marginRight,
        height - marginBottom
    ]);
}
function delaunayMark(DelaunayMark, data, { x, y, ...options } = {}) {
    [x, y] = (0, _optionsJs.maybeTuple)(x, y);
    return new DelaunayMark(data, {
        ...options,
        x,
        y
    });
}
function delaunayLink(data, options) {
    return delaunayMark(DelaunayLink, data, options);
}
function delaunayMesh(data, options) {
    return delaunayMark(DelaunayMesh, data, options);
}
function hull(data, options) {
    return delaunayMark(Hull, data, options);
}
function voronoi(data, { x, y, initializer, ...options } = {}) {
    return delaunayMark(Voronoi, data, {
        ...(0, _basicJs.basic)({
            ...options,
            x,
            y
        }, (0, _exclusiveFacetsJs.exclusiveFacets)),
        initializer
    });
}
function voronoiMesh(data, options) {
    return delaunayMark(VoronoiMesh, data, options);
}

},{"d3":"17XFv","../context.js":"kyLYX","../curve.js":"bbXk9","../defined.js":"3n4Hk","../mark.js":"a4RyP","../marker.js":"2m35i","../options.js":"eJmsy","../projection.js":"eTnHA","../style.js":"c9bmo","../transforms/basic.js":"hU2qc","../transforms/exclusiveFacets.js":"kmCMQ","../transforms/group.js":"1qc0A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4nZZ6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Density", ()=>Density);
parcelHelpers.export(exports, "density", ()=>density);
var _d3 = require("d3");
var _contextJs = require("../context.js");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _projectionJs = require("../projection.js");
var _styleJs = require("../style.js");
var _basicJs = require("../transforms/basic.js");
const defaults = {
    ariaLabel: "density",
    fill: "none",
    stroke: "currentColor",
    strokeMiterlimit: 1
};
class Density extends (0, _markJs.Mark) {
    constructor(data, { x, y, z, weight, fill, stroke, ...options } = {}){
        // If fill or stroke is specified as “density”, then temporarily treat these
        // as a literal color when computing defaults and maybeZ; below, we’ll unset
        // these constant colors back to undefined since they will instead be
        // populated by a channel generated by the initializer.
        const fillDensity = isDensity(fill) && (fill = "currentColor", true);
        const strokeDensity = isDensity(stroke) && (stroke = "currentColor", true);
        super(data, {
            x: {
                value: x,
                scale: "x",
                optional: true
            },
            y: {
                value: y,
                scale: "y",
                optional: true
            },
            z: {
                value: (0, _optionsJs.maybeZ)({
                    z,
                    fill,
                    stroke
                }),
                optional: true
            },
            weight: {
                value: weight,
                optional: true
            }
        }, densityInitializer({
            ...options,
            fill,
            stroke
        }, fillDensity, strokeDensity), defaults);
        if (fillDensity) this.fill = undefined;
        if (strokeDensity) this.stroke = undefined;
        this.z = z;
    }
    filter(index) {
        return index; // don’t filter contours constructed by initializer
    }
    render(index, scales, channels, dimensions, context) {
        const { contours } = channels;
        const path = (0, _d3.geoPath)();
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyTransform), this, {}).call((g)=>g.selectAll().data(index).enter().append("path").call((0, _styleJs.applyDirectStyles), this).call((0, _styleJs.applyChannelStyles), this, channels).attr("d", (i)=>path(contours[i]))).node();
    }
}
function density(data, { x, y, ...options } = {}) {
    [x, y] = (0, _optionsJs.maybeTuple)(x, y);
    return new Density(data, {
        ...options,
        x,
        y
    });
}
const dropChannels = new Set([
    "x",
    "y",
    "z",
    "weight"
]);
function densityInitializer(options, fillDensity, strokeDensity) {
    const k = 100; // arbitrary scale factor for readability
    let { bandwidth, thresholds } = options;
    bandwidth = bandwidth === undefined ? 20 : +bandwidth;
    thresholds = thresholds === undefined ? 20 : typeof thresholds?.[Symbol.iterator] === "function" ? (0, _optionsJs.coerceNumbers)(thresholds) : +thresholds;
    return (0, _basicJs.initializer)(options, function(data, facets, channels, scales, dimensions, context) {
        const W = channels.weight ? (0, _optionsJs.coerceNumbers)(channels.weight.value) : null;
        const Z = channels.z?.value;
        const { z } = this;
        const [cx, cy] = (0, _styleJs.applyFrameAnchor)(this, dimensions);
        const { width, height } = dimensions;
        // Get the (either scaled or projected) xy channels.
        const { x: X, y: Y } = (0, _projectionJs.applyPosition)(channels, scales, context);
        // Group any of the input channels according to the first index associated
        // with each z-series or facet. Drop any channels not be needed for
        // rendering after the contours are computed.
        const newChannels = Object.fromEntries(Object.entries(channels).filter(([key])=>!dropChannels.has(key)).map(([key, channel])=>[
                key,
                {
                    ...channel,
                    value: []
                }
            ]));
        // If the fill or stroke encodes density, construct new output channels.
        const FD = fillDensity && [];
        const SD = strokeDensity && [];
        const density = (0, _d3.contourDensity)().x(X ? (i)=>X[i] : cx).y(Y ? (i)=>Y[i] : cy).weight(W ? (i)=>W[i] : 1).size([
            width,
            height
        ]).bandwidth(bandwidth);
        // Compute the grid for each facet-series.
        const facetsContours = [];
        for (const facet of facets){
            const facetContours = [];
            facetsContours.push(facetContours);
            for (const index of Z ? (0, _styleJs.groupZ)(facet, Z, z) : [
                facet
            ]){
                const contour = density.contours(index);
                facetContours.push([
                    index,
                    contour
                ]);
            }
        }
        // If explicit thresholds were not specified, find the maximum density of
        // all grids and use this to compute thresholds.
        let T = thresholds;
        if (!(T instanceof (0, _optionsJs.TypedArray))) {
            let maxValue = 0;
            for (const facetContours of facetsContours)for (const [, contour] of facetContours){
                const max = contour.max;
                if (max > maxValue) maxValue = max;
            }
            T = Float64Array.from({
                length: thresholds - 1
            }, (_, i)=>maxValue * k * (i + 1) / thresholds);
        }
        // Generate contours for each facet-series.
        const newFacets = [];
        const contours = [];
        for (const facetContours of facetsContours){
            const newFacet = [];
            newFacets.push(newFacet);
            for (const [index, contour] of facetContours)for (const t of T){
                newFacet.push(contours.length);
                contours.push(contour(t / k));
                if (FD) FD.push(t);
                if (SD) SD.push(t);
                for(const key in newChannels)newChannels[key].value.push(channels[key].value[index[0]]);
            }
        }
        // If the fill or stroke encodes density, ensure that a zero value is
        // included so that the default color scale domain starts at zero. Otherwise
        // if the starting range value is the same as the background color, the
        // first contour might not be visible.
        if (FD) FD.push(0);
        if (SD) SD.push(0);
        return {
            data,
            facets: newFacets,
            channels: {
                ...newChannels,
                ...FD && {
                    fill: {
                        value: FD,
                        scale: "color"
                    }
                },
                ...SD && {
                    stroke: {
                        value: SD,
                        scale: "color"
                    }
                },
                contours: {
                    value: contours
                }
            }
        };
    });
}
function isDensity(value) {
    return /^density$/i.test(value);
}

},{"d3":"17XFv","../context.js":"kyLYX","../mark.js":"a4RyP","../options.js":"eJmsy","../projection.js":"eTnHA","../style.js":"c9bmo","../transforms/basic.js":"hU2qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hoYlq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "differenceX", ()=>differenceX);
parcelHelpers.export(exports, "differenceY", ()=>differenceY);
var _contextJs = require("../context.js");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _scalesJs = require("../scales.js");
var _styleJs = require("../style.js");
var _areaJs = require("./area.js");
var _lineJs = require("./line.js");
function differenceX(data, options) {
    return differenceK("x", data, options);
}
function differenceY(data, options) {
    return differenceK("y", data, options);
}
function differenceK(k, data, { x1, x2, y1, y2, x = x1 === undefined && x2 === undefined ? k === "y" ? (0, _optionsJs.indexOf) : (0, _optionsJs.identity) : undefined, y = y1 === undefined && y2 === undefined ? k === "x" ? (0, _optionsJs.indexOf) : (0, _optionsJs.identity) : undefined, fill, positiveFill = "#3ca951", negativeFill = "#4269d0", fillOpacity = 1, positiveFillOpacity = fillOpacity, negativeFillOpacity = fillOpacity, stroke, strokeOpacity, z = (0, _optionsJs.maybeColorChannel)(stroke)[0], clip, tip, render, ...options } = {}) {
    [x1, x2] = memoTuple(x, x1, x2);
    [y1, y2] = memoTuple(y, y1, y2);
    if (x1 === x2 && y1 === y2) {
        if (k === "y") y1 = memo(0);
        else x1 = memo(0);
    }
    ({ tip } = (0, _markJs.withTip)({
        tip
    }, k === "y" ? "x" : "y"));
    return (0, _markJs.marks)(!(0, _optionsJs.isNoneish)(positiveFill) ? Object.assign((0, _areaJs.area)(data, {
        x1,
        x2,
        y1,
        y2,
        z,
        fill: positiveFill,
        fillOpacity: positiveFillOpacity,
        render: (0, _markJs.composeRender)(render, clipDifference(k, true)),
        clip,
        ...options
    }), {
        ariaLabel: "positive difference"
    }) : null, !(0, _optionsJs.isNoneish)(negativeFill) ? Object.assign((0, _areaJs.area)(data, {
        x1,
        x2,
        y1,
        y2,
        z,
        fill: negativeFill,
        fillOpacity: negativeFillOpacity,
        render: (0, _markJs.composeRender)(render, clipDifference(k, false)),
        clip,
        ...options
    }), {
        ariaLabel: "negative difference"
    }) : null, (0, _lineJs.line)(data, {
        x: x2,
        y: y2,
        z,
        stroke,
        strokeOpacity,
        tip,
        clip: true,
        ...options
    }));
}
function memoTuple(x, x1, x2) {
    if (x1 === undefined && x2 === undefined) // {x} → [x, x]
    x1 = x2 = memo(x);
    else if (x1 === undefined) {
        // {x2} → [x2, x2]
        // {x, x2} → [x, x2]
        x2 = memo(x2);
        x1 = x === undefined ? x2 : memo(x);
    } else if (x2 === undefined) {
        // {x1} → [x1, x1]
        // {x, x1} → [x1, x]
        x1 = memo(x1);
        x2 = x === undefined ? x1 : memo(x);
    } else {
        // {x1, x2} → [x1, x2]
        x1 = memo(x1);
        x2 = memo(x2);
    }
    return [
        x1,
        x2
    ];
}
function memo(v) {
    let V;
    const { value, label = (0, _optionsJs.labelof)(value) } = (0, _optionsJs.maybeValue)(v);
    return {
        transform: (data)=>V || (V = (0, _optionsJs.valueof)(data, value)),
        label
    };
}
function clipDifference(k, positive) {
    const f = k === "x" ? "y" : "x"; // f is the flipped dimension
    const f1 = `${f}1`;
    const f2 = `${f}2`;
    const k1 = `${k}1`;
    const k2 = `${k}2`;
    return (index, scales, channels, dimensions, context, next)=>{
        const { [f1]: F1, [f2]: F2 } = channels;
        const K1 = new Float32Array(F1.length);
        const K2 = new Float32Array(F2.length);
        const m = dimensions[k === "y" ? "height" : "width"];
        (positive === (0, _scalesJs.inferScaleOrder)(scales[k]) < 0 ? K1 : K2).fill(m);
        const oc = next(index, scales, {
            ...channels,
            [f2]: F1,
            [k2]: K2
        }, dimensions, context);
        const og = next(index, scales, {
            ...channels,
            [f1]: F2,
            [k1]: K1
        }, dimensions, context);
        const c = oc.querySelector("g") ?? oc; // applyClip
        const g = og.querySelector("g") ?? og; // applyClip
        for(let i = 0; c.firstChild; i += 2){
            const id = (0, _styleJs.getClipId)();
            const clipPath = (0, _contextJs.create)("svg:clipPath", context).attr("id", id).node();
            clipPath.appendChild(c.firstChild);
            g.childNodes[i].setAttribute("clip-path", `url(#${id})`);
            g.insertBefore(clipPath, g.childNodes[i]);
        }
        return og;
    };
}

},{"../context.js":"kyLYX","../mark.js":"a4RyP","../options.js":"eJmsy","../scales.js":"cZh8W","../style.js":"c9bmo","./area.js":"jcUX2","./line.js":"5VKzd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"leerq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Geo", ()=>Geo);
parcelHelpers.export(exports, "geo", ()=>geo);
parcelHelpers.export(exports, "sphere", ()=>sphere);
parcelHelpers.export(exports, "graticule", ()=>graticule);
var _d3 = require("d3");
var _contextJs = require("../context.js");
var _definedJs = require("../defined.js");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _styleJs = require("../style.js");
var _centroidJs = require("../transforms/centroid.js");
var _dotJs = require("./dot.js");
const defaults = {
    ariaLabel: "geo",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: 1,
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeMiterlimit: 1
};
class Geo extends (0, _markJs.Mark) {
    constructor(data, options = {}){
        const [vr, cr] = (0, _optionsJs.maybeNumberChannel)(options.r, 3);
        super(data, {
            x: {
                value: options.tip ? options.x : null,
                scale: "x",
                optional: true
            },
            y: {
                value: options.tip ? options.y : null,
                scale: "y",
                optional: true
            },
            r: {
                value: vr,
                scale: "r",
                filter: (0, _definedJs.positive),
                optional: true
            },
            geometry: {
                value: options.geometry,
                scale: "projection"
            }
        }, (0, _dotJs.withDefaultSort)(options), defaults);
        this.r = cr;
    }
    render(index, scales, channels, dimensions, context) {
        const { geometry: G, r: R } = channels;
        const path = (0, _d3.geoPath)(context.projection ?? scaleProjection(scales));
        const { r } = this;
        if ((0, _definedJs.negative)(r)) index = [];
        else if (r !== undefined) path.pointRadius(r);
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyTransform), this, scales).call((g)=>{
            g.selectAll().data(index).enter().append("path").call((0, _styleJs.applyDirectStyles), this).attr("d", R ? (i)=>path.pointRadius(R[i])(G[i]) : (i)=>path(G[i])).call((0, _styleJs.applyChannelStyles), this, channels);
        }).node();
    }
}
// If no projection is specified, default to a projection that passes points
// through the x and y scales, if any.
function scaleProjection({ x: X, y: Y }) {
    if (X || Y) {
        X ??= (x)=>x;
        Y ??= (y)=>y;
        return (0, _d3.geoTransform)({
            point (x, y) {
                this.stream.point(X(x), Y(y));
            }
        });
    }
}
function geo(data, options = {}) {
    if (options.tip && options.x === undefined && options.y === undefined) options = (0, _centroidJs.centroid)(options);
    else if (options.geometry === undefined) options = {
        ...options,
        geometry: (0, _optionsJs.identity)
    };
    return new Geo(data, options);
}
function sphere({ strokeWidth = 1.5, ...options } = {}) {
    return geo({
        type: "Sphere"
    }, {
        strokeWidth,
        ...options
    });
}
function graticule({ strokeOpacity = 0.1, ...options } = {}) {
    return geo((0, _d3.geoGraticule10)(), {
        strokeOpacity,
        ...options
    });
}

},{"d3":"17XFv","../context.js":"kyLYX","../defined.js":"3n4Hk","../mark.js":"a4RyP","../options.js":"eJmsy","../style.js":"c9bmo","../transforms/centroid.js":"dqf6c","./dot.js":"hmb7r","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dqf6c":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "centroid", ()=>centroid);
parcelHelpers.export(exports, "geoCentroid", ()=>geoCentroid);
var _d3 = require("d3");
var _memoizeJs = require("../memoize.js");
var _optionsJs = require("../options.js");
var _basicJs = require("./basic.js");
function centroid({ geometry = (0, _optionsJs.identity), ...options } = {}) {
    const getG = (0, _memoizeJs.memoize1)((data)=>(0, _optionsJs.valueof)(data, geometry));
    return (0, _basicJs.initializer)(// Suppress defaults for x and y since they will be computed by the initializer.
    // Propagate the (memoized) geometry channel in case it’s still needed.
    {
        ...options,
        x: null,
        y: null,
        geometry: {
            transform: getG
        }
    }, (data, facets, channels, scales, dimensions, { projection })=>{
        const G = getG(data);
        const n = G.length;
        const X = new Float64Array(n);
        const Y = new Float64Array(n);
        const path = (0, _d3.geoPath)(projection);
        for(let i = 0; i < n; ++i)[X[i], Y[i]] = path.centroid(G[i]);
        return {
            data,
            facets,
            channels: {
                x: {
                    value: X,
                    scale: projection == null ? "x" : null,
                    source: null
                },
                y: {
                    value: Y,
                    scale: projection == null ? "y" : null,
                    source: null
                }
            }
        };
    });
}
function geoCentroid({ geometry = (0, _optionsJs.identity), ...options } = {}) {
    const getG = (0, _memoizeJs.memoize1)((data)=>(0, _optionsJs.valueof)(data, geometry));
    const getC = (0, _memoizeJs.memoize1)((data)=>(0, _optionsJs.valueof)(getG(data), (0, _d3.geoCentroid)));
    return {
        ...options,
        x: {
            transform: (data)=>Float64Array.from(getC(data), ([x])=>x)
        },
        y: {
            transform: (data)=>Float64Array.from(getC(data), ([, y])=>y)
        },
        geometry: {
            transform: getG
        }
    };
}

},{"d3":"17XFv","../memoize.js":"fSUNH","../options.js":"eJmsy","./basic.js":"hU2qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kpBYQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hexgrid", ()=>hexgrid);
parcelHelpers.export(exports, "Hexgrid", ()=>Hexgrid);
var _contextJs = require("../context.js");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _styleJs = require("../style.js");
var _symbolJs = require("../symbol.js");
var _hexbinJs = require("../transforms/hexbin.js");
const defaults = {
    ariaLabel: "hexgrid",
    fill: "none",
    stroke: "currentColor",
    strokeOpacity: 0.1
};
function hexgrid(options) {
    return new Hexgrid(options);
}
class Hexgrid extends (0, _markJs.Mark) {
    constructor({ binWidth = 20, clip = true, ...options } = {}){
        super((0, _optionsJs.singleton), undefined, {
            clip,
            ...options
        }, defaults);
        this.binWidth = (0, _optionsJs.number)(binWidth);
    }
    render(index, scales, channels, dimensions, context) {
        const { binWidth } = this;
        const { marginTop, marginRight, marginBottom, marginLeft, width, height } = dimensions;
        const x0 = marginLeft - (0, _hexbinJs.ox), x1 = width - marginRight - (0, _hexbinJs.ox), y0 = marginTop - (0, _hexbinJs.oy), y1 = height - marginBottom - (0, _hexbinJs.oy), rx = binWidth / 2, ry = rx * (0, _symbolJs.sqrt4_3), hy = ry / 2, wx = rx * 2, wy = ry * 1.5, i0 = Math.floor(x0 / wx), i1 = Math.ceil(x1 / wx), j0 = Math.floor((y0 + hy) / wy), j1 = Math.ceil((y1 - hy) / wy) + 1, path = `m0,${round(-ry)}l${round(rx)},${round(hy)}v${round(ry)}l${round(-rx)},${round(hy)}`;
        let d = path;
        for(let j = j0; j < j1; ++j)for(let i = i0; i < i1; ++i)d += `M${round(i * wx + (j & 1) * rx)},${round(j * wy)}${path}`;
        return (0, _contextJs.create)("svg:g", context).datum(0).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyTransform), this, {}, (0, _styleJs.offset) + (0, _hexbinJs.ox), (0, _styleJs.offset) + (0, _hexbinJs.oy)).call((g)=>g.append("path").call((0, _styleJs.applyDirectStyles), this).call((0, _styleJs.applyChannelStyles), this, channels).attr("d", d)).node();
    }
}
function round(x) {
    return Math.round(x * 1e3) / 1e3;
}

},{"../context.js":"kyLYX","../mark.js":"a4RyP","../options.js":"eJmsy","../style.js":"c9bmo","../symbol.js":"ePwOU","../transforms/hexbin.js":"fDm55","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fDm55":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ox", ()=>ox);
parcelHelpers.export(exports, "oy", ()=>oy);
parcelHelpers.export(exports, "hexbin", ()=>hexbin);
var _optionsJs = require("../options.js");
var _projectionJs = require("../projection.js");
var _symbolJs = require("../symbol.js");
var _basicJs = require("./basic.js");
var _groupJs = require("./group.js");
const ox = 0.5, oy = 0;
function hexbin(outputs = {
    fill: "count"
}, { binWidth, ...options } = {}) {
    const { z } = options;
    // TODO filter e.g. to show empty hexbins?
    binWidth = binWidth === undefined ? 20 : (0, _optionsJs.number)(binWidth);
    outputs = (0, _groupJs.maybeGroupOutputs)(outputs, options);
    // A fill output means a fill channel; declaring the channel here instead of
    // waiting for the initializer allows the mark constructor to determine that
    // the stroke should default to none (assuming a mark that defaults to fill
    // and no stroke, such as dot). Note that it’s safe to mutate options here
    // because we just created it with the rest operator above.
    if ((0, _groupJs.hasOutput)(outputs, "fill")) options.channels = {
        ...options.channels,
        fill: {
            value: []
        }
    };
    // Populate default values for the r and symbol options, as appropriate.
    if (options.symbol === undefined) options.symbol = "hexagon";
    if (options.r === undefined && !(0, _groupJs.hasOutput)(outputs, "r")) options.r = binWidth / 2;
    return (0, _basicJs.initializer)(options, (data, facets, channels, scales, _, context)=>{
        let { x: X, y: Y, z: Z, fill: F, stroke: S, symbol: Q } = channels;
        if (X === undefined) throw new Error("missing channel: x");
        if (Y === undefined) throw new Error("missing channel: y");
        // Get the (either scaled or projected) xy channels.
        ({ x: X, y: Y } = (0, _projectionJs.applyPosition)(channels, scales, context));
        // Extract the values for channels that are eligible for grouping; not all
        // marks define a z channel, so compute one if it not already computed. If z
        // was explicitly set to null, ensure that we don’t subdivide bins.
        Z = Z ? Z.value : (0, _optionsJs.valueof)(data, z);
        F = F?.value;
        S = S?.value;
        Q = Q?.value;
        // Group on the first of z, fill, stroke, and symbol. Implicitly reduce
        // these channels using the first corresponding value for each bin.
        const G = (0, _groupJs.maybeSubgroup)(outputs, {
            z: Z,
            fill: F,
            stroke: S,
            symbol: Q
        });
        const GZ = Z && [];
        const GF = F && [];
        const GS = S && [];
        const GQ = Q && [];
        // Construct the hexbins and populate the output channels.
        const binFacets = [];
        const BX = [];
        const BY = [];
        let i = -1;
        for (const o of outputs)o.initialize(data);
        for (const facet of facets){
            const binFacet = [];
            for (const o of outputs)o.scope("facet", facet);
            for (const [f, I] of (0, _groupJs.maybeGroup)(facet, G))for (const { index: b, extent } of hbin(data, I, X, Y, binWidth)){
                binFacet.push(++i);
                BX.push(extent.x);
                BY.push(extent.y);
                if (Z) GZ.push(G === Z ? f : Z[b[0]]);
                if (F) GF.push(G === F ? f : F[b[0]]);
                if (S) GS.push(G === S ? f : S[b[0]]);
                if (Q) GQ.push(G === Q ? f : Q[b[0]]);
                for (const o of outputs)o.reduce(b, extent);
            }
            binFacets.push(binFacet);
        }
        // Construct the output channels, and populate the radius scale hint.
        const sx = channels.x.scale;
        const sy = channels.y.scale;
        const binChannels = {
            x: {
                value: BX,
                source: scales[sx] ? {
                    value: (0, _optionsJs.map)(BX, scales[sx].invert),
                    scale: sx
                } : null
            },
            y: {
                value: BY,
                source: scales[sy] ? {
                    value: (0, _optionsJs.map)(BY, scales[sy].invert),
                    scale: sy
                } : null
            },
            ...Z && {
                z: {
                    value: GZ
                }
            },
            ...F && {
                fill: {
                    value: GF,
                    scale: "auto"
                }
            },
            ...S && {
                stroke: {
                    value: GS,
                    scale: "auto"
                }
            },
            ...Q && {
                symbol: {
                    value: GQ,
                    scale: "auto"
                }
            },
            ...Object.fromEntries(outputs.map(({ name, output })=>[
                    name,
                    {
                        scale: "auto",
                        label: output.label,
                        radius: name === "r" ? binWidth / 2 : undefined,
                        value: output.transform()
                    }
                ]))
        };
        return {
            data,
            facets: binFacets,
            channels: binChannels
        };
    });
}
function hbin(data, I, X, Y, dx) {
    const dy = dx * (1.5 / (0, _symbolJs.sqrt3));
    const bins = new Map();
    for (const i of I){
        let px = X[i], py = Y[i];
        if (isNaN(px) || isNaN(py)) continue;
        let pj = Math.round(py = (py - oy) / dy), pi = Math.round(px = (px - ox) / dx - (pj & 1) / 2), py1 = py - pj;
        if (Math.abs(py1) * 3 > 1) {
            let px1 = px - pi, pi2 = pi + (px < pi ? -1 : 1) / 2, pj2 = pj + (py < pj ? -1 : 1), px2 = px - pi2, py2 = py - pj2;
            if (px1 * px1 + py1 * py1 > px2 * px2 + py2 * py2) pi = pi2 + (pj & 1 ? 1 : -1) / 2, pj = pj2;
        }
        const key = `${pi},${pj}`;
        let bin = bins.get(key);
        if (bin === undefined) {
            bin = {
                index: [],
                extent: {
                    data,
                    x: (pi + (pj & 1) / 2) * dx + ox,
                    y: pj * dy + oy
                }
            };
            bins.set(key, bin);
        }
        bin.index.push(i);
    }
    return bins.values();
}

},{"../options.js":"eJmsy","../projection.js":"eTnHA","../symbol.js":"ePwOU","./basic.js":"hU2qc","./group.js":"1qc0A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b1jwr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Image", ()=>Image);
parcelHelpers.export(exports, "image", ()=>image);
var _contextJs = require("../context.js");
var _definedJs = require("../defined.js");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _styleJs = require("../style.js");
var _dotJs = require("./dot.js");
var _templateJs = require("../template.js");
const defaults = {
    ariaLabel: "image",
    fill: null,
    stroke: null
};
// Tests if the given string is a path: does it start with a dot-slash
// (./foo.png), dot-dot-slash (../foo.png), or slash (/foo.png)?
function isPath(string) {
    return /^\.*\//.test(string);
}
// Tests if the given string is a URL (e.g., https://placekitten.com/200/300).
// The allowed protocols is overly restrictive, but we don’t want to allow any
// scheme here because it would increase the likelihood of a false positive with
// a field name that happens to contain a colon.
function isUrl(string) {
    return /^(blob|data|file|http|https):/i.test(string);
}
// Disambiguates a constant src definition from a channel. A path or URL string
// is assumed to be a constant; any other string is assumed to be a field name.
function maybePathChannel(value) {
    return typeof value === "string" && (isPath(value) || isUrl(value)) ? [
        undefined,
        value
    ] : [
        value,
        undefined
    ];
}
class Image extends (0, _markJs.Mark) {
    constructor(data, options = {}){
        let { x, y, r, width, height, rotate, src, preserveAspectRatio, crossOrigin, frameAnchor, imageRendering } = options;
        if (r == null) r = undefined;
        if (r === undefined && width === undefined && height === undefined) width = height = 16;
        else if (width === undefined && height !== undefined) width = height;
        else if (height === undefined && width !== undefined) height = width;
        const [vs, cs] = maybePathChannel(src);
        const [vr, cr] = (0, _optionsJs.maybeNumberChannel)(r);
        const [vw, cw] = (0, _optionsJs.maybeNumberChannel)(width, cr !== undefined ? cr * 2 : undefined);
        const [vh, ch] = (0, _optionsJs.maybeNumberChannel)(height, cr !== undefined ? cr * 2 : undefined);
        const [va, ca] = (0, _optionsJs.maybeNumberChannel)(rotate, 0);
        super(data, {
            x: {
                value: x,
                scale: "x",
                optional: true
            },
            y: {
                value: y,
                scale: "y",
                optional: true
            },
            r: {
                value: vr,
                scale: "r",
                filter: (0, _definedJs.positive),
                optional: true
            },
            width: {
                value: vw,
                filter: (0, _definedJs.positive),
                optional: true
            },
            height: {
                value: vh,
                filter: (0, _definedJs.positive),
                optional: true
            },
            rotate: {
                value: va,
                optional: true
            },
            src: {
                value: vs,
                optional: true
            }
        }, (0, _dotJs.withDefaultSort)(options), defaults);
        this.src = cs;
        this.width = cw;
        this.rotate = ca;
        this.height = ch;
        this.r = cr;
        this.preserveAspectRatio = (0, _styleJs.impliedString)(preserveAspectRatio, "xMidYMid");
        this.crossOrigin = (0, _optionsJs.string)(crossOrigin);
        this.frameAnchor = (0, _optionsJs.maybeFrameAnchor)(frameAnchor);
        this.imageRendering = (0, _styleJs.impliedString)(imageRendering, "auto");
    }
    render(index, scales, channels, dimensions, context) {
        const { x, y } = scales;
        const { x: X, y: Y, width: W, height: H, r: R, rotate: A, src: S } = channels;
        const { r, width, height, rotate } = this;
        const [cx, cy] = (0, _styleJs.applyFrameAnchor)(this, dimensions);
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyTransform), this, {
            x: X && x,
            y: Y && y
        }).call((g)=>g.selectAll().data(index).enter().append("image").call((0, _styleJs.applyDirectStyles), this).attr("x", position(X, W, R, cx, width, r)).attr("y", position(Y, H, R, cy, height, r)).attr("width", W ? (i)=>W[i] : width !== undefined ? width : R ? (i)=>R[i] * 2 : r * 2).attr("height", H ? (i)=>H[i] : height !== undefined ? height : R ? (i)=>R[i] * 2 : r * 2)// TODO: combine x, y, rotate and transform-origin into a single transform
            .attr("transform", A ? (i)=>`rotate(${A[i]})` : rotate ? `rotate(${rotate})` : null).attr("transform-origin", A || rotate ? (0, _templateJs.template)`${X ? (i)=>X[i] : cx}px ${Y ? (i)=>Y[i] : cy}px` : null).call((0, _styleJs.applyAttr), "href", S ? (i)=>S[i] : this.src).call((0, _styleJs.applyAttr), "preserveAspectRatio", this.preserveAspectRatio).call((0, _styleJs.applyAttr), "crossorigin", this.crossOrigin).call((0, _styleJs.applyAttr), "image-rendering", this.imageRendering).call((0, _styleJs.applyAttr), "clip-path", R ? (i)=>`circle(${R[i]}px)` : r !== undefined ? `circle(${r}px)` : null).call((0, _styleJs.applyChannelStyles), this, channels)).node();
    }
}
function position(X, W, R, x, w, r) {
    return W && X ? (i)=>X[i] - W[i] / 2 : W ? (i)=>x - W[i] / 2 : X && w !== undefined ? (i)=>X[i] - w / 2 : w !== undefined ? x - w / 2 : R && X ? (i)=>X[i] - R[i] : R ? (i)=>x - R[i] : X ? (i)=>X[i] - r : x - r;
}
function image(data, { x, y, ...options } = {}) {
    if (options.frameAnchor === undefined) [x, y] = (0, _optionsJs.maybeTuple)(x, y);
    return new Image(data, {
        ...options,
        x,
        y
    });
}

},{"../context.js":"kyLYX","../defined.js":"3n4Hk","../mark.js":"a4RyP","../options.js":"eJmsy","../style.js":"c9bmo","./dot.js":"hmb7r","../template.js":"gIQDL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eME9u":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "linearRegressionX", ()=>linearRegressionX);
parcelHelpers.export(exports, "linearRegressionY", ()=>linearRegressionY);
var _d3 = require("d3");
var _contextJs = require("../context.js");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _statsJs = require("../stats.js");
var _styleJs = require("../style.js");
var _binJs = require("../transforms/bin.js");
const defaults = {
    ariaLabel: "linear-regression",
    fill: "currentColor",
    fillOpacity: 0.1,
    stroke: "currentColor",
    strokeWidth: 1.5,
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeMiterlimit: 1
};
class LinearRegression extends (0, _markJs.Mark) {
    constructor(data, options = {}){
        const { x, y, z, ci = 0.95, precision = 4 } = options;
        super(data, {
            x: {
                value: x,
                scale: "x"
            },
            y: {
                value: y,
                scale: "y"
            },
            z: {
                value: (0, _optionsJs.maybeZ)(options),
                optional: true
            }
        }, options, defaults);
        this.z = z;
        this.ci = +ci;
        this.precision = +precision;
        if (!(0 <= this.ci && this.ci < 1)) throw new Error(`invalid ci; not in [0, 1): ${ci}`);
        if (!(this.precision > 0)) throw new Error(`invalid precision: ${precision}`);
    }
    render(index, scales, channels, dimensions, context) {
        const { x: X, y: Y, z: Z } = channels;
        const { ci } = this;
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call((0, _styleJs.applyTransform), this, scales).call((g)=>g.selectAll().data(Z ? (0, _styleJs.groupZ)(index, Z, this.z) : [
                index
            ]).enter().call((enter)=>enter.append("path").attr("fill", "none").call((0, _styleJs.applyDirectStyles), this).call((0, _styleJs.applyGroupedChannelStyles), this, {
                    ...channels,
                    fill: null,
                    fillOpacity: null
                }).attr("d", (I)=>this._renderLine(I, X, Y)).call(ci && !(0, _optionsJs.isNone)(this.fill) ? (path)=>path.select(pathBefore).attr("stroke", "none").call((0, _styleJs.applyDirectStyles), this).call((0, _styleJs.applyGroupedChannelStyles), this, {
                        ...channels,
                        stroke: null,
                        strokeOpacity: null,
                        strokeWidth: null
                    }).attr("d", (I)=>this._renderBand(I, X, Y)) : ()=>{}))).node();
    }
}
function pathBefore() {
    return this.parentNode.insertBefore(this.ownerDocument.createElementNS((0, _d3.namespaces).svg, "path"), this);
}
class LinearRegressionX extends LinearRegression {
    constructor(data, options){
        super(data, options);
    }
    _renderBand(I, X, Y) {
        const { ci, precision } = this;
        const [y1, y2] = (0, _d3.extent)(I, (i)=>Y[i]);
        const f = linearRegressionF(I, Y, X);
        const g = confidenceIntervalF(I, Y, X, (1 - ci) / 2, f);
        return (0, _d3.area)().y((y)=>y).x0((y)=>g(y, -1)).x1((y)=>g(y, 1))((0, _d3.range)(y1, y2 - precision / 2, precision).concat(y2));
    }
    _renderLine(I, X, Y) {
        const [y1, y2] = (0, _d3.extent)(I, (i)=>Y[i]);
        const f = linearRegressionF(I, Y, X);
        return `M${f(y1)},${y1}L${f(y2)},${y2}`;
    }
}
class LinearRegressionY extends LinearRegression {
    constructor(data, options){
        super(data, options);
    }
    _renderBand(I, X, Y) {
        const { ci, precision } = this;
        const [x1, x2] = (0, _d3.extent)(I, (i)=>X[i]);
        const f = linearRegressionF(I, X, Y);
        const g = confidenceIntervalF(I, X, Y, (1 - ci) / 2, f);
        return (0, _d3.area)().x((x)=>x).y0((x)=>g(x, -1)).y1((x)=>g(x, 1))((0, _d3.range)(x1, x2 - precision / 2, precision).concat(x2));
    }
    _renderLine(I, X, Y) {
        const [x1, x2] = (0, _d3.extent)(I, (i)=>X[i]);
        const f = linearRegressionF(I, X, Y);
        return `M${x1},${f(x1)}L${x2},${f(x2)}`;
    }
}
function linearRegressionX(data, { y = (0, _optionsJs.indexOf), x = (0, _optionsJs.identity), stroke, fill = (0, _optionsJs.isNoneish)(stroke) ? "currentColor" : stroke, ...options } = {}) {
    return new LinearRegressionX(data, (0, _binJs.maybeDenseIntervalY)({
        ...options,
        x,
        y,
        fill,
        stroke
    }));
}
function linearRegressionY(data, { x = (0, _optionsJs.indexOf), y = (0, _optionsJs.identity), stroke, fill = (0, _optionsJs.isNoneish)(stroke) ? "currentColor" : stroke, ...options } = {}) {
    return new LinearRegressionY(data, (0, _binJs.maybeDenseIntervalX)({
        ...options,
        x,
        y,
        fill,
        stroke
    }));
}
function linearRegressionF(I, X, Y) {
    let sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0;
    for (const i of I){
        const xi = X[i];
        const yi = Y[i];
        sumX += xi;
        sumY += yi;
        sumXY += xi * yi;
        sumX2 += xi * xi;
    }
    const n = I.length;
    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
    const intercept = (sumY - slope * sumX) / n;
    return (x)=>slope * x + intercept;
}
function confidenceIntervalF(I, X, Y, p, f) {
    const mean = (0, _d3.sum)(I, (i)=>X[i]) / I.length;
    let a = 0, b = 0;
    for (const i of I){
        a += (X[i] - mean) ** 2;
        b += (Y[i] - f(X[i])) ** 2;
    }
    const sy = Math.sqrt(b / (I.length - 2));
    const t = (0, _statsJs.qt)(p, I.length - 2);
    return (x, k)=>{
        const Y = f(x);
        const se = sy * Math.sqrt(1 / I.length + (x - mean) ** 2 / a);
        return Y + k * t * se;
    };
}

},{"d3":"17XFv","../context.js":"kyLYX","../mark.js":"a4RyP","../options.js":"eJmsy","../stats.js":"2Bq5W","../style.js":"c9bmo","../transforms/bin.js":"4d9wn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Bq5W":[function(require,module,exports) {
// https://github.com/jstat/jstat
//
// Copyright (c) 2013 jStat
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ibetainv", ()=>ibetainv);
parcelHelpers.export(exports, "ibeta", ()=>ibeta);
parcelHelpers.export(exports, "betacf", ()=>betacf);
parcelHelpers.export(exports, "gammaln", ()=>gammaln);
parcelHelpers.export(exports, "qt", ()=>qt);
function ibetainv(p, a, b) {
    var EPS = 1e-8;
    var a1 = a - 1;
    var b1 = b - 1;
    var j = 0;
    var lna, lnb, pp, t, u, err, x, al, h, w, afac;
    if (p <= 0) return 0;
    if (p >= 1) return 1;
    if (a >= 1 && b >= 1) {
        pp = p < 0.5 ? p : 1 - p;
        t = Math.sqrt(-2 * Math.log(pp));
        x = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;
        if (p < 0.5) x = -x;
        al = (x * x - 3) / 6;
        h = 2 / (1 / (2 * a - 1) + 1 / (2 * b - 1));
        w = x * Math.sqrt(al + h) / h - (1 / (2 * b - 1) - 1 / (2 * a - 1)) * (al + 5 / 6 - 2 / (3 * h));
        x = a / (a + b * Math.exp(2 * w));
    } else {
        lna = Math.log(a / (a + b));
        lnb = Math.log(b / (a + b));
        t = Math.exp(a * lna) / a;
        u = Math.exp(b * lnb) / b;
        w = t + u;
        if (p < t / w) x = Math.pow(a * w * p, 1 / a);
        else x = 1 - Math.pow(b * w * (1 - p), 1 / b);
    }
    afac = -gammaln(a) - gammaln(b) + gammaln(a + b);
    for(; j < 10; j++){
        if (x === 0 || x === 1) return x;
        err = ibeta(x, a, b) - p;
        t = Math.exp(a1 * Math.log(x) + b1 * Math.log(1 - x) + afac);
        u = err / t;
        x -= t = u / (1 - 0.5 * Math.min(1, u * (a1 / x - b1 / (1 - x))));
        if (x <= 0) x = 0.5 * (x + t);
        if (x >= 1) x = 0.5 * (x + t + 1);
        if (Math.abs(t) < EPS * x && j > 0) break;
    }
    return x;
}
function ibeta(x, a, b) {
    // Factors in front of the continued fraction.
    var bt = x === 0 || x === 1 ? 0 : Math.exp(gammaln(a + b) - gammaln(a) - gammaln(b) + a * Math.log(x) + b * Math.log(1 - x));
    if (x < 0 || x > 1) return false;
    if (x < (a + 1) / (a + b + 2)) // Use continued fraction directly.
    return bt * betacf(x, a, b) / a;
    // else use continued fraction after making the symmetry transformation.
    return 1 - bt * betacf(1 - x, b, a) / b;
}
function betacf(x, a, b) {
    var fpmin = 1e-30;
    var m = 1;
    var qab = a + b;
    var qap = a + 1;
    var qam = a - 1;
    var c = 1;
    var d = 1 - qab * x / qap;
    var m2, aa, del, h;
    // These q's will be used in factors that occur in the coefficients
    if (Math.abs(d) < fpmin) d = fpmin;
    d = 1 / d;
    h = d;
    for(; m <= 100; m++){
        m2 = 2 * m;
        aa = m * (b - m) * x / ((qam + m2) * (a + m2));
        // One step (the even one) of the recurrence
        d = 1 + aa * d;
        if (Math.abs(d) < fpmin) d = fpmin;
        c = 1 + aa / c;
        if (Math.abs(c) < fpmin) c = fpmin;
        d = 1 / d;
        h *= d * c;
        aa = -(a + m) * (qab + m) * x / ((a + m2) * (qap + m2));
        // Next step of the recurrence (the odd one)
        d = 1 + aa * d;
        if (Math.abs(d) < fpmin) d = fpmin;
        c = 1 + aa / c;
        if (Math.abs(c) < fpmin) c = fpmin;
        d = 1 / d;
        del = d * c;
        h *= del;
        if (Math.abs(del - 1.0) < 3e-7) break;
    }
    return h;
}
function gammaln(x) {
    var j = 0;
    var cof = [
        76.18009172947146,
        -86.5053203294167,
        24.01409824083091,
        -1.231739572450155,
        0.1208650973866179e-2,
        -0.000005395239384953
    ];
    var ser = 1.000000000190015;
    var xx, y, tmp;
    tmp = (y = xx = x) + 5.5;
    tmp -= (xx + 0.5) * Math.log(tmp);
    for(; j < 6; j++)ser += cof[j] / ++y;
    return Math.log(2.506628274631 * ser / xx) - tmp;
}
function qt(p, dof) {
    var x = ibetainv(2 * Math.min(p, 1 - p), 0.5 * dof, 0.5);
    x = Math.sqrt(dof * (1 - x) / x);
    return p > 0.5 ? x : -x;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"383PK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "tree", ()=>tree);
parcelHelpers.export(exports, "cluster", ()=>cluster);
var _d3 = require("d3");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _treeJs = require("../transforms/tree.js");
var _dotJs = require("./dot.js");
var _linkJs = require("./link.js");
var _textJs = require("./text.js");
function tree(data, { fill, stroke, strokeWidth, strokeOpacity, strokeLinejoin, strokeLinecap, strokeMiterlimit, strokeDasharray, strokeDashoffset, marker, markerStart = marker, markerEnd = marker, dot: dotDot = (0, _optionsJs.isNoneish)(markerStart) && (0, _optionsJs.isNoneish)(markerEnd), text: textText = "node:name", textStroke = "var(--plot-background)", title = "node:path", dx, dy, textAnchor, treeLayout = (0, _d3.tree), textLayout = treeLayout === (0, _d3.tree) || treeLayout === (0, _d3.cluster) ? "mirrored" : "normal", tip, ...options } = {}) {
    if (dx === undefined) dx = (0, _treeJs.maybeTreeAnchor)(options.treeAnchor).dx;
    if (textAnchor !== undefined) throw new Error("textAnchor is not a configurable tree option");
    textLayout = (0, _optionsJs.keyword)(textLayout, "textLayout", [
        "mirrored",
        "normal"
    ]);
    function treeText(textOptions) {
        return (0, _textJs.text)(data, (0, _treeJs.treeNode)({
            treeLayout,
            text: textText,
            fill: fill === undefined ? "currentColor" : fill,
            stroke: textStroke,
            dx,
            dy,
            title,
            ...textOptions,
            ...options
        }));
    }
    return (0, _markJs.marks)((0, _linkJs.link)(data, (0, _treeJs.treeLink)({
        treeLayout,
        markerStart,
        markerEnd,
        stroke: stroke !== undefined ? stroke : fill === undefined ? "node:internal" : fill,
        strokeWidth,
        strokeOpacity,
        strokeLinejoin,
        strokeLinecap,
        strokeMiterlimit,
        strokeDasharray,
        strokeDashoffset,
        ...options
    })), dotDot ? (0, _dotJs.dot)(data, (0, _treeJs.treeNode)({
        treeLayout,
        fill: fill === undefined ? "node:internal" : fill,
        title,
        tip,
        ...options
    })) : null, textText != null ? textLayout === "mirrored" ? [
        treeText({
            textAnchor: "start",
            treeFilter: "node:external"
        }),
        treeText({
            textAnchor: "end",
            treeFilter: "node:internal",
            dx: -dx
        })
    ] : treeText() : null);
}
function cluster(data, options) {
    return tree(data, {
        ...options,
        treeLayout: (0, _d3.cluster)
    });
}

},{"d3":"17XFv","../mark.js":"a4RyP","../options.js":"eJmsy","../transforms/tree.js":"hHIzk","./dot.js":"hmb7r","./link.js":"fEUPw","./text.js":"5cTpv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hHIzk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "treeNode", ()=>treeNode);
parcelHelpers.export(exports, "treeLink", ()=>treeLink);
parcelHelpers.export(exports, "maybeTreeAnchor", ()=>maybeTreeAnchor);
var _d3 = require("d3");
var _definedJs = require("../defined.js");
var _optionsJs = require("../options.js");
var _basicJs = require("./basic.js");
function treeNode({ path = (0, _optionsJs.identity), delimiter, frameAnchor, treeLayout = (0, _d3.tree), treeSort, treeSeparation, treeAnchor, treeFilter, ...options } = {}) {
    treeAnchor = maybeTreeAnchor(treeAnchor);
    treeSort = maybeTreeSort(treeSort);
    if (treeFilter != null) treeFilter = maybeNodeValue(treeFilter);
    if (frameAnchor === undefined) frameAnchor = treeAnchor.frameAnchor;
    const normalize = normalizer(delimiter);
    const outputs = treeOutputs(options, maybeNodeValue);
    const [X, setX] = (0, _optionsJs.column)();
    const [Y, setY] = (0, _optionsJs.column)();
    return {
        x: X,
        y: Y,
        frameAnchor,
        ...(0, _basicJs.basic)(options, (data, facets)=>{
            const P = normalize((0, _optionsJs.valueof)(data, path));
            const X = setX([]);
            const Y = setY([]);
            let treeIndex = -1;
            const treeData = [];
            const treeFacets = [];
            const rootof = (0, _d3.stratify)().path((i)=>P[i]);
            const setData = (0, _optionsJs.isArray)(data) ? (node)=>node.data = data[node.data] : (node)=>node.data = data.get(node.data);
            const layout = treeLayout();
            if (layout.nodeSize) layout.nodeSize([
                1,
                1
            ]);
            if (layout.separation && treeSeparation !== undefined) layout.separation(treeSeparation ?? (0, _optionsJs.one));
            for (const o of outputs)o[output_values] = o[output_setValues]([]);
            for (const facet of facets){
                const treeFacet = [];
                const root = rootof(facet.filter((i)=>P[i] != null)).each(setData);
                if (treeSort != null) root.sort(treeSort);
                layout(root);
                for (const node of root.descendants()){
                    if (treeFilter != null && !treeFilter(node)) continue;
                    treeFacet.push(++treeIndex);
                    treeData[treeIndex] = node.data;
                    treeAnchor.position(node, treeIndex, X, Y);
                    for (const o of outputs)o[output_values][treeIndex] = o[output_evaluate](node);
                }
                treeFacets.push(treeFacet);
            }
            return {
                data: treeData,
                facets: treeFacets
            };
        }),
        ...Object.fromEntries(outputs)
    };
}
function treeLink({ path = (0, _optionsJs.identity), delimiter, curve = "bump-x", stroke = "#555", strokeWidth = 1.5, strokeOpacity = 0.5, treeLayout = (0, _d3.tree), treeSort, treeSeparation, treeAnchor, treeFilter, ...options } = {}) {
    treeAnchor = maybeTreeAnchor(treeAnchor);
    treeSort = maybeTreeSort(treeSort);
    if (treeFilter != null) treeFilter = maybeLinkValue(treeFilter);
    options = {
        curve,
        stroke,
        strokeWidth,
        strokeOpacity,
        ...options
    };
    const normalize = normalizer(delimiter);
    const outputs = treeOutputs(options, maybeLinkValue);
    const [X1, setX1] = (0, _optionsJs.column)();
    const [X2, setX2] = (0, _optionsJs.column)();
    const [Y1, setY1] = (0, _optionsJs.column)();
    const [Y2, setY2] = (0, _optionsJs.column)();
    return {
        x1: X1,
        x2: X2,
        y1: Y1,
        y2: Y2,
        ...(0, _basicJs.basic)(options, (data, facets)=>{
            const P = normalize((0, _optionsJs.valueof)(data, path));
            const X1 = setX1([]);
            const X2 = setX2([]);
            const Y1 = setY1([]);
            const Y2 = setY2([]);
            let treeIndex = -1;
            const treeData = [];
            const treeFacets = [];
            const rootof = (0, _d3.stratify)().path((i)=>P[i]);
            const layout = treeLayout();
            if (layout.nodeSize) layout.nodeSize([
                1,
                1
            ]);
            if (layout.separation && treeSeparation !== undefined) layout.separation(treeSeparation ?? (0, _optionsJs.one));
            for (const o of outputs)o[output_values] = o[output_setValues]([]);
            for (const facet of facets){
                const treeFacet = [];
                const root = rootof(facet.filter((i)=>P[i] != null)).each((node)=>node.data = data[node.data]);
                if (treeSort != null) root.sort(treeSort);
                layout(root);
                for (const { source, target } of root.links()){
                    if (treeFilter != null && !treeFilter(target, source)) continue;
                    treeFacet.push(++treeIndex);
                    treeData[treeIndex] = target.data;
                    treeAnchor.position(source, treeIndex, X1, Y1);
                    treeAnchor.position(target, treeIndex, X2, Y2);
                    for (const o of outputs)o[output_values][treeIndex] = o[output_evaluate](target, source);
                }
                treeFacets.push(treeFacet);
            }
            return {
                data: treeData,
                facets: treeFacets
            };
        }),
        ...Object.fromEntries(outputs)
    };
}
function maybeTreeAnchor(anchor = "left") {
    switch(`${anchor}`.trim().toLowerCase()){
        case "left":
            return treeAnchorLeft;
        case "right":
            return treeAnchorRight;
    }
    throw new Error(`invalid tree anchor: ${anchor}`);
}
const treeAnchorLeft = {
    frameAnchor: "left",
    dx: 6,
    position ({ x, y }, i, X, Y) {
        X[i] = y;
        Y[i] = -x;
    }
};
const treeAnchorRight = {
    frameAnchor: "right",
    dx: -6,
    position ({ x, y }, i, X, Y) {
        X[i] = -y;
        Y[i] = -x;
    }
};
function maybeTreeSort(sort) {
    return sort == null || typeof sort === "function" ? sort : `${sort}`.trim().toLowerCase().startsWith("node:") ? nodeSort(maybeNodeValue(sort)) : nodeSort(nodeData(sort));
}
function nodeSort(value) {
    return (a, b)=>(0, _definedJs.ascendingDefined)(value(a), value(b));
}
function nodeData(field) {
    return (node)=>node.data?.[field];
}
function normalizer(delimiter = "/") {
    delimiter = `${delimiter}`;
    if (delimiter === "/") return (P)=>P; // paths are already slash-separated
    if (delimiter.length !== 1) throw new Error("delimiter must be exactly one character");
    const delimiterCode = delimiter.charCodeAt(0);
    return (P)=>P.map((p)=>slashDelimiter(p, delimiterCode));
}
const CODE_BACKSLASH = 92;
const CODE_SLASH = 47;
function slashDelimiter(input, delimiterCode) {
    if (delimiterCode === CODE_BACKSLASH) throw new Error("delimiter cannot be backslash");
    let afterBackslash = false;
    for(let i = 0, n = input.length; i < n; ++i){
        switch(input.charCodeAt(i)){
            case CODE_BACKSLASH:
                if (!afterBackslash) {
                    afterBackslash = true;
                    continue;
                }
                break;
            case delimiterCode:
                if (afterBackslash) input = input.slice(0, i - 1) + input.slice(i), --i, --n; // remove backslash
                else input = input.slice(0, i) + "/" + input.slice(i + 1); // replace delimiter with slash
                break;
            case CODE_SLASH:
                if (afterBackslash) input = input.slice(0, i) + "\\\\" + input.slice(i), i += 2, n += 2; // add two backslashes
                else input = input.slice(0, i) + "\\" + input.slice(i), ++i, ++n; // add backslash
                break;
        }
        afterBackslash = false;
    }
    return input;
}
function slashUnescape(input) {
    let afterBackslash = false;
    for(let i = 0, n = input.length; i < n; ++i){
        switch(input.charCodeAt(i)){
            case CODE_BACKSLASH:
                if (!afterBackslash) {
                    afterBackslash = true;
                    continue;
                }
            // eslint-disable-next-line no-fallthrough
            case CODE_SLASH:
                if (afterBackslash) input = input.slice(0, i - 1) + input.slice(i), --i, --n; // remove backslash
                break;
        }
        afterBackslash = false;
    }
    return input;
}
function isNodeValue(option) {
    return (0, _optionsJs.isObject)(option) && typeof option.node === "function";
}
function isLinkValue(option) {
    return (0, _optionsJs.isObject)(option) && typeof option.link === "function";
}
function maybeNodeValue(value) {
    if (isNodeValue(value)) return value.node;
    value = `${value}`.trim().toLowerCase();
    if (!value.startsWith("node:")) return;
    switch(value){
        case "node:name":
            return nodeName;
        case "node:path":
            return nodePath;
        case "node:internal":
            return nodeInternal;
        case "node:external":
            return nodeExternal;
        case "node:depth":
            return nodeDepth;
        case "node:height":
            return nodeHeight;
    }
    throw new Error(`invalid node value: ${value}`);
}
function maybeLinkValue(value) {
    if (isNodeValue(value)) return value.node;
    if (isLinkValue(value)) return value.link;
    value = `${value}`.trim().toLowerCase();
    if (!value.startsWith("node:") && !value.startsWith("parent:")) return;
    switch(value){
        case "parent:name":
            return parentValue(nodeName);
        case "parent:path":
            return parentValue(nodePath);
        case "parent:depth":
            return parentValue(nodeDepth);
        case "parent:height":
            return parentValue(nodeHeight);
        case "node:name":
            return nodeName;
        case "node:path":
            return nodePath;
        case "node:internal":
            return nodeInternal;
        case "node:external":
            return nodeExternal;
        case "node:depth":
            return nodeDepth;
        case "node:height":
            return nodeHeight;
    }
    throw new Error(`invalid link value: ${value}`);
}
function nodePath(node) {
    return node.id;
}
function nodeName(node) {
    return nameof(node.id);
}
function nodeDepth(node) {
    return node.depth;
}
function nodeHeight(node) {
    return node.height;
}
function nodeInternal(node) {
    return !!node.children;
}
function nodeExternal(node) {
    return !node.children;
}
function parentValue(evaluate) {
    return (child, parent)=>parent == null ? undefined : evaluate(parent);
}
// Walk backwards to find the first slash.
function nameof(path) {
    let i = path.length;
    while(--i > 0)if (slash(path, i)) break;
    return slashUnescape(path.slice(i + 1));
}
// Slashes can be escaped; to determine whether a slash is a path delimiter, we
// count the number of preceding backslashes escaping the forward slash: an odd
// number indicates an escaped forward slash.
function slash(path, i) {
    if (path[i] === "/") {
        let k = 0;
        while(i > 0 && path[--i] === "\\")++k;
        if ((k & 1) === 0) return true;
    }
    return false;
}
// These indexes match the array returned by nodeOutputs. The first two elements
// are always the name of the output and its column value definition so that
// the outputs can be passed directly to Object.fromEntries.
const output_setValues = 2;
const output_evaluate = 3;
const output_values = 4;
function treeOutputs(options, maybeTreeValue) {
    const outputs = [];
    for(const name in options){
        const value = options[name];
        const treeValue = maybeTreeValue(value);
        if (treeValue !== undefined) outputs.push([
            name,
            ...(0, _optionsJs.column)(value),
            treeValue
        ]);
    }
    return outputs;
}

},{"d3":"17XFv","../defined.js":"3n4Hk","../options.js":"eJmsy","./basic.js":"hU2qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jk38y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "WaffleX", ()=>WaffleX);
parcelHelpers.export(exports, "WaffleY", ()=>WaffleY);
parcelHelpers.export(exports, "waffleX", ()=>waffleX);
parcelHelpers.export(exports, "waffleY", ()=>waffleY);
var _d3 = require("d3");
var _contextJs = require("../context.js");
var _markJs = require("../mark.js");
var _optionsJs = require("../options.js");
var _styleJs = require("../style.js");
var _templateJs = require("../template.js");
var _identityJs = require("../transforms/identity.js");
var _intervalJs = require("../transforms/interval.js");
var _stackJs = require("../transforms/stack.js");
var _barJs = require("./bar.js");
const waffleDefaults = {
    ariaLabel: "waffle"
};
class WaffleX extends (0, _barJs.BarX) {
    constructor(data, { unit = 1, gap = 1, round, render, multiple, ...options } = {}){
        super(data, {
            ...options,
            render: (0, _markJs.composeRender)(render, waffleRender("x"))
        }, waffleDefaults);
        this.unit = Math.max(0, unit);
        this.gap = +gap;
        this.round = maybeRound(round);
        this.multiple = maybeMultiple(multiple);
    }
}
class WaffleY extends (0, _barJs.BarY) {
    constructor(data, { unit = 1, gap = 1, round, render, multiple, ...options } = {}){
        super(data, {
            ...options,
            render: (0, _markJs.composeRender)(render, waffleRender("y"))
        }, waffleDefaults);
        this.unit = Math.max(0, unit);
        this.gap = +gap;
        this.round = maybeRound(round);
        this.multiple = maybeMultiple(multiple);
    }
}
function waffleRender(y) {
    return function(index, scales, values, dimensions, context) {
        const { unit, gap, rx, ry, round } = this;
        const { document } = context;
        const Y1 = values.channels[`${y}1`].value;
        const Y2 = values.channels[`${y}2`].value;
        // We might not use all the available bandwidth if the cells don’t fit evenly.
        const barwidth = this[y === "y" ? "_width" : "_height"](scales, values, dimensions);
        const barx = this[y === "y" ? "_x" : "_y"](scales, values, dimensions);
        // The length of a unit along y in pixels.
        const scale = unit * scaleof(scales.scales[y]);
        // The number of cells on each row (or column) of the waffle.
        const { multiple = Math.max(1, Math.floor(Math.sqrt(barwidth / scale))) } = this;
        // The outer size of each square cell, in pixels, including the gap.
        const cx = Math.min(barwidth / multiple, scale * multiple);
        const cy = scale * multiple;
        // TODO insets?
        const transform = y === "y" ? ([x, y])=>[
                x * cx,
                -y * cy
            ] : ([x, y])=>[
                y * cy,
                x * cx
            ];
        const tx = (barwidth - multiple * cx) / 2;
        const x0 = typeof barx === "function" ? (i)=>barx(i) + tx : barx + tx;
        const y0 = scales[y](0);
        // Create a base pattern with shared attributes for cloning.
        const patternId = (0, _styleJs.getPatternId)();
        const basePattern = document.createElementNS((0, _d3.namespaces).svg, "pattern");
        basePattern.setAttribute("width", y === "y" ? cx : cy);
        basePattern.setAttribute("height", y === "y" ? cy : cx);
        basePattern.setAttribute("patternUnits", "userSpaceOnUse");
        const basePatternRect = basePattern.appendChild(document.createElementNS((0, _d3.namespaces).svg, "rect"));
        basePatternRect.setAttribute("x", gap / 2);
        basePatternRect.setAttribute("y", gap / 2);
        basePatternRect.setAttribute("width", (y === "y" ? cx : cy) - gap);
        basePatternRect.setAttribute("height", (y === "y" ? cy : cx) - gap);
        if (rx != null) basePatternRect.setAttribute("rx", rx);
        if (ry != null) basePatternRect.setAttribute("ry", ry);
        return (0, _contextJs.create)("svg:g", context).call((0, _styleJs.applyIndirectStyles), this, dimensions, context).call(this._transform, this, scales).call((g)=>g.selectAll().data(index).enter().append(()=>basePattern.cloneNode(true)).attr("id", (i)=>`${patternId}-${i}`).select("rect").call((0, _styleJs.applyDirectStyles), this).call((0, _styleJs.applyChannelStyles), this, values)).call((g)=>g.selectAll().data(index).enter().append("path").attr("transform", y === "y" ? (0, _templateJs.template)`translate(${x0},${y0})` : (0, _templateJs.template)`translate(${y0},${x0})`).attr("d", (i)=>`M${wafflePoints(round(Y1[i] / unit), round(Y2[i] / unit), multiple).map(transform).join("L")}Z`).attr("fill", (i)=>`url(#${patternId}-${i})`).attr("stroke", this.stroke == null ? null : (i)=>`url(#${patternId}-${i})`)).node();
    };
}
// A waffle is a approximately rectangular shape, but may have one or two corner
// cuts if the starting or ending value is not an even multiple of the number of
// columns (the width of the waffle in cells). We can represent any waffle by
// 8 points; below is a waffle of five columns representing the interval 2–11:
//
// 1-0
// |•7-------6
// |• • • • •|
// 2---3• • •|
//     4-----5
//
// Note that points 0 and 1 always have the same y-value, points 1 and 2 have
// the same x-value, and so on, so we don’t need to materialize the x- and y-
// values of all points. Also note that we can’t use the already-projected y-
// values because these assume that y-values are distributed linearly along y
// rather than wrapping around in columns.
//
// The corner points may be coincident. If the ending value is an even multiple
// of the number of columns, say representing the interval 2–10, then points 6,
// 7, and 0 are the same.
//
// 1-----0/7/6
// |• • • • •|
// 2---3• • •|
//     4-----5
//
// Likewise if the starting value is an even multiple, say representing the
// interval 0–10, points 2–4 are coincident.
//
// 1-----0/7/6
// |• • • • •|
// |• • • • •|
// 4/3/2-----5
//
// Waffles can also represent fractional intervals (e.g., 2.4–10.1). These
// require additional corner cuts, so the implementation below generates a few
// more points.
function wafflePoints(i1, i2, columns) {
    if (i1 < 0 || i2 < 0) {
        const k = Math.ceil(-Math.min(i1, i2) / columns); // shift negative to positive
        return wafflePoints(i1 + k * columns, i2 + k * columns, columns).map(([x, y])=>[
                x,
                y - k
            ]);
    }
    if (i2 < i1) return wafflePoints(i2, i1, columns);
    return [
        [
            0,
            Math.ceil(i1 / columns)
        ],
        [
            Math.floor(i1 % columns),
            Math.ceil(i1 / columns)
        ],
        [
            Math.floor(i1 % columns),
            Math.floor(i1 / columns) + i1 % 1
        ],
        [
            Math.ceil(i1 % columns),
            Math.floor(i1 / columns) + i1 % 1
        ],
        ...i1 % columns > columns - 1 ? [] : [
            [
                Math.ceil(i1 % columns),
                Math.floor(i1 / columns)
            ],
            [
                columns,
                Math.floor(i1 / columns)
            ]
        ],
        [
            columns,
            Math.floor(i2 / columns)
        ],
        [
            Math.ceil(i2 % columns),
            Math.floor(i2 / columns)
        ],
        [
            Math.ceil(i2 % columns),
            Math.floor(i2 / columns) + i2 % 1
        ],
        [
            Math.floor(i2 % columns),
            Math.floor(i2 / columns) + i2 % 1
        ],
        ...i2 % columns < 1 ? [] : [
            [
                Math.floor(i2 % columns),
                Math.ceil(i2 / columns)
            ],
            [
                0,
                Math.ceil(i2 / columns)
            ]
        ]
    ];
}
function maybeRound(round) {
    if (round === undefined || round === false) return Number;
    if (round === true) return Math.round;
    if (typeof round !== "function") throw new Error(`invalid round: ${round}`);
    return round;
}
function maybeMultiple(multiple) {
    return multiple === undefined ? undefined : Math.max(1, Math.floor(multiple));
}
function scaleof({ domain, range }) {
    return spread(range) / spread(domain);
}
function spread(domain) {
    const [min, max] = (0, _d3.extent)(domain);
    return max - min;
}
function waffleX(data, options = {}) {
    if (!(0, _optionsJs.hasXY)(options)) options = {
        ...options,
        y: (0, _optionsJs.indexOf),
        x2: (0, _optionsJs.identity)
    };
    return new WaffleX(data, (0, _stackJs.maybeStackX)((0, _intervalJs.maybeIntervalX)((0, _identityJs.maybeIdentityX)(options))));
}
function waffleY(data, options = {}) {
    if (!(0, _optionsJs.hasXY)(options)) options = {
        ...options,
        x: (0, _optionsJs.indexOf),
        y2: (0, _optionsJs.identity)
    };
    return new WaffleY(data, (0, _stackJs.maybeStackY)((0, _intervalJs.maybeIntervalY)((0, _identityJs.maybeIdentityY)(options))));
}

},{"d3":"17XFv","../context.js":"kyLYX","../mark.js":"a4RyP","../options.js":"eJmsy","../style.js":"c9bmo","../template.js":"gIQDL","../transforms/identity.js":"kmkvZ","../transforms/interval.js":"jzD9C","../transforms/stack.js":"cZguR","./bar.js":"aMpp7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5iQXi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dodgeX", ()=>dodgeX);
parcelHelpers.export(exports, "dodgeY", ()=>dodgeY);
var _intervalTree1D = require("interval-tree-1d");
var _intervalTree1DDefault = parcelHelpers.interopDefault(_intervalTree1D);
var _definedJs = require("../defined.js");
var _optionsJs = require("../options.js");
var _basicJs = require("./basic.js");
var _projectionJs = require("../projection.js");
const anchorXLeft = ({ marginLeft })=>[
        1,
        marginLeft
    ];
const anchorXRight = ({ width, marginRight })=>[
        -1,
        width - marginRight
    ];
const anchorXMiddle = ({ width, marginLeft, marginRight })=>[
        0,
        (marginLeft + width - marginRight) / 2
    ];
const anchorYTop = ({ marginTop })=>[
        1,
        marginTop
    ];
const anchorYBottom = ({ height, marginBottom })=>[
        -1,
        height - marginBottom
    ];
const anchorYMiddle = ({ height, marginTop, marginBottom })=>[
        0,
        (marginTop + height - marginBottom) / 2
    ];
function maybeAnchor(anchor) {
    return typeof anchor === "string" ? {
        anchor
    } : anchor;
}
function dodgeX(dodgeOptions = {}, options = {}) {
    if (arguments.length === 1) [dodgeOptions, options] = mergeOptions(dodgeOptions);
    let { anchor = "left", padding = 1, r = options.r } = maybeAnchor(dodgeOptions);
    switch(`${anchor}`.toLowerCase()){
        case "left":
            anchor = anchorXLeft;
            break;
        case "right":
            anchor = anchorXRight;
            break;
        case "middle":
            anchor = anchorXMiddle;
            break;
        default:
            throw new Error(`unknown dodge anchor: ${anchor}`);
    }
    return dodge("x", "y", anchor, (0, _optionsJs.number)(padding), r, options);
}
function dodgeY(dodgeOptions = {}, options = {}) {
    if (arguments.length === 1) [dodgeOptions, options] = mergeOptions(dodgeOptions);
    let { anchor = "bottom", padding = 1, r = options.r } = maybeAnchor(dodgeOptions);
    switch(`${anchor}`.toLowerCase()){
        case "top":
            anchor = anchorYTop;
            break;
        case "bottom":
            anchor = anchorYBottom;
            break;
        case "middle":
            anchor = anchorYMiddle;
            break;
        default:
            throw new Error(`unknown dodge anchor: ${anchor}`);
    }
    return dodge("y", "x", anchor, (0, _optionsJs.number)(padding), r, options);
}
function mergeOptions(options) {
    const { anchor, padding, ...rest } = options;
    const { r } = rest; // don’t consume r; allow it to propagate
    return [
        {
            anchor,
            padding,
            r
        },
        rest
    ];
}
function dodge(y, x, anchor, padding, r, options) {
    if (r != null && typeof r !== "number") {
        let { channels, sort, reverse } = options;
        channels = (0, _optionsJs.maybeNamed)(channels);
        if (channels?.r === undefined) options = {
            ...options,
            channels: {
                ...channels,
                r: {
                    value: r,
                    scale: "r"
                }
            }
        };
        if (sort === undefined && reverse === undefined) options.sort = {
            channel: "-r"
        };
    }
    return (0, _basicJs.initializer)(options, function(data, facets, channels, scales, dimensions, context) {
        let { [x]: X, r: R } = channels;
        if (!channels[x]) throw new Error(`missing channel: ${x}`);
        ({ [x]: X } = (0, _projectionJs.applyPosition)(channels, scales, context));
        const cr = R ? undefined : r !== undefined ? (0, _optionsJs.number)(r) : this.r !== undefined ? this.r : 3;
        if (R) R = (0, _optionsJs.valueof)(R.value, scales[R.scale] || (0, _optionsJs.identity), Float64Array);
        let [ky, ty] = anchor(dimensions);
        const compare = ky ? compareAscending : compareSymmetric;
        const Y = new Float64Array(X.length);
        const radius = R ? (i)=>R[i] : ()=>cr;
        for (let I of facets){
            const tree = (0, _intervalTree1DDefault.default)();
            I = I.filter(R ? (i)=>(0, _definedJs.finite)(X[i]) && (0, _definedJs.positive)(R[i]) : (i)=>(0, _definedJs.finite)(X[i]));
            const intervals = new Float64Array(2 * I.length + 2);
            for (const i of I){
                const ri = radius(i);
                const y0 = ky ? ri + padding : 0; // offset baseline for varying radius
                const l = X[i] - ri;
                const h = X[i] + ri;
                // The first two positions are 0 to test placing the dot on the baseline.
                let k = 2;
                // For any previously placed circles that may overlap this circle, compute
                // the y-positions that place this circle tangent to these other circles.
                // https://observablehq.com/@mbostock/circle-offset-along-line
                tree.queryInterval(l - padding, h + padding, ([, , j])=>{
                    const yj = Y[j] - y0;
                    const dx = X[i] - X[j];
                    const dr = padding + (R ? R[i] + R[j] : 2 * cr);
                    const dy = Math.sqrt(dr * dr - dx * dx);
                    intervals[k++] = yj - dy;
                    intervals[k++] = yj + dy;
                });
                // Find the best y-value where this circle can fit.
                let candidates = intervals.slice(0, k);
                if (ky) candidates = candidates.filter((y)=>y >= 0);
                out: for (const y of candidates.sort(compare)){
                    for(let j = 0; j < k; j += 2){
                        if (intervals[j] + 1e-6 < y && y < intervals[j + 1] - 1e-6) continue out;
                    }
                    Y[i] = y + y0;
                    break;
                }
                // Insert the placed circle into the interval tree.
                tree.insert([
                    l,
                    h,
                    i
                ]);
            }
        }
        if (!ky) ky = 1;
        for (const I of facets)for (const i of I)Y[i] = Y[i] * ky + ty;
        return {
            data,
            facets,
            channels: {
                [y]: {
                    value: Y,
                    source: null
                },
                [x]: {
                    value: X,
                    source: channels[x]
                },
                ...R && {
                    r: {
                        value: R,
                        source: channels.r
                    }
                }
            }
        };
    });
}
function compareSymmetric(a, b) {
    return Math.abs(a) - Math.abs(b);
}
function compareAscending(a, b) {
    return a - b;
}

},{"interval-tree-1d":"hOM9V","../defined.js":"3n4Hk","../options.js":"eJmsy","./basic.js":"hU2qc","../projection.js":"eTnHA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hOM9V":[function(require,module,exports) {
"use strict";
var bounds = require("71efbc3aa4d9f97a");
var NOT_FOUND = 0;
var SUCCESS = 1;
var EMPTY = 2;
module.exports = createWrapper;
function IntervalTreeNode(mid, left, right, leftPoints, rightPoints) {
    this.mid = mid;
    this.left = left;
    this.right = right;
    this.leftPoints = leftPoints;
    this.rightPoints = rightPoints;
    this.count = (left ? left.count : 0) + (right ? right.count : 0) + leftPoints.length;
}
var proto = IntervalTreeNode.prototype;
function copy(a, b) {
    a.mid = b.mid;
    a.left = b.left;
    a.right = b.right;
    a.leftPoints = b.leftPoints;
    a.rightPoints = b.rightPoints;
    a.count = b.count;
}
function rebuild(node, intervals) {
    var ntree = createIntervalTree(intervals);
    node.mid = ntree.mid;
    node.left = ntree.left;
    node.right = ntree.right;
    node.leftPoints = ntree.leftPoints;
    node.rightPoints = ntree.rightPoints;
    node.count = ntree.count;
}
function rebuildWithInterval(node, interval) {
    var intervals = node.intervals([]);
    intervals.push(interval);
    rebuild(node, intervals);
}
function rebuildWithoutInterval(node, interval) {
    var intervals = node.intervals([]);
    var idx = intervals.indexOf(interval);
    if (idx < 0) return NOT_FOUND;
    intervals.splice(idx, 1);
    rebuild(node, intervals);
    return SUCCESS;
}
proto.intervals = function(result) {
    result.push.apply(result, this.leftPoints);
    if (this.left) this.left.intervals(result);
    if (this.right) this.right.intervals(result);
    return result;
};
proto.insert = function(interval) {
    var weight = this.count - this.leftPoints.length;
    this.count += 1;
    if (interval[1] < this.mid) {
        if (this.left) {
            if (4 * (this.left.count + 1) > 3 * (weight + 1)) rebuildWithInterval(this, interval);
            else this.left.insert(interval);
        } else this.left = createIntervalTree([
            interval
        ]);
    } else if (interval[0] > this.mid) {
        if (this.right) {
            if (4 * (this.right.count + 1) > 3 * (weight + 1)) rebuildWithInterval(this, interval);
            else this.right.insert(interval);
        } else this.right = createIntervalTree([
            interval
        ]);
    } else {
        var l = bounds.ge(this.leftPoints, interval, compareBegin);
        var r = bounds.ge(this.rightPoints, interval, compareEnd);
        this.leftPoints.splice(l, 0, interval);
        this.rightPoints.splice(r, 0, interval);
    }
};
proto.remove = function(interval) {
    var weight = this.count - this.leftPoints;
    if (interval[1] < this.mid) {
        if (!this.left) return NOT_FOUND;
        var rw = this.right ? this.right.count : 0;
        if (4 * rw > 3 * (weight - 1)) return rebuildWithoutInterval(this, interval);
        var r = this.left.remove(interval);
        if (r === EMPTY) {
            this.left = null;
            this.count -= 1;
            return SUCCESS;
        } else if (r === SUCCESS) this.count -= 1;
        return r;
    } else if (interval[0] > this.mid) {
        if (!this.right) return NOT_FOUND;
        var lw = this.left ? this.left.count : 0;
        if (4 * lw > 3 * (weight - 1)) return rebuildWithoutInterval(this, interval);
        var r = this.right.remove(interval);
        if (r === EMPTY) {
            this.right = null;
            this.count -= 1;
            return SUCCESS;
        } else if (r === SUCCESS) this.count -= 1;
        return r;
    } else {
        if (this.count === 1) {
            if (this.leftPoints[0] === interval) return EMPTY;
            else return NOT_FOUND;
        }
        if (this.leftPoints.length === 1 && this.leftPoints[0] === interval) {
            if (this.left && this.right) {
                var p = this;
                var n = this.left;
                while(n.right){
                    p = n;
                    n = n.right;
                }
                if (p === this) n.right = this.right;
                else {
                    var l = this.left;
                    var r = this.right;
                    p.count -= n.count;
                    p.right = n.left;
                    n.left = l;
                    n.right = r;
                }
                copy(this, n);
                this.count = (this.left ? this.left.count : 0) + (this.right ? this.right.count : 0) + this.leftPoints.length;
            } else if (this.left) copy(this, this.left);
            else copy(this, this.right);
            return SUCCESS;
        }
        for(var l = bounds.ge(this.leftPoints, interval, compareBegin); l < this.leftPoints.length; ++l){
            if (this.leftPoints[l][0] !== interval[0]) break;
            if (this.leftPoints[l] === interval) {
                this.count -= 1;
                this.leftPoints.splice(l, 1);
                for(var r = bounds.ge(this.rightPoints, interval, compareEnd); r < this.rightPoints.length; ++r){
                    if (this.rightPoints[r][1] !== interval[1]) break;
                    else if (this.rightPoints[r] === interval) {
                        this.rightPoints.splice(r, 1);
                        return SUCCESS;
                    }
                }
            }
        }
        return NOT_FOUND;
    }
};
function reportLeftRange(arr, hi, cb) {
    for(var i = 0; i < arr.length && arr[i][0] <= hi; ++i){
        var r = cb(arr[i]);
        if (r) return r;
    }
}
function reportRightRange(arr, lo, cb) {
    for(var i = arr.length - 1; i >= 0 && arr[i][1] >= lo; --i){
        var r = cb(arr[i]);
        if (r) return r;
    }
}
function reportRange(arr, cb) {
    for(var i = 0; i < arr.length; ++i){
        var r = cb(arr[i]);
        if (r) return r;
    }
}
proto.queryPoint = function(x, cb) {
    if (x < this.mid) {
        if (this.left) {
            var r = this.left.queryPoint(x, cb);
            if (r) return r;
        }
        return reportLeftRange(this.leftPoints, x, cb);
    } else if (x > this.mid) {
        if (this.right) {
            var r = this.right.queryPoint(x, cb);
            if (r) return r;
        }
        return reportRightRange(this.rightPoints, x, cb);
    } else return reportRange(this.leftPoints, cb);
};
proto.queryInterval = function(lo, hi, cb) {
    if (lo < this.mid && this.left) {
        var r = this.left.queryInterval(lo, hi, cb);
        if (r) return r;
    }
    if (hi > this.mid && this.right) {
        var r = this.right.queryInterval(lo, hi, cb);
        if (r) return r;
    }
    if (hi < this.mid) return reportLeftRange(this.leftPoints, hi, cb);
    else if (lo > this.mid) return reportRightRange(this.rightPoints, lo, cb);
    else return reportRange(this.leftPoints, cb);
};
function compareNumbers(a, b) {
    return a - b;
}
function compareBegin(a, b) {
    var d = a[0] - b[0];
    if (d) return d;
    return a[1] - b[1];
}
function compareEnd(a, b) {
    var d = a[1] - b[1];
    if (d) return d;
    return a[0] - b[0];
}
function createIntervalTree(intervals) {
    if (intervals.length === 0) return null;
    var pts = [];
    for(var i = 0; i < intervals.length; ++i)pts.push(intervals[i][0], intervals[i][1]);
    pts.sort(compareNumbers);
    var mid = pts[pts.length >> 1];
    var leftIntervals = [];
    var rightIntervals = [];
    var centerIntervals = [];
    for(var i = 0; i < intervals.length; ++i){
        var s = intervals[i];
        if (s[1] < mid) leftIntervals.push(s);
        else if (mid < s[0]) rightIntervals.push(s);
        else centerIntervals.push(s);
    }
    //Split center intervals
    var leftPoints = centerIntervals;
    var rightPoints = centerIntervals.slice();
    leftPoints.sort(compareBegin);
    rightPoints.sort(compareEnd);
    return new IntervalTreeNode(mid, createIntervalTree(leftIntervals), createIntervalTree(rightIntervals), leftPoints, rightPoints);
}
//User friendly wrapper that makes it possible to support empty trees
function IntervalTree(root) {
    this.root = root;
}
var tproto = IntervalTree.prototype;
tproto.insert = function(interval) {
    if (this.root) this.root.insert(interval);
    else this.root = new IntervalTreeNode(interval[0], null, null, [
        interval
    ], [
        interval
    ]);
};
tproto.remove = function(interval) {
    if (this.root) {
        var r = this.root.remove(interval);
        if (r === EMPTY) this.root = null;
        return r !== NOT_FOUND;
    }
    return false;
};
tproto.queryPoint = function(p, cb) {
    if (this.root) return this.root.queryPoint(p, cb);
};
tproto.queryInterval = function(lo, hi, cb) {
    if (lo <= hi && this.root) return this.root.queryInterval(lo, hi, cb);
};
Object.defineProperty(tproto, "count", {
    get: function() {
        if (this.root) return this.root.count;
        return 0;
    }
});
Object.defineProperty(tproto, "intervals", {
    get: function() {
        if (this.root) return this.root.intervals([]);
        return [];
    }
});
function createWrapper(intervals) {
    if (!intervals || intervals.length === 0) return new IntervalTree(null);
    return new IntervalTree(createIntervalTree(intervals));
}

},{"71efbc3aa4d9f97a":"bp0bs"}],"bp0bs":[function(require,module,exports) {
"use strict";
// (a, y, c, l, h) = (array, y[, cmp, lo, hi])
function ge(a, y, c, l, h) {
    var i = h + 1;
    while(l <= h){
        var m = l + h >>> 1, x = a[m];
        var p = c !== undefined ? c(x, y) : x - y;
        if (p >= 0) {
            i = m;
            h = m - 1;
        } else l = m + 1;
    }
    return i;
}
function gt(a, y, c, l, h) {
    var i = h + 1;
    while(l <= h){
        var m = l + h >>> 1, x = a[m];
        var p = c !== undefined ? c(x, y) : x - y;
        if (p > 0) {
            i = m;
            h = m - 1;
        } else l = m + 1;
    }
    return i;
}
function lt(a, y, c, l, h) {
    var i = l - 1;
    while(l <= h){
        var m = l + h >>> 1, x = a[m];
        var p = c !== undefined ? c(x, y) : x - y;
        if (p < 0) {
            i = m;
            l = m + 1;
        } else h = m - 1;
    }
    return i;
}
function le(a, y, c, l, h) {
    var i = l - 1;
    while(l <= h){
        var m = l + h >>> 1, x = a[m];
        var p = c !== undefined ? c(x, y) : x - y;
        if (p <= 0) {
            i = m;
            l = m + 1;
        } else h = m - 1;
    }
    return i;
}
function eq(a, y, c, l, h) {
    while(l <= h){
        var m = l + h >>> 1, x = a[m];
        var p = c !== undefined ? c(x, y) : x - y;
        if (p === 0) return m;
        if (p <= 0) l = m + 1;
        else h = m - 1;
    }
    return -1;
}
function norm(a, y, c, l, h, f) {
    if (typeof c === "function") return f(a, y, c, l === undefined ? 0 : l | 0, h === undefined ? a.length - 1 : h | 0);
    return f(a, y, undefined, c === undefined ? 0 : c | 0, l === undefined ? a.length - 1 : l | 0);
}
module.exports = {
    ge: function(a, y, c, l, h) {
        return norm(a, y, c, l, h, ge);
    },
    gt: function(a, y, c, l, h) {
        return norm(a, y, c, l, h, gt);
    },
    lt: function(a, y, c, l, h) {
        return norm(a, y, c, l, h, lt);
    },
    le: function(a, y, c, l, h) {
        return norm(a, y, c, l, h, le);
    },
    eq: function(a, y, c, l, h) {
        return norm(a, y, c, l, h, eq);
    }
};

},{}],"5NnzW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "normalizeX", ()=>normalizeX);
parcelHelpers.export(exports, "normalizeY", ()=>normalizeY);
parcelHelpers.export(exports, "normalize", ()=>normalize);
var _d3 = require("d3");
var _definedJs = require("../defined.js");
var _optionsJs = require("../options.js");
var _mapJs = require("./map.js");
function normalizeX(basis, options) {
    if (arguments.length === 1) ({ basis, ...options } = basis);
    return (0, _mapJs.mapX)(normalize(basis), options);
}
function normalizeY(basis, options) {
    if (arguments.length === 1) ({ basis, ...options } = basis);
    return (0, _mapJs.mapY)(normalize(basis), options);
}
function normalize(basis) {
    if (basis === undefined) return normalizeFirst;
    if (typeof basis === "function") return normalizeBasis((0, _optionsJs.taker)(basis));
    if (/^p\d{2}$/i.test(basis)) return normalizeAccessor((0, _optionsJs.percentile)(basis));
    switch(`${basis}`.toLowerCase()){
        case "deviation":
            return normalizeDeviation;
        case "first":
            return normalizeFirst;
        case "last":
            return normalizeLast;
        case "max":
            return normalizeMax;
        case "mean":
            return normalizeMean;
        case "median":
            return normalizeMedian;
        case "min":
            return normalizeMin;
        case "sum":
            return normalizeSum;
        case "extent":
            return normalizeExtent;
    }
    throw new Error(`invalid basis: ${basis}`);
}
function normalizeBasis(basis) {
    return {
        mapIndex (I, S, T) {
            const b = +basis(I, S);
            for (const i of I)T[i] = S[i] === null ? NaN : S[i] / b;
        }
    };
}
function normalizeAccessor(f) {
    return normalizeBasis((I, S)=>f(I, (i)=>S[i]));
}
const normalizeExtent = {
    mapIndex (I, S, T) {
        const [s1, s2] = (0, _d3.extent)(I, (i)=>S[i]);
        const d = s2 - s1;
        for (const i of I)T[i] = S[i] === null ? NaN : (S[i] - s1) / d;
    }
};
const normalizeFirst = normalizeBasis((I, S)=>{
    for(let i = 0; i < I.length; ++i){
        const s = S[I[i]];
        if ((0, _definedJs.defined)(s)) return s;
    }
});
const normalizeLast = normalizeBasis((I, S)=>{
    for(let i = I.length - 1; i >= 0; --i){
        const s = S[I[i]];
        if ((0, _definedJs.defined)(s)) return s;
    }
});
const normalizeDeviation = {
    mapIndex (I, S, T) {
        const m = (0, _d3.mean)(I, (i)=>S[i]);
        const d = (0, _d3.deviation)(I, (i)=>S[i]);
        for (const i of I)T[i] = S[i] === null ? NaN : d ? (S[i] - m) / d : 0;
    }
};
const normalizeMax = normalizeAccessor((0, _d3.max));
const normalizeMean = normalizeAccessor((0, _d3.mean));
const normalizeMedian = normalizeAccessor((0, _d3.median));
const normalizeMin = normalizeAccessor((0, _d3.min));
const normalizeSum = normalizeAccessor((0, _d3.sum));

},{"d3":"17XFv","../defined.js":"3n4Hk","../options.js":"eJmsy","./map.js":"awNvD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bfjYA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "shiftX", ()=>shiftX);
parcelHelpers.export(exports, "shiftY", ()=>shiftY);
var _d3 = require("d3");
var _optionsJs = require("../options.js");
var _timeJs = require("../time.js");
var _mapJs = require("../transforms/map.js");
function shiftX(interval, options) {
    return shiftK("x", interval, options);
}
function shiftY(interval, options) {
    return shiftK("y", interval, options);
}
function shiftK(x, interval, options = {}) {
    let offset;
    let k = 1;
    if (typeof interval === "number") {
        k = interval;
        offset = (x, k)=>+x + k;
    } else {
        if (typeof interval === "string") {
            const sign = interval.startsWith("-") ? -1 : 1;
            [interval, k] = (0, _timeJs.parseTimeInterval)(interval.replace(/^[+-]/, ""));
            k *= sign;
        }
        interval = (0, _optionsJs.maybeInterval)(interval);
        offset = (x, k)=>interval.offset(x, k);
    }
    const x1 = `${x}1`;
    const x2 = `${x}2`;
    const mapped = (0, _mapJs.map)({
        [x1]: (D)=>D.map((d)=>offset(d, k)),
        [x2]: (D)=>D
    }, options);
    const t = mapped[x2].transform;
    mapped[x2].transform = ()=>{
        const V = t();
        const [x0, x1] = (0, _d3.extent)(V);
        V.domain = k < 0 ? [
            x0,
            offset(x1, k)
        ] : [
            offset(x0, k),
            x1
        ];
        return V;
    };
    return mapped;
}

},{"d3":"17XFv","../options.js":"eJmsy","../time.js":"3rFQb","../transforms/map.js":"awNvD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iCPFr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "select", ()=>select);
parcelHelpers.export(exports, "selectFirst", ()=>selectFirst);
parcelHelpers.export(exports, "selectLast", ()=>selectLast);
parcelHelpers.export(exports, "selectMinX", ()=>selectMinX);
parcelHelpers.export(exports, "selectMinY", ()=>selectMinY);
parcelHelpers.export(exports, "selectMaxX", ()=>selectMaxX);
parcelHelpers.export(exports, "selectMaxY", ()=>selectMaxY);
var _d3 = require("d3");
var _optionsJs = require("../options.js");
var _basicJs = require("./basic.js");
function select(selector, options = {}) {
    // If specified selector is a string or function, it’s a selector without an
    // input channel such as first or last.
    if (typeof selector === "string") switch(selector.toLowerCase()){
        case "first":
            return selectFirst(options);
        case "last":
            return selectLast(options);
    }
    if (typeof selector === "function") return selectChannel(null, selector, options);
    // Otherwise the selector is an option {name: value} where name is a channel
    // name and value is a selector definition that additionally takes the given
    // channel values as input. The selector object must have exactly one key.
    let key, value;
    for(key in selector){
        if (value !== undefined) throw new Error("ambiguous selector; multiple inputs");
        value = maybeSelector(selector[key]);
    }
    if (value === undefined) throw new Error(`invalid selector: ${selector}`);
    return selectChannel(key, value, options);
}
function maybeSelector(selector) {
    if (typeof selector === "function") return selector;
    switch(`${selector}`.toLowerCase()){
        case "min":
            return selectorMin;
        case "max":
            return selectorMax;
    }
    throw new Error(`unknown selector: ${selector}`);
}
function selectFirst(options) {
    return selectChannel(null, selectorFirst, options);
}
function selectLast(options) {
    return selectChannel(null, selectorLast, options);
}
function selectMinX(options) {
    return selectChannel("x", selectorMin, options);
}
function selectMinY(options) {
    return selectChannel("y", selectorMin, options);
}
function selectMaxX(options) {
    return selectChannel("x", selectorMax, options);
}
function selectMaxY(options) {
    return selectChannel("y", selectorMax, options);
}
function* selectorFirst(I) {
    yield I[0];
}
function* selectorLast(I) {
    yield I[I.length - 1];
}
function* selectorMin(I, X) {
    yield (0, _d3.least)(I, (i)=>X[i]);
}
function* selectorMax(I, X) {
    yield (0, _d3.greatest)(I, (i)=>X[i]);
}
function selectChannel(v, selector, options) {
    if (v != null) {
        if (options[v] == null) throw new Error(`missing channel: ${v}`);
        v = options[v];
    }
    const z = (0, _optionsJs.maybeZ)(options);
    return (0, _basicJs.basic)(options, (data, facets)=>{
        const Z = (0, _optionsJs.valueof)(data, z);
        const V = (0, _optionsJs.valueof)(data, v);
        const selectFacets = [];
        for (const facet of facets){
            const selectFacet = [];
            for (const I of Z ? (0, _d3.group)(facet, (i)=>Z[i]).values() : [
                facet
            ])for (const i of selector(I, V))selectFacet.push(i);
            selectFacets.push(selectFacet);
        }
        return {
            data,
            facets: selectFacets
        };
    });
}

},{"d3":"17XFv","../options.js":"eJmsy","./basic.js":"hU2qc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["hPIHA","igcvL"], "igcvL", "parcelRequire94c2")

//# sourceMappingURL=index.5baa4167.js.map
